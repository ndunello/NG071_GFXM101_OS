
NG071_GFXM101_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dbc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b58  08013e7c  08013e7c  00023e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003d6  080179d4  080179d4  000279d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  08017dac  08017dac  00027dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000034  08017db8  08017db8  00027db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08017dec  08017dec  0003008c  2**0
                  CONTENTS
  7 .ARM          00000008  08017dec  08017dec  00027dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08017df4  08017df4  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  08017df4  08017df4  00027df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   0000000c  08017e0c  08017e0c  00027e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000008c  20000000  08017e18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007944  2000008c  08017ea4  0003008c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200079d0  08017ea4  000379d0  2**0
                  ALLOC
 14 .ARM.attributes 0000002c  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0007d9d6  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ed80  00000000  00000000  000ada8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000032d8  00000000  00000000  000bc810  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002f18  00000000  00000000  000bfae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000228cd  00000000  00000000  000c2a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0002da5a  00000000  00000000  000e52cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000c3100  00000000  00000000  00112d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  001d5e27  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c260  00000000  00000000  001d5f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08013e64 	.word	0x08013e64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08013e64 	.word	0x08013e64

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c08      	adds	r0, r1, #0
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fc37 	bl	8000c84 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fbb9 	bl	8000b98 <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fc29 	bl	8000c84 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fc1f 	bl	8000c84 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fbc7 	bl	8000be8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fbbd 	bl	8000be8 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	1c08      	adds	r0, r1, #0
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	; (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	ffffff65 	.word	0xffffff65
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f806 	bl	80004bc <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__udivmoddi4>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	464f      	mov	r7, r9
 80004c0:	4646      	mov	r6, r8
 80004c2:	46d6      	mov	lr, sl
 80004c4:	b5c0      	push	{r6, r7, lr}
 80004c6:	0004      	movs	r4, r0
 80004c8:	b082      	sub	sp, #8
 80004ca:	000d      	movs	r5, r1
 80004cc:	4691      	mov	r9, r2
 80004ce:	4698      	mov	r8, r3
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d82f      	bhi.n	8000534 <__udivmoddi4+0x78>
 80004d4:	d02c      	beq.n	8000530 <__udivmoddi4+0x74>
 80004d6:	4641      	mov	r1, r8
 80004d8:	4648      	mov	r0, r9
 80004da:	f000 ffa1 	bl	8001420 <__clzdi2>
 80004de:	0029      	movs	r1, r5
 80004e0:	0006      	movs	r6, r0
 80004e2:	0020      	movs	r0, r4
 80004e4:	f000 ff9c 	bl	8001420 <__clzdi2>
 80004e8:	1a33      	subs	r3, r6, r0
 80004ea:	469c      	mov	ip, r3
 80004ec:	3b20      	subs	r3, #32
 80004ee:	469a      	mov	sl, r3
 80004f0:	d500      	bpl.n	80004f4 <__udivmoddi4+0x38>
 80004f2:	e076      	b.n	80005e2 <__udivmoddi4+0x126>
 80004f4:	464b      	mov	r3, r9
 80004f6:	4652      	mov	r2, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001f      	movs	r7, r3
 80004fc:	464b      	mov	r3, r9
 80004fe:	4662      	mov	r2, ip
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d828      	bhi.n	800055a <__udivmoddi4+0x9e>
 8000508:	d025      	beq.n	8000556 <__udivmoddi4+0x9a>
 800050a:	4653      	mov	r3, sl
 800050c:	1ba4      	subs	r4, r4, r6
 800050e:	41bd      	sbcs	r5, r7
 8000510:	2b00      	cmp	r3, #0
 8000512:	da00      	bge.n	8000516 <__udivmoddi4+0x5a>
 8000514:	e07b      	b.n	800060e <__udivmoddi4+0x152>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	4652      	mov	r2, sl
 8000522:	4093      	lsls	r3, r2
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2301      	movs	r3, #1
 8000528:	4662      	mov	r2, ip
 800052a:	4093      	lsls	r3, r2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	e018      	b.n	8000562 <__udivmoddi4+0xa6>
 8000530:	4282      	cmp	r2, r0
 8000532:	d9d0      	bls.n	80004d6 <__udivmoddi4+0x1a>
 8000534:	2200      	movs	r2, #0
 8000536:	2300      	movs	r3, #0
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <__udivmoddi4+0x8a>
 8000542:	601c      	str	r4, [r3, #0]
 8000544:	605d      	str	r5, [r3, #4]
 8000546:	9800      	ldr	r0, [sp, #0]
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	b002      	add	sp, #8
 800054c:	bc1c      	pop	{r2, r3, r4}
 800054e:	4690      	mov	r8, r2
 8000550:	4699      	mov	r9, r3
 8000552:	46a2      	mov	sl, r4
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	42a3      	cmp	r3, r4
 8000558:	d9d7      	bls.n	800050a <__udivmoddi4+0x4e>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4663      	mov	r3, ip
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0e9      	beq.n	800053c <__udivmoddi4+0x80>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	4698      	mov	r8, r3
 800056c:	4641      	mov	r1, r8
 800056e:	0872      	lsrs	r2, r6, #1
 8000570:	430a      	orrs	r2, r1
 8000572:	087b      	lsrs	r3, r7, #1
 8000574:	4666      	mov	r6, ip
 8000576:	e00e      	b.n	8000596 <__udivmoddi4+0xda>
 8000578:	42ab      	cmp	r3, r5
 800057a:	d101      	bne.n	8000580 <__udivmoddi4+0xc4>
 800057c:	42a2      	cmp	r2, r4
 800057e:	d80c      	bhi.n	800059a <__udivmoddi4+0xde>
 8000580:	1aa4      	subs	r4, r4, r2
 8000582:	419d      	sbcs	r5, r3
 8000584:	2001      	movs	r0, #1
 8000586:	1924      	adds	r4, r4, r4
 8000588:	416d      	adcs	r5, r5
 800058a:	2100      	movs	r1, #0
 800058c:	3e01      	subs	r6, #1
 800058e:	1824      	adds	r4, r4, r0
 8000590:	414d      	adcs	r5, r1
 8000592:	2e00      	cmp	r6, #0
 8000594:	d006      	beq.n	80005a4 <__udivmoddi4+0xe8>
 8000596:	42ab      	cmp	r3, r5
 8000598:	d9ee      	bls.n	8000578 <__udivmoddi4+0xbc>
 800059a:	3e01      	subs	r6, #1
 800059c:	1924      	adds	r4, r4, r4
 800059e:	416d      	adcs	r5, r5
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d1f8      	bne.n	8000596 <__udivmoddi4+0xda>
 80005a4:	9800      	ldr	r0, [sp, #0]
 80005a6:	9901      	ldr	r1, [sp, #4]
 80005a8:	4653      	mov	r3, sl
 80005aa:	1900      	adds	r0, r0, r4
 80005ac:	4169      	adcs	r1, r5
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db23      	blt.n	80005fa <__udivmoddi4+0x13e>
 80005b2:	002b      	movs	r3, r5
 80005b4:	4652      	mov	r2, sl
 80005b6:	40d3      	lsrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	4664      	mov	r4, ip
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	4653      	mov	r3, sl
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db2d      	blt.n	8000624 <__udivmoddi4+0x168>
 80005c8:	0026      	movs	r6, r4
 80005ca:	4657      	mov	r7, sl
 80005cc:	40be      	lsls	r6, r7
 80005ce:	0033      	movs	r3, r6
 80005d0:	0026      	movs	r6, r4
 80005d2:	4667      	mov	r7, ip
 80005d4:	40be      	lsls	r6, r7
 80005d6:	0032      	movs	r2, r6
 80005d8:	1a80      	subs	r0, r0, r2
 80005da:	4199      	sbcs	r1, r3
 80005dc:	9000      	str	r0, [sp, #0]
 80005de:	9101      	str	r1, [sp, #4]
 80005e0:	e7ac      	b.n	800053c <__udivmoddi4+0x80>
 80005e2:	4662      	mov	r2, ip
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	4661      	mov	r1, ip
 80005ee:	0013      	movs	r3, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	408a      	lsls	r2, r1
 80005f4:	0017      	movs	r7, r2
 80005f6:	431f      	orrs	r7, r3
 80005f8:	e780      	b.n	80004fc <__udivmoddi4+0x40>
 80005fa:	4662      	mov	r2, ip
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	002a      	movs	r2, r5
 8000602:	4666      	mov	r6, ip
 8000604:	409a      	lsls	r2, r3
 8000606:	0023      	movs	r3, r4
 8000608:	40f3      	lsrs	r3, r6
 800060a:	4313      	orrs	r3, r2
 800060c:	e7d4      	b.n	80005b8 <__udivmoddi4+0xfc>
 800060e:	4662      	mov	r2, ip
 8000610:	2320      	movs	r3, #32
 8000612:	2100      	movs	r1, #0
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	2200      	movs	r2, #0
 8000618:	9100      	str	r1, [sp, #0]
 800061a:	9201      	str	r2, [sp, #4]
 800061c:	2201      	movs	r2, #1
 800061e:	40da      	lsrs	r2, r3
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	e780      	b.n	8000526 <__udivmoddi4+0x6a>
 8000624:	2320      	movs	r3, #32
 8000626:	4662      	mov	r2, ip
 8000628:	0026      	movs	r6, r4
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	40de      	lsrs	r6, r3
 800062e:	002f      	movs	r7, r5
 8000630:	46b0      	mov	r8, r6
 8000632:	4666      	mov	r6, ip
 8000634:	40b7      	lsls	r7, r6
 8000636:	4646      	mov	r6, r8
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7c8      	b.n	80005d0 <__udivmoddi4+0x114>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__aeabi_fadd>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	4647      	mov	r7, r8
 8000644:	46ce      	mov	lr, r9
 8000646:	0243      	lsls	r3, r0, #9
 8000648:	0a5b      	lsrs	r3, r3, #9
 800064a:	0044      	lsls	r4, r0, #1
 800064c:	0fc2      	lsrs	r2, r0, #31
 800064e:	469c      	mov	ip, r3
 8000650:	0048      	lsls	r0, r1, #1
 8000652:	00dd      	lsls	r5, r3, #3
 8000654:	024b      	lsls	r3, r1, #9
 8000656:	0e24      	lsrs	r4, r4, #24
 8000658:	0a5b      	lsrs	r3, r3, #9
 800065a:	0e00      	lsrs	r0, r0, #24
 800065c:	b580      	push	{r7, lr}
 800065e:	4698      	mov	r8, r3
 8000660:	0026      	movs	r6, r4
 8000662:	4691      	mov	r9, r2
 8000664:	0fc9      	lsrs	r1, r1, #31
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1a27      	subs	r7, r4, r0
 800066a:	428a      	cmp	r2, r1
 800066c:	d029      	beq.n	80006c2 <__aeabi_fadd+0x82>
 800066e:	2f00      	cmp	r7, #0
 8000670:	dd15      	ble.n	800069e <__aeabi_fadd+0x5e>
 8000672:	2800      	cmp	r0, #0
 8000674:	d14a      	bne.n	800070c <__aeabi_fadd+0xcc>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d000      	beq.n	800067c <__aeabi_fadd+0x3c>
 800067a:	e095      	b.n	80007a8 <__aeabi_fadd+0x168>
 800067c:	08ed      	lsrs	r5, r5, #3
 800067e:	2cff      	cmp	r4, #255	; 0xff
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x44>
 8000682:	e088      	b.n	8000796 <__aeabi_fadd+0x156>
 8000684:	026b      	lsls	r3, r5, #9
 8000686:	0a5b      	lsrs	r3, r3, #9
 8000688:	b2e6      	uxtb	r6, r4
 800068a:	025b      	lsls	r3, r3, #9
 800068c:	05f6      	lsls	r6, r6, #23
 800068e:	0a58      	lsrs	r0, r3, #9
 8000690:	4330      	orrs	r0, r6
 8000692:	07d2      	lsls	r2, r2, #31
 8000694:	4310      	orrs	r0, r2
 8000696:	bc0c      	pop	{r2, r3}
 8000698:	4690      	mov	r8, r2
 800069a:	4699      	mov	r9, r3
 800069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fadd+0x64>
 80006a2:	e087      	b.n	80007b4 <__aeabi_fadd+0x174>
 80006a4:	1c60      	adds	r0, r4, #1
 80006a6:	b2c0      	uxtb	r0, r0
 80006a8:	2801      	cmp	r0, #1
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_fadd+0x6e>
 80006ac:	e0b6      	b.n	800081c <__aeabi_fadd+0x1dc>
 80006ae:	1aee      	subs	r6, r5, r3
 80006b0:	0172      	lsls	r2, r6, #5
 80006b2:	d500      	bpl.n	80006b6 <__aeabi_fadd+0x76>
 80006b4:	e0c5      	b.n	8000842 <__aeabi_fadd+0x202>
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d13d      	bne.n	8000736 <__aeabi_fadd+0xf6>
 80006ba:	2200      	movs	r2, #0
 80006bc:	2600      	movs	r6, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	e7e3      	b.n	800068a <__aeabi_fadd+0x4a>
 80006c2:	2f00      	cmp	r7, #0
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0x88>
 80006c6:	e096      	b.n	80007f6 <__aeabi_fadd+0x1b6>
 80006c8:	2800      	cmp	r0, #0
 80006ca:	d05d      	beq.n	8000788 <__aeabi_fadd+0x148>
 80006cc:	2cff      	cmp	r4, #255	; 0xff
 80006ce:	d060      	beq.n	8000792 <__aeabi_fadd+0x152>
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	04d2      	lsls	r2, r2, #19
 80006d4:	4313      	orrs	r3, r2
 80006d6:	2f1b      	cmp	r7, #27
 80006d8:	dd00      	ble.n	80006dc <__aeabi_fadd+0x9c>
 80006da:	e0ec      	b.n	80008b6 <__aeabi_fadd+0x276>
 80006dc:	2220      	movs	r2, #32
 80006de:	1bd2      	subs	r2, r2, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	4093      	lsls	r3, r2
 80006e4:	40f8      	lsrs	r0, r7
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	4193      	sbcs	r3, r2
 80006ea:	4303      	orrs	r3, r0
 80006ec:	18ed      	adds	r5, r5, r3
 80006ee:	016b      	lsls	r3, r5, #5
 80006f0:	d57b      	bpl.n	80007ea <__aeabi_fadd+0x1aa>
 80006f2:	3401      	adds	r4, #1
 80006f4:	2cff      	cmp	r4, #255	; 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0xba>
 80006f8:	e0b7      	b.n	800086a <__aeabi_fadd+0x22a>
 80006fa:	2201      	movs	r2, #1
 80006fc:	2607      	movs	r6, #7
 80006fe:	402a      	ands	r2, r5
 8000700:	086b      	lsrs	r3, r5, #1
 8000702:	4d9a      	ldr	r5, [pc, #616]	; (800096c <__aeabi_fadd+0x32c>)
 8000704:	401d      	ands	r5, r3
 8000706:	4315      	orrs	r5, r2
 8000708:	402e      	ands	r6, r5
 800070a:	e029      	b.n	8000760 <__aeabi_fadd+0x120>
 800070c:	2cff      	cmp	r4, #255	; 0xff
 800070e:	d0b5      	beq.n	800067c <__aeabi_fadd+0x3c>
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	04d2      	lsls	r2, r2, #19
 8000714:	4313      	orrs	r3, r2
 8000716:	2f1b      	cmp	r7, #27
 8000718:	dd00      	ble.n	800071c <__aeabi_fadd+0xdc>
 800071a:	e0b2      	b.n	8000882 <__aeabi_fadd+0x242>
 800071c:	2220      	movs	r2, #32
 800071e:	1bd2      	subs	r2, r2, r7
 8000720:	0019      	movs	r1, r3
 8000722:	4093      	lsls	r3, r2
 8000724:	40f9      	lsrs	r1, r7
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	4193      	sbcs	r3, r2
 800072a:	430b      	orrs	r3, r1
 800072c:	1aed      	subs	r5, r5, r3
 800072e:	016b      	lsls	r3, r5, #5
 8000730:	d55b      	bpl.n	80007ea <__aeabi_fadd+0x1aa>
 8000732:	01ad      	lsls	r5, r5, #6
 8000734:	09ae      	lsrs	r6, r5, #6
 8000736:	0030      	movs	r0, r6
 8000738:	f000 fe54 	bl	80013e4 <__clzsi2>
 800073c:	3805      	subs	r0, #5
 800073e:	4086      	lsls	r6, r0
 8000740:	4284      	cmp	r4, r0
 8000742:	dc65      	bgt.n	8000810 <__aeabi_fadd+0x1d0>
 8000744:	1b04      	subs	r4, r0, r4
 8000746:	0033      	movs	r3, r6
 8000748:	2020      	movs	r0, #32
 800074a:	3401      	adds	r4, #1
 800074c:	40e3      	lsrs	r3, r4
 800074e:	1b04      	subs	r4, r0, r4
 8000750:	40a6      	lsls	r6, r4
 8000752:	1e75      	subs	r5, r6, #1
 8000754:	41ae      	sbcs	r6, r5
 8000756:	4333      	orrs	r3, r6
 8000758:	2607      	movs	r6, #7
 800075a:	001d      	movs	r5, r3
 800075c:	2400      	movs	r4, #0
 800075e:	401e      	ands	r6, r3
 8000760:	2201      	movs	r2, #1
 8000762:	464b      	mov	r3, r9
 8000764:	401a      	ands	r2, r3
 8000766:	2e00      	cmp	r6, #0
 8000768:	d004      	beq.n	8000774 <__aeabi_fadd+0x134>
 800076a:	230f      	movs	r3, #15
 800076c:	402b      	ands	r3, r5
 800076e:	2b04      	cmp	r3, #4
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x134>
 8000772:	3504      	adds	r5, #4
 8000774:	016b      	lsls	r3, r5, #5
 8000776:	d400      	bmi.n	800077a <__aeabi_fadd+0x13a>
 8000778:	e780      	b.n	800067c <__aeabi_fadd+0x3c>
 800077a:	3401      	adds	r4, #1
 800077c:	b2e6      	uxtb	r6, r4
 800077e:	2cff      	cmp	r4, #255	; 0xff
 8000780:	d12f      	bne.n	80007e2 <__aeabi_fadd+0x1a2>
 8000782:	26ff      	movs	r6, #255	; 0xff
 8000784:	2300      	movs	r3, #0
 8000786:	e780      	b.n	800068a <__aeabi_fadd+0x4a>
 8000788:	2b00      	cmp	r3, #0
 800078a:	d152      	bne.n	8000832 <__aeabi_fadd+0x1f2>
 800078c:	2cff      	cmp	r4, #255	; 0xff
 800078e:	d000      	beq.n	8000792 <__aeabi_fadd+0x152>
 8000790:	e774      	b.n	800067c <__aeabi_fadd+0x3c>
 8000792:	000a      	movs	r2, r1
 8000794:	08ed      	lsrs	r5, r5, #3
 8000796:	2d00      	cmp	r5, #0
 8000798:	d0f3      	beq.n	8000782 <__aeabi_fadd+0x142>
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	03db      	lsls	r3, r3, #15
 800079e:	432b      	orrs	r3, r5
 80007a0:	025b      	lsls	r3, r3, #9
 80007a2:	0a5b      	lsrs	r3, r3, #9
 80007a4:	26ff      	movs	r6, #255	; 0xff
 80007a6:	e770      	b.n	800068a <__aeabi_fadd+0x4a>
 80007a8:	3f01      	subs	r7, #1
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d0be      	beq.n	800072c <__aeabi_fadd+0xec>
 80007ae:	2cff      	cmp	r4, #255	; 0xff
 80007b0:	d1b1      	bne.n	8000716 <__aeabi_fadd+0xd6>
 80007b2:	e763      	b.n	800067c <__aeabi_fadd+0x3c>
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d047      	beq.n	8000848 <__aeabi_fadd+0x208>
 80007b8:	28ff      	cmp	r0, #255	; 0xff
 80007ba:	d069      	beq.n	8000890 <__aeabi_fadd+0x250>
 80007bc:	2480      	movs	r4, #128	; 0x80
 80007be:	04e4      	lsls	r4, r4, #19
 80007c0:	427a      	negs	r2, r7
 80007c2:	4325      	orrs	r5, r4
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dd00      	ble.n	80007ca <__aeabi_fadd+0x18a>
 80007c8:	e0c5      	b.n	8000956 <__aeabi_fadd+0x316>
 80007ca:	002c      	movs	r4, r5
 80007cc:	2620      	movs	r6, #32
 80007ce:	40d4      	lsrs	r4, r2
 80007d0:	1ab2      	subs	r2, r6, r2
 80007d2:	4095      	lsls	r5, r2
 80007d4:	1e6a      	subs	r2, r5, #1
 80007d6:	4195      	sbcs	r5, r2
 80007d8:	4325      	orrs	r5, r4
 80007da:	1b5d      	subs	r5, r3, r5
 80007dc:	0004      	movs	r4, r0
 80007de:	4689      	mov	r9, r1
 80007e0:	e7a5      	b.n	800072e <__aeabi_fadd+0xee>
 80007e2:	01ab      	lsls	r3, r5, #6
 80007e4:	0a5b      	lsrs	r3, r3, #9
 80007e6:	e750      	b.n	800068a <__aeabi_fadd+0x4a>
 80007e8:	2400      	movs	r4, #0
 80007ea:	2201      	movs	r2, #1
 80007ec:	464b      	mov	r3, r9
 80007ee:	401a      	ands	r2, r3
 80007f0:	076b      	lsls	r3, r5, #29
 80007f2:	d1ba      	bne.n	800076a <__aeabi_fadd+0x12a>
 80007f4:	e742      	b.n	800067c <__aeabi_fadd+0x3c>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d13b      	bne.n	8000872 <__aeabi_fadd+0x232>
 80007fa:	3401      	adds	r4, #1
 80007fc:	b2e0      	uxtb	r0, r4
 80007fe:	2801      	cmp	r0, #1
 8000800:	dd4a      	ble.n	8000898 <__aeabi_fadd+0x258>
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d0bd      	beq.n	8000782 <__aeabi_fadd+0x142>
 8000806:	2607      	movs	r6, #7
 8000808:	18ed      	adds	r5, r5, r3
 800080a:	086d      	lsrs	r5, r5, #1
 800080c:	402e      	ands	r6, r5
 800080e:	e7a7      	b.n	8000760 <__aeabi_fadd+0x120>
 8000810:	2307      	movs	r3, #7
 8000812:	4d57      	ldr	r5, [pc, #348]	; (8000970 <__aeabi_fadd+0x330>)
 8000814:	1a24      	subs	r4, r4, r0
 8000816:	4035      	ands	r5, r6
 8000818:	401e      	ands	r6, r3
 800081a:	e7a1      	b.n	8000760 <__aeabi_fadd+0x120>
 800081c:	2c00      	cmp	r4, #0
 800081e:	d11b      	bne.n	8000858 <__aeabi_fadd+0x218>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d16e      	bne.n	8000902 <__aeabi_fadd+0x2c2>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0x1ea>
 8000828:	e09a      	b.n	8000960 <__aeabi_fadd+0x320>
 800082a:	000a      	movs	r2, r1
 800082c:	001d      	movs	r5, r3
 800082e:	003c      	movs	r4, r7
 8000830:	e724      	b.n	800067c <__aeabi_fadd+0x3c>
 8000832:	3f01      	subs	r7, #1
 8000834:	2f00      	cmp	r7, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x1fa>
 8000838:	e758      	b.n	80006ec <__aeabi_fadd+0xac>
 800083a:	2cff      	cmp	r4, #255	; 0xff
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x200>
 800083e:	e74a      	b.n	80006d6 <__aeabi_fadd+0x96>
 8000840:	e7a7      	b.n	8000792 <__aeabi_fadd+0x152>
 8000842:	1b5e      	subs	r6, r3, r5
 8000844:	4689      	mov	r9, r1
 8000846:	e776      	b.n	8000736 <__aeabi_fadd+0xf6>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d11c      	bne.n	8000886 <__aeabi_fadd+0x246>
 800084c:	000a      	movs	r2, r1
 800084e:	28ff      	cmp	r0, #255	; 0xff
 8000850:	d01f      	beq.n	8000892 <__aeabi_fadd+0x252>
 8000852:	0004      	movs	r4, r0
 8000854:	001d      	movs	r5, r3
 8000856:	e711      	b.n	800067c <__aeabi_fadd+0x3c>
 8000858:	2d00      	cmp	r5, #0
 800085a:	d15d      	bne.n	8000918 <__aeabi_fadd+0x2d8>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d117      	bne.n	8000890 <__aeabi_fadd+0x250>
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	2200      	movs	r2, #0
 8000864:	03db      	lsls	r3, r3, #15
 8000866:	26ff      	movs	r6, #255	; 0xff
 8000868:	e70f      	b.n	800068a <__aeabi_fadd+0x4a>
 800086a:	000a      	movs	r2, r1
 800086c:	26ff      	movs	r6, #255	; 0xff
 800086e:	2300      	movs	r3, #0
 8000870:	e70b      	b.n	800068a <__aeabi_fadd+0x4a>
 8000872:	2c00      	cmp	r4, #0
 8000874:	d121      	bne.n	80008ba <__aeabi_fadd+0x27a>
 8000876:	2d00      	cmp	r5, #0
 8000878:	d166      	bne.n	8000948 <__aeabi_fadd+0x308>
 800087a:	28ff      	cmp	r0, #255	; 0xff
 800087c:	d1e9      	bne.n	8000852 <__aeabi_fadd+0x212>
 800087e:	001d      	movs	r5, r3
 8000880:	e787      	b.n	8000792 <__aeabi_fadd+0x152>
 8000882:	2301      	movs	r3, #1
 8000884:	e752      	b.n	800072c <__aeabi_fadd+0xec>
 8000886:	1c7a      	adds	r2, r7, #1
 8000888:	d0a7      	beq.n	80007da <__aeabi_fadd+0x19a>
 800088a:	43fa      	mvns	r2, r7
 800088c:	28ff      	cmp	r0, #255	; 0xff
 800088e:	d199      	bne.n	80007c4 <__aeabi_fadd+0x184>
 8000890:	000a      	movs	r2, r1
 8000892:	001d      	movs	r5, r3
 8000894:	24ff      	movs	r4, #255	; 0xff
 8000896:	e6f1      	b.n	800067c <__aeabi_fadd+0x3c>
 8000898:	2e00      	cmp	r6, #0
 800089a:	d121      	bne.n	80008e0 <__aeabi_fadd+0x2a0>
 800089c:	2d00      	cmp	r5, #0
 800089e:	d04f      	beq.n	8000940 <__aeabi_fadd+0x300>
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d04c      	beq.n	800093e <__aeabi_fadd+0x2fe>
 80008a4:	18ed      	adds	r5, r5, r3
 80008a6:	016b      	lsls	r3, r5, #5
 80008a8:	d59e      	bpl.n	80007e8 <__aeabi_fadd+0x1a8>
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <__aeabi_fadd+0x330>)
 80008ac:	3607      	adds	r6, #7
 80008ae:	402e      	ands	r6, r5
 80008b0:	2401      	movs	r4, #1
 80008b2:	401d      	ands	r5, r3
 80008b4:	e754      	b.n	8000760 <__aeabi_fadd+0x120>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e718      	b.n	80006ec <__aeabi_fadd+0xac>
 80008ba:	28ff      	cmp	r0, #255	; 0xff
 80008bc:	d0df      	beq.n	800087e <__aeabi_fadd+0x23e>
 80008be:	2480      	movs	r4, #128	; 0x80
 80008c0:	04e4      	lsls	r4, r4, #19
 80008c2:	427f      	negs	r7, r7
 80008c4:	4325      	orrs	r5, r4
 80008c6:	2f1b      	cmp	r7, #27
 80008c8:	dc4d      	bgt.n	8000966 <__aeabi_fadd+0x326>
 80008ca:	2620      	movs	r6, #32
 80008cc:	1bf6      	subs	r6, r6, r7
 80008ce:	002c      	movs	r4, r5
 80008d0:	40b5      	lsls	r5, r6
 80008d2:	40fc      	lsrs	r4, r7
 80008d4:	1e6a      	subs	r2, r5, #1
 80008d6:	4195      	sbcs	r5, r2
 80008d8:	4325      	orrs	r5, r4
 80008da:	18ed      	adds	r5, r5, r3
 80008dc:	0004      	movs	r4, r0
 80008de:	e706      	b.n	80006ee <__aeabi_fadd+0xae>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d0cc      	beq.n	800087e <__aeabi_fadd+0x23e>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2aa>
 80008e8:	e753      	b.n	8000792 <__aeabi_fadd+0x152>
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	4660      	mov	r0, ip
 80008ee:	03c9      	lsls	r1, r1, #15
 80008f0:	4208      	tst	r0, r1
 80008f2:	d003      	beq.n	80008fc <__aeabi_fadd+0x2bc>
 80008f4:	4640      	mov	r0, r8
 80008f6:	4208      	tst	r0, r1
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x2bc>
 80008fa:	001d      	movs	r5, r3
 80008fc:	2101      	movs	r1, #1
 80008fe:	4011      	ands	r1, r2
 8000900:	e747      	b.n	8000792 <__aeabi_fadd+0x152>
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x2c8>
 8000906:	e6b9      	b.n	800067c <__aeabi_fadd+0x3c>
 8000908:	1aea      	subs	r2, r5, r3
 800090a:	0150      	lsls	r0, r2, #5
 800090c:	d525      	bpl.n	800095a <__aeabi_fadd+0x31a>
 800090e:	2607      	movs	r6, #7
 8000910:	1b5d      	subs	r5, r3, r5
 8000912:	402e      	ands	r6, r5
 8000914:	4689      	mov	r9, r1
 8000916:	e723      	b.n	8000760 <__aeabi_fadd+0x120>
 8000918:	24ff      	movs	r4, #255	; 0xff
 800091a:	2b00      	cmp	r3, #0
 800091c:	d100      	bne.n	8000920 <__aeabi_fadd+0x2e0>
 800091e:	e6ad      	b.n	800067c <__aeabi_fadd+0x3c>
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	4660      	mov	r0, ip
 8000924:	03d2      	lsls	r2, r2, #15
 8000926:	4210      	tst	r0, r2
 8000928:	d004      	beq.n	8000934 <__aeabi_fadd+0x2f4>
 800092a:	4640      	mov	r0, r8
 800092c:	4210      	tst	r0, r2
 800092e:	d101      	bne.n	8000934 <__aeabi_fadd+0x2f4>
 8000930:	001d      	movs	r5, r3
 8000932:	4689      	mov	r9, r1
 8000934:	2201      	movs	r2, #1
 8000936:	464b      	mov	r3, r9
 8000938:	24ff      	movs	r4, #255	; 0xff
 800093a:	401a      	ands	r2, r3
 800093c:	e69e      	b.n	800067c <__aeabi_fadd+0x3c>
 800093e:	002b      	movs	r3, r5
 8000940:	08dd      	lsrs	r5, r3, #3
 8000942:	000a      	movs	r2, r1
 8000944:	2400      	movs	r4, #0
 8000946:	e69d      	b.n	8000684 <__aeabi_fadd+0x44>
 8000948:	1c7a      	adds	r2, r7, #1
 800094a:	d0c6      	beq.n	80008da <__aeabi_fadd+0x29a>
 800094c:	43ff      	mvns	r7, r7
 800094e:	28ff      	cmp	r0, #255	; 0xff
 8000950:	d1b9      	bne.n	80008c6 <__aeabi_fadd+0x286>
 8000952:	001d      	movs	r5, r3
 8000954:	e71d      	b.n	8000792 <__aeabi_fadd+0x152>
 8000956:	2501      	movs	r5, #1
 8000958:	e73f      	b.n	80007da <__aeabi_fadd+0x19a>
 800095a:	1e15      	subs	r5, r2, #0
 800095c:	d000      	beq.n	8000960 <__aeabi_fadd+0x320>
 800095e:	e744      	b.n	80007ea <__aeabi_fadd+0x1aa>
 8000960:	2200      	movs	r2, #0
 8000962:	2300      	movs	r3, #0
 8000964:	e691      	b.n	800068a <__aeabi_fadd+0x4a>
 8000966:	2501      	movs	r5, #1
 8000968:	e7b7      	b.n	80008da <__aeabi_fadd+0x29a>
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	7dffffff 	.word	0x7dffffff
 8000970:	fbffffff 	.word	0xfbffffff

08000974 <__aeabi_fdiv>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	4657      	mov	r7, sl
 8000978:	464e      	mov	r6, r9
 800097a:	4645      	mov	r5, r8
 800097c:	46de      	mov	lr, fp
 800097e:	0244      	lsls	r4, r0, #9
 8000980:	b5e0      	push	{r5, r6, r7, lr}
 8000982:	0046      	lsls	r6, r0, #1
 8000984:	4688      	mov	r8, r1
 8000986:	0a64      	lsrs	r4, r4, #9
 8000988:	0e36      	lsrs	r6, r6, #24
 800098a:	0fc7      	lsrs	r7, r0, #31
 800098c:	2e00      	cmp	r6, #0
 800098e:	d063      	beq.n	8000a58 <__aeabi_fdiv+0xe4>
 8000990:	2eff      	cmp	r6, #255	; 0xff
 8000992:	d024      	beq.n	80009de <__aeabi_fdiv+0x6a>
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	00e4      	lsls	r4, r4, #3
 8000998:	04db      	lsls	r3, r3, #19
 800099a:	431c      	orrs	r4, r3
 800099c:	2300      	movs	r3, #0
 800099e:	4699      	mov	r9, r3
 80009a0:	469b      	mov	fp, r3
 80009a2:	3e7f      	subs	r6, #127	; 0x7f
 80009a4:	4643      	mov	r3, r8
 80009a6:	4642      	mov	r2, r8
 80009a8:	025d      	lsls	r5, r3, #9
 80009aa:	0fd2      	lsrs	r2, r2, #31
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	0a6d      	lsrs	r5, r5, #9
 80009b0:	0e1b      	lsrs	r3, r3, #24
 80009b2:	4690      	mov	r8, r2
 80009b4:	4692      	mov	sl, r2
 80009b6:	d065      	beq.n	8000a84 <__aeabi_fdiv+0x110>
 80009b8:	2bff      	cmp	r3, #255	; 0xff
 80009ba:	d055      	beq.n	8000a68 <__aeabi_fdiv+0xf4>
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	2100      	movs	r1, #0
 80009c0:	00ed      	lsls	r5, r5, #3
 80009c2:	04d2      	lsls	r2, r2, #19
 80009c4:	3b7f      	subs	r3, #127	; 0x7f
 80009c6:	4315      	orrs	r5, r2
 80009c8:	1af6      	subs	r6, r6, r3
 80009ca:	4643      	mov	r3, r8
 80009cc:	464a      	mov	r2, r9
 80009ce:	407b      	eors	r3, r7
 80009d0:	2a0f      	cmp	r2, #15
 80009d2:	d900      	bls.n	80009d6 <__aeabi_fdiv+0x62>
 80009d4:	e08d      	b.n	8000af2 <__aeabi_fdiv+0x17e>
 80009d6:	486d      	ldr	r0, [pc, #436]	; (8000b8c <__aeabi_fdiv+0x218>)
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	5882      	ldr	r2, [r0, r2]
 80009dc:	4697      	mov	pc, r2
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d154      	bne.n	8000a8c <__aeabi_fdiv+0x118>
 80009e2:	2308      	movs	r3, #8
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b06      	subs	r3, #6
 80009e8:	26ff      	movs	r6, #255	; 0xff
 80009ea:	469b      	mov	fp, r3
 80009ec:	e7da      	b.n	80009a4 <__aeabi_fdiv+0x30>
 80009ee:	2500      	movs	r5, #0
 80009f0:	4653      	mov	r3, sl
 80009f2:	2902      	cmp	r1, #2
 80009f4:	d01b      	beq.n	8000a2e <__aeabi_fdiv+0xba>
 80009f6:	2903      	cmp	r1, #3
 80009f8:	d100      	bne.n	80009fc <__aeabi_fdiv+0x88>
 80009fa:	e0bf      	b.n	8000b7c <__aeabi_fdiv+0x208>
 80009fc:	2901      	cmp	r1, #1
 80009fe:	d028      	beq.n	8000a52 <__aeabi_fdiv+0xde>
 8000a00:	0030      	movs	r0, r6
 8000a02:	307f      	adds	r0, #127	; 0x7f
 8000a04:	2800      	cmp	r0, #0
 8000a06:	dd20      	ble.n	8000a4a <__aeabi_fdiv+0xd6>
 8000a08:	076a      	lsls	r2, r5, #29
 8000a0a:	d004      	beq.n	8000a16 <__aeabi_fdiv+0xa2>
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	402a      	ands	r2, r5
 8000a10:	2a04      	cmp	r2, #4
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fdiv+0xa2>
 8000a14:	3504      	adds	r5, #4
 8000a16:	012a      	lsls	r2, r5, #4
 8000a18:	d503      	bpl.n	8000a22 <__aeabi_fdiv+0xae>
 8000a1a:	0030      	movs	r0, r6
 8000a1c:	4a5c      	ldr	r2, [pc, #368]	; (8000b90 <__aeabi_fdiv+0x21c>)
 8000a1e:	3080      	adds	r0, #128	; 0x80
 8000a20:	4015      	ands	r5, r2
 8000a22:	28fe      	cmp	r0, #254	; 0xfe
 8000a24:	dc03      	bgt.n	8000a2e <__aeabi_fdiv+0xba>
 8000a26:	01ac      	lsls	r4, r5, #6
 8000a28:	0a64      	lsrs	r4, r4, #9
 8000a2a:	b2c2      	uxtb	r2, r0
 8000a2c:	e001      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2400      	movs	r4, #0
 8000a32:	0264      	lsls	r4, r4, #9
 8000a34:	05d2      	lsls	r2, r2, #23
 8000a36:	0a60      	lsrs	r0, r4, #9
 8000a38:	07db      	lsls	r3, r3, #31
 8000a3a:	4310      	orrs	r0, r2
 8000a3c:	4318      	orrs	r0, r3
 8000a3e:	bc3c      	pop	{r2, r3, r4, r5}
 8000a40:	4690      	mov	r8, r2
 8000a42:	4699      	mov	r9, r3
 8000a44:	46a2      	mov	sl, r4
 8000a46:	46ab      	mov	fp, r5
 8000a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	1a10      	subs	r0, r2, r0
 8000a4e:	281b      	cmp	r0, #27
 8000a50:	dd7c      	ble.n	8000b4c <__aeabi_fdiv+0x1d8>
 8000a52:	2200      	movs	r2, #0
 8000a54:	2400      	movs	r4, #0
 8000a56:	e7ec      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d11d      	bne.n	8000a98 <__aeabi_fdiv+0x124>
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	4699      	mov	r9, r3
 8000a60:	3b03      	subs	r3, #3
 8000a62:	2600      	movs	r6, #0
 8000a64:	469b      	mov	fp, r3
 8000a66:	e79d      	b.n	80009a4 <__aeabi_fdiv+0x30>
 8000a68:	3eff      	subs	r6, #255	; 0xff
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d120      	bne.n	8000ab0 <__aeabi_fdiv+0x13c>
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4643      	mov	r3, r8
 8000a72:	464a      	mov	r2, r9
 8000a74:	407b      	eors	r3, r7
 8000a76:	430a      	orrs	r2, r1
 8000a78:	2a0f      	cmp	r2, #15
 8000a7a:	d8d8      	bhi.n	8000a2e <__aeabi_fdiv+0xba>
 8000a7c:	4845      	ldr	r0, [pc, #276]	; (8000b94 <__aeabi_fdiv+0x220>)
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	5882      	ldr	r2, [r0, r2]
 8000a82:	4697      	mov	pc, r2
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d119      	bne.n	8000abc <__aeabi_fdiv+0x148>
 8000a88:	2101      	movs	r1, #1
 8000a8a:	e7f1      	b.n	8000a70 <__aeabi_fdiv+0xfc>
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	4699      	mov	r9, r3
 8000a90:	3b09      	subs	r3, #9
 8000a92:	26ff      	movs	r6, #255	; 0xff
 8000a94:	469b      	mov	fp, r3
 8000a96:	e785      	b.n	80009a4 <__aeabi_fdiv+0x30>
 8000a98:	0020      	movs	r0, r4
 8000a9a:	f000 fca3 	bl	80013e4 <__clzsi2>
 8000a9e:	2676      	movs	r6, #118	; 0x76
 8000aa0:	1f43      	subs	r3, r0, #5
 8000aa2:	409c      	lsls	r4, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	4276      	negs	r6, r6
 8000aa8:	1a36      	subs	r6, r6, r0
 8000aaa:	4699      	mov	r9, r3
 8000aac:	469b      	mov	fp, r3
 8000aae:	e779      	b.n	80009a4 <__aeabi_fdiv+0x30>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	4691      	mov	r9, r2
 8000ab8:	2103      	movs	r1, #3
 8000aba:	e786      	b.n	80009ca <__aeabi_fdiv+0x56>
 8000abc:	0028      	movs	r0, r5
 8000abe:	f000 fc91 	bl	80013e4 <__clzsi2>
 8000ac2:	1f43      	subs	r3, r0, #5
 8000ac4:	1836      	adds	r6, r6, r0
 8000ac6:	409d      	lsls	r5, r3
 8000ac8:	3676      	adds	r6, #118	; 0x76
 8000aca:	2100      	movs	r1, #0
 8000acc:	e77d      	b.n	80009ca <__aeabi_fdiv+0x56>
 8000ace:	2480      	movs	r4, #128	; 0x80
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	03e4      	lsls	r4, r4, #15
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	e7ac      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000ad8:	2500      	movs	r5, #0
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	03db      	lsls	r3, r3, #15
 8000ade:	421c      	tst	r4, r3
 8000ae0:	d028      	beq.n	8000b34 <__aeabi_fdiv+0x1c0>
 8000ae2:	421d      	tst	r5, r3
 8000ae4:	d126      	bne.n	8000b34 <__aeabi_fdiv+0x1c0>
 8000ae6:	432b      	orrs	r3, r5
 8000ae8:	025c      	lsls	r4, r3, #9
 8000aea:	0a64      	lsrs	r4, r4, #9
 8000aec:	4643      	mov	r3, r8
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	e79f      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000af2:	0162      	lsls	r2, r4, #5
 8000af4:	016c      	lsls	r4, r5, #5
 8000af6:	42a2      	cmp	r2, r4
 8000af8:	d224      	bcs.n	8000b44 <__aeabi_fdiv+0x1d0>
 8000afa:	211b      	movs	r1, #27
 8000afc:	2500      	movs	r5, #0
 8000afe:	3e01      	subs	r6, #1
 8000b00:	2701      	movs	r7, #1
 8000b02:	0010      	movs	r0, r2
 8000b04:	006d      	lsls	r5, r5, #1
 8000b06:	0052      	lsls	r2, r2, #1
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	db01      	blt.n	8000b10 <__aeabi_fdiv+0x19c>
 8000b0c:	4294      	cmp	r4, r2
 8000b0e:	d801      	bhi.n	8000b14 <__aeabi_fdiv+0x1a0>
 8000b10:	1b12      	subs	r2, r2, r4
 8000b12:	433d      	orrs	r5, r7
 8000b14:	3901      	subs	r1, #1
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d1f3      	bne.n	8000b02 <__aeabi_fdiv+0x18e>
 8000b1a:	0014      	movs	r4, r2
 8000b1c:	1e62      	subs	r2, r4, #1
 8000b1e:	4194      	sbcs	r4, r2
 8000b20:	4325      	orrs	r5, r4
 8000b22:	e76d      	b.n	8000a00 <__aeabi_fdiv+0x8c>
 8000b24:	46ba      	mov	sl, r7
 8000b26:	4659      	mov	r1, fp
 8000b28:	0025      	movs	r5, r4
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	2902      	cmp	r1, #2
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fdiv+0x1be>
 8000b30:	e761      	b.n	80009f6 <__aeabi_fdiv+0x82>
 8000b32:	e77c      	b.n	8000a2e <__aeabi_fdiv+0xba>
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	03db      	lsls	r3, r3, #15
 8000b38:	431c      	orrs	r4, r3
 8000b3a:	0264      	lsls	r4, r4, #9
 8000b3c:	0a64      	lsrs	r4, r4, #9
 8000b3e:	003b      	movs	r3, r7
 8000b40:	22ff      	movs	r2, #255	; 0xff
 8000b42:	e776      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b44:	1b12      	subs	r2, r2, r4
 8000b46:	211a      	movs	r1, #26
 8000b48:	2501      	movs	r5, #1
 8000b4a:	e7d9      	b.n	8000b00 <__aeabi_fdiv+0x18c>
 8000b4c:	369e      	adds	r6, #158	; 0x9e
 8000b4e:	002a      	movs	r2, r5
 8000b50:	40b5      	lsls	r5, r6
 8000b52:	002c      	movs	r4, r5
 8000b54:	40c2      	lsrs	r2, r0
 8000b56:	1e65      	subs	r5, r4, #1
 8000b58:	41ac      	sbcs	r4, r5
 8000b5a:	4314      	orrs	r4, r2
 8000b5c:	0762      	lsls	r2, r4, #29
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_fdiv+0x1f6>
 8000b60:	220f      	movs	r2, #15
 8000b62:	4022      	ands	r2, r4
 8000b64:	2a04      	cmp	r2, #4
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fdiv+0x1f6>
 8000b68:	3404      	adds	r4, #4
 8000b6a:	0162      	lsls	r2, r4, #5
 8000b6c:	d403      	bmi.n	8000b76 <__aeabi_fdiv+0x202>
 8000b6e:	01a4      	lsls	r4, r4, #6
 8000b70:	0a64      	lsrs	r4, r4, #9
 8000b72:	2200      	movs	r2, #0
 8000b74:	e75d      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b76:	2201      	movs	r2, #1
 8000b78:	2400      	movs	r4, #0
 8000b7a:	e75a      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b7c:	2480      	movs	r4, #128	; 0x80
 8000b7e:	03e4      	lsls	r4, r4, #15
 8000b80:	432c      	orrs	r4, r5
 8000b82:	0264      	lsls	r4, r4, #9
 8000b84:	0a64      	lsrs	r4, r4, #9
 8000b86:	22ff      	movs	r2, #255	; 0xff
 8000b88:	e753      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	08014564 	.word	0x08014564
 8000b90:	f7ffffff 	.word	0xf7ffffff
 8000b94:	080145a4 	.word	0x080145a4

08000b98 <__eqsf2>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	0042      	lsls	r2, r0, #1
 8000b9c:	024e      	lsls	r6, r1, #9
 8000b9e:	004c      	lsls	r4, r1, #1
 8000ba0:	0245      	lsls	r5, r0, #9
 8000ba2:	0a6d      	lsrs	r5, r5, #9
 8000ba4:	0e12      	lsrs	r2, r2, #24
 8000ba6:	0fc3      	lsrs	r3, r0, #31
 8000ba8:	0a76      	lsrs	r6, r6, #9
 8000baa:	0e24      	lsrs	r4, r4, #24
 8000bac:	0fc9      	lsrs	r1, r1, #31
 8000bae:	2aff      	cmp	r2, #255	; 0xff
 8000bb0:	d00f      	beq.n	8000bd2 <__eqsf2+0x3a>
 8000bb2:	2cff      	cmp	r4, #255	; 0xff
 8000bb4:	d011      	beq.n	8000bda <__eqsf2+0x42>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	42a2      	cmp	r2, r4
 8000bba:	d000      	beq.n	8000bbe <__eqsf2+0x26>
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d1fc      	bne.n	8000bbc <__eqsf2+0x24>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d00d      	beq.n	8000be2 <__eqsf2+0x4a>
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d1f8      	bne.n	8000bbc <__eqsf2+0x24>
 8000bca:	0028      	movs	r0, r5
 8000bcc:	1e45      	subs	r5, r0, #1
 8000bce:	41a8      	sbcs	r0, r5
 8000bd0:	e7f4      	b.n	8000bbc <__eqsf2+0x24>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	2d00      	cmp	r5, #0
 8000bd6:	d1f1      	bne.n	8000bbc <__eqsf2+0x24>
 8000bd8:	e7eb      	b.n	8000bb2 <__eqsf2+0x1a>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d1ed      	bne.n	8000bbc <__eqsf2+0x24>
 8000be0:	e7e9      	b.n	8000bb6 <__eqsf2+0x1e>
 8000be2:	2000      	movs	r0, #0
 8000be4:	e7ea      	b.n	8000bbc <__eqsf2+0x24>
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__gesf2>:
 8000be8:	b570      	push	{r4, r5, r6, lr}
 8000bea:	004a      	lsls	r2, r1, #1
 8000bec:	024e      	lsls	r6, r1, #9
 8000bee:	0245      	lsls	r5, r0, #9
 8000bf0:	0044      	lsls	r4, r0, #1
 8000bf2:	0a6d      	lsrs	r5, r5, #9
 8000bf4:	0e24      	lsrs	r4, r4, #24
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0a76      	lsrs	r6, r6, #9
 8000bfa:	0e12      	lsrs	r2, r2, #24
 8000bfc:	0fc9      	lsrs	r1, r1, #31
 8000bfe:	2cff      	cmp	r4, #255	; 0xff
 8000c00:	d015      	beq.n	8000c2e <__gesf2+0x46>
 8000c02:	2aff      	cmp	r2, #255	; 0xff
 8000c04:	d00e      	beq.n	8000c24 <__gesf2+0x3c>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d115      	bne.n	8000c36 <__gesf2+0x4e>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d101      	bne.n	8000c12 <__gesf2+0x2a>
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d01c      	beq.n	8000c4c <__gesf2+0x64>
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d014      	beq.n	8000c40 <__gesf2+0x58>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d027      	beq.n	8000c6a <__gesf2+0x82>
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	4018      	ands	r0, r3
 8000c20:	3801      	subs	r0, #1
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d0ee      	beq.n	8000c06 <__gesf2+0x1e>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	e7f9      	b.n	8000c22 <__gesf2+0x3a>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d1fa      	bne.n	8000c28 <__gesf2+0x40>
 8000c32:	2aff      	cmp	r2, #255	; 0xff
 8000c34:	d00e      	beq.n	8000c54 <__gesf2+0x6c>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d10e      	bne.n	8000c58 <__gesf2+0x70>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d0ed      	beq.n	8000c1a <__gesf2+0x32>
 8000c3e:	e00b      	b.n	8000c58 <__gesf2+0x70>
 8000c40:	2301      	movs	r3, #1
 8000c42:	3901      	subs	r1, #1
 8000c44:	4399      	bics	r1, r3
 8000c46:	0008      	movs	r0, r1
 8000c48:	3001      	adds	r0, #1
 8000c4a:	e7ea      	b.n	8000c22 <__gesf2+0x3a>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0e7      	beq.n	8000c22 <__gesf2+0x3a>
 8000c52:	e7e2      	b.n	8000c1a <__gesf2+0x32>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d1e7      	bne.n	8000c28 <__gesf2+0x40>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d1de      	bne.n	8000c1a <__gesf2+0x32>
 8000c5c:	4294      	cmp	r4, r2
 8000c5e:	dd05      	ble.n	8000c6c <__gesf2+0x84>
 8000c60:	2102      	movs	r1, #2
 8000c62:	1e58      	subs	r0, r3, #1
 8000c64:	4008      	ands	r0, r1
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7db      	b.n	8000c22 <__gesf2+0x3a>
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	dc04      	bgt.n	8000c7a <__gesf2+0x92>
 8000c70:	42b5      	cmp	r5, r6
 8000c72:	d8d2      	bhi.n	8000c1a <__gesf2+0x32>
 8000c74:	2000      	movs	r0, #0
 8000c76:	42b5      	cmp	r5, r6
 8000c78:	d2d3      	bcs.n	8000c22 <__gesf2+0x3a>
 8000c7a:	1e58      	subs	r0, r3, #1
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	4398      	bics	r0, r3
 8000c80:	3001      	adds	r0, #1
 8000c82:	e7ce      	b.n	8000c22 <__gesf2+0x3a>

08000c84 <__lesf2>:
 8000c84:	b530      	push	{r4, r5, lr}
 8000c86:	0042      	lsls	r2, r0, #1
 8000c88:	0244      	lsls	r4, r0, #9
 8000c8a:	024d      	lsls	r5, r1, #9
 8000c8c:	0fc3      	lsrs	r3, r0, #31
 8000c8e:	0048      	lsls	r0, r1, #1
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	0e12      	lsrs	r2, r2, #24
 8000c94:	0a6d      	lsrs	r5, r5, #9
 8000c96:	0e00      	lsrs	r0, r0, #24
 8000c98:	0fc9      	lsrs	r1, r1, #31
 8000c9a:	2aff      	cmp	r2, #255	; 0xff
 8000c9c:	d012      	beq.n	8000cc4 <__lesf2+0x40>
 8000c9e:	28ff      	cmp	r0, #255	; 0xff
 8000ca0:	d00c      	beq.n	8000cbc <__lesf2+0x38>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d112      	bne.n	8000ccc <__lesf2+0x48>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d119      	bne.n	8000cde <__lesf2+0x5a>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d117      	bne.n	8000cde <__lesf2+0x5a>
 8000cae:	2c00      	cmp	r4, #0
 8000cb0:	d02b      	beq.n	8000d0a <__lesf2+0x86>
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	4018      	ands	r0, r3
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e026      	b.n	8000d0a <__lesf2+0x86>
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <__lesf2+0x1e>
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	e022      	b.n	8000d0a <__lesf2+0x86>
 8000cc4:	2c00      	cmp	r4, #0
 8000cc6:	d1fb      	bne.n	8000cc0 <__lesf2+0x3c>
 8000cc8:	28ff      	cmp	r0, #255	; 0xff
 8000cca:	d01f      	beq.n	8000d0c <__lesf2+0x88>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d11f      	bne.n	8000d10 <__lesf2+0x8c>
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d11d      	bne.n	8000d10 <__lesf2+0x8c>
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	4018      	ands	r0, r3
 8000cda:	3801      	subs	r0, #1
 8000cdc:	e015      	b.n	8000d0a <__lesf2+0x86>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d00e      	beq.n	8000d00 <__lesf2+0x7c>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d1e5      	bne.n	8000cb2 <__lesf2+0x2e>
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	dc04      	bgt.n	8000cf6 <__lesf2+0x72>
 8000cec:	42ac      	cmp	r4, r5
 8000cee:	d8e0      	bhi.n	8000cb2 <__lesf2+0x2e>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	d209      	bcs.n	8000d0a <__lesf2+0x86>
 8000cf6:	1e58      	subs	r0, r3, #1
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4398      	bics	r0, r3
 8000cfc:	3001      	adds	r0, #1
 8000cfe:	e004      	b.n	8000d0a <__lesf2+0x86>
 8000d00:	2301      	movs	r3, #1
 8000d02:	3901      	subs	r1, #1
 8000d04:	4399      	bics	r1, r3
 8000d06:	0008      	movs	r0, r1
 8000d08:	3001      	adds	r0, #1
 8000d0a:	bd30      	pop	{r4, r5, pc}
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d1d7      	bne.n	8000cc0 <__lesf2+0x3c>
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d1ce      	bne.n	8000cb2 <__lesf2+0x2e>
 8000d14:	4282      	cmp	r2, r0
 8000d16:	dde7      	ble.n	8000ce8 <__lesf2+0x64>
 8000d18:	2102      	movs	r1, #2
 8000d1a:	1e58      	subs	r0, r3, #1
 8000d1c:	4008      	ands	r0, r1
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7f3      	b.n	8000d0a <__lesf2+0x86>
 8000d22:	46c0      	nop			; (mov r8, r8)

08000d24 <__aeabi_fmul>:
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	464e      	mov	r6, r9
 8000d28:	4657      	mov	r7, sl
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	46de      	mov	lr, fp
 8000d2e:	b5e0      	push	{r5, r6, r7, lr}
 8000d30:	0243      	lsls	r3, r0, #9
 8000d32:	0a5b      	lsrs	r3, r3, #9
 8000d34:	0045      	lsls	r5, r0, #1
 8000d36:	b083      	sub	sp, #12
 8000d38:	1c0f      	adds	r7, r1, #0
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	0e2d      	lsrs	r5, r5, #24
 8000d3e:	0fc6      	lsrs	r6, r0, #31
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d057      	beq.n	8000df4 <__aeabi_fmul+0xd0>
 8000d44:	2dff      	cmp	r5, #255	; 0xff
 8000d46:	d024      	beq.n	8000d92 <__aeabi_fmul+0x6e>
 8000d48:	2080      	movs	r0, #128	; 0x80
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	04c0      	lsls	r0, r0, #19
 8000d4e:	4318      	orrs	r0, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	4681      	mov	r9, r0
 8000d54:	469a      	mov	sl, r3
 8000d56:	469b      	mov	fp, r3
 8000d58:	3d7f      	subs	r5, #127	; 0x7f
 8000d5a:	027c      	lsls	r4, r7, #9
 8000d5c:	007a      	lsls	r2, r7, #1
 8000d5e:	0ffb      	lsrs	r3, r7, #31
 8000d60:	0a64      	lsrs	r4, r4, #9
 8000d62:	0e12      	lsrs	r2, r2, #24
 8000d64:	4698      	mov	r8, r3
 8000d66:	d023      	beq.n	8000db0 <__aeabi_fmul+0x8c>
 8000d68:	2aff      	cmp	r2, #255	; 0xff
 8000d6a:	d04b      	beq.n	8000e04 <__aeabi_fmul+0xe0>
 8000d6c:	00e3      	lsls	r3, r4, #3
 8000d6e:	2480      	movs	r4, #128	; 0x80
 8000d70:	2000      	movs	r0, #0
 8000d72:	04e4      	lsls	r4, r4, #19
 8000d74:	3a7f      	subs	r2, #127	; 0x7f
 8000d76:	431c      	orrs	r4, r3
 8000d78:	18ad      	adds	r5, r5, r2
 8000d7a:	1c6b      	adds	r3, r5, #1
 8000d7c:	4647      	mov	r7, r8
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	4653      	mov	r3, sl
 8000d82:	4077      	eors	r7, r6
 8000d84:	003a      	movs	r2, r7
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d848      	bhi.n	8000e1c <__aeabi_fmul+0xf8>
 8000d8a:	497d      	ldr	r1, [pc, #500]	; (8000f80 <__aeabi_fmul+0x25c>)
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	58cb      	ldr	r3, [r1, r3]
 8000d90:	469f      	mov	pc, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fmul+0x74>
 8000d96:	e085      	b.n	8000ea4 <__aeabi_fmul+0x180>
 8000d98:	3308      	adds	r3, #8
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	3b06      	subs	r3, #6
 8000d9e:	469b      	mov	fp, r3
 8000da0:	027c      	lsls	r4, r7, #9
 8000da2:	007a      	lsls	r2, r7, #1
 8000da4:	0ffb      	lsrs	r3, r7, #31
 8000da6:	25ff      	movs	r5, #255	; 0xff
 8000da8:	0a64      	lsrs	r4, r4, #9
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	4698      	mov	r8, r3
 8000dae:	d1db      	bne.n	8000d68 <__aeabi_fmul+0x44>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fmul+0x92>
 8000db4:	e090      	b.n	8000ed8 <__aeabi_fmul+0x1b4>
 8000db6:	4652      	mov	r2, sl
 8000db8:	2301      	movs	r3, #1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	4692      	mov	sl, r2
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	e7db      	b.n	8000d7a <__aeabi_fmul+0x56>
 8000dc2:	464c      	mov	r4, r9
 8000dc4:	4658      	mov	r0, fp
 8000dc6:	0017      	movs	r7, r2
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d024      	beq.n	8000e16 <__aeabi_fmul+0xf2>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_fmul+0xae>
 8000dd0:	e0cf      	b.n	8000f72 <__aeabi_fmul+0x24e>
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2801      	cmp	r0, #1
 8000dd8:	d14d      	bne.n	8000e76 <__aeabi_fmul+0x152>
 8000dda:	0258      	lsls	r0, r3, #9
 8000ddc:	05d2      	lsls	r2, r2, #23
 8000dde:	0a40      	lsrs	r0, r0, #9
 8000de0:	07ff      	lsls	r7, r7, #31
 8000de2:	4310      	orrs	r0, r2
 8000de4:	4338      	orrs	r0, r7
 8000de6:	b003      	add	sp, #12
 8000de8:	bc3c      	pop	{r2, r3, r4, r5}
 8000dea:	4690      	mov	r8, r2
 8000dec:	4699      	mov	r9, r3
 8000dee:	46a2      	mov	sl, r4
 8000df0:	46ab      	mov	fp, r5
 8000df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d15b      	bne.n	8000eb0 <__aeabi_fmul+0x18c>
 8000df8:	2304      	movs	r3, #4
 8000dfa:	469a      	mov	sl, r3
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	2500      	movs	r5, #0
 8000e00:	469b      	mov	fp, r3
 8000e02:	e7aa      	b.n	8000d5a <__aeabi_fmul+0x36>
 8000e04:	35ff      	adds	r5, #255	; 0xff
 8000e06:	2c00      	cmp	r4, #0
 8000e08:	d160      	bne.n	8000ecc <__aeabi_fmul+0x1a8>
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	4692      	mov	sl, r2
 8000e12:	2002      	movs	r0, #2
 8000e14:	e7b1      	b.n	8000d7a <__aeabi_fmul+0x56>
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e7de      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	469c      	mov	ip, r3
 8000e22:	464b      	mov	r3, r9
 8000e24:	0426      	lsls	r6, r4, #16
 8000e26:	0c36      	lsrs	r6, r6, #16
 8000e28:	0418      	lsls	r0, r3, #16
 8000e2a:	4661      	mov	r1, ip
 8000e2c:	0033      	movs	r3, r6
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	4664      	mov	r4, ip
 8000e32:	0c00      	lsrs	r0, r0, #16
 8000e34:	4343      	muls	r3, r0
 8000e36:	434e      	muls	r6, r1
 8000e38:	4350      	muls	r0, r2
 8000e3a:	4354      	muls	r4, r2
 8000e3c:	1980      	adds	r0, r0, r6
 8000e3e:	0c1a      	lsrs	r2, r3, #16
 8000e40:	1812      	adds	r2, r2, r0
 8000e42:	4296      	cmp	r6, r2
 8000e44:	d903      	bls.n	8000e4e <__aeabi_fmul+0x12a>
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0249      	lsls	r1, r1, #9
 8000e4a:	468c      	mov	ip, r1
 8000e4c:	4464      	add	r4, ip
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	0c1b      	lsrs	r3, r3, #16
 8000e52:	0410      	lsls	r0, r2, #16
 8000e54:	18c0      	adds	r0, r0, r3
 8000e56:	0183      	lsls	r3, r0, #6
 8000e58:	1e5e      	subs	r6, r3, #1
 8000e5a:	41b3      	sbcs	r3, r6
 8000e5c:	0e80      	lsrs	r0, r0, #26
 8000e5e:	4318      	orrs	r0, r3
 8000e60:	0c13      	lsrs	r3, r2, #16
 8000e62:	191b      	adds	r3, r3, r4
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	4303      	orrs	r3, r0
 8000e68:	001c      	movs	r4, r3
 8000e6a:	0123      	lsls	r3, r4, #4
 8000e6c:	d579      	bpl.n	8000f62 <__aeabi_fmul+0x23e>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	0862      	lsrs	r2, r4, #1
 8000e72:	401c      	ands	r4, r3
 8000e74:	4314      	orrs	r4, r2
 8000e76:	9a01      	ldr	r2, [sp, #4]
 8000e78:	327f      	adds	r2, #127	; 0x7f
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	dd4d      	ble.n	8000f1a <__aeabi_fmul+0x1f6>
 8000e7e:	0763      	lsls	r3, r4, #29
 8000e80:	d004      	beq.n	8000e8c <__aeabi_fmul+0x168>
 8000e82:	230f      	movs	r3, #15
 8000e84:	4023      	ands	r3, r4
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fmul+0x168>
 8000e8a:	3404      	adds	r4, #4
 8000e8c:	0123      	lsls	r3, r4, #4
 8000e8e:	d503      	bpl.n	8000e98 <__aeabi_fmul+0x174>
 8000e90:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <__aeabi_fmul+0x260>)
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	401c      	ands	r4, r3
 8000e96:	3280      	adds	r2, #128	; 0x80
 8000e98:	2afe      	cmp	r2, #254	; 0xfe
 8000e9a:	dcbc      	bgt.n	8000e16 <__aeabi_fmul+0xf2>
 8000e9c:	01a3      	lsls	r3, r4, #6
 8000e9e:	0a5b      	lsrs	r3, r3, #9
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	e79a      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	3b09      	subs	r3, #9
 8000eaa:	25ff      	movs	r5, #255	; 0xff
 8000eac:	469b      	mov	fp, r3
 8000eae:	e754      	b.n	8000d5a <__aeabi_fmul+0x36>
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 fa97 	bl	80013e4 <__clzsi2>
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	1f43      	subs	r3, r0, #5
 8000eba:	2576      	movs	r5, #118	; 0x76
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	426d      	negs	r5, r5
 8000ec2:	4691      	mov	r9, r2
 8000ec4:	1a2d      	subs	r5, r5, r0
 8000ec6:	469a      	mov	sl, r3
 8000ec8:	469b      	mov	fp, r3
 8000eca:	e746      	b.n	8000d5a <__aeabi_fmul+0x36>
 8000ecc:	4652      	mov	r2, sl
 8000ece:	2303      	movs	r3, #3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	4692      	mov	sl, r2
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	e750      	b.n	8000d7a <__aeabi_fmul+0x56>
 8000ed8:	0020      	movs	r0, r4
 8000eda:	f000 fa83 	bl	80013e4 <__clzsi2>
 8000ede:	1f43      	subs	r3, r0, #5
 8000ee0:	1a2d      	subs	r5, r5, r0
 8000ee2:	409c      	lsls	r4, r3
 8000ee4:	3d76      	subs	r5, #118	; 0x76
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	e747      	b.n	8000d7a <__aeabi_fmul+0x56>
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	2700      	movs	r7, #0
 8000eee:	03db      	lsls	r3, r3, #15
 8000ef0:	22ff      	movs	r2, #255	; 0xff
 8000ef2:	e772      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	e766      	b.n	8000dc6 <__aeabi_fmul+0xa2>
 8000ef8:	464c      	mov	r4, r9
 8000efa:	0032      	movs	r2, r6
 8000efc:	4658      	mov	r0, fp
 8000efe:	e762      	b.n	8000dc6 <__aeabi_fmul+0xa2>
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	464a      	mov	r2, r9
 8000f04:	03db      	lsls	r3, r3, #15
 8000f06:	421a      	tst	r2, r3
 8000f08:	d022      	beq.n	8000f50 <__aeabi_fmul+0x22c>
 8000f0a:	421c      	tst	r4, r3
 8000f0c:	d120      	bne.n	8000f50 <__aeabi_fmul+0x22c>
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	0a5b      	lsrs	r3, r3, #9
 8000f14:	4647      	mov	r7, r8
 8000f16:	22ff      	movs	r2, #255	; 0xff
 8000f18:	e75f      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	1a9a      	subs	r2, r3, r2
 8000f1e:	2a1b      	cmp	r2, #27
 8000f20:	dc21      	bgt.n	8000f66 <__aeabi_fmul+0x242>
 8000f22:	0023      	movs	r3, r4
 8000f24:	9901      	ldr	r1, [sp, #4]
 8000f26:	40d3      	lsrs	r3, r2
 8000f28:	319e      	adds	r1, #158	; 0x9e
 8000f2a:	408c      	lsls	r4, r1
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	0023      	movs	r3, r4
 8000f30:	1e5c      	subs	r4, r3, #1
 8000f32:	41a3      	sbcs	r3, r4
 8000f34:	4313      	orrs	r3, r2
 8000f36:	075a      	lsls	r2, r3, #29
 8000f38:	d004      	beq.n	8000f44 <__aeabi_fmul+0x220>
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	2a04      	cmp	r2, #4
 8000f40:	d000      	beq.n	8000f44 <__aeabi_fmul+0x220>
 8000f42:	3304      	adds	r3, #4
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	d411      	bmi.n	8000f6c <__aeabi_fmul+0x248>
 8000f48:	019b      	lsls	r3, r3, #6
 8000f4a:	0a5b      	lsrs	r3, r3, #9
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	e744      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	464a      	mov	r2, r9
 8000f54:	03db      	lsls	r3, r3, #15
 8000f56:	4313      	orrs	r3, r2
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	0a5b      	lsrs	r3, r3, #9
 8000f5c:	0037      	movs	r7, r6
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	e73b      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000f62:	9501      	str	r5, [sp, #4]
 8000f64:	e787      	b.n	8000e76 <__aeabi_fmul+0x152>
 8000f66:	2200      	movs	r2, #0
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e736      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e733      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	03db      	lsls	r3, r3, #15
 8000f76:	4323      	orrs	r3, r4
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	0a5b      	lsrs	r3, r3, #9
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	e72c      	b.n	8000dda <__aeabi_fmul+0xb6>
 8000f80:	080145e4 	.word	0x080145e4
 8000f84:	f7ffffff 	.word	0xf7ffffff

08000f88 <__aeabi_fsub>:
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	4647      	mov	r7, r8
 8000f8c:	46ce      	mov	lr, r9
 8000f8e:	0044      	lsls	r4, r0, #1
 8000f90:	0fc2      	lsrs	r2, r0, #31
 8000f92:	b580      	push	{r7, lr}
 8000f94:	0247      	lsls	r7, r0, #9
 8000f96:	0248      	lsls	r0, r1, #9
 8000f98:	0a40      	lsrs	r0, r0, #9
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	4666      	mov	r6, ip
 8000f9e:	0048      	lsls	r0, r1, #1
 8000fa0:	0a7f      	lsrs	r7, r7, #9
 8000fa2:	0e24      	lsrs	r4, r4, #24
 8000fa4:	00f6      	lsls	r6, r6, #3
 8000fa6:	0025      	movs	r5, r4
 8000fa8:	4690      	mov	r8, r2
 8000faa:	00fb      	lsls	r3, r7, #3
 8000fac:	0e00      	lsrs	r0, r0, #24
 8000fae:	0fc9      	lsrs	r1, r1, #31
 8000fb0:	46b1      	mov	r9, r6
 8000fb2:	28ff      	cmp	r0, #255	; 0xff
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x30>
 8000fb6:	e085      	b.n	80010c4 <__aeabi_fsub+0x13c>
 8000fb8:	2601      	movs	r6, #1
 8000fba:	4071      	eors	r1, r6
 8000fbc:	1a26      	subs	r6, r4, r0
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d057      	beq.n	8001072 <__aeabi_fsub+0xea>
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	dd43      	ble.n	800104e <__aeabi_fsub+0xc6>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_fsub+0x44>
 8000fca:	e07f      	b.n	80010cc <__aeabi_fsub+0x144>
 8000fcc:	4649      	mov	r1, r9
 8000fce:	2900      	cmp	r1, #0
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fsub+0x4c>
 8000fd2:	e0aa      	b.n	800112a <__aeabi_fsub+0x1a2>
 8000fd4:	3e01      	subs	r6, #1
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fsub+0x54>
 8000fda:	e0f7      	b.n	80011cc <__aeabi_fsub+0x244>
 8000fdc:	1a5b      	subs	r3, r3, r1
 8000fde:	015a      	lsls	r2, r3, #5
 8000fe0:	d400      	bmi.n	8000fe4 <__aeabi_fsub+0x5c>
 8000fe2:	e08b      	b.n	80010fc <__aeabi_fsub+0x174>
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	099c      	lsrs	r4, r3, #6
 8000fe8:	0020      	movs	r0, r4
 8000fea:	f000 f9fb 	bl	80013e4 <__clzsi2>
 8000fee:	3805      	subs	r0, #5
 8000ff0:	4084      	lsls	r4, r0
 8000ff2:	4285      	cmp	r5, r0
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_fsub+0x70>
 8000ff6:	e0d3      	b.n	80011a0 <__aeabi_fsub+0x218>
 8000ff8:	1b45      	subs	r5, r0, r5
 8000ffa:	0023      	movs	r3, r4
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	3501      	adds	r5, #1
 8001000:	40eb      	lsrs	r3, r5
 8001002:	1b45      	subs	r5, r0, r5
 8001004:	40ac      	lsls	r4, r5
 8001006:	1e62      	subs	r2, r4, #1
 8001008:	4194      	sbcs	r4, r2
 800100a:	4323      	orrs	r3, r4
 800100c:	2407      	movs	r4, #7
 800100e:	2500      	movs	r5, #0
 8001010:	401c      	ands	r4, r3
 8001012:	2201      	movs	r2, #1
 8001014:	4641      	mov	r1, r8
 8001016:	400a      	ands	r2, r1
 8001018:	2c00      	cmp	r4, #0
 800101a:	d004      	beq.n	8001026 <__aeabi_fsub+0x9e>
 800101c:	210f      	movs	r1, #15
 800101e:	4019      	ands	r1, r3
 8001020:	2904      	cmp	r1, #4
 8001022:	d000      	beq.n	8001026 <__aeabi_fsub+0x9e>
 8001024:	3304      	adds	r3, #4
 8001026:	0159      	lsls	r1, r3, #5
 8001028:	d400      	bmi.n	800102c <__aeabi_fsub+0xa4>
 800102a:	e080      	b.n	800112e <__aeabi_fsub+0x1a6>
 800102c:	3501      	adds	r5, #1
 800102e:	b2ec      	uxtb	r4, r5
 8001030:	2dff      	cmp	r5, #255	; 0xff
 8001032:	d000      	beq.n	8001036 <__aeabi_fsub+0xae>
 8001034:	e0a3      	b.n	800117e <__aeabi_fsub+0x1f6>
 8001036:	24ff      	movs	r4, #255	; 0xff
 8001038:	2300      	movs	r3, #0
 800103a:	025b      	lsls	r3, r3, #9
 800103c:	05e4      	lsls	r4, r4, #23
 800103e:	0a58      	lsrs	r0, r3, #9
 8001040:	07d2      	lsls	r2, r2, #31
 8001042:	4320      	orrs	r0, r4
 8001044:	4310      	orrs	r0, r2
 8001046:	bc0c      	pop	{r2, r3}
 8001048:	4690      	mov	r8, r2
 800104a:	4699      	mov	r9, r3
 800104c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104e:	2e00      	cmp	r6, #0
 8001050:	d174      	bne.n	800113c <__aeabi_fsub+0x1b4>
 8001052:	1c60      	adds	r0, r4, #1
 8001054:	b2c0      	uxtb	r0, r0
 8001056:	2801      	cmp	r0, #1
 8001058:	dc00      	bgt.n	800105c <__aeabi_fsub+0xd4>
 800105a:	e0a7      	b.n	80011ac <__aeabi_fsub+0x224>
 800105c:	464a      	mov	r2, r9
 800105e:	1a9c      	subs	r4, r3, r2
 8001060:	0162      	lsls	r2, r4, #5
 8001062:	d500      	bpl.n	8001066 <__aeabi_fsub+0xde>
 8001064:	e0b6      	b.n	80011d4 <__aeabi_fsub+0x24c>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d1be      	bne.n	8000fe8 <__aeabi_fsub+0x60>
 800106a:	2200      	movs	r2, #0
 800106c:	2400      	movs	r4, #0
 800106e:	2300      	movs	r3, #0
 8001070:	e7e3      	b.n	800103a <__aeabi_fsub+0xb2>
 8001072:	2e00      	cmp	r6, #0
 8001074:	dc00      	bgt.n	8001078 <__aeabi_fsub+0xf0>
 8001076:	e085      	b.n	8001184 <__aeabi_fsub+0x1fc>
 8001078:	2800      	cmp	r0, #0
 800107a:	d046      	beq.n	800110a <__aeabi_fsub+0x182>
 800107c:	2cff      	cmp	r4, #255	; 0xff
 800107e:	d049      	beq.n	8001114 <__aeabi_fsub+0x18c>
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	4648      	mov	r0, r9
 8001084:	04d2      	lsls	r2, r2, #19
 8001086:	4310      	orrs	r0, r2
 8001088:	4681      	mov	r9, r0
 800108a:	2201      	movs	r2, #1
 800108c:	2e1b      	cmp	r6, #27
 800108e:	dc09      	bgt.n	80010a4 <__aeabi_fsub+0x11c>
 8001090:	2020      	movs	r0, #32
 8001092:	464c      	mov	r4, r9
 8001094:	1b80      	subs	r0, r0, r6
 8001096:	4084      	lsls	r4, r0
 8001098:	464a      	mov	r2, r9
 800109a:	0020      	movs	r0, r4
 800109c:	40f2      	lsrs	r2, r6
 800109e:	1e44      	subs	r4, r0, #1
 80010a0:	41a0      	sbcs	r0, r4
 80010a2:	4302      	orrs	r2, r0
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	d528      	bpl.n	80010fc <__aeabi_fsub+0x174>
 80010aa:	3501      	adds	r5, #1
 80010ac:	2dff      	cmp	r5, #255	; 0xff
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x12a>
 80010b0:	e0a8      	b.n	8001204 <__aeabi_fsub+0x27c>
 80010b2:	2201      	movs	r2, #1
 80010b4:	2407      	movs	r4, #7
 80010b6:	4994      	ldr	r1, [pc, #592]	; (8001308 <__aeabi_fsub+0x380>)
 80010b8:	401a      	ands	r2, r3
 80010ba:	085b      	lsrs	r3, r3, #1
 80010bc:	400b      	ands	r3, r1
 80010be:	4313      	orrs	r3, r2
 80010c0:	401c      	ands	r4, r3
 80010c2:	e7a6      	b.n	8001012 <__aeabi_fsub+0x8a>
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	d000      	beq.n	80010ca <__aeabi_fsub+0x142>
 80010c8:	e778      	b.n	8000fbc <__aeabi_fsub+0x34>
 80010ca:	e775      	b.n	8000fb8 <__aeabi_fsub+0x30>
 80010cc:	2cff      	cmp	r4, #255	; 0xff
 80010ce:	d054      	beq.n	800117a <__aeabi_fsub+0x1f2>
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	4649      	mov	r1, r9
 80010d4:	04d2      	lsls	r2, r2, #19
 80010d6:	4311      	orrs	r1, r2
 80010d8:	4689      	mov	r9, r1
 80010da:	2201      	movs	r2, #1
 80010dc:	2e1b      	cmp	r6, #27
 80010de:	dc09      	bgt.n	80010f4 <__aeabi_fsub+0x16c>
 80010e0:	2120      	movs	r1, #32
 80010e2:	4648      	mov	r0, r9
 80010e4:	1b89      	subs	r1, r1, r6
 80010e6:	4088      	lsls	r0, r1
 80010e8:	464a      	mov	r2, r9
 80010ea:	0001      	movs	r1, r0
 80010ec:	40f2      	lsrs	r2, r6
 80010ee:	1e48      	subs	r0, r1, #1
 80010f0:	4181      	sbcs	r1, r0
 80010f2:	430a      	orrs	r2, r1
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	015a      	lsls	r2, r3, #5
 80010f8:	d500      	bpl.n	80010fc <__aeabi_fsub+0x174>
 80010fa:	e773      	b.n	8000fe4 <__aeabi_fsub+0x5c>
 80010fc:	2201      	movs	r2, #1
 80010fe:	4641      	mov	r1, r8
 8001100:	400a      	ands	r2, r1
 8001102:	0759      	lsls	r1, r3, #29
 8001104:	d000      	beq.n	8001108 <__aeabi_fsub+0x180>
 8001106:	e789      	b.n	800101c <__aeabi_fsub+0x94>
 8001108:	e011      	b.n	800112e <__aeabi_fsub+0x1a6>
 800110a:	4648      	mov	r0, r9
 800110c:	2800      	cmp	r0, #0
 800110e:	d158      	bne.n	80011c2 <__aeabi_fsub+0x23a>
 8001110:	2cff      	cmp	r4, #255	; 0xff
 8001112:	d10c      	bne.n	800112e <__aeabi_fsub+0x1a6>
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x194>
 800111a:	e78c      	b.n	8001036 <__aeabi_fsub+0xae>
 800111c:	2080      	movs	r0, #128	; 0x80
 800111e:	03c0      	lsls	r0, r0, #15
 8001120:	4303      	orrs	r3, r0
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	0a5b      	lsrs	r3, r3, #9
 8001126:	24ff      	movs	r4, #255	; 0xff
 8001128:	e787      	b.n	800103a <__aeabi_fsub+0xb2>
 800112a:	2cff      	cmp	r4, #255	; 0xff
 800112c:	d025      	beq.n	800117a <__aeabi_fsub+0x1f2>
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	2dff      	cmp	r5, #255	; 0xff
 8001132:	d0f0      	beq.n	8001116 <__aeabi_fsub+0x18e>
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	0a5b      	lsrs	r3, r3, #9
 8001138:	b2ec      	uxtb	r4, r5
 800113a:	e77e      	b.n	800103a <__aeabi_fsub+0xb2>
 800113c:	2c00      	cmp	r4, #0
 800113e:	d04d      	beq.n	80011dc <__aeabi_fsub+0x254>
 8001140:	28ff      	cmp	r0, #255	; 0xff
 8001142:	d018      	beq.n	8001176 <__aeabi_fsub+0x1ee>
 8001144:	2480      	movs	r4, #128	; 0x80
 8001146:	04e4      	lsls	r4, r4, #19
 8001148:	4272      	negs	r2, r6
 800114a:	4323      	orrs	r3, r4
 800114c:	2a1b      	cmp	r2, #27
 800114e:	dd00      	ble.n	8001152 <__aeabi_fsub+0x1ca>
 8001150:	e0c4      	b.n	80012dc <__aeabi_fsub+0x354>
 8001152:	001c      	movs	r4, r3
 8001154:	2520      	movs	r5, #32
 8001156:	40d4      	lsrs	r4, r2
 8001158:	1aaa      	subs	r2, r5, r2
 800115a:	4093      	lsls	r3, r2
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	4193      	sbcs	r3, r2
 8001160:	4323      	orrs	r3, r4
 8001162:	464a      	mov	r2, r9
 8001164:	0005      	movs	r5, r0
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	4688      	mov	r8, r1
 800116a:	e738      	b.n	8000fde <__aeabi_fsub+0x56>
 800116c:	1c72      	adds	r2, r6, #1
 800116e:	d0f8      	beq.n	8001162 <__aeabi_fsub+0x1da>
 8001170:	43f2      	mvns	r2, r6
 8001172:	28ff      	cmp	r0, #255	; 0xff
 8001174:	d1ea      	bne.n	800114c <__aeabi_fsub+0x1c4>
 8001176:	000a      	movs	r2, r1
 8001178:	464b      	mov	r3, r9
 800117a:	25ff      	movs	r5, #255	; 0xff
 800117c:	e7d7      	b.n	800112e <__aeabi_fsub+0x1a6>
 800117e:	019b      	lsls	r3, r3, #6
 8001180:	0a5b      	lsrs	r3, r3, #9
 8001182:	e75a      	b.n	800103a <__aeabi_fsub+0xb2>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d141      	bne.n	800120c <__aeabi_fsub+0x284>
 8001188:	1c65      	adds	r5, r4, #1
 800118a:	b2e9      	uxtb	r1, r5
 800118c:	2901      	cmp	r1, #1
 800118e:	dd45      	ble.n	800121c <__aeabi_fsub+0x294>
 8001190:	2dff      	cmp	r5, #255	; 0xff
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0x20e>
 8001194:	e74f      	b.n	8001036 <__aeabi_fsub+0xae>
 8001196:	2407      	movs	r4, #7
 8001198:	444b      	add	r3, r9
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	401c      	ands	r4, r3
 800119e:	e738      	b.n	8001012 <__aeabi_fsub+0x8a>
 80011a0:	2207      	movs	r2, #7
 80011a2:	4b5a      	ldr	r3, [pc, #360]	; (800130c <__aeabi_fsub+0x384>)
 80011a4:	1a2d      	subs	r5, r5, r0
 80011a6:	4023      	ands	r3, r4
 80011a8:	4014      	ands	r4, r2
 80011aa:	e732      	b.n	8001012 <__aeabi_fsub+0x8a>
 80011ac:	2c00      	cmp	r4, #0
 80011ae:	d11d      	bne.n	80011ec <__aeabi_fsub+0x264>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d17a      	bne.n	80012aa <__aeabi_fsub+0x322>
 80011b4:	464b      	mov	r3, r9
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x234>
 80011ba:	e091      	b.n	80012e0 <__aeabi_fsub+0x358>
 80011bc:	000a      	movs	r2, r1
 80011be:	2500      	movs	r5, #0
 80011c0:	e7b5      	b.n	800112e <__aeabi_fsub+0x1a6>
 80011c2:	3e01      	subs	r6, #1
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d119      	bne.n	80011fc <__aeabi_fsub+0x274>
 80011c8:	444b      	add	r3, r9
 80011ca:	e76c      	b.n	80010a6 <__aeabi_fsub+0x11e>
 80011cc:	2cff      	cmp	r4, #255	; 0xff
 80011ce:	d184      	bne.n	80010da <__aeabi_fsub+0x152>
 80011d0:	25ff      	movs	r5, #255	; 0xff
 80011d2:	e7ac      	b.n	800112e <__aeabi_fsub+0x1a6>
 80011d4:	464a      	mov	r2, r9
 80011d6:	4688      	mov	r8, r1
 80011d8:	1ad4      	subs	r4, r2, r3
 80011da:	e705      	b.n	8000fe8 <__aeabi_fsub+0x60>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1c5      	bne.n	800116c <__aeabi_fsub+0x1e4>
 80011e0:	000a      	movs	r2, r1
 80011e2:	28ff      	cmp	r0, #255	; 0xff
 80011e4:	d0c8      	beq.n	8001178 <__aeabi_fsub+0x1f0>
 80011e6:	0005      	movs	r5, r0
 80011e8:	464b      	mov	r3, r9
 80011ea:	e7a0      	b.n	800112e <__aeabi_fsub+0x1a6>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d149      	bne.n	8001284 <__aeabi_fsub+0x2fc>
 80011f0:	464b      	mov	r3, r9
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d077      	beq.n	80012e6 <__aeabi_fsub+0x35e>
 80011f6:	000a      	movs	r2, r1
 80011f8:	25ff      	movs	r5, #255	; 0xff
 80011fa:	e798      	b.n	800112e <__aeabi_fsub+0x1a6>
 80011fc:	2cff      	cmp	r4, #255	; 0xff
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x27a>
 8001200:	e743      	b.n	800108a <__aeabi_fsub+0x102>
 8001202:	e787      	b.n	8001114 <__aeabi_fsub+0x18c>
 8001204:	000a      	movs	r2, r1
 8001206:	24ff      	movs	r4, #255	; 0xff
 8001208:	2300      	movs	r3, #0
 800120a:	e716      	b.n	800103a <__aeabi_fsub+0xb2>
 800120c:	2c00      	cmp	r4, #0
 800120e:	d115      	bne.n	800123c <__aeabi_fsub+0x2b4>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d157      	bne.n	80012c4 <__aeabi_fsub+0x33c>
 8001214:	28ff      	cmp	r0, #255	; 0xff
 8001216:	d1e6      	bne.n	80011e6 <__aeabi_fsub+0x25e>
 8001218:	464b      	mov	r3, r9
 800121a:	e77b      	b.n	8001114 <__aeabi_fsub+0x18c>
 800121c:	2c00      	cmp	r4, #0
 800121e:	d120      	bne.n	8001262 <__aeabi_fsub+0x2da>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d057      	beq.n	80012d4 <__aeabi_fsub+0x34c>
 8001224:	4649      	mov	r1, r9
 8001226:	2900      	cmp	r1, #0
 8001228:	d053      	beq.n	80012d2 <__aeabi_fsub+0x34a>
 800122a:	444b      	add	r3, r9
 800122c:	015a      	lsls	r2, r3, #5
 800122e:	d568      	bpl.n	8001302 <__aeabi_fsub+0x37a>
 8001230:	2407      	movs	r4, #7
 8001232:	4a36      	ldr	r2, [pc, #216]	; (800130c <__aeabi_fsub+0x384>)
 8001234:	401c      	ands	r4, r3
 8001236:	2501      	movs	r5, #1
 8001238:	4013      	ands	r3, r2
 800123a:	e6ea      	b.n	8001012 <__aeabi_fsub+0x8a>
 800123c:	28ff      	cmp	r0, #255	; 0xff
 800123e:	d0eb      	beq.n	8001218 <__aeabi_fsub+0x290>
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	04d2      	lsls	r2, r2, #19
 8001244:	4276      	negs	r6, r6
 8001246:	4313      	orrs	r3, r2
 8001248:	2e1b      	cmp	r6, #27
 800124a:	dc53      	bgt.n	80012f4 <__aeabi_fsub+0x36c>
 800124c:	2520      	movs	r5, #32
 800124e:	1bad      	subs	r5, r5, r6
 8001250:	001a      	movs	r2, r3
 8001252:	40ab      	lsls	r3, r5
 8001254:	40f2      	lsrs	r2, r6
 8001256:	1e5c      	subs	r4, r3, #1
 8001258:	41a3      	sbcs	r3, r4
 800125a:	4313      	orrs	r3, r2
 800125c:	444b      	add	r3, r9
 800125e:	0005      	movs	r5, r0
 8001260:	e721      	b.n	80010a6 <__aeabi_fsub+0x11e>
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0d8      	beq.n	8001218 <__aeabi_fsub+0x290>
 8001266:	4649      	mov	r1, r9
 8001268:	2900      	cmp	r1, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x2e6>
 800126c:	e752      	b.n	8001114 <__aeabi_fsub+0x18c>
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	03c9      	lsls	r1, r1, #15
 8001272:	420f      	tst	r7, r1
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x2f0>
 8001276:	e74d      	b.n	8001114 <__aeabi_fsub+0x18c>
 8001278:	4660      	mov	r0, ip
 800127a:	4208      	tst	r0, r1
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x2f8>
 800127e:	e749      	b.n	8001114 <__aeabi_fsub+0x18c>
 8001280:	464b      	mov	r3, r9
 8001282:	e747      	b.n	8001114 <__aeabi_fsub+0x18c>
 8001284:	4648      	mov	r0, r9
 8001286:	25ff      	movs	r5, #255	; 0xff
 8001288:	2800      	cmp	r0, #0
 800128a:	d100      	bne.n	800128e <__aeabi_fsub+0x306>
 800128c:	e74f      	b.n	800112e <__aeabi_fsub+0x1a6>
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	03d2      	lsls	r2, r2, #15
 8001292:	4217      	tst	r7, r2
 8001294:	d004      	beq.n	80012a0 <__aeabi_fsub+0x318>
 8001296:	4660      	mov	r0, ip
 8001298:	4210      	tst	r0, r2
 800129a:	d101      	bne.n	80012a0 <__aeabi_fsub+0x318>
 800129c:	464b      	mov	r3, r9
 800129e:	4688      	mov	r8, r1
 80012a0:	2201      	movs	r2, #1
 80012a2:	4641      	mov	r1, r8
 80012a4:	25ff      	movs	r5, #255	; 0xff
 80012a6:	400a      	ands	r2, r1
 80012a8:	e741      	b.n	800112e <__aeabi_fsub+0x1a6>
 80012aa:	4648      	mov	r0, r9
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d01f      	beq.n	80012f0 <__aeabi_fsub+0x368>
 80012b0:	1a1a      	subs	r2, r3, r0
 80012b2:	0150      	lsls	r0, r2, #5
 80012b4:	d520      	bpl.n	80012f8 <__aeabi_fsub+0x370>
 80012b6:	464a      	mov	r2, r9
 80012b8:	2407      	movs	r4, #7
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	401c      	ands	r4, r3
 80012be:	4688      	mov	r8, r1
 80012c0:	2500      	movs	r5, #0
 80012c2:	e6a6      	b.n	8001012 <__aeabi_fsub+0x8a>
 80012c4:	1c74      	adds	r4, r6, #1
 80012c6:	d0c9      	beq.n	800125c <__aeabi_fsub+0x2d4>
 80012c8:	43f6      	mvns	r6, r6
 80012ca:	28ff      	cmp	r0, #255	; 0xff
 80012cc:	d1bc      	bne.n	8001248 <__aeabi_fsub+0x2c0>
 80012ce:	464b      	mov	r3, r9
 80012d0:	e720      	b.n	8001114 <__aeabi_fsub+0x18c>
 80012d2:	4699      	mov	r9, r3
 80012d4:	464b      	mov	r3, r9
 80012d6:	2500      	movs	r5, #0
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	e72b      	b.n	8001134 <__aeabi_fsub+0x1ac>
 80012dc:	2301      	movs	r3, #1
 80012de:	e740      	b.n	8001162 <__aeabi_fsub+0x1da>
 80012e0:	2200      	movs	r2, #0
 80012e2:	2300      	movs	r3, #0
 80012e4:	e6a9      	b.n	800103a <__aeabi_fsub+0xb2>
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	2200      	movs	r2, #0
 80012ea:	03db      	lsls	r3, r3, #15
 80012ec:	24ff      	movs	r4, #255	; 0xff
 80012ee:	e6a4      	b.n	800103a <__aeabi_fsub+0xb2>
 80012f0:	2500      	movs	r5, #0
 80012f2:	e71c      	b.n	800112e <__aeabi_fsub+0x1a6>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e7b1      	b.n	800125c <__aeabi_fsub+0x2d4>
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	d0f1      	beq.n	80012e0 <__aeabi_fsub+0x358>
 80012fc:	0013      	movs	r3, r2
 80012fe:	2500      	movs	r5, #0
 8001300:	e6fc      	b.n	80010fc <__aeabi_fsub+0x174>
 8001302:	2500      	movs	r5, #0
 8001304:	e6fa      	b.n	80010fc <__aeabi_fsub+0x174>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	7dffffff 	.word	0x7dffffff
 800130c:	fbffffff 	.word	0xfbffffff

08001310 <__aeabi_f2iz>:
 8001310:	0241      	lsls	r1, r0, #9
 8001312:	0042      	lsls	r2, r0, #1
 8001314:	0fc3      	lsrs	r3, r0, #31
 8001316:	0a49      	lsrs	r1, r1, #9
 8001318:	0e12      	lsrs	r2, r2, #24
 800131a:	2000      	movs	r0, #0
 800131c:	2a7e      	cmp	r2, #126	; 0x7e
 800131e:	d90d      	bls.n	800133c <__aeabi_f2iz+0x2c>
 8001320:	2a9d      	cmp	r2, #157	; 0x9d
 8001322:	d80c      	bhi.n	800133e <__aeabi_f2iz+0x2e>
 8001324:	2080      	movs	r0, #128	; 0x80
 8001326:	0400      	lsls	r0, r0, #16
 8001328:	4301      	orrs	r1, r0
 800132a:	2a95      	cmp	r2, #149	; 0x95
 800132c:	dc0a      	bgt.n	8001344 <__aeabi_f2iz+0x34>
 800132e:	2096      	movs	r0, #150	; 0x96
 8001330:	1a82      	subs	r2, r0, r2
 8001332:	40d1      	lsrs	r1, r2
 8001334:	4248      	negs	r0, r1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d100      	bne.n	800133c <__aeabi_f2iz+0x2c>
 800133a:	0008      	movs	r0, r1
 800133c:	4770      	bx	lr
 800133e:	4a03      	ldr	r2, [pc, #12]	; (800134c <__aeabi_f2iz+0x3c>)
 8001340:	1898      	adds	r0, r3, r2
 8001342:	e7fb      	b.n	800133c <__aeabi_f2iz+0x2c>
 8001344:	3a96      	subs	r2, #150	; 0x96
 8001346:	4091      	lsls	r1, r2
 8001348:	e7f4      	b.n	8001334 <__aeabi_f2iz+0x24>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	7fffffff 	.word	0x7fffffff

08001350 <__aeabi_i2f>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	2800      	cmp	r0, #0
 8001354:	d03d      	beq.n	80013d2 <__aeabi_i2f+0x82>
 8001356:	17c3      	asrs	r3, r0, #31
 8001358:	18c5      	adds	r5, r0, r3
 800135a:	405d      	eors	r5, r3
 800135c:	0fc4      	lsrs	r4, r0, #31
 800135e:	0028      	movs	r0, r5
 8001360:	f000 f840 	bl	80013e4 <__clzsi2>
 8001364:	229e      	movs	r2, #158	; 0x9e
 8001366:	1a12      	subs	r2, r2, r0
 8001368:	2a96      	cmp	r2, #150	; 0x96
 800136a:	dc07      	bgt.n	800137c <__aeabi_i2f+0x2c>
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	2808      	cmp	r0, #8
 8001370:	dd33      	ble.n	80013da <__aeabi_i2f+0x8a>
 8001372:	3808      	subs	r0, #8
 8001374:	4085      	lsls	r5, r0
 8001376:	0268      	lsls	r0, r5, #9
 8001378:	0a40      	lsrs	r0, r0, #9
 800137a:	e023      	b.n	80013c4 <__aeabi_i2f+0x74>
 800137c:	2a99      	cmp	r2, #153	; 0x99
 800137e:	dd0b      	ble.n	8001398 <__aeabi_i2f+0x48>
 8001380:	2305      	movs	r3, #5
 8001382:	0029      	movs	r1, r5
 8001384:	1a1b      	subs	r3, r3, r0
 8001386:	40d9      	lsrs	r1, r3
 8001388:	0003      	movs	r3, r0
 800138a:	331b      	adds	r3, #27
 800138c:	409d      	lsls	r5, r3
 800138e:	002b      	movs	r3, r5
 8001390:	1e5d      	subs	r5, r3, #1
 8001392:	41ab      	sbcs	r3, r5
 8001394:	4319      	orrs	r1, r3
 8001396:	000d      	movs	r5, r1
 8001398:	2805      	cmp	r0, #5
 800139a:	dd01      	ble.n	80013a0 <__aeabi_i2f+0x50>
 800139c:	1f43      	subs	r3, r0, #5
 800139e:	409d      	lsls	r5, r3
 80013a0:	002b      	movs	r3, r5
 80013a2:	490f      	ldr	r1, [pc, #60]	; (80013e0 <__aeabi_i2f+0x90>)
 80013a4:	400b      	ands	r3, r1
 80013a6:	076e      	lsls	r6, r5, #29
 80013a8:	d009      	beq.n	80013be <__aeabi_i2f+0x6e>
 80013aa:	260f      	movs	r6, #15
 80013ac:	4035      	ands	r5, r6
 80013ae:	2d04      	cmp	r5, #4
 80013b0:	d005      	beq.n	80013be <__aeabi_i2f+0x6e>
 80013b2:	3304      	adds	r3, #4
 80013b4:	015d      	lsls	r5, r3, #5
 80013b6:	d502      	bpl.n	80013be <__aeabi_i2f+0x6e>
 80013b8:	229f      	movs	r2, #159	; 0x9f
 80013ba:	400b      	ands	r3, r1
 80013bc:	1a12      	subs	r2, r2, r0
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	0a58      	lsrs	r0, r3, #9
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	0240      	lsls	r0, r0, #9
 80013c6:	05d2      	lsls	r2, r2, #23
 80013c8:	0a40      	lsrs	r0, r0, #9
 80013ca:	07e4      	lsls	r4, r4, #31
 80013cc:	4310      	orrs	r0, r2
 80013ce:	4320      	orrs	r0, r4
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
 80013d2:	2400      	movs	r4, #0
 80013d4:	2200      	movs	r2, #0
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7f4      	b.n	80013c4 <__aeabi_i2f+0x74>
 80013da:	0268      	lsls	r0, r5, #9
 80013dc:	0a40      	lsrs	r0, r0, #9
 80013de:	e7f1      	b.n	80013c4 <__aeabi_i2f+0x74>
 80013e0:	fbffffff 	.word	0xfbffffff

080013e4 <__clzsi2>:
 80013e4:	211c      	movs	r1, #28
 80013e6:	2301      	movs	r3, #1
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	4298      	cmp	r0, r3
 80013ec:	d301      	bcc.n	80013f2 <__clzsi2+0xe>
 80013ee:	0c00      	lsrs	r0, r0, #16
 80013f0:	3910      	subs	r1, #16
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	4298      	cmp	r0, r3
 80013f6:	d301      	bcc.n	80013fc <__clzsi2+0x18>
 80013f8:	0a00      	lsrs	r0, r0, #8
 80013fa:	3908      	subs	r1, #8
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	4298      	cmp	r0, r3
 8001400:	d301      	bcc.n	8001406 <__clzsi2+0x22>
 8001402:	0900      	lsrs	r0, r0, #4
 8001404:	3904      	subs	r1, #4
 8001406:	a202      	add	r2, pc, #8	; (adr r2, 8001410 <__clzsi2+0x2c>)
 8001408:	5c10      	ldrb	r0, [r2, r0]
 800140a:	1840      	adds	r0, r0, r1
 800140c:	4770      	bx	lr
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	02020304 	.word	0x02020304
 8001414:	01010101 	.word	0x01010101
	...

08001420 <__clzdi2>:
 8001420:	b510      	push	{r4, lr}
 8001422:	2900      	cmp	r1, #0
 8001424:	d103      	bne.n	800142e <__clzdi2+0xe>
 8001426:	f7ff ffdd 	bl	80013e4 <__clzsi2>
 800142a:	3020      	adds	r0, #32
 800142c:	e002      	b.n	8001434 <__clzdi2+0x14>
 800142e:	1c08      	adds	r0, r1, #0
 8001430:	f7ff ffd8 	bl	80013e4 <__clzsi2>
 8001434:	bd10      	pop	{r4, pc}
 8001436:	46c0      	nop			; (mov r8, r8)

08001438 <touchgfxDisplayDriverTransmitActive>:
void touchgfxSignalVSync(void);

void Display_Bitmap(const uint16_t *bitmap, uint16_t posx, uint16_t posy, uint16_t sizex, uint16_t sizey);

int touchgfxDisplayDriverTransmitActive()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	return IsTransmittingBlock_;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <touchgfxDisplayDriverTransmitActive+0x10>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20003718 	.word	0x20003718

0800144c <touchgfxDisplayDriverShouldTransferBlock>:

int touchgfxDisplayDriverShouldTransferBlock(uint16_t bottom)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	0002      	movs	r2, r0
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	801a      	strh	r2, [r3, #0]
	if(bottom == 320)
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	429a      	cmp	r2, r3
 8001462:	d104      	bne.n	800146e <touchgfxDisplayDriverShouldTransferBlock+0x22>
	{
		frameCounter++;
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <touchgfxDisplayDriverShouldTransferBlock+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <touchgfxDisplayDriverShouldTransferBlock+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
	}
	return (bottom < (TE > 0 ? 0xFFFF : ((__IO uint16_t)htim14.Instance->CNT)));
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <touchgfxDisplayDriverShouldTransferBlock+0x54>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <touchgfxDisplayDriverShouldTransferBlock+0x3a>
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <touchgfxDisplayDriverShouldTransferBlock+0x58>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	b29b      	uxth	r3, r3
 8001484:	e000      	b.n	8001488 <touchgfxDisplayDriverShouldTransferBlock+0x3c>
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <touchgfxDisplayDriverShouldTransferBlock+0x5c>)
 8001488:	2101      	movs	r1, #1
 800148a:	4293      	cmp	r3, r2
 800148c:	dc01      	bgt.n	8001492 <touchgfxDisplayDriverShouldTransferBlock+0x46>
 800148e:	2300      	movs	r3, #0
 8001490:	1c19      	adds	r1, r3, #0
 8001492:	b2cb      	uxtb	r3, r1
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000a8 	.word	0x200000a8
 80014a0:	200000ac 	.word	0x200000ac
 80014a4:	20007894 	.word	0x20007894
 80014a8:	0000ffff 	.word	0x0000ffff

080014ac <touchgfxDisplayDriverTransmitBlock>:

void touchgfxDisplayDriverTransmitBlock(const uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	000c      	movs	r4, r1
 80014b6:	0010      	movs	r0, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	250a      	movs	r5, #10
 80014bc:	197b      	adds	r3, r7, r5
 80014be:	1c22      	adds	r2, r4, #0
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	2608      	movs	r6, #8
 80014c4:	19bb      	adds	r3, r7, r6
 80014c6:	1c02      	adds	r2, r0, #0
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	1dbb      	adds	r3, r7, #6
 80014cc:	1c0a      	adds	r2, r1, #0
 80014ce:	801a      	strh	r2, [r3, #0]
	Display_Bitmap((uint16_t*)pixels, x, y, w, h);
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	881c      	ldrh	r4, [r3, #0]
 80014d4:	19bb      	adds	r3, r7, r6
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	197b      	adds	r3, r7, r5
 80014da:	8819      	ldrh	r1, [r3, #0]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	2320      	movs	r3, #32
 80014e0:	2508      	movs	r5, #8
 80014e2:	46ac      	mov	ip, r5
 80014e4:	44bc      	add	ip, r7
 80014e6:	4463      	add	r3, ip
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	0023      	movs	r3, r4
 80014ee:	f000 f977 	bl	80017e0 <Display_Bitmap>
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b005      	add	sp, #20
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080014fc <Display_DCS_Send>:

static void Display_DCS_Send(uint8_t command)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	701a      	strb	r2, [r3, #0]
  // Reset the nCS pin
  DISPLAY_CSX_GPIO_Port->BRR = DISPLAY_CSX_Pin;
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <Display_DCS_Send+0x48>)
 800150a:	2220      	movs	r2, #32
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  // Set the DCX pin
  DISPLAY_DCX_GPIO_Port->BRR = DISPLAY_DCX_Pin;
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <Display_DCS_Send+0x48>)
 8001510:	2208      	movs	r2, #8
 8001512:	629a      	str	r2, [r3, #40]	; 0x28

  // Send the command
  *((__IO uint8_t*)&hspi1.Instance->DR) = command;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <Display_DCS_Send+0x4c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	330c      	adds	r3, #12
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	701a      	strb	r2, [r3, #0]

  // Wait until the bus is not busy before changing configuration
  while(((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET);
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <Display_DCS_Send+0x4c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	4013      	ands	r3, r2
 800152c:	d1f9      	bne.n	8001522 <Display_DCS_Send+0x26>

  // Reset the DCX pin
  DISPLAY_DCX_GPIO_Port->BSRR = DISPLAY_DCX_Pin;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <Display_DCS_Send+0x48>)
 8001530:	2208      	movs	r2, #8
 8001532:	619a      	str	r2, [r3, #24]

  // Set the nCS
  DISPLAY_CSX_GPIO_Port->BSRR = DISPLAY_CSX_Pin;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <Display_DCS_Send+0x48>)
 8001536:	2220      	movs	r2, #32
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	50000400 	.word	0x50000400
 8001548:	200077a0 	.word	0x200077a0

0800154c <Display_DCS_Send_With_Data>:

static void Display_DCS_Send_With_Data(uint8_t command, uint8_t* data, uint8_t size)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6039      	str	r1, [r7, #0]
 8001554:	0011      	movs	r1, r2
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	1c02      	adds	r2, r0, #0
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	1dbb      	adds	r3, r7, #6
 800155e:	1c0a      	adds	r2, r1, #0
 8001560:	701a      	strb	r2, [r3, #0]
  // Reset the nCS pin
  DISPLAY_CSX_GPIO_Port->BRR = DISPLAY_CSX_Pin;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <Display_DCS_Send_With_Data+0x94>)
 8001564:	2220      	movs	r2, #32
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  // Set the DCX pin
  DISPLAY_DCX_GPIO_Port->BRR = DISPLAY_DCX_Pin;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <Display_DCS_Send_With_Data+0x94>)
 800156a:	2208      	movs	r2, #8
 800156c:	629a      	str	r2, [r3, #40]	; 0x28

  *((__IO uint8_t*)&hspi1.Instance->DR) = command;
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <Display_DCS_Send_With_Data+0x98>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	330c      	adds	r3, #12
 8001574:	1dfa      	adds	r2, r7, #7
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	701a      	strb	r2, [r3, #0]

  // Wait until the bus is not busy before changing configuration
  while(((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET);
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <Display_DCS_Send_With_Data+0x98>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	4013      	ands	r3, r2
 8001586:	d1f9      	bne.n	800157c <Display_DCS_Send_With_Data+0x30>
  DISPLAY_DCX_GPIO_Port->BSRR = DISPLAY_DCX_Pin;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <Display_DCS_Send_With_Data+0x94>)
 800158a:	2208      	movs	r2, #8
 800158c:	619a      	str	r2, [r3, #24]

  while (size > 0U)
 800158e:	e015      	b.n	80015bc <Display_DCS_Send_With_Data+0x70>
  {
    *((__IO uint8_t*)&hspi1.Instance->DR) = *data;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <Display_DCS_Send_With_Data+0x98>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	330c      	adds	r3, #12
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
    data++;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	603b      	str	r3, [r7, #0]
    size--;
 80015a2:	1dbb      	adds	r3, r7, #6
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	1dbb      	adds	r3, r7, #6
 80015a8:	3a01      	subs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
    /* Wait until TXE flag is set to send data */
    while(((hspi1.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <Display_DCS_Send_With_Data+0x98>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d1f8      	bne.n	80015ae <Display_DCS_Send_With_Data+0x62>
  while (size > 0U)
 80015bc:	1dbb      	adds	r3, r7, #6
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e5      	bne.n	8001590 <Display_DCS_Send_With_Data+0x44>
  }

  // Wait until the bus is not busy before changing configuration
  while(((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET);
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <Display_DCS_Send_With_Data+0x98>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f9      	bne.n	80015c6 <Display_DCS_Send_With_Data+0x7a>

  // Set the nCS
  DISPLAY_CSX_GPIO_Port->BSRR = DISPLAY_CSX_Pin;
 80015d2:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <Display_DCS_Send_With_Data+0x94>)
 80015d4:	2220      	movs	r2, #32
 80015d6:	619a      	str	r2, [r3, #24]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	50000400 	.word	0x50000400
 80015e4:	200077a0 	.word	0x200077a0

080015e8 <MB1642BDisplayDriver_DisplayOn>:

void MB1642BDisplayDriver_DisplayOn(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  // Display ON
  Display_DCS_Send(DCS_SET_DISPLAY_ON);
 80015ec:	2029      	movs	r0, #41	; 0x29
 80015ee:	f7ff ff85 	bl	80014fc <Display_DCS_Send>
  HAL_Delay(100);
 80015f2:	2064      	movs	r0, #100	; 0x64
 80015f4:	f000 ff7a 	bl	80024ec <HAL_Delay>
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <MB1642BDisplayDriver_DisplayInit>:
  Display_DCS_Send(DCS_SET_DISPLAY_OFF);
  HAL_Delay(100);
}

void MB1642BDisplayDriver_DisplayInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  uint8_t arguments[4];
  __HAL_SPI_ENABLE(&hspi1);
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MB1642BDisplayDriver_DisplayInit+0x9c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <MB1642BDisplayDriver_DisplayInit+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
  // Sleep out
  Display_DCS_Send(DCS_EXIT_SLEEP_MODE);
 8001616:	2011      	movs	r0, #17
 8001618:	f7ff ff70 	bl	80014fc <Display_DCS_Send>
  HAL_Delay(100);
 800161c:	2064      	movs	r0, #100	; 0x64
 800161e:	f000 ff65 	bl	80024ec <HAL_Delay>

  // Display Normal mode
  Display_DCS_Send(DCS_ENTER_NORMAL_MODE);
 8001622:	2013      	movs	r0, #19
 8001624:	f7ff ff6a 	bl	80014fc <Display_DCS_Send>
  HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	f000 ff5f 	bl	80024ec <HAL_Delay>

  // MADCTL: Exchange RGB / BGR + Mirror X
  arguments[0] = 0x48; // 0x48
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2248      	movs	r2, #72	; 0x48
 8001632:	701a      	strb	r2, [r3, #0]
  Display_DCS_Send_With_Data(DCS_SET_ADDRESS_MODE, arguments, 1);
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2201      	movs	r2, #1
 8001638:	0019      	movs	r1, r3
 800163a:	2036      	movs	r0, #54	; 0x36
 800163c:	f7ff ff86 	bl	800154c <Display_DCS_Send_With_Data>
  HAL_Delay(100);
 8001640:	2064      	movs	r0, #100	; 0x64
 8001642:	f000 ff53 	bl	80024ec <HAL_Delay>

  // Pixel Format
  arguments[0] = 0x05; // RGB565
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2205      	movs	r2, #5
 800164a:	701a      	strb	r2, [r3, #0]
  Display_DCS_Send_With_Data(DCS_SET_PIXEL_FORMAT, arguments, 1);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2201      	movs	r2, #1
 8001650:	0019      	movs	r1, r3
 8001652:	203a      	movs	r0, #58	; 0x3a
 8001654:	f7ff ff7a 	bl	800154c <Display_DCS_Send_With_Data>
  HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f000 ff47 	bl	80024ec <HAL_Delay>

  // Tearing effect line on
  arguments[0] = 0; //0x00;
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  Display_DCS_Send_With_Data(DCS_SET_TEAR_ON, arguments, 1);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2201      	movs	r2, #1
 8001668:	0019      	movs	r1, r3
 800166a:	2035      	movs	r0, #53	; 0x35
 800166c:	f7ff ff6e 	bl	800154c <Display_DCS_Send_With_Data>
  HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f000 ff3b 	bl	80024ec <HAL_Delay>

  // Tearing effect scan line
  arguments[0] = 0;
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
  arguments[1] = 0;
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	705a      	strb	r2, [r3, #1]
  Display_DCS_Send_With_Data(DCS_SET_TEAR_SCANLINE, arguments, 2);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2202      	movs	r2, #2
 8001686:	0019      	movs	r1, r3
 8001688:	2044      	movs	r0, #68	; 0x44
 800168a:	f7ff ff5f 	bl	800154c <Display_DCS_Send_With_Data>
  HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f000 ff2c 	bl	80024ec <HAL_Delay>

}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200077a0 	.word	0x200077a0

080016a0 <MB1642BDisplayDriver_DisplayReset>:

void MB1642BDisplayDriver_DisplayReset(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, GPIO_PIN_RESET);
 80016a4:	23a0      	movs	r3, #160	; 0xa0
 80016a6:	05db      	lsls	r3, r3, #23
 80016a8:	2200      	movs	r2, #0
 80016aa:	2102      	movs	r1, #2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f001 fb0d 	bl	8002ccc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f000 ff1a 	bl	80024ec <HAL_Delay>
  HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, GPIO_PIN_SET);
 80016b8:	23a0      	movs	r3, #160	; 0xa0
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f001 fb03 	bl	8002ccc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80016c6:	2064      	movs	r0, #100	; 0x64
 80016c8:	f000 ff10 	bl	80024ec <HAL_Delay>
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <Display_Set_Area>:

void Display_Set_Area(uint16_t x0, uint16_t y0,
                      uint16_t x1, uint16_t y1)
{
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0005      	movs	r5, r0
 80016dc:	000c      	movs	r4, r1
 80016de:	0010      	movs	r0, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	1dbb      	adds	r3, r7, #6
 80016e4:	1c2a      	adds	r2, r5, #0
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	1c22      	adds	r2, r4, #0
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	1cbb      	adds	r3, r7, #2
 80016f0:	1c02      	adds	r2, r0, #0
 80016f2:	801a      	strh	r2, [r3, #0]
 80016f4:	003b      	movs	r3, r7
 80016f6:	1c0a      	adds	r2, r1, #0
 80016f8:	801a      	strh	r2, [r3, #0]
  uint8_t arguments[4];

  // Set columns, if changed
  if (x0 != old_x0 || x1 != old_x1)
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <Display_Set_Area+0xfc>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	1dba      	adds	r2, r7, #6
 8001700:	8812      	ldrh	r2, [r2, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d105      	bne.n	8001712 <Display_Set_Area+0x3e>
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <Display_Set_Area+0x100>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	1cba      	adds	r2, r7, #2
 800170c:	8812      	ldrh	r2, [r2, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d026      	beq.n	8001760 <Display_Set_Area+0x8c>
  {
    arguments[0] = x0 >> 8;
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	b2da      	uxtb	r2, r3
 800171c:	210c      	movs	r1, #12
 800171e:	187b      	adds	r3, r7, r1
 8001720:	701a      	strb	r2, [r3, #0]
    arguments[1] = x0 & 0xFF;
 8001722:	1dbb      	adds	r3, r7, #6
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	187b      	adds	r3, r7, r1
 800172a:	705a      	strb	r2, [r3, #1]
    arguments[2] = x1 >> 8;
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	187b      	adds	r3, r7, r1
 8001738:	709a      	strb	r2, [r3, #2]
    arguments[3] = x1 & 0xFF;
 800173a:	1cbb      	adds	r3, r7, #2
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	187b      	adds	r3, r7, r1
 8001742:	70da      	strb	r2, [r3, #3]
    Display_DCS_Send_With_Data(0x2A, arguments, 4);
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2204      	movs	r2, #4
 8001748:	0019      	movs	r1, r3
 800174a:	202a      	movs	r0, #42	; 0x2a
 800174c:	f7ff fefe 	bl	800154c <Display_DCS_Send_With_Data>

    old_x0 = x0;
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <Display_Set_Area+0xfc>)
 8001752:	1dba      	adds	r2, r7, #6
 8001754:	8812      	ldrh	r2, [r2, #0]
 8001756:	801a      	strh	r2, [r3, #0]
    old_x1 = x1;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <Display_Set_Area+0x100>)
 800175a:	1cba      	adds	r2, r7, #2
 800175c:	8812      	ldrh	r2, [r2, #0]
 800175e:	801a      	strh	r2, [r3, #0]
  }

  // Set rows, if changed
  if (y0 != old_y0 || y1 != old_y1)
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <Display_Set_Area+0x104>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	8812      	ldrh	r2, [r2, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d105      	bne.n	8001778 <Display_Set_Area+0xa4>
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <Display_Set_Area+0x108>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	003a      	movs	r2, r7
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d026      	beq.n	80017c6 <Display_Set_Area+0xf2>
  {
    arguments[0] = y0 >> 8;
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b29b      	uxth	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	210c      	movs	r1, #12
 8001784:	187b      	adds	r3, r7, r1
 8001786:	701a      	strb	r2, [r3, #0]
    arguments[1] = y0 & 0xFF;
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	187b      	adds	r3, r7, r1
 8001790:	705a      	strb	r2, [r3, #1]
    arguments[2] = y1 >> 8;
 8001792:	003b      	movs	r3, r7
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	187b      	adds	r3, r7, r1
 800179e:	709a      	strb	r2, [r3, #2]
    arguments[3] = y1 & 0xFF;
 80017a0:	003b      	movs	r3, r7
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	70da      	strb	r2, [r3, #3]
    Display_DCS_Send_With_Data(0x2B, arguments, 4);
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2204      	movs	r2, #4
 80017ae:	0019      	movs	r1, r3
 80017b0:	202b      	movs	r0, #43	; 0x2b
 80017b2:	f7ff fecb 	bl	800154c <Display_DCS_Send_With_Data>

    old_y0 = y0;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <Display_Set_Area+0x104>)
 80017b8:	1d3a      	adds	r2, r7, #4
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	801a      	strh	r2, [r3, #0]
    old_y1 = y1;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <Display_Set_Area+0x108>)
 80017c0:	003a      	movs	r2, r7
 80017c2:	8812      	ldrh	r2, [r2, #0]
 80017c4:	801a      	strh	r2, [r3, #0]
  }
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000002 	.word	0x20000002
 80017d8:	20000004 	.word	0x20000004
 80017dc:	20000006 	.word	0x20000006

080017e0 <Display_Bitmap>:

void Display_Bitmap(const uint16_t *bitmap, uint16_t posx, uint16_t posy, uint16_t sizex, uint16_t sizey)
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	000c      	movs	r4, r1
 80017ea:	0010      	movs	r0, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	250a      	movs	r5, #10
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	1c22      	adds	r2, r4, #0
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	2608      	movs	r6, #8
 80017f8:	19bb      	adds	r3, r7, r6
 80017fa:	1c02      	adds	r2, r0, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	801a      	strh	r2, [r3, #0]
  IsTransmittingBlock_ = 1;
 8001804:	4b56      	ldr	r3, [pc, #344]	; (8001960 <Display_Bitmap+0x180>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1); // Enables SPI peripheral
 800180a:	4b56      	ldr	r3, [pc, #344]	; (8001964 <Display_Bitmap+0x184>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b54      	ldr	r3, [pc, #336]	; (8001964 <Display_Bitmap+0x184>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
  uint8_t command = DCS_WRITE_MEMORY_START;
 800181a:	2317      	movs	r3, #23
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	222c      	movs	r2, #44	; 0x2c
 8001820:	701a      	strb	r2, [r3, #0]

  // Define the display area
  Display_Set_Area(posx, posy, posx+sizex-1, posy+sizey-1);
 8001822:	0028      	movs	r0, r5
 8001824:	183a      	adds	r2, r7, r0
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	18d3      	adds	r3, r2, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29c      	uxth	r4, r3
 8001834:	19bb      	adds	r3, r7, r6
 8001836:	2128      	movs	r1, #40	; 0x28
 8001838:	2208      	movs	r2, #8
 800183a:	4694      	mov	ip, r2
 800183c:	44bc      	add	ip, r7
 800183e:	4461      	add	r1, ip
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	880b      	ldrh	r3, [r1, #0]
 8001844:	18d3      	adds	r3, r2, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	19bb      	adds	r3, r7, r6
 800184e:	8819      	ldrh	r1, [r3, #0]
 8001850:	183b      	adds	r3, r7, r0
 8001852:	8818      	ldrh	r0, [r3, #0]
 8001854:	0013      	movs	r3, r2
 8001856:	0022      	movs	r2, r4
 8001858:	f7ff ff3c 	bl	80016d4 <Display_Set_Area>

  // Reset the nCS pin
  DISPLAY_CSX_GPIO_Port->BRR = DISPLAY_CSX_Pin;
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <Display_Bitmap+0x188>)
 800185e:	2220      	movs	r2, #32
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  // Set the DCX pin
  DISPLAY_DCX_GPIO_Port->BRR = DISPLAY_DCX_Pin;
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <Display_Bitmap+0x188>)
 8001864:	2208      	movs	r2, #8
 8001866:	629a      	str	r2, [r3, #40]	; 0x28

  *((__IO uint8_t*)&hspi1.Instance->DR) = command;
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <Display_Bitmap+0x184>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	330c      	adds	r3, #12
 800186e:	2217      	movs	r2, #23
 8001870:	18ba      	adds	r2, r7, r2
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	701a      	strb	r2, [r3, #0]

  // Wait until the bus is not busy before changing configuration
  while(((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET);
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <Display_Bitmap+0x184>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	4013      	ands	r3, r2
 8001882:	d1f9      	bne.n	8001878 <Display_Bitmap+0x98>
  DISPLAY_DCX_GPIO_Port->BSRR = DISPLAY_DCX_Pin;
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <Display_Bitmap+0x188>)
 8001886:	2208      	movs	r2, #8
 8001888:	619a      	str	r2, [r3, #24]

  // Set the SPI in 16-bit mode to match endianess
  hspi1.Instance->CR2 = SPI_DATASIZE_16BIT;
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <Display_Bitmap+0x184>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	22f0      	movs	r2, #240	; 0xf0
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	605a      	str	r2, [r3, #4]

  // Disable spi peripherals
  __HAL_SPI_DISABLE(&hspi1);
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <Display_Bitmap+0x184>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <Display_Bitmap+0x184>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2140      	movs	r1, #64	; 0x40
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_spi1_tx);
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <Display_Bitmap+0x18c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <Display_Bitmap+0x18c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2101      	movs	r1, #1
 80018b0:	438a      	bics	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  CLEAR_BIT(hspi1.Instance->CR2, SPI_CR2_LDMATX);
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <Display_Bitmap+0x184>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <Display_Bitmap+0x184>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	492c      	ldr	r1, [pc, #176]	; (8001970 <Display_Bitmap+0x190>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, (DMA_FLAG_GI1 << (hdma_spi1_tx.ChannelIndex & 0x1cU)));
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <Display_Bitmap+0x194>)
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <Display_Bitmap+0x18c>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	221c      	movs	r2, #28
 80018ce:	4013      	ands	r3, r2
 80018d0:	2201      	movs	r2, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <Display_Bitmap+0x194>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma_spi1_tx.Instance->CNDTR = sizex*sizey;
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2228      	movs	r2, #40	; 0x28
 80018e0:	2108      	movs	r1, #8
 80018e2:	468c      	mov	ip, r1
 80018e4:	44bc      	add	ip, r7
 80018e6:	4462      	add	r2, ip
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	435a      	muls	r2, r3
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <Display_Bitmap+0x18c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
  /* Configure DMA Channel destination address */
  hdma_spi1_tx.Instance->CPAR = (uint32_t)&hspi1.Instance->DR;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <Display_Bitmap+0x184>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	330c      	adds	r3, #12
 80018f8:	001a      	movs	r2, r3
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <Display_Bitmap+0x18c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	609a      	str	r2, [r3, #8]

  /* Configure DMA Channel source address */
  hdma_spi1_tx.Instance->CMAR = (uint32_t)bitmap;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <Display_Bitmap+0x18c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	60da      	str	r2, [r3, #12]

  /* Disable the transfer half complete interrupt */
  __HAL_DMA_DISABLE_IT(&hdma_spi1_tx, DMA_IT_HT);
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <Display_Bitmap+0x18c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <Display_Bitmap+0x18c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2104      	movs	r1, #4
 8001914:	438a      	bics	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_spi1_tx, (DMA_IT_TC | DMA_IT_TE));
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <Display_Bitmap+0x18c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <Display_Bitmap+0x18c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	210a      	movs	r1, #10
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

  /* Enable the Peripherals */
  __HAL_DMA_ENABLE(&hdma_spi1_tx);
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <Display_Bitmap+0x18c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <Display_Bitmap+0x18c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <Display_Bitmap+0x184>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <Display_Bitmap+0x184>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

  /* Enable Tx DMA Request */
  SET_BIT(hspi1.Instance->CR2, SPI_CR2_TXDMAEN);
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <Display_Bitmap+0x184>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <Display_Bitmap+0x184>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2102      	movs	r1, #2
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b007      	add	sp, #28
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001960:	20003718 	.word	0x20003718
 8001964:	200077a0 	.word	0x200077a0
 8001968:	50000400 	.word	0x50000400
 800196c:	200078e0 	.word	0x200078e0
 8001970:	ffffbfff 	.word	0xffffbfff
 8001974:	40020000 	.word	0x40020000

08001978 <MB1642BDisplayDriver_DMACallback>:

void MB1642BDisplayDriver_DMACallback(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Transfer Complete Interrupt management ***********************************/
  if ((0U != (DMA1->ISR & (DMA_FLAG_TC1))) && (0U != (hdma_spi1_tx.Instance->CCR & DMA_IT_TC)))
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <MB1642BDisplayDriver_DMACallback+0x98>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d028      	beq.n	80019d8 <MB1642BDisplayDriver_DMACallback+0x60>
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <MB1642BDisplayDriver_DMACallback+0x9c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d022      	beq.n	80019d8 <MB1642BDisplayDriver_DMACallback+0x60>
  {
    /* Disable the transfer complete and error interrupt */
    __HAL_DMA_DISABLE_IT(&hdma_spi1_tx, DMA_IT_TE | DMA_IT_TC);
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <MB1642BDisplayDriver_DMACallback+0x9c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MB1642BDisplayDriver_DMACallback+0x9c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	210a      	movs	r1, #10
 800199e:	438a      	bics	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, DMA_FLAG_TC1);
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MB1642BDisplayDriver_DMACallback+0x98>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MB1642BDisplayDriver_DMACallback+0x98>)
 80019a8:	2102      	movs	r1, #2
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]

    IsTransmittingBlock_ = 0;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MB1642BDisplayDriver_DMACallback+0xa0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

    // Wait until the bus is not busy before changing configuration
    // SPI is busy in communication or Tx buffer is not empty
    while(((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET) { }
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MB1642BDisplayDriver_DMACallback+0xa4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f9      	bne.n	80019b6 <MB1642BDisplayDriver_DMACallback+0x3e>

    // Set the nCS
    DISPLAY_CSX_GPIO_Port->BSRR = DISPLAY_CSX_Pin;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MB1642BDisplayDriver_DMACallback+0xa8>)
 80019c4:	2220      	movs	r2, #32
 80019c6:	619a      	str	r2, [r3, #24]

    // Go back to 8-bit mode
    hspi1.Instance->CR2 = SPI_DATASIZE_8BIT;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MB1642BDisplayDriver_DMACallback+0xa4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	22e0      	movs	r2, #224	; 0xe0
 80019ce:	00d2      	lsls	r2, r2, #3
 80019d0:	605a      	str	r2, [r3, #4]

    // Signal Transfer Complete to TouchGFX
    DisplayDriver_TransferCompleteCallback();
 80019d2:	f00a fa1a 	bl	800be0a <DisplayDriver_TransferCompleteCallback>
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, DMA_FLAG_GI1 );

    //assert(0);  // Halting program - Transfer Error Interrupt received.
  }
}
 80019d6:	e018      	b.n	8001a0a <MB1642BDisplayDriver_DMACallback+0x92>
  else if ((0U != (DMA1->ISR & (DMA_FLAG_TC1))) && (0U != (hdma_spi1_tx.Instance->CCR & DMA_IT_TE)))
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <MB1642BDisplayDriver_DMACallback+0x98>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d013      	beq.n	8001a0a <MB1642BDisplayDriver_DMACallback+0x92>
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MB1642BDisplayDriver_DMACallback+0x9c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2208      	movs	r2, #8
 80019ea:	4013      	ands	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <MB1642BDisplayDriver_DMACallback+0x92>
    __HAL_DMA_DISABLE_IT(&hdma_spi1_tx, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MB1642BDisplayDriver_DMACallback+0x9c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MB1642BDisplayDriver_DMACallback+0x9c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	210e      	movs	r1, #14
 80019fa:	438a      	bics	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, DMA_FLAG_GI1 );
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <MB1642BDisplayDriver_DMACallback+0x98>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <MB1642BDisplayDriver_DMACallback+0x98>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020000 	.word	0x40020000
 8001a14:	200078e0 	.word	0x200078e0
 8001a18:	20003718 	.word	0x20003718
 8001a1c:	200077a0 	.word	0x200077a0
 8001a20:	50000400 	.word	0x50000400

08001a24 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  TE++;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8001a3c:	801a      	strh	r2, [r3, #0]
  (&htim14)->Instance->CR1 &= ~(TIM_CR1_CEN);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
  (&htim14)->Instance->CNT = 0;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

  touchgfxSignalVSync();
 8001a56:	f00a f9df 	bl	800be18 <touchgfxSignalVSync>
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	200000ac 	.word	0x200000ac
 8001a68:	20007894 	.word	0x20007894

08001a6c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	0002      	movs	r2, r0
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);
  (&htim14)->Instance->CR1 = (TIM_CR1_CEN);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GPIO_EXTI_Falling_Callback+0x1c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20007894 	.word	0x20007894

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a90:	f000 fcf0 	bl	8002474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a94:	f000 f822 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a98:	f000 f98c 	bl	8001db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a9c:	f000 f96c 	bl	8001d78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aa0:	f000 f91c 	bl	8001cdc <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001aa4:	f000 f890 	bl	8001bc8 <MX_CRC_Init>
  MX_TIM14_Init();
 8001aa8:	f000 f8f0 	bl	8001c8c <MX_TIM14_Init>
  MX_SPI1_Init();
 8001aac:	f000 f8b0 	bl	8001c10 <MX_SPI1_Init>
  MX_TouchGFX_Init();
 8001ab0:	f006 f9e8 	bl	8007e84 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ab4:	f003 fa08 	bl	8004ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <main+0x44>)
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <main+0x48>)
 8001abc:	2100      	movs	r1, #0
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f003 fa4a 	bl	8004f58 <osThreadNew>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <main+0x4c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001aca:	f003 fa1f 	bl	8004f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <main+0x42>
 8001ad0:	08014624 	.word	0x08014624
 8001ad4:	08007e93 	.word	0x08007e93
 8001ad8:	2000779c 	.word	0x2000779c

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b0a1      	sub	sp, #132	; 0x84
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	2448      	movs	r4, #72	; 0x48
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	2338      	movs	r3, #56	; 0x38
 8001aea:	001a      	movs	r2, r3
 8001aec:	2100      	movs	r1, #0
 8001aee:	f011 f9fe 	bl	8012eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af2:	2338      	movs	r3, #56	; 0x38
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	0018      	movs	r0, r3
 8001af8:	2310      	movs	r3, #16
 8001afa:	001a      	movs	r2, r3
 8001afc:	2100      	movs	r1, #0
 8001afe:	f011 f9f6 	bl	8012eee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	0018      	movs	r0, r3
 8001b06:	2334      	movs	r3, #52	; 0x34
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f011 f9ef 	bl	8012eee <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f001 f921 	bl	8002d5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b20:	193b      	adds	r3, r7, r4
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001b28:	0021      	movs	r1, r4
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2202      	movs	r2, #2
 8001b3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2202      	movs	r2, #2
 8001b40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0292      	lsls	r2, r2, #10
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0492      	lsls	r2, r2, #18
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	0592      	lsls	r2, r2, #22
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f001 f943 	bl	8002df4 <HAL_RCC_OscConfig>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b72:	f000 f9c1 	bl	8001ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	2138      	movs	r1, #56	; 0x38
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2202      	movs	r2, #2
 8001b82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2102      	movs	r1, #2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f001 fc4d 	bl	8003434 <HAL_RCC_ClockConfig>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b9e:	f000 f9ab 	bl	8001ef8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f001 fe13 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001bba:	f000 f99d 	bl	8001ef8 <Error_Handler>
  }
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b021      	add	sp, #132	; 0x84
 8001bc4:	bd90      	pop	{r4, r7, pc}
	...

08001bc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_CRC_Init+0x40>)
 8001bce:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <MX_CRC_Init+0x44>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <MX_CRC_Init+0x40>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_CRC_Init+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_CRC_Init+0x40>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_CRC_Init+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_CRC_Init+0x40>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <MX_CRC_Init+0x40>)
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fd60 	bl	80026b8 <HAL_CRC_Init>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001bfc:	f000 f97c 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	2000371c 	.word	0x2000371c
 8001c0c:	40023000 	.word	0x40023000

08001c10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_SPI1_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c1c:	2282      	movs	r2, #130	; 0x82
 8001c1e:	0052      	lsls	r2, r2, #1
 8001c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c2a:	22e0      	movs	r2, #224	; 0xe0
 8001c2c:	00d2      	lsls	r2, r2, #3
 8001c2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	0092      	lsls	r2, r2, #2
 8001c42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c5e:	2207      	movs	r2, #7
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c70:	0018      	movs	r0, r3
 8001c72:	f001 ff6b 	bl	8003b4c <HAL_SPI_Init>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c7a:	f000 f93d 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200077a0 	.word	0x200077a0
 8001c88:	40013000 	.word	0x40013000

08001c8c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <MX_TIM14_Init+0x44>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2520;
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001c98:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <MX_TIM14_Init+0x48>)
 8001c9a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xFFFF;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <MX_TIM14_Init+0x4c>)
 8001ca6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <MX_TIM14_Init+0x40>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f002 f800 	bl	8003cbc <HAL_TIM_Base_Init>
 8001cbc:	1e03      	subs	r3, r0, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001cc0:	f000 f91a 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  //HAL_TIM_Base_Start_IT(&htim14);
  /* USER CODE END TIM14_Init 2 */

}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	20007894 	.word	0x20007894
 8001cd0:	40002000 	.word	0x40002000
 8001cd4:	000009d8 	.word	0x000009d8
 8001cd8:	0000ffff 	.word	0x0000ffff

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001ce2:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <MX_USART2_UART_Init+0x98>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001ce8:	22e1      	movs	r2, #225	; 0xe1
 8001cea:	0252      	lsls	r2, r2, #9
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d26:	0018      	movs	r0, r3
 8001d28:	f002 fa66 	bl	80041f8 <HAL_UART_Init>
 8001d2c:	1e03      	subs	r3, r0, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d30:	f000 f8e2 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d36:	2100      	movs	r1, #0
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f002 ff4f 	bl	8004bdc <HAL_UARTEx_SetTxFifoThreshold>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d42:	f000 f8d9 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f002 ff86 	bl	8004c5c <HAL_UARTEx_SetRxFifoThreshold>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d54:	f000 f8d0 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <MX_USART2_UART_Init+0x94>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f002 ff04 	bl	8004b68 <HAL_UARTEx_DisableFifoMode>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f000 f8c8 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	20007804 	.word	0x20007804
 8001d74:	40004400 	.word	0x40004400

08001d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_DMA_Init+0x38>)
 8001d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_DMA_Init+0x38>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_DMA_Init+0x38>)
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2103      	movs	r1, #3
 8001d9a:	2009      	movs	r0, #9
 8001d9c:	f000 fc66 	bl	800266c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001da0:	2009      	movs	r0, #9
 8001da2:	f000 fc78 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	2414      	movs	r4, #20
 8001dbc:	193b      	adds	r3, r7, r4
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	2314      	movs	r3, #20
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	f011 f892 	bl	8012eee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd6:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	2204      	movs	r2, #4
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001de8:	2120      	movs	r1, #32
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	2220      	movs	r2, #32
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001e18:	2102      	movs	r1, #2
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, GPIO_PIN_RESET);
 8001e2a:	23a0      	movs	r3, #160	; 0xa0
 8001e2c:	05db      	lsls	r3, r3, #23
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2102      	movs	r1, #2
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 ff4a 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DCX_Pin|DISPLAY_CSX_Pin, GPIO_PIN_SET);
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2128      	movs	r1, #40	; 0x28
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 ff44 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <MX_GPIO_Init+0x11c>)
 8001e4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	193b      	adds	r3, r7, r4
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001e56:	193a      	adds	r2, r7, r4
 8001e58:	23a0      	movs	r3, #160	; 0xa0
 8001e5a:	05db      	lsls	r3, r3, #23
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fdd0 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RESET_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RESET_Pin;
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	2202      	movs	r2, #2
 8001e68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	2201      	movs	r2, #1
 8001e74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	2202      	movs	r2, #2
 8001e7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISPLAY_RESET_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	193a      	adds	r2, r7, r4
 8001e7e:	23a0      	movs	r3, #160	; 0xa0
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	0011      	movs	r1, r2
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 fdbd 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_DCX_Pin DISPLAY_CSX_Pin */
  GPIO_InitStruct.Pin = DISPLAY_DCX_Pin|DISPLAY_CSX_Pin;
 8001e8a:	0021      	movs	r1, r4
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	2228      	movs	r2, #40	; 0x28
 8001e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2201      	movs	r2, #1
 8001e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0010      	movs	r0, r2
 8001eac:	f000 fdaa 	bl	8002a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	2005      	movs	r0, #5
 8001eb6:	f000 fbd9 	bl	800266c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001eba:	2005      	movs	r0, #5
 8001ebc:	f000 fbeb 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b00b      	add	sp, #44	; 0x2c
 8001ec6:	bd90      	pop	{r4, r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	50000400 	.word	0x50000400
 8001ed0:	10310000 	.word	0x10310000

08001ed4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ee6:	f000 fae5 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
//  if (htim->Instance == TIM14) {
//	  touchgfxSignalVSync();
//  }
  /* USER CODE END Callback 1 */
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	40001400 	.word	0x40001400

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001efe:	e7fe      	b.n	8001efe <Error_Handler+0x6>

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2201      	movs	r2, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	425b      	negs	r3, r3
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2103      	movs	r1, #3
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fb92 	bl	800266c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 faef 	bl	8002530 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HAL_CRC_MspInit+0x38>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10d      	bne.n	8001f8e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_CRC_MspInit+0x3c>)
 8001f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_CRC_MspInit+0x3c>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0149      	lsls	r1, r1, #5
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_CRC_MspInit+0x3c>)
 8001f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40023000 	.word	0x40023000
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	2314      	movs	r3, #20
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	0018      	movs	r0, r3
 8001fae:	2314      	movs	r3, #20
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f010 ff9b 	bl	8012eee <memset>
  if(hspi->Instance==SPI1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a31      	ldr	r2, [pc, #196]	; (8002084 <HAL_SPI_MspInit+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d15b      	bne.n	800207a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0149      	lsls	r1, r1, #5
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 8001fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	015b      	lsls	r3, r3, #5
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ff6:	2114      	movs	r1, #20
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	22a0      	movs	r2, #160	; 0xa0
 8001ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	2202      	movs	r2, #2
 8002002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2202      	movs	r2, #2
 8002008:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2202      	movs	r2, #2
 800200e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	187a      	adds	r2, r7, r1
 8002018:	23a0      	movs	r3, #160	; 0xa0
 800201a:	05db      	lsls	r3, r3, #23
 800201c:	0011      	movs	r1, r2
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fcf0 	bl	8002a04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_SPI_MspInit+0xf0>)
 8002028:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_SPI_MspInit+0xec>)
 800202c:	2211      	movs	r2, #17
 800202e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002032:	2210      	movs	r2, #16
 8002034:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_SPI_MspInit+0xec>)
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0052      	lsls	r2, r2, #1
 8002048:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_SPI_MspInit+0xec>)
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	00d2      	lsls	r2, r2, #3
 8002050:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_SPI_MspInit+0xec>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fbf5 	bl	8002850 <HAL_DMA_Init>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d001      	beq.n	800206e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800206a:	f7ff ff45 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_SPI_MspInit+0xec>)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b00a      	add	sp, #40	; 0x28
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40013000 	.word	0x40013000
 8002088:	40021000 	.word	0x40021000
 800208c:	200078e0 	.word	0x200078e0
 8002090:	40020008 	.word	0x40020008

08002094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_TIM_Base_MspInit+0x48>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d115      	bne.n	80020d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_TIM_Base_MspInit+0x4c>)
 80020a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_TIM_Base_MspInit+0x4c>)
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0209      	lsls	r1, r1, #8
 80020b0:	430a      	orrs	r2, r1
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_TIM_Base_MspInit+0x4c>)
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2103      	movs	r1, #3
 80020c6:	2013      	movs	r0, #19
 80020c8:	f000 fad0 	bl	800266c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80020cc:	2013      	movs	r0, #19
 80020ce:	f000 fae2 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	40002000 	.word	0x40002000
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	2314      	movs	r3, #20
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	0018      	movs	r0, r3
 80020f2:	2314      	movs	r3, #20
 80020f4:	001a      	movs	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	f010 fef9 	bl	8012eee <memset>
  if(huart->Instance==USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_UART_MspInit+0x8c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d130      	bne.n	8002168 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_UART_MspInit+0x90>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0289      	lsls	r1, r1, #10
 8002110:	430a      	orrs	r2, r1
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	029b      	lsls	r3, r3, #10
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_UART_MspInit+0x90>)
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800213a:	2114      	movs	r1, #20
 800213c:	187b      	adds	r3, r7, r1
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2202      	movs	r2, #2
 8002146:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2201      	movs	r2, #1
 800214c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	187b      	adds	r3, r7, r1
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	2201      	movs	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	187a      	adds	r2, r7, r1
 800215c:	23a0      	movs	r3, #160	; 0xa0
 800215e:	05db      	lsls	r3, r3, #23
 8002160:	0011      	movs	r1, r2
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fc4e 	bl	8002a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b00a      	add	sp, #40	; 0x28
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40004400 	.word	0x40004400
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, TickPriority ,0);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	0019      	movs	r1, r3
 800218e:	2012      	movs	r0, #18
 8002190:	f000 fa6c 	bl	800266c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8002194:	2012      	movs	r0, #18
 8002196:	f000 fa7e 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_InitTick+0xa4>)
 800219c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_InitTick+0xa4>)
 80021a0:	2120      	movs	r1, #32
 80021a2:	430a      	orrs	r2, r1
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_InitTick+0xa4>)
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	2220      	movs	r2, #32
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021b2:	230c      	movs	r3, #12
 80021b4:	18fa      	adds	r2, r7, r3
 80021b6:	2310      	movs	r3, #16
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	0011      	movs	r1, r2
 80021bc:	0018      	movs	r0, r3
 80021be:	f001 fae3 	bl	8003788 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c2:	f001 facb 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 80021c6:	0003      	movs	r3, r0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	4914      	ldr	r1, [pc, #80]	; (8002220 <HAL_InitTick+0xa8>)
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fd ffa4 	bl	800011c <__udivsi3>
 80021d4:	0003      	movs	r3, r0
 80021d6:	3b01      	subs	r3, #1
 80021d8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0xac>)
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_InitTick+0xb0>)
 80021de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_InitTick+0xac>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_InitTick+0xb4>)
 80021e4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_InitTick+0xac>)
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_InitTick+0xac>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_InitTick+0xac>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_InitTick+0xac>)
 80021fa:	0018      	movs	r0, r3
 80021fc:	f001 fd5e 	bl	8003cbc <HAL_TIM_Base_Init>
 8002200:	1e03      	subs	r3, r0, #0
 8002202:	d105      	bne.n	8002210 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_InitTick+0xac>)
 8002206:	0018      	movs	r0, r3
 8002208:	f001 fdb0 	bl	8003d6c <HAL_TIM_Base_Start_IT>
 800220c:	0003      	movs	r3, r0
 800220e:	e000      	b.n	8002212 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b00a      	add	sp, #40	; 0x28
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40021000 	.word	0x40021000
 8002220:	000f4240 	.word	0x000f4240
 8002224:	2000793c 	.word	0x2000793c
 8002228:	40001400 	.word	0x40001400
 800222c:	000003e7 	.word	0x000003e7

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002240:	2001      	movs	r0, #1
 8002242:	f000 fd61 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	MB1642BDisplayDriver_DMACallback();
 8002250:	f7ff fb92 	bl	8001978 <MB1642BDisplayDriver_DMACallback>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <TIM7_LPTIM2_IRQHandler+0x14>)
 8002262:	0018      	movs	r0, r3
 8002264:	f001 fdde 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	2000793c 	.word	0x2000793c

08002274 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <TIM14_IRQHandler+0x14>)
 800227a:	0018      	movs	r0, r3
 800227c:	f001 fdd2 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	20007894 	.word	0x20007894

0800228c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022a2:	f010 fdcd 	bl	8012e40 <__errno>
 80022a6:	0003      	movs	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
	return -1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	425b      	negs	r3, r3
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c0:	2301      	movs	r3, #1
 80022c2:	425a      	negs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff ffe5 	bl	8002298 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ce:	e7fe      	b.n	80022ce <_exit+0x16>

080022d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e00a      	b.n	80022f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022e2:	e000      	b.n	80022e6 <_read+0x16>
 80022e4:	bf00      	nop
 80022e6:	0001      	movs	r1, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf0      	blt.n	80022e2 <_read+0x12>
	}

return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b006      	add	sp, #24
 8002308:	bd80      	pop	{r7, pc}

0800230a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e009      	b.n	8002330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	0018      	movs	r0, r3
 8002326:	e000      	b.n	800232a <_write+0x20>
 8002328:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf1      	blt.n	800231c <_write+0x12>
	}
	return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b006      	add	sp, #24
 8002340:	bd80      	pop	{r7, pc}

08002342 <_close>:

int _close(int file)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	return -1;
 800234a:	2301      	movs	r3, #1
 800234c:	425b      	negs	r3, r3
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}

08002356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	0192      	lsls	r2, r2, #6
 8002366:	605a      	str	r2, [r3, #4]
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b002      	add	sp, #8
 8002370:	bd80      	pop	{r7, pc}

08002372 <_isatty>:

int _isatty(int file)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return 1;
 800237a:	2301      	movs	r3, #1
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	18d3      	adds	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f010 fd38 	bl	8012e40 <__errno>
 80023d0:	0003      	movs	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	425b      	negs	r3, r3
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	18d2      	adds	r2, r2, r3
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b006      	add	sp, #24
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20009000 	.word	0x20009000
 80023fc:	00000400 	.word	0x00000400
 8002400:	200000b0 	.word	0x200000b0
 8002404:	200079d0 	.word	0x200079d0

08002408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <SystemInit+0x14>)
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0512      	lsls	r2, r2, #20
 8002412:	609a      	str	r2, [r3, #8]
#endif
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002422:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002424:	f7ff fff0 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <LoopForever+0x6>)
  ldr r1, =_edata
 800242a:	490d      	ldr	r1, [pc, #52]	; (8002460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <LoopForever+0xe>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002440:	4c0a      	ldr	r4, [pc, #40]	; (800246c <LoopForever+0x16>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800244e:	f010 fd0d 	bl	8012e6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002452:	f7ff fb1b 	bl	8001a8c <main>

08002456 <LoopForever>:

LoopForever:
  b LoopForever
 8002456:	e7fe      	b.n	8002456 <LoopForever>
  ldr   r0, =_estack
 8002458:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002460:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002464:	08017e18 	.word	0x08017e18
  ldr r2, =_sbss
 8002468:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800246c:	200079d0 	.word	0x200079d0

08002470 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC1_COMP_IRQHandler>
	...

08002474 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x3c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_Init+0x3c>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0049      	lsls	r1, r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800248e:	2000      	movs	r0, #0
 8002490:	f7ff fe72 	bl	8002178 <HAL_InitTick>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d003      	beq.n	80024a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e001      	b.n	80024a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fd2e 	bl	8001f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781b      	ldrb	r3, [r3, #0]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40022000 	.word	0x40022000

080024b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_IncTick+0x1c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	001a      	movs	r2, r3
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_IncTick+0x20>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	18d2      	adds	r2, r2, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_IncTick+0x20>)
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20000010 	.word	0x20000010
 80024d4:	20007988 	.word	0x20007988

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_GetTick+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	20007988 	.word	0x20007988

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_Delay+0x40>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	189b      	adds	r3, r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	f7ff ffe0 	bl	80024d8 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000010 	.word	0x20000010

08002530 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40010000 	.word	0x40010000
 8002558:	fffff9ff 	.word	0xfffff9ff

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	0002      	movs	r2, r0
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b7f      	cmp	r3, #127	; 0x7f
 800256e:	d809      	bhi.n	8002584 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002570:	1dfb      	adds	r3, r7, #7
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	001a      	movs	r2, r3
 8002576:	231f      	movs	r3, #31
 8002578:	401a      	ands	r2, r3
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_EnableIRQ+0x30>)
 800257c:	2101      	movs	r1, #1
 800257e:	4091      	lsls	r1, r2
 8002580:	000a      	movs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	0002      	movs	r2, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b7f      	cmp	r3, #127	; 0x7f
 80025a4:	d828      	bhi.n	80025f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a6:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <__NVIC_SetPriority+0xd4>)
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	33c0      	adds	r3, #192	; 0xc0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	589b      	ldr	r3, [r3, r2]
 80025b6:	1dfa      	adds	r2, r7, #7
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	0011      	movs	r1, r2
 80025bc:	2203      	movs	r2, #3
 80025be:	400a      	ands	r2, r1
 80025c0:	00d2      	lsls	r2, r2, #3
 80025c2:	21ff      	movs	r1, #255	; 0xff
 80025c4:	4091      	lsls	r1, r2
 80025c6:	000a      	movs	r2, r1
 80025c8:	43d2      	mvns	r2, r2
 80025ca:	401a      	ands	r2, r3
 80025cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	401a      	ands	r2, r3
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	2303      	movs	r3, #3
 80025de:	4003      	ands	r3, r0
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e4:	481f      	ldr	r0, [pc, #124]	; (8002664 <__NVIC_SetPriority+0xd4>)
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	430a      	orrs	r2, r1
 80025f0:	33c0      	adds	r3, #192	; 0xc0
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025f6:	e031      	b.n	800265c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <__NVIC_SetPriority+0xd8>)
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	0019      	movs	r1, r3
 8002600:	230f      	movs	r3, #15
 8002602:	400b      	ands	r3, r1
 8002604:	3b08      	subs	r3, #8
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3306      	adds	r3, #6
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	3304      	adds	r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	1dfa      	adds	r2, r7, #7
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	0011      	movs	r1, r2
 8002618:	2203      	movs	r2, #3
 800261a:	400a      	ands	r2, r1
 800261c:	00d2      	lsls	r2, r2, #3
 800261e:	21ff      	movs	r1, #255	; 0xff
 8002620:	4091      	lsls	r1, r2
 8002622:	000a      	movs	r2, r1
 8002624:	43d2      	mvns	r2, r2
 8002626:	401a      	ands	r2, r3
 8002628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	401a      	ands	r2, r3
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	0018      	movs	r0, r3
 8002638:	2303      	movs	r3, #3
 800263a:	4003      	ands	r3, r0
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <__NVIC_SetPriority+0xd8>)
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	001c      	movs	r4, r3
 8002648:	230f      	movs	r3, #15
 800264a:	4023      	ands	r3, r4
 800264c:	3b08      	subs	r3, #8
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	430a      	orrs	r2, r1
 8002652:	3306      	adds	r3, #6
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	18c3      	adds	r3, r0, r3
 8002658:	3304      	adds	r3, #4
 800265a:	601a      	str	r2, [r3, #0]
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b003      	add	sp, #12
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	210f      	movs	r1, #15
 8002678:	187b      	adds	r3, r7, r1
 800267a:	1c02      	adds	r2, r0, #0
 800267c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	187b      	adds	r3, r7, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b25b      	sxtb	r3, r3
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff ff81 	bl	8002590 <__NVIC_SetPriority>
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	0002      	movs	r2, r0
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff ff57 	bl	800255c <__NVIC_EnableIRQ>
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e056      	b.n	8002778 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7f5b      	ldrb	r3, [r3, #29]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fc3f 	bl	8001f60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10c      	bne.n	800270a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_CRC_Init+0xc8>)
 80026f6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2118      	movs	r1, #24
 8002704:	438a      	bics	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e00b      	b.n	8002722 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f835 	bl	8002784 <HAL_CRCEx_Polynomial_Set>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e02a      	b.n	8002778 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	795b      	ldrb	r3, [r3, #5]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	4252      	negs	r2, r2
 8002732:	611a      	str	r2, [r3, #16]
 8002734:	e004      	b.n	8002740 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6912      	ldr	r2, [r2, #16]
 800273e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2260      	movs	r2, #96	; 0x60
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	4393      	bics	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	04c11db7 	.word	0x04c11db7

08002784 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2317      	movs	r3, #23
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002798:	231f      	movs	r3, #31
 800279a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	613a      	str	r2, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_CRCEx_Polynomial_Set+0x36>
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	221f      	movs	r2, #31
 80027ac:	4013      	ands	r3, r2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	40da      	lsrs	r2, r3
 80027b2:	0013      	movs	r3, r2
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d0f1      	beq.n	800279e <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d017      	beq.n	80027f0 <HAL_CRCEx_Polynomial_Set+0x6c>
 80027c0:	d802      	bhi.n	80027c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d021      	beq.n	800280a <HAL_CRCEx_Polynomial_Set+0x86>
 80027c6:	e01b      	b.n	8002800 <HAL_CRCEx_Polynomial_Set+0x7c>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d009      	beq.n	80027e0 <HAL_CRCEx_Polynomial_Set+0x5c>
 80027cc:	2b18      	cmp	r3, #24
 80027ce:	d117      	bne.n	8002800 <HAL_CRCEx_Polynomial_Set+0x7c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d91b      	bls.n	800280e <HAL_CRCEx_Polynomial_Set+0x8a>
      {
        status =   HAL_ERROR;
 80027d6:	2317      	movs	r3, #23
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80027de:	e016      	b.n	800280e <HAL_CRCEx_Polynomial_Set+0x8a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b07      	cmp	r3, #7
 80027e4:	d915      	bls.n	8002812 <HAL_CRCEx_Polynomial_Set+0x8e>
      {
        status =   HAL_ERROR;
 80027e6:	2317      	movs	r3, #23
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 80027ee:	e010      	b.n	8002812 <HAL_CRCEx_Polynomial_Set+0x8e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	d90f      	bls.n	8002816 <HAL_CRCEx_Polynomial_Set+0x92>
      {
        status =   HAL_ERROR;
 80027f6:	2317      	movs	r3, #23
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80027fe:	e00a      	b.n	8002816 <HAL_CRCEx_Polynomial_Set+0x92>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002800:	2317      	movs	r3, #23
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
      break;
 8002808:	e006      	b.n	8002818 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	e004      	b.n	8002818 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	e002      	b.n	8002818 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	e000      	b.n	8002818 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8002816:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002818:	2317      	movs	r3, #23
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10e      	bne.n	8002840 <HAL_CRCEx_Polynomial_Set+0xbc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2218      	movs	r2, #24
 8002832:	4393      	bics	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002840:	2317      	movs	r3, #23
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b006      	add	sp, #24
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e077      	b.n	8002952 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <HAL_DMA_Init+0x10c>)
 8002868:	4694      	mov	ip, r2
 800286a:	4463      	add	r3, ip
 800286c:	2114      	movs	r1, #20
 800286e:	0018      	movs	r0, r3
 8002870:	f7fd fc54 	bl	800011c <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	009a      	lsls	r2, r3, #2
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2225      	movs	r2, #37	; 0x25
 8002880:	2102      	movs	r1, #2
 8002882:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4934      	ldr	r1, [pc, #208]	; (8002960 <HAL_DMA_Init+0x110>)
 8002890:	400a      	ands	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f849 	bl	8002964 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	01db      	lsls	r3, r3, #7
 80028da:	429a      	cmp	r2, r3
 80028dc:	d102      	bne.n	80028e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	213f      	movs	r1, #63	; 0x3f
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d011      	beq.n	8002928 <HAL_DMA_Init+0xd8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d80d      	bhi.n	8002928 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f854 	bl	80029bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e008      	b.n	800293a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2225      	movs	r2, #37	; 0x25
 8002944:	2101      	movs	r1, #1
 8002946:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b002      	add	sp, #8
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	bffdfff8 	.word	0xbffdfff8
 8002960:	ffff800f 	.word	0xffff800f

08002964 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002974:	4694      	mov	ip, r2
 8002976:	4463      	add	r3, ip
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	001a      	movs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	001a      	movs	r2, r3
 8002986:	23ff      	movs	r3, #255	; 0xff
 8002988:	4013      	ands	r3, r2
 800298a:	3b08      	subs	r3, #8
 800298c:	2114      	movs	r1, #20
 800298e:	0018      	movs	r0, r3
 8002990:	f7fd fbc4 	bl	800011c <__udivsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800299c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	221f      	movs	r2, #31
 80029a2:	4013      	ands	r3, r2
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b004      	add	sp, #16
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	10008200 	.word	0x10008200
 80029b8:	40020880 	.word	0x40020880

080029bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	223f      	movs	r2, #63	; 0x3f
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029d2:	4694      	mov	ip, r2
 80029d4:	4463      	add	r3, ip
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	001a      	movs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	4013      	ands	r3, r2
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	1000823f 	.word	0x1000823f
 8002a00:	40020940 	.word	0x40020940

08002a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a12:	e147      	b.n	8002ca4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4091      	lsls	r1, r2
 8002a1e:	000a      	movs	r2, r1
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d100      	bne.n	8002a2c <HAL_GPIO_Init+0x28>
 8002a2a:	e138      	b.n	8002c9e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d00b      	beq.n	8002a4c <HAL_GPIO_Init+0x48>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a40:	2b11      	cmp	r3, #17
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b12      	cmp	r3, #18
 8002a4a:	d130      	bne.n	8002aae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a82:	2201      	movs	r2, #1
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	2201      	movs	r2, #1
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	0013      	movs	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0xea>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b12      	cmp	r3, #18
 8002aec:	d123      	bne.n	8002b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	58d3      	ldr	r3, [r2, r3]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2107      	movs	r1, #7
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	6939      	ldr	r1, [r7, #16]
 8002b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2203      	movs	r2, #3
 8002b54:	401a      	ands	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	055b      	lsls	r3, r3, #21
 8002b72:	4013      	ands	r3, r2
 8002b74:	d100      	bne.n	8002b78 <HAL_GPIO_Init+0x174>
 8002b76:	e092      	b.n	8002c9e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3318      	adds	r3, #24
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	589b      	ldr	r3, [r3, r2]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	220f      	movs	r2, #15
 8002b90:	409a      	lsls	r2, r3
 8002b92:	0013      	movs	r3, r2
 8002b94:	43da      	mvns	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	23a0      	movs	r3, #160	; 0xa0
 8002ba0:	05db      	lsls	r3, r3, #23
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0x1ca>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a45      	ldr	r2, [pc, #276]	; (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_GPIO_Init+0x1c6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a44      	ldr	r2, [pc, #272]	; (8002cc4 <HAL_GPIO_Init+0x2c0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x1c2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <HAL_GPIO_Init+0x2c4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_GPIO_Init+0x1be>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x1cc>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x1cc>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x1cc>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x1cc>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002be0:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3318      	adds	r3, #24
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bee:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	58d3      	ldr	r3, [r2, r3]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	025b      	lsls	r3, r3, #9
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c14:	4929      	ldr	r1, [pc, #164]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c1e:	2384      	movs	r3, #132	; 0x84
 8002c20:	58d3      	ldr	r3, [r2, r3]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	4013      	ands	r3, r2
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c42:	491e      	ldr	r1, [pc, #120]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c44:	2284      	movs	r2, #132	; 0x84
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	035b      	lsls	r3, r3, #13
 8002c62:	4013      	ands	r3, r2
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	40da      	lsrs	r2, r3
 8002cac:	1e13      	subs	r3, r2, #0
 8002cae:	d000      	beq.n	8002cb2 <HAL_GPIO_Init+0x2ae>
 8002cb0:	e6b0      	b.n	8002a14 <HAL_GPIO_Init+0x10>
  }
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b006      	add	sp, #24
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	50000400 	.word	0x50000400
 8002cc4:	50000800 	.word	0x50000800
 8002cc8:	50000c00 	.word	0x50000c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	0008      	movs	r0, r1
 8002cd6:	0011      	movs	r1, r2
 8002cd8:	1cbb      	adds	r3, r7, #2
 8002cda:	1c02      	adds	r2, r0, #0
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	1c7b      	adds	r3, r7, #1
 8002ce0:	1c0a      	adds	r2, r1, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce4:	1c7b      	adds	r3, r7, #1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cec:	1cbb      	adds	r3, r7, #2
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cf6:	1cbb      	adds	r3, r7, #2
 8002cf8:	881a      	ldrh	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b002      	add	sp, #8
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	0002      	movs	r2, r0
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	1dba      	adds	r2, r7, #6
 8002d1a:	8812      	ldrh	r2, [r2, #0]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d008      	beq.n	8002d32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d22:	1dba      	adds	r2, r7, #6
 8002d24:	8812      	ldrh	r2, [r2, #0]
 8002d26:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002d28:	1dbb      	adds	r3, r7, #6
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fe fe79 	bl	8001a24 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	1dba      	adds	r2, r7, #6
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d008      	beq.n	8002d50 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d40:	1dba      	adds	r2, r7, #6
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002d46:	1dbb      	adds	r3, r7, #6
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7fe fe8e 	bl	8001a6c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021800 	.word	0x40021800

08002d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d11f      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	0013      	movs	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	189b      	adds	r3, r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4912      	ldr	r1, [pc, #72]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7fd f9c4 	bl	800011c <__udivsi3>
 8002d94:	0003      	movs	r3, r0
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9a:	e008      	b.n	8002dae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e001      	b.n	8002dae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e009      	b.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	401a      	ands	r2, r3
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d0ed      	beq.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	fffff9ff 	.word	0xfffff9ff
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	000f4240 	.word	0x000f4240

08002ddc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	23e0      	movs	r3, #224	; 0xe0
 8002de6:	01db      	lsls	r3, r3, #7
 8002de8:	4013      	ands	r3, r2
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e304      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <HAL_RCC_OscConfig+0x1e>
 8002e10:	e07c      	b.n	8002f0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e12:	4bc3      	ldr	r3, [pc, #780]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2238      	movs	r2, #56	; 0x38
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e1c:	4bc0      	ldr	r3, [pc, #768]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2203      	movs	r2, #3
 8002e22:	4013      	ands	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3e>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d002      	beq.n	8002e38 <HAL_RCC_OscConfig+0x44>
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4bb9      	ldr	r3, [pc, #740]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	029b      	lsls	r3, r3, #10
 8002e40:	4013      	ands	r3, r2
 8002e42:	d062      	beq.n	8002f0a <HAL_RCC_OscConfig+0x116>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d15e      	bne.n	8002f0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e2df      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	025b      	lsls	r3, r3, #9
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x78>
 8002e5c:	4bb0      	ldr	r3, [pc, #704]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4baf      	ldr	r3, [pc, #700]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0249      	lsls	r1, r1, #9
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e020      	b.n	8002eae <HAL_RCC_OscConfig+0xba>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	23a0      	movs	r3, #160	; 0xa0
 8002e72:	02db      	lsls	r3, r3, #11
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d10e      	bne.n	8002e96 <HAL_RCC_OscConfig+0xa2>
 8002e78:	4ba9      	ldr	r3, [pc, #676]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4ba8      	ldr	r3, [pc, #672]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	02c9      	lsls	r1, r1, #11
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	4ba6      	ldr	r3, [pc, #664]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0249      	lsls	r1, r1, #9
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e00b      	b.n	8002eae <HAL_RCC_OscConfig+0xba>
 8002e96:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4ba1      	ldr	r3, [pc, #644]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002e9c:	49a1      	ldr	r1, [pc, #644]	; (8003124 <HAL_RCC_OscConfig+0x330>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	4b9f      	ldr	r3, [pc, #636]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b9e      	ldr	r3, [pc, #632]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002ea8:	499f      	ldr	r1, [pc, #636]	; (8003128 <HAL_RCC_OscConfig+0x334>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7ff fb0f 	bl	80024d8 <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff fb0a 	bl	80024d8 <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e29e      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed2:	4b93      	ldr	r3, [pc, #588]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xcc>
 8002ede:	e015      	b.n	8002f0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fafa 	bl	80024d8 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eea:	f7ff faf5 	bl	80024d8 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e289      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	4013      	ands	r3, r2
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0xf6>
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2202      	movs	r2, #2
 8002f12:	4013      	ands	r3, r2
 8002f14:	d100      	bne.n	8002f18 <HAL_RCC_OscConfig+0x124>
 8002f16:	e099      	b.n	800304c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2238      	movs	r2, #56	; 0x38
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f22:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2203      	movs	r2, #3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d102      	bne.n	8002f38 <HAL_RCC_OscConfig+0x144>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d002      	beq.n	8002f3e <HAL_RCC_OscConfig+0x14a>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d135      	bne.n	8002faa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f3e:	4b78      	ldr	r3, [pc, #480]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4013      	ands	r3, r2
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x162>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e25c      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f56:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a74      	ldr	r2, [pc, #464]	; (800312c <HAL_RCC_OscConfig+0x338>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d112      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f72:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6e      	ldr	r2, [pc, #440]	; (8003130 <HAL_RCC_OscConfig+0x33c>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	4b67      	ldr	r3, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f86:	4b66      	ldr	r3, [pc, #408]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0adb      	lsrs	r3, r3, #11
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	4013      	ands	r3, r2
 8002f90:	4a68      	ldr	r2, [pc, #416]	; (8003134 <HAL_RCC_OscConfig+0x340>)
 8002f92:	40da      	lsrs	r2, r3
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x344>)
 8002f96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_OscConfig+0x348>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff f8eb 	bl	8002178 <HAL_InitTick>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d051      	beq.n	800304a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e232      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d030      	beq.n	8003014 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fb2:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <HAL_RCC_OscConfig+0x33c>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002fc6:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0049      	lsls	r1, r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fa80 	bl	80024d8 <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fde:	f7ff fa7b 	bl	80024d8 <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e20f      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b48      	ldr	r3, [pc, #288]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a4a      	ldr	r2, [pc, #296]	; (800312c <HAL_RCC_OscConfig+0x338>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003014:	4b42      	ldr	r3, [pc, #264]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 800301a:	4949      	ldr	r1, [pc, #292]	; (8003140 <HAL_RCC_OscConfig+0x34c>)
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff fa5a 	bl	80024d8 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff fa55 	bl	80024d8 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1e9      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4013      	ands	r3, r2
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x236>
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800304a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	4013      	ands	r3, r2
 8003054:	d047      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003056:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2238      	movs	r2, #56	; 0x38
 800305c:	4013      	ands	r3, r2
 800305e:	2b18      	cmp	r3, #24
 8003060:	d10a      	bne.n	8003078 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	d03c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2f2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d138      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e1cb      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d019      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8003082:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8003086:	2101      	movs	r1, #1
 8003088:	430a      	orrs	r2, r1
 800308a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7ff fa24 	bl	80024d8 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7ff fa1f 	bl	80024d8 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1b3      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ac:	2202      	movs	r2, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	d0f1      	beq.n	8003096 <HAL_RCC_OscConfig+0x2a2>
 80030b2:	e018      	b.n	80030e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7ff fa0a 	bl	80024d8 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7ff fa05 	bl	80024d8 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e199      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	2202      	movs	r2, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	d1f1      	bne.n	80030ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d100      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2fe>
 80030f0:	e0c6      	b.n	8003280 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	231f      	movs	r3, #31
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2238      	movs	r2, #56	; 0x38
 8003100:	4013      	ands	r3, r2
 8003102:	2b20      	cmp	r3, #32
 8003104:	d11e      	bne.n	8003144 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_OscConfig+0x32c>)
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2202      	movs	r2, #2
 800310c:	4013      	ands	r3, r2
 800310e:	d100      	bne.n	8003112 <HAL_RCC_OscConfig+0x31e>
 8003110:	e0b6      	b.n	8003280 <HAL_RCC_OscConfig+0x48c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d000      	beq.n	800311c <HAL_RCC_OscConfig+0x328>
 800311a:	e0b1      	b.n	8003280 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e177      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
 8003120:	40021000 	.word	0x40021000
 8003124:	fffeffff 	.word	0xfffeffff
 8003128:	fffbffff 	.word	0xfffbffff
 800312c:	ffff80ff 	.word	0xffff80ff
 8003130:	ffffc7ff 	.word	0xffffc7ff
 8003134:	00f42400 	.word	0x00f42400
 8003138:	20000008 	.word	0x20000008
 800313c:	2000000c 	.word	0x2000000c
 8003140:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003144:	4bb4      	ldr	r3, [pc, #720]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	055b      	lsls	r3, r3, #21
 800314c:	4013      	ands	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_RCC_OscConfig+0x360>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x362>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d011      	beq.n	800317e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	4baf      	ldr	r3, [pc, #700]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800315c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800315e:	4bae      	ldr	r3, [pc, #696]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0549      	lsls	r1, r1, #21
 8003164:	430a      	orrs	r2, r1
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
 8003168:	4bab      	ldr	r3, [pc, #684]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800316a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	055b      	lsls	r3, r3, #21
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003176:	231f      	movs	r3, #31
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4ba7      	ldr	r3, [pc, #668]	; (800341c <HAL_RCC_OscConfig+0x628>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d11a      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318a:	4ba4      	ldr	r3, [pc, #656]	; (800341c <HAL_RCC_OscConfig+0x628>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4ba3      	ldr	r3, [pc, #652]	; (800341c <HAL_RCC_OscConfig+0x628>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0049      	lsls	r1, r1, #1
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003198:	f7ff f99e 	bl	80024d8 <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7ff f999 	bl	80024d8 <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e12d      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	4b99      	ldr	r3, [pc, #612]	; (800341c <HAL_RCC_OscConfig+0x628>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3e2>
 80031c8:	4b93      	ldr	r3, [pc, #588]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031cc:	4b92      	ldr	r3, [pc, #584]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031d4:	e01c      	b.n	8003210 <HAL_RCC_OscConfig+0x41c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x404>
 80031de:	4b8e      	ldr	r3, [pc, #568]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e2:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031e4:	2104      	movs	r1, #4
 80031e6:	430a      	orrs	r2, r1
 80031e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80031ea:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031ee:	4b8a      	ldr	r3, [pc, #552]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	430a      	orrs	r2, r1
 80031f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x41c>
 80031f8:	4b87      	ldr	r3, [pc, #540]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031fc:	4b86      	ldr	r3, [pc, #536]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80031fe:	2101      	movs	r1, #1
 8003200:	438a      	bics	r2, r1
 8003202:	65da      	str	r2, [r3, #92]	; 0x5c
 8003204:	4b84      	ldr	r3, [pc, #528]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003208:	4b83      	ldr	r3, [pc, #524]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800320a:	2104      	movs	r1, #4
 800320c:	438a      	bics	r2, r1
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d014      	beq.n	8003242 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7ff f95e 	bl	80024d8 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003220:	e009      	b.n	8003236 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7ff f959 	bl	80024d8 <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	4a7c      	ldr	r2, [pc, #496]	; (8003420 <HAL_RCC_OscConfig+0x62c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0ec      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x42e>
 8003240:	e013      	b.n	800326a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7ff f949 	bl	80024d8 <HAL_GetTick>
 8003246:	0003      	movs	r3, r0
 8003248:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324a:	e009      	b.n	8003260 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7ff f944 	bl	80024d8 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	4a72      	ldr	r2, [pc, #456]	; (8003420 <HAL_RCC_OscConfig+0x62c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0d7      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800326a:	231f      	movs	r3, #31
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003278:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800327a:	496a      	ldr	r1, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x630>)
 800327c:	400a      	ands	r2, r1
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d100      	bne.n	800328a <HAL_RCC_OscConfig+0x496>
 8003288:	e0c1      	b.n	800340e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2238      	movs	r2, #56	; 0x38
 8003290:	4013      	ands	r3, r2
 8003292:	2b10      	cmp	r3, #16
 8003294:	d100      	bne.n	8003298 <HAL_RCC_OscConfig+0x4a4>
 8003296:	e081      	b.n	800339c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d156      	bne.n	800334e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a0:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80032a6:	4960      	ldr	r1, [pc, #384]	; (8003428 <HAL_RCC_OscConfig+0x634>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7ff f914 	bl	80024d8 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7ff f90f 	bl	80024d8 <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0a3      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	049b      	lsls	r3, r3, #18
 80032d0:	4013      	ands	r3, r2
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_RCC_OscConfig+0x638>)
 80032da:	4013      	ands	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	431a      	orrs	r2, r3
 8003302:	4b45      	ldr	r3, [pc, #276]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	0449      	lsls	r1, r1, #17
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003316:	4b40      	ldr	r3, [pc, #256]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	0549      	lsls	r1, r1, #21
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7ff f8d8 	bl	80024d8 <HAL_GetTick>
 8003328:	0003      	movs	r3, r0
 800332a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7ff f8d3 	bl	80024d8 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e067      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	049b      	lsls	r3, r3, #18
 8003348:	4013      	ands	r3, r2
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x53a>
 800334c:	e05f      	b.n	800340e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b32      	ldr	r3, [pc, #200]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003354:	4934      	ldr	r1, [pc, #208]	; (8003428 <HAL_RCC_OscConfig+0x634>)
 8003356:	400a      	ands	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003360:	2103      	movs	r1, #3
 8003362:	438a      	bics	r2, r1
 8003364:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 800336c:	4930      	ldr	r1, [pc, #192]	; (8003430 <HAL_RCC_OscConfig+0x63c>)
 800336e:	400a      	ands	r2, r1
 8003370:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7ff f8b1 	bl	80024d8 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7ff f8ac 	bl	80024d8 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e040      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	049b      	lsls	r3, r3, #18
 8003396:	4013      	ands	r3, r2
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x588>
 800339a:	e038      	b.n	800340e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e033      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x624>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2203      	movs	r2, #3
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d126      	bne.n	800340a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2270      	movs	r2, #112	; 0x70
 80033c0:	401a      	ands	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11f      	bne.n	800340a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	23fe      	movs	r3, #254	; 0xfe
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	401a      	ands	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d116      	bne.n	800340a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	23f8      	movs	r3, #248	; 0xf8
 80033e0:	039b      	lsls	r3, r3, #14
 80033e2:	401a      	ands	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10e      	bne.n	800340a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	23e0      	movs	r3, #224	; 0xe0
 80033f0:	051b      	lsls	r3, r3, #20
 80033f2:	401a      	ands	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	0f5b      	lsrs	r3, r3, #29
 8003400:	075a      	lsls	r2, r3, #29
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b008      	add	sp, #32
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	00001388 	.word	0x00001388
 8003424:	efffffff 	.word	0xefffffff
 8003428:	feffffff 	.word	0xfeffffff
 800342c:	11c1808c 	.word	0x11c1808c
 8003430:	eefeffff 	.word	0xeefeffff

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0e9      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2207      	movs	r2, #7
 800344e:	4013      	ands	r3, r2
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d91e      	bls.n	8003494 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b73      	ldr	r3, [pc, #460]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2207      	movs	r2, #7
 800345c:	4393      	bics	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003468:	f7ff f836 	bl	80024d8 <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003470:	e009      	b.n	8003486 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003472:	f7ff f831 	bl	80024d8 <HAL_GetTick>
 8003476:	0002      	movs	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <HAL_RCC_ClockConfig+0x1f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0ca      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003486:	4b67      	ldr	r3, [pc, #412]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2207      	movs	r2, #7
 800348c:	4013      	ands	r3, r2
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d1ee      	bne.n	8003472 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2202      	movs	r2, #2
 800349a:	4013      	ands	r3, r2
 800349c:	d015      	beq.n	80034ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	d006      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034a8:	4b60      	ldr	r3, [pc, #384]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80034ae:	21e0      	movs	r1, #224	; 0xe0
 80034b0:	01c9      	lsls	r1, r1, #7
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b6:	4b5d      	ldr	r3, [pc, #372]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <HAL_RCC_ClockConfig+0x1fc>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d057      	beq.n	8003584 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	4013      	ands	r3, r2
 80034e6:	d12b      	bne.n	8003540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e097      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f4:	4b4d      	ldr	r3, [pc, #308]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	049b      	lsls	r3, r3, #18
 80034fc:	4013      	ands	r3, r2
 80034fe:	d11f      	bne.n	8003540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e08b      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d107      	bne.n	800351c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350c:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4013      	ands	r3, r2
 8003516:	d113      	bne.n	8003540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e07f      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003524:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	2202      	movs	r2, #2
 800352a:	4013      	ands	r3, r2
 800352c:	d108      	bne.n	8003540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e074      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003532:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e06d      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003540:	4b3a      	ldr	r3, [pc, #232]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2207      	movs	r2, #7
 8003546:	4393      	bics	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fe ffc0 	bl	80024d8 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355c:	e009      	b.n	8003572 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355e:	f7fe ffbb 	bl	80024d8 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <HAL_RCC_ClockConfig+0x1f4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e054      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b2e      	ldr	r3, [pc, #184]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2238      	movs	r2, #56	; 0x38
 8003578:	401a      	ands	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	429a      	cmp	r2, r3
 8003582:	d1ec      	bne.n	800355e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2207      	movs	r2, #7
 800358a:	4013      	ands	r3, r2
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d21e      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2207      	movs	r2, #7
 8003598:	4393      	bics	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035a4:	f7fe ff98 	bl	80024d8 <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035ac:	e009      	b.n	80035c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ae:	f7fe ff93 	bl	80024d8 <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_RCC_ClockConfig+0x1f4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e02c      	b.n	800361c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_RCC_ClockConfig+0x1f0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2207      	movs	r2, #7
 80035c8:	4013      	ands	r3, r2
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_RCC_ClockConfig+0x200>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80035ee:	f000 f829 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80035f2:	0001      	movs	r1, r0
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	220f      	movs	r2, #15
 80035fc:	401a      	ands	r2, r3
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x204>)
 8003600:	0092      	lsls	r2, r2, #2
 8003602:	58d3      	ldr	r3, [r2, r3]
 8003604:	221f      	movs	r2, #31
 8003606:	4013      	ands	r3, r2
 8003608:	000a      	movs	r2, r1
 800360a:	40da      	lsrs	r2, r3
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_ClockConfig+0x208>)
 800360e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x20c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0018      	movs	r0, r3
 8003616:	f7fe fdaf 	bl	8002178 <HAL_InitTick>
 800361a:	0003      	movs	r3, r0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40022000 	.word	0x40022000
 8003628:	00001388 	.word	0x00001388
 800362c:	40021000 	.word	0x40021000
 8003630:	fffff0ff 	.word	0xfffff0ff
 8003634:	ffff8fff 	.word	0xffff8fff
 8003638:	08014648 	.word	0x08014648
 800363c:	20000008 	.word	0x20000008
 8003640:	2000000c 	.word	0x2000000c

08003644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	4b3c      	ldr	r3, [pc, #240]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2238      	movs	r2, #56	; 0x38
 8003650:	4013      	ands	r3, r2
 8003652:	d10f      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003654:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0adb      	lsrs	r3, r3, #11
 800365a:	2207      	movs	r2, #7
 800365c:	4013      	ands	r3, r2
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	0013      	movs	r3, r2
 8003664:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	4835      	ldr	r0, [pc, #212]	; (8003740 <HAL_RCC_GetSysClockFreq+0xfc>)
 800366a:	f7fc fd57 	bl	800011c <__udivsi3>
 800366e:	0003      	movs	r3, r0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e05d      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003674:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2238      	movs	r2, #56	; 0x38
 800367a:	4013      	ands	r3, r2
 800367c:	2b08      	cmp	r3, #8
 800367e:	d102      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003680:	4b30      	ldr	r3, [pc, #192]	; (8003744 <HAL_RCC_GetSysClockFreq+0x100>)
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e054      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2238      	movs	r2, #56	; 0x38
 800368c:	4013      	ands	r3, r2
 800368e:	2b10      	cmp	r3, #16
 8003690:	d138      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2203      	movs	r2, #3
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	2207      	movs	r2, #7
 80036a4:	4013      	ands	r3, r2
 80036a6:	3301      	adds	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d10d      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4824      	ldr	r0, [pc, #144]	; (8003744 <HAL_RCC_GetSysClockFreq+0x100>)
 80036b4:	f7fc fd32 	bl	800011c <__udivsi3>
 80036b8:	0003      	movs	r3, r0
 80036ba:	0019      	movs	r1, r3
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	227f      	movs	r2, #127	; 0x7f
 80036c4:	4013      	ands	r3, r2
 80036c6:	434b      	muls	r3, r1
 80036c8:	617b      	str	r3, [r7, #20]
        break;
 80036ca:	e00d      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	481c      	ldr	r0, [pc, #112]	; (8003740 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036d0:	f7fc fd24 	bl	800011c <__udivsi3>
 80036d4:	0003      	movs	r3, r0
 80036d6:	0019      	movs	r1, r3
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	227f      	movs	r2, #127	; 0x7f
 80036e0:	4013      	ands	r3, r2
 80036e2:	434b      	muls	r3, r1
 80036e4:	617b      	str	r3, [r7, #20]
        break;
 80036e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	0f5b      	lsrs	r3, r3, #29
 80036ee:	2207      	movs	r2, #7
 80036f0:	4013      	ands	r3, r2
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f7fc fd0f 	bl	800011c <__udivsi3>
 80036fe:	0003      	movs	r3, r0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	e015      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2238      	movs	r2, #56	; 0x38
 800370a:	4013      	ands	r3, r2
 800370c:	2b20      	cmp	r3, #32
 800370e:	d103      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e00b      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_RCC_GetSysClockFreq+0xf8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2238      	movs	r2, #56	; 0x38
 800371e:	4013      	ands	r3, r2
 8003720:	2b18      	cmp	r3, #24
 8003722:	d103      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003724:	23fa      	movs	r3, #250	; 0xfa
 8003726:	01db      	lsls	r3, r3, #7
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	e001      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003730:	693b      	ldr	r3, [r7, #16]
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b006      	add	sp, #24
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	40021000 	.word	0x40021000
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b02      	ldr	r3, [pc, #8]	; (8003758 <HAL_RCC_GetHCLKFreq+0x10>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	20000008 	.word	0x20000008

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003760:	f7ff fff2 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003764:	0004      	movs	r4, r0
 8003766:	f7ff fb39 	bl	8002ddc <LL_RCC_GetAPB1Prescaler>
 800376a:	0003      	movs	r3, r0
 800376c:	0b1a      	lsrs	r2, r3, #12
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003770:	0092      	lsls	r2, r2, #2
 8003772:	58d3      	ldr	r3, [r2, r3]
 8003774:	221f      	movs	r2, #31
 8003776:	4013      	ands	r3, r2
 8003778:	40dc      	lsrs	r4, r3
 800377a:	0023      	movs	r3, r4
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bdb0      	pop	{r4, r5, r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	08014688 	.word	0x08014688

08003788 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2207      	movs	r2, #7
 8003796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_RCC_GetClockConfig+0x4c>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2207      	movs	r2, #7
 800379e:	401a      	ands	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_GetClockConfig+0x4c>)
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	23f0      	movs	r3, #240	; 0xf0
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	401a      	ands	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_RCC_GetClockConfig+0x4c>)
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	23e0      	movs	r3, #224	; 0xe0
 80037b8:	01db      	lsls	r3, r3, #7
 80037ba:	401a      	ands	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetClockConfig+0x50>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2207      	movs	r2, #7
 80037c6:	401a      	ands	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	601a      	str	r2, [r3, #0]
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40022000 	.word	0x40022000

080037dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037e4:	2313      	movs	r3, #19
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037ec:	2312      	movs	r3, #18
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	029b      	lsls	r3, r3, #10
 80037fc:	4013      	ands	r3, r2
 80037fe:	d100      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003800:	e0a4      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2311      	movs	r3, #17
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4bc3      	ldr	r3, [pc, #780]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800380c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	055b      	lsls	r3, r3, #21
 8003812:	4013      	ands	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	4bc0      	ldr	r3, [pc, #768]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800381a:	4bbf      	ldr	r3, [pc, #764]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	0549      	lsls	r1, r1, #21
 8003820:	430a      	orrs	r2, r1
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
 8003824:	4bbc      	ldr	r3, [pc, #752]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	055b      	lsls	r3, r3, #21
 800382c:	4013      	ands	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2311      	movs	r3, #17
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2201      	movs	r2, #1
 8003838:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800383a:	4bb8      	ldr	r3, [pc, #736]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4bb7      	ldr	r3, [pc, #732]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	0049      	lsls	r1, r1, #1
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003848:	f7fe fe46 	bl	80024d8 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003850:	e00b      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fe fe41 	bl	80024d8 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d904      	bls.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003860:	2313      	movs	r3, #19
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2203      	movs	r2, #3
 8003866:	701a      	strb	r2, [r3, #0]
        break;
 8003868:	e005      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386a:	4bac      	ldr	r3, [pc, #688]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4013      	ands	r3, r2
 8003874:	d0ed      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003876:	2313      	movs	r3, #19
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d154      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003880:	4ba5      	ldr	r3, [pc, #660]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003884:	23c0      	movs	r3, #192	; 0xc0
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4013      	ands	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d019      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	d014      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800389c:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	4a9f      	ldr	r2, [pc, #636]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a6:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038aa:	4b9b      	ldr	r3, [pc, #620]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	0249      	lsls	r1, r1, #9
 80038b0:	430a      	orrs	r2, r1
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b4:	4b98      	ldr	r3, [pc, #608]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038b8:	4b97      	ldr	r3, [pc, #604]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ba:	499a      	ldr	r1, [pc, #616]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80038bc:	400a      	ands	r2, r1
 80038be:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c0:	4b95      	ldr	r3, [pc, #596]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2201      	movs	r2, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	d016      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fe03 	bl	80024d8 <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	e00c      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d8:	f7fe fdfe 	bl	80024d8 <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	4a91      	ldr	r2, [pc, #580]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d904      	bls.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80038e8:	2313      	movs	r3, #19
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2203      	movs	r2, #3
 80038ee:	701a      	strb	r2, [r3, #0]
            break;
 80038f0:	e004      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f2:	4b89      	ldr	r3, [pc, #548]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d0ed      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80038fc:	2313      	movs	r3, #19
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003906:	4b84      	ldr	r3, [pc, #528]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	4a85      	ldr	r2, [pc, #532]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800390c:	4013      	ands	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003914:	4b80      	ldr	r3, [pc, #512]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003916:	430a      	orrs	r2, r1
 8003918:	65da      	str	r2, [r3, #92]	; 0x5c
 800391a:	e00c      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800391c:	2312      	movs	r3, #18
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2213      	movs	r2, #19
 8003922:	18ba      	adds	r2, r7, r2
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e005      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	2312      	movs	r3, #18
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2213      	movs	r2, #19
 8003930:	18ba      	adds	r2, r7, r2
 8003932:	7812      	ldrb	r2, [r2, #0]
 8003934:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003936:	2311      	movs	r3, #17
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b75      	ldr	r3, [pc, #468]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003944:	4b74      	ldr	r3, [pc, #464]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003946:	4979      	ldr	r1, [pc, #484]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003948:	400a      	ands	r2, r1
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2201      	movs	r2, #1
 8003952:	4013      	ands	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003956:	4b70      	ldr	r3, [pc, #448]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	2203      	movs	r2, #3
 800395c:	4393      	bics	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4b6c      	ldr	r3, [pc, #432]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003966:	430a      	orrs	r2, r1
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	220c      	movs	r2, #12
 800397a:	4393      	bics	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003984:	430a      	orrs	r2, r1
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	4013      	ands	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003992:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	4a66      	ldr	r2, [pc, #408]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003998:	4013      	ands	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4013      	ands	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b2:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	4a5f      	ldr	r2, [pc, #380]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039c2:	430a      	orrs	r2, r1
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4013      	ands	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039d2:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	4a58      	ldr	r2, [pc, #352]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d8:	4013      	ands	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e2:	430a      	orrs	r2, r1
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2220      	movs	r2, #32
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f0:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	4a51      	ldr	r2, [pc, #324]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	01db      	lsls	r3, r3, #7
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a10:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	0899      	lsrs	r1, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	0249      	lsls	r1, r1, #9
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	031b      	lsls	r3, r3, #12
 8003a44:	4013      	ands	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	4393      	bics	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	039b      	lsls	r3, r3, #14
 8003a64:	4013      	ands	r3, r2
 8003a66:	d016      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	4a34      	ldr	r2, [pc, #208]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	03db      	lsls	r3, r3, #15
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d106      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a88:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	0449      	lsls	r1, r1, #17
 8003a92:	430a      	orrs	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	03db      	lsls	r3, r3, #15
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	045b      	lsls	r3, r3, #17
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	0449      	lsls	r1, r1, #17
 8003acc:	430a      	orrs	r2, r1
 8003ace:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d016      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	01db      	lsls	r3, r3, #7
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d106      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	0249      	lsls	r1, r1, #9
 8003b06:	430a      	orrs	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b0a:	2312      	movs	r3, #18
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	781b      	ldrb	r3, [r3, #0]
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b006      	add	sp, #24
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	fffffcff 	.word	0xfffffcff
 8003b24:	fffeffff 	.word	0xfffeffff
 8003b28:	00001388 	.word	0x00001388
 8003b2c:	efffffff 	.word	0xefffffff
 8003b30:	fffff3ff 	.word	0xfffff3ff
 8003b34:	fff3ffff 	.word	0xfff3ffff
 8003b38:	ffcfffff 	.word	0xffcfffff
 8003b3c:	ffffcfff 	.word	0xffffcfff
 8003b40:	ffbfffff 	.word	0xffbfffff
 8003b44:	feffffff 	.word	0xfeffffff
 8003b48:	ffff3fff 	.word	0xffff3fff

08003b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0a8      	b.n	8003cb0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	2382      	movs	r3, #130	; 0x82
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d009      	beq.n	8003b86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	61da      	str	r2, [r3, #28]
 8003b78:	e005      	b.n	8003b86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	225d      	movs	r2, #93	; 0x5d
 8003b90:	5c9b      	ldrb	r3, [r3, r2]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	225c      	movs	r2, #92	; 0x5c
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7fe f9fc 	bl	8001fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	225d      	movs	r2, #93	; 0x5d
 8003bac:	2102      	movs	r1, #2
 8003bae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	23e0      	movs	r3, #224	; 0xe0
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d902      	bls.n	8003bd2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e002      	b.n	8003bd8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	015b      	lsls	r3, r3, #5
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	23f0      	movs	r3, #240	; 0xf0
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d008      	beq.n	8003bf6 <HAL_SPI_Init+0xaa>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	23e0      	movs	r3, #224	; 0xe0
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d002      	beq.n	8003bf6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	2382      	movs	r3, #130	; 0x82
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	2384      	movs	r3, #132	; 0x84
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	400b      	ands	r3, r1
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2102      	movs	r1, #2
 8003c12:	400b      	ands	r3, r1
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6999      	ldr	r1, [r3, #24]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	400b      	ands	r3, r1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2138      	movs	r1, #56	; 0x38
 8003c32:	400b      	ands	r3, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	0011      	movs	r1, r2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2110      	movs	r1, #16
 8003c64:	400b      	ands	r3, r1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	2108      	movs	r1, #8
 8003c6e:	400b      	ands	r3, r1
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68d9      	ldr	r1, [r3, #12]
 8003c76:	23f0      	movs	r3, #240	; 0xf0
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	400b      	ands	r3, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	0011      	movs	r1, r2
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	401a      	ands	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <HAL_SPI_Init+0x16c>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	225d      	movs	r2, #93	; 0x5d
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffff7ff 	.word	0xfffff7ff

08003cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e04a      	b.n	8003d64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	223d      	movs	r2, #61	; 0x3d
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223c      	movs	r2, #60	; 0x3c
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fe f9d5 	bl	8002094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	223d      	movs	r2, #61	; 0x3d
 8003cee:	2102      	movs	r1, #2
 8003cf0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	f000 f9e3 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2248      	movs	r2, #72	; 0x48
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	223e      	movs	r2, #62	; 0x3e
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223f      	movs	r2, #63	; 0x3f
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2241      	movs	r2, #65	; 0x41
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2242      	movs	r2, #66	; 0x42
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2243      	movs	r2, #67	; 0x43
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2244      	movs	r2, #68	; 0x44
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2245      	movs	r2, #69	; 0x45
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2246      	movs	r2, #70	; 0x46
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2247      	movs	r2, #71	; 0x47
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	223d      	movs	r2, #61	; 0x3d
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223d      	movs	r2, #61	; 0x3d
 8003d78:	5c9b      	ldrb	r3, [r3, r2]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e042      	b.n	8003e0a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223d      	movs	r2, #61	; 0x3d
 8003d88:	2102      	movs	r1, #2
 8003d8a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2101      	movs	r1, #1
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_TIM_Base_Start_IT+0xa8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <HAL_TIM_Base_Start_IT+0x5a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	05db      	lsls	r3, r3, #23
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d009      	beq.n	8003dc6 <HAL_TIM_Base_Start_IT+0x5a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_TIM_Base_Start_IT+0xac>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_TIM_Base_Start_IT+0x5a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <HAL_TIM_Base_Start_IT+0xb0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d116      	bne.n	8003df4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <HAL_TIM_Base_Start_IT+0xb4>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d016      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x9a>
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	025b      	lsls	r3, r3, #9
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d011      	beq.n	8003e06 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e008      	b.n	8003e06 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b004      	add	sp, #16
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	00010007 	.word	0x00010007

08003e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d124      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2202      	movs	r2, #2
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d11d      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4252      	negs	r2, r2
 8003e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4013      	ands	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 f916 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e007      	b.n	8003e7e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 f909 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f915 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d125      	bne.n	8003ede <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11e      	bne.n	8003ede <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	4252      	negs	r2, r2
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	23c0      	movs	r3, #192	; 0xc0
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 f8e9 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 f8dc 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 f8e8 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d124      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d11d      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2209      	movs	r2, #9
 8003f00:	4252      	negs	r2, r2
 8003f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2204      	movs	r2, #4
 8003f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2203      	movs	r2, #3
 8003f12:	4013      	ands	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 f8bd 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 f8b0 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 f8bc 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d125      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d11e      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2211      	movs	r2, #17
 8003f58:	4252      	negs	r2, r2
 8003f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	23c0      	movs	r3, #192	; 0xc0
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 f890 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e007      	b.n	8003f8a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 f883 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f88f 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2201      	movs	r2, #1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10f      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d108      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	4252      	negs	r2, r2
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7fd ff8b 	bl	8001ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d10f      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2280      	movs	r2, #128	; 0x80
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d108      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2281      	movs	r2, #129	; 0x81
 8003fe0:	4252      	negs	r2, r2
 8003fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 f8f6 	bl	80041d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d10e      	bne.n	800401e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	4013      	ands	r3, r2
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d107      	bne.n	800401e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_TIM_IRQHandler+0x260>)
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f000 f8e5 	bl	80041e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2240      	movs	r2, #64	; 0x40
 8004026:	4013      	ands	r3, r2
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d10f      	bne.n	800404c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	4013      	ands	r3, r2
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d108      	bne.n	800404c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	4252      	negs	r2, r2
 8004042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0018      	movs	r0, r3
 8004048:	f000 f836 	bl	80040b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2220      	movs	r2, #32
 8004054:	4013      	ands	r3, r2
 8004056:	2b20      	cmp	r3, #32
 8004058:	d10f      	bne.n	800407a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	4013      	ands	r3, r2
 8004064:	2b20      	cmp	r3, #32
 8004066:	d108      	bne.n	800407a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	4252      	negs	r2, r2
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f8a7 	bl	80041c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	fffffeff 	.word	0xfffffeff

08004088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a34      	ldr	r2, [pc, #208]	; (80041ac <TIM_Base_SetConfig+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d008      	beq.n	80040f2 <TIM_Base_SetConfig+0x2a>
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	05db      	lsls	r3, r3, #23
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d003      	beq.n	80040f2 <TIM_Base_SetConfig+0x2a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <TIM_Base_SetConfig+0xe8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d108      	bne.n	8004104 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2270      	movs	r2, #112	; 0x70
 80040f6:	4393      	bics	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a29      	ldr	r2, [pc, #164]	; (80041ac <TIM_Base_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d018      	beq.n	800413e <TIM_Base_SetConfig+0x76>
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	05db      	lsls	r3, r3, #23
 8004112:	429a      	cmp	r2, r3
 8004114:	d013      	beq.n	800413e <TIM_Base_SetConfig+0x76>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <TIM_Base_SetConfig+0xe8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00f      	beq.n	800413e <TIM_Base_SetConfig+0x76>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a24      	ldr	r2, [pc, #144]	; (80041b4 <TIM_Base_SetConfig+0xec>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00b      	beq.n	800413e <TIM_Base_SetConfig+0x76>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <TIM_Base_SetConfig+0xf0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0x76>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <TIM_Base_SetConfig+0xf4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0x76>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <TIM_Base_SetConfig+0xf8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d108      	bne.n	8004150 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <TIM_Base_SetConfig+0xfc>)
 8004142:	4013      	ands	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	4393      	bics	r3, r2
 8004156:	001a      	movs	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <TIM_Base_SetConfig+0xe4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0xce>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <TIM_Base_SetConfig+0xf0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0xce>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <TIM_Base_SetConfig+0xf4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0xce>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <TIM_Base_SetConfig+0xf8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d103      	bne.n	800419e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	615a      	str	r2, [r3, #20]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40002000 	.word	0x40002000
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800
 80041c4:	fffffcff 	.word	0xfffffcff

080041c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e046      	b.n	8004298 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2284      	movs	r2, #132	; 0x84
 800420e:	589b      	ldr	r3, [r3, r2]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	f7fd ff60 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2284      	movs	r2, #132	; 0x84
 8004228:	2124      	movs	r1, #36	; 0x24
 800422a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2101      	movs	r1, #1
 8004238:	438a      	bics	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f830 	bl	80042a4 <UART_SetConfig>
 8004244:	0003      	movs	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e024      	b.n	8004298 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fb03 	bl	8004864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	490d      	ldr	r1, [pc, #52]	; (80042a0 <HAL_UART_Init+0xa8>)
 800426a:	400a      	ands	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	212a      	movs	r1, #42	; 0x2a
 800427a:	438a      	bics	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fb9b 	bl	80049cc <UART_CheckIdleState>
 8004296:	0003      	movs	r3, r0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	ffffb7ff 	.word	0xffffb7ff

080042a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	b091      	sub	sp, #68	; 0x44
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ac:	231a      	movs	r3, #26
 80042ae:	2220      	movs	r2, #32
 80042b0:	4694      	mov	ip, r2
 80042b2:	44bc      	add	ip, r7
 80042b4:	4463      	add	r3, ip
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042d8:	4313      	orrs	r3, r2
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4ab8      	ldr	r2, [pc, #736]	; (80045c4 <UART_SetConfig+0x320>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ee:	430b      	orrs	r3, r1
 80042f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4ab3      	ldr	r2, [pc, #716]	; (80045c8 <UART_SetConfig+0x324>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0018      	movs	r0, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	0003      	movs	r3, r0
 8004308:	430b      	orrs	r3, r1
 800430a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4aad      	ldr	r2, [pc, #692]	; (80045cc <UART_SetConfig+0x328>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004322:	4313      	orrs	r3, r2
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4aa8      	ldr	r2, [pc, #672]	; (80045d0 <UART_SetConfig+0x32c>)
 800432e:	4013      	ands	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	430b      	orrs	r3, r1
 800433a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	220f      	movs	r2, #15
 8004344:	4393      	bics	r3, r2
 8004346:	0018      	movs	r0, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	0003      	movs	r3, r0
 8004352:	430b      	orrs	r3, r1
 8004354:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a9e      	ldr	r2, [pc, #632]	; (80045d4 <UART_SetConfig+0x330>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d134      	bne.n	80043ca <UART_SetConfig+0x126>
 8004360:	4b9d      	ldr	r3, [pc, #628]	; (80045d8 <UART_SetConfig+0x334>)
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	2203      	movs	r2, #3
 8004366:	4013      	ands	r3, r2
 8004368:	2b01      	cmp	r3, #1
 800436a:	d015      	beq.n	8004398 <UART_SetConfig+0xf4>
 800436c:	d304      	bcc.n	8004378 <UART_SetConfig+0xd4>
 800436e:	2b02      	cmp	r3, #2
 8004370:	d00a      	beq.n	8004388 <UART_SetConfig+0xe4>
 8004372:	2b03      	cmp	r3, #3
 8004374:	d018      	beq.n	80043a8 <UART_SetConfig+0x104>
 8004376:	e01f      	b.n	80043b8 <UART_SetConfig+0x114>
 8004378:	231b      	movs	r3, #27
 800437a:	2220      	movs	r2, #32
 800437c:	4694      	mov	ip, r2
 800437e:	44bc      	add	ip, r7
 8004380:	4463      	add	r3, ip
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e0c5      	b.n	8004514 <UART_SetConfig+0x270>
 8004388:	231b      	movs	r3, #27
 800438a:	2220      	movs	r2, #32
 800438c:	4694      	mov	ip, r2
 800438e:	44bc      	add	ip, r7
 8004390:	4463      	add	r3, ip
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e0bd      	b.n	8004514 <UART_SetConfig+0x270>
 8004398:	231b      	movs	r3, #27
 800439a:	2220      	movs	r2, #32
 800439c:	4694      	mov	ip, r2
 800439e:	44bc      	add	ip, r7
 80043a0:	4463      	add	r3, ip
 80043a2:	2204      	movs	r2, #4
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e0b5      	b.n	8004514 <UART_SetConfig+0x270>
 80043a8:	231b      	movs	r3, #27
 80043aa:	2220      	movs	r2, #32
 80043ac:	4694      	mov	ip, r2
 80043ae:	44bc      	add	ip, r7
 80043b0:	4463      	add	r3, ip
 80043b2:	2208      	movs	r2, #8
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e0ad      	b.n	8004514 <UART_SetConfig+0x270>
 80043b8:	231b      	movs	r3, #27
 80043ba:	2220      	movs	r2, #32
 80043bc:	4694      	mov	ip, r2
 80043be:	44bc      	add	ip, r7
 80043c0:	4463      	add	r3, ip
 80043c2:	2210      	movs	r2, #16
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	e0a4      	b.n	8004514 <UART_SetConfig+0x270>
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a83      	ldr	r2, [pc, #524]	; (80045dc <UART_SetConfig+0x338>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d137      	bne.n	8004444 <UART_SetConfig+0x1a0>
 80043d4:	4b80      	ldr	r3, [pc, #512]	; (80045d8 <UART_SetConfig+0x334>)
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	220c      	movs	r2, #12
 80043da:	4013      	ands	r3, r2
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d018      	beq.n	8004412 <UART_SetConfig+0x16e>
 80043e0:	d802      	bhi.n	80043e8 <UART_SetConfig+0x144>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <UART_SetConfig+0x14e>
 80043e6:	e024      	b.n	8004432 <UART_SetConfig+0x18e>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d00a      	beq.n	8004402 <UART_SetConfig+0x15e>
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d018      	beq.n	8004422 <UART_SetConfig+0x17e>
 80043f0:	e01f      	b.n	8004432 <UART_SetConfig+0x18e>
 80043f2:	231b      	movs	r3, #27
 80043f4:	2220      	movs	r2, #32
 80043f6:	4694      	mov	ip, r2
 80043f8:	44bc      	add	ip, r7
 80043fa:	4463      	add	r3, ip
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e088      	b.n	8004514 <UART_SetConfig+0x270>
 8004402:	231b      	movs	r3, #27
 8004404:	2220      	movs	r2, #32
 8004406:	4694      	mov	ip, r2
 8004408:	44bc      	add	ip, r7
 800440a:	4463      	add	r3, ip
 800440c:	2202      	movs	r2, #2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e080      	b.n	8004514 <UART_SetConfig+0x270>
 8004412:	231b      	movs	r3, #27
 8004414:	2220      	movs	r2, #32
 8004416:	4694      	mov	ip, r2
 8004418:	44bc      	add	ip, r7
 800441a:	4463      	add	r3, ip
 800441c:	2204      	movs	r2, #4
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e078      	b.n	8004514 <UART_SetConfig+0x270>
 8004422:	231b      	movs	r3, #27
 8004424:	2220      	movs	r2, #32
 8004426:	4694      	mov	ip, r2
 8004428:	44bc      	add	ip, r7
 800442a:	4463      	add	r3, ip
 800442c:	2208      	movs	r2, #8
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e070      	b.n	8004514 <UART_SetConfig+0x270>
 8004432:	231b      	movs	r3, #27
 8004434:	2220      	movs	r2, #32
 8004436:	4694      	mov	ip, r2
 8004438:	44bc      	add	ip, r7
 800443a:	4463      	add	r3, ip
 800443c:	2210      	movs	r2, #16
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	e067      	b.n	8004514 <UART_SetConfig+0x270>
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a65      	ldr	r2, [pc, #404]	; (80045e0 <UART_SetConfig+0x33c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d107      	bne.n	800445e <UART_SetConfig+0x1ba>
 800444e:	231b      	movs	r3, #27
 8004450:	2220      	movs	r2, #32
 8004452:	4694      	mov	ip, r2
 8004454:	44bc      	add	ip, r7
 8004456:	4463      	add	r3, ip
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e05a      	b.n	8004514 <UART_SetConfig+0x270>
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <UART_SetConfig+0x340>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d107      	bne.n	8004478 <UART_SetConfig+0x1d4>
 8004468:	231b      	movs	r3, #27
 800446a:	2220      	movs	r2, #32
 800446c:	4694      	mov	ip, r2
 800446e:	44bc      	add	ip, r7
 8004470:	4463      	add	r3, ip
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e04d      	b.n	8004514 <UART_SetConfig+0x270>
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a53      	ldr	r2, [pc, #332]	; (80045cc <UART_SetConfig+0x328>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d141      	bne.n	8004506 <UART_SetConfig+0x262>
 8004482:	4b55      	ldr	r3, [pc, #340]	; (80045d8 <UART_SetConfig+0x334>)
 8004484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004486:	23c0      	movs	r3, #192	; 0xc0
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4013      	ands	r3, r2
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	00d2      	lsls	r2, r2, #3
 8004490:	4293      	cmp	r3, r2
 8004492:	d01f      	beq.n	80044d4 <UART_SetConfig+0x230>
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	00d2      	lsls	r2, r2, #3
 8004498:	4293      	cmp	r3, r2
 800449a:	d802      	bhi.n	80044a2 <UART_SetConfig+0x1fe>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <UART_SetConfig+0x210>
 80044a0:	e028      	b.n	80044f4 <UART_SetConfig+0x250>
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	0112      	lsls	r2, r2, #4
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00c      	beq.n	80044c4 <UART_SetConfig+0x220>
 80044aa:	22c0      	movs	r2, #192	; 0xc0
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d018      	beq.n	80044e4 <UART_SetConfig+0x240>
 80044b2:	e01f      	b.n	80044f4 <UART_SetConfig+0x250>
 80044b4:	231b      	movs	r3, #27
 80044b6:	2220      	movs	r2, #32
 80044b8:	4694      	mov	ip, r2
 80044ba:	44bc      	add	ip, r7
 80044bc:	4463      	add	r3, ip
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e027      	b.n	8004514 <UART_SetConfig+0x270>
 80044c4:	231b      	movs	r3, #27
 80044c6:	2220      	movs	r2, #32
 80044c8:	4694      	mov	ip, r2
 80044ca:	44bc      	add	ip, r7
 80044cc:	4463      	add	r3, ip
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e01f      	b.n	8004514 <UART_SetConfig+0x270>
 80044d4:	231b      	movs	r3, #27
 80044d6:	2220      	movs	r2, #32
 80044d8:	4694      	mov	ip, r2
 80044da:	44bc      	add	ip, r7
 80044dc:	4463      	add	r3, ip
 80044de:	2204      	movs	r2, #4
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e017      	b.n	8004514 <UART_SetConfig+0x270>
 80044e4:	231b      	movs	r3, #27
 80044e6:	2220      	movs	r2, #32
 80044e8:	4694      	mov	ip, r2
 80044ea:	44bc      	add	ip, r7
 80044ec:	4463      	add	r3, ip
 80044ee:	2208      	movs	r2, #8
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e00f      	b.n	8004514 <UART_SetConfig+0x270>
 80044f4:	231b      	movs	r3, #27
 80044f6:	2220      	movs	r2, #32
 80044f8:	4694      	mov	ip, r2
 80044fa:	44bc      	add	ip, r7
 80044fc:	4463      	add	r3, ip
 80044fe:	2210      	movs	r2, #16
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	e006      	b.n	8004514 <UART_SetConfig+0x270>
 8004506:	231b      	movs	r3, #27
 8004508:	2220      	movs	r2, #32
 800450a:	4694      	mov	ip, r2
 800450c:	44bc      	add	ip, r7
 800450e:	4463      	add	r3, ip
 8004510:	2210      	movs	r2, #16
 8004512:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <UART_SetConfig+0x328>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d000      	beq.n	8004520 <UART_SetConfig+0x27c>
 800451e:	e0aa      	b.n	8004676 <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004520:	231b      	movs	r3, #27
 8004522:	2220      	movs	r2, #32
 8004524:	4694      	mov	ip, r2
 8004526:	44bc      	add	ip, r7
 8004528:	4463      	add	r3, ip
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d00d      	beq.n	800454c <UART_SetConfig+0x2a8>
 8004530:	dc02      	bgt.n	8004538 <UART_SetConfig+0x294>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <UART_SetConfig+0x29e>
 8004536:	e015      	b.n	8004564 <UART_SetConfig+0x2c0>
 8004538:	2b04      	cmp	r3, #4
 800453a:	d00a      	beq.n	8004552 <UART_SetConfig+0x2ae>
 800453c:	2b08      	cmp	r3, #8
 800453e:	d00d      	beq.n	800455c <UART_SetConfig+0x2b8>
 8004540:	e010      	b.n	8004564 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004542:	f7ff f90b 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8004546:	0003      	movs	r3, r0
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800454a:	e015      	b.n	8004578 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <UART_SetConfig+0x344>)
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004550:	e012      	b.n	8004578 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7ff f877 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8004556:	0003      	movs	r3, r0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800455a:	e00d      	b.n	8004578 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004562:	e009      	b.n	8004578 <UART_SetConfig+0x2d4>
      default:
        pclk = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004568:	231a      	movs	r3, #26
 800456a:	2220      	movs	r2, #32
 800456c:	4694      	mov	ip, r2
 800456e:	44bc      	add	ip, r7
 8004570:	4463      	add	r3, ip
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
        break;
 8004576:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d100      	bne.n	8004580 <UART_SetConfig+0x2dc>
 800457e:	e14f      	b.n	8004820 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <UART_SetConfig+0x348>)
 8004586:	0052      	lsls	r2, r2, #1
 8004588:	5ad3      	ldrh	r3, [r2, r3]
 800458a:	0019      	movs	r1, r3
 800458c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800458e:	f7fb fdc5 	bl	800011c <__udivsi3>
 8004592:	0003      	movs	r3, r0
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	0013      	movs	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d305      	bcc.n	80045b2 <UART_SetConfig+0x30e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d91e      	bls.n	80045f0 <UART_SetConfig+0x34c>
      {
        ret = HAL_ERROR;
 80045b2:	231a      	movs	r3, #26
 80045b4:	2220      	movs	r2, #32
 80045b6:	4694      	mov	ip, r2
 80045b8:	44bc      	add	ip, r7
 80045ba:	4463      	add	r3, ip
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e12e      	b.n	8004820 <UART_SetConfig+0x57c>
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	cfff69f3 	.word	0xcfff69f3
 80045c8:	ffffcfff 	.word	0xffffcfff
 80045cc:	40008000 	.word	0x40008000
 80045d0:	11fff4ff 	.word	0x11fff4ff
 80045d4:	40013800 	.word	0x40013800
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40004400 	.word	0x40004400
 80045e0:	40004800 	.word	0x40004800
 80045e4:	40004c00 	.word	0x40004c00
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	080146a8 	.word	0x080146a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fc:	4b94      	ldr	r3, [pc, #592]	; (8004850 <UART_SetConfig+0x5ac>)
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	5ad3      	ldrh	r3, [r2, r3]
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	69b8      	ldr	r0, [r7, #24]
 800460e:	69f9      	ldr	r1, [r7, #28]
 8004610:	f7fb ff34 	bl	800047c <__aeabi_uldivmod>
 8004614:	0003      	movs	r3, r0
 8004616:	000c      	movs	r4, r1
 8004618:	0e1a      	lsrs	r2, r3, #24
 800461a:	0226      	lsls	r6, r4, #8
 800461c:	4316      	orrs	r6, r2
 800461e:	021d      	lsls	r5, r3, #8
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	1940      	adds	r0, r0, r5
 8004632:	4171      	adcs	r1, r6
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f7fb ff1b 	bl	800047c <__aeabi_uldivmod>
 8004646:	0003      	movs	r3, r0
 8004648:	000c      	movs	r4, r1
 800464a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	4a81      	ldr	r2, [pc, #516]	; (8004854 <UART_SetConfig+0x5b0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d908      	bls.n	8004666 <UART_SetConfig+0x3c2>
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	4a80      	ldr	r2, [pc, #512]	; (8004858 <UART_SetConfig+0x5b4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d804      	bhi.n	8004666 <UART_SetConfig+0x3c2>
        {
          huart->Instance->BRR = usartdiv;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004662:	60da      	str	r2, [r3, #12]
 8004664:	e0dc      	b.n	8004820 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 8004666:	231a      	movs	r3, #26
 8004668:	2220      	movs	r2, #32
 800466a:	4694      	mov	ip, r2
 800466c:	44bc      	add	ip, r7
 800466e:	4463      	add	r3, ip
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e0d4      	b.n	8004820 <UART_SetConfig+0x57c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	429a      	cmp	r2, r3
 8004680:	d000      	beq.n	8004684 <UART_SetConfig+0x3e0>
 8004682:	e073      	b.n	800476c <UART_SetConfig+0x4c8>
  {
    switch (clocksource)
 8004684:	231b      	movs	r3, #27
 8004686:	2220      	movs	r2, #32
 8004688:	4694      	mov	ip, r2
 800468a:	44bc      	add	ip, r7
 800468c:	4463      	add	r3, ip
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d00d      	beq.n	80046b0 <UART_SetConfig+0x40c>
 8004694:	dc02      	bgt.n	800469c <UART_SetConfig+0x3f8>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <UART_SetConfig+0x402>
 800469a:	e015      	b.n	80046c8 <UART_SetConfig+0x424>
 800469c:	2b04      	cmp	r3, #4
 800469e:	d00a      	beq.n	80046b6 <UART_SetConfig+0x412>
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d00d      	beq.n	80046c0 <UART_SetConfig+0x41c>
 80046a4:	e010      	b.n	80046c8 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a6:	f7ff f859 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 80046aa:	0003      	movs	r3, r0
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046ae:	e015      	b.n	80046dc <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b6a      	ldr	r3, [pc, #424]	; (800485c <UART_SetConfig+0x5b8>)
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046b4:	e012      	b.n	80046dc <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b6:	f7fe ffc5 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80046ba:	0003      	movs	r3, r0
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046be:	e00d      	b.n	80046dc <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046c6:	e009      	b.n	80046dc <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80046cc:	231a      	movs	r3, #26
 80046ce:	2220      	movs	r2, #32
 80046d0:	4694      	mov	ip, r2
 80046d2:	44bc      	add	ip, r7
 80046d4:	4463      	add	r3, ip
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
        break;
 80046da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d100      	bne.n	80046e4 <UART_SetConfig+0x440>
 80046e2:	e09d      	b.n	8004820 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <UART_SetConfig+0x5ac>)
 80046ea:	0052      	lsls	r2, r2, #1
 80046ec:	5ad3      	ldrh	r3, [r2, r3]
 80046ee:	0019      	movs	r1, r3
 80046f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046f2:	f7fb fd13 	bl	800011c <__udivsi3>
 80046f6:	0003      	movs	r3, r0
 80046f8:	005a      	lsls	r2, r3, #1
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	18d2      	adds	r2, r2, r3
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	0019      	movs	r1, r3
 8004708:	0010      	movs	r0, r2
 800470a:	f7fb fd07 	bl	800011c <__udivsi3>
 800470e:	0003      	movs	r3, r0
 8004710:	b29b      	uxth	r3, r3
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d920      	bls.n	800475c <UART_SetConfig+0x4b8>
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	4a50      	ldr	r2, [pc, #320]	; (8004860 <UART_SetConfig+0x5bc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d81c      	bhi.n	800475c <UART_SetConfig+0x4b8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	b29a      	uxth	r2, r3
 8004726:	200e      	movs	r0, #14
 8004728:	2420      	movs	r4, #32
 800472a:	193b      	adds	r3, r7, r4
 800472c:	181b      	adds	r3, r3, r0
 800472e:	210f      	movs	r1, #15
 8004730:	438a      	bics	r2, r1
 8004732:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	2207      	movs	r2, #7
 800473c:	4013      	ands	r3, r2
 800473e:	b299      	uxth	r1, r3
 8004740:	193b      	adds	r3, r7, r4
 8004742:	181b      	adds	r3, r3, r0
 8004744:	193a      	adds	r2, r7, r4
 8004746:	1812      	adds	r2, r2, r0
 8004748:	8812      	ldrh	r2, [r2, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	193a      	adds	r2, r7, r4
 8004754:	1812      	adds	r2, r2, r0
 8004756:	8812      	ldrh	r2, [r2, #0]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	e061      	b.n	8004820 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 800475c:	231a      	movs	r3, #26
 800475e:	2220      	movs	r2, #32
 8004760:	4694      	mov	ip, r2
 8004762:	44bc      	add	ip, r7
 8004764:	4463      	add	r3, ip
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	e059      	b.n	8004820 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476c:	231b      	movs	r3, #27
 800476e:	2220      	movs	r2, #32
 8004770:	4694      	mov	ip, r2
 8004772:	44bc      	add	ip, r7
 8004774:	4463      	add	r3, ip
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d00d      	beq.n	8004798 <UART_SetConfig+0x4f4>
 800477c:	dc02      	bgt.n	8004784 <UART_SetConfig+0x4e0>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <UART_SetConfig+0x4ea>
 8004782:	e015      	b.n	80047b0 <UART_SetConfig+0x50c>
 8004784:	2b04      	cmp	r3, #4
 8004786:	d00a      	beq.n	800479e <UART_SetConfig+0x4fa>
 8004788:	2b08      	cmp	r3, #8
 800478a:	d00d      	beq.n	80047a8 <UART_SetConfig+0x504>
 800478c:	e010      	b.n	80047b0 <UART_SetConfig+0x50c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800478e:	f7fe ffe5 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8004792:	0003      	movs	r3, r0
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004796:	e015      	b.n	80047c4 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004798:	4b30      	ldr	r3, [pc, #192]	; (800485c <UART_SetConfig+0x5b8>)
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800479c:	e012      	b.n	80047c4 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479e:	f7fe ff51 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80047a2:	0003      	movs	r3, r0
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047a6:	e00d      	b.n	80047c4 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ae:	e009      	b.n	80047c4 <UART_SetConfig+0x520>
      default:
        pclk = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047b4:	231a      	movs	r3, #26
 80047b6:	2220      	movs	r2, #32
 80047b8:	4694      	mov	ip, r2
 80047ba:	44bc      	add	ip, r7
 80047bc:	4463      	add	r3, ip
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
        break;
 80047c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02a      	beq.n	8004820 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <UART_SetConfig+0x5ac>)
 80047d0:	0052      	lsls	r2, r2, #1
 80047d2:	5ad3      	ldrh	r3, [r2, r3]
 80047d4:	0019      	movs	r1, r3
 80047d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047d8:	f7fb fca0 	bl	800011c <__udivsi3>
 80047dc:	0003      	movs	r3, r0
 80047de:	001a      	movs	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	18d2      	adds	r2, r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	0019      	movs	r1, r3
 80047ee:	0010      	movs	r0, r2
 80047f0:	f7fb fc94 	bl	800011c <__udivsi3>
 80047f4:	0003      	movs	r3, r0
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b0f      	cmp	r3, #15
 80047fe:	d908      	bls.n	8004812 <UART_SetConfig+0x56e>
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	4a17      	ldr	r2, [pc, #92]	; (8004860 <UART_SetConfig+0x5bc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d804      	bhi.n	8004812 <UART_SetConfig+0x56e>
      {
        huart->Instance->BRR = usartdiv;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	e006      	b.n	8004820 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004812:	231a      	movs	r3, #26
 8004814:	2220      	movs	r2, #32
 8004816:	4694      	mov	ip, r2
 8004818:	44bc      	add	ip, r7
 800481a:	4463      	add	r3, ip
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	226a      	movs	r2, #106	; 0x6a
 8004824:	2101      	movs	r1, #1
 8004826:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	2268      	movs	r2, #104	; 0x68
 800482c:	2101      	movs	r1, #1
 800482e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	2200      	movs	r2, #0
 8004834:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	2200      	movs	r2, #0
 800483a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800483c:	231a      	movs	r3, #26
 800483e:	2220      	movs	r2, #32
 8004840:	4694      	mov	ip, r2
 8004842:	44bc      	add	ip, r7
 8004844:	4463      	add	r3, ip
 8004846:	781b      	ldrb	r3, [r3, #0]
}
 8004848:	0018      	movs	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	b011      	add	sp, #68	; 0x44
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	080146a8 	.word	0x080146a8
 8004854:	000002ff 	.word	0x000002ff
 8004858:	000fffff 	.word	0x000fffff
 800485c:	00f42400 	.word	0x00f42400
 8004860:	0000ffff 	.word	0x0000ffff

08004864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d00b      	beq.n	800488e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <UART_AdvFeatureConfig+0x144>)
 800487e:	4013      	ands	r3, r2
 8004880:	0019      	movs	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	2202      	movs	r2, #2
 8004894:	4013      	ands	r3, r2
 8004896:	d00b      	beq.n	80048b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a43      	ldr	r2, [pc, #268]	; (80049ac <UART_AdvFeatureConfig+0x148>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	0019      	movs	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	2204      	movs	r2, #4
 80048b6:	4013      	ands	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <UART_AdvFeatureConfig+0x14c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	2208      	movs	r2, #8
 80048d8:	4013      	ands	r3, r2
 80048da:	d00b      	beq.n	80048f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a34      	ldr	r2, [pc, #208]	; (80049b4 <UART_AdvFeatureConfig+0x150>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	2210      	movs	r2, #16
 80048fa:	4013      	ands	r3, r2
 80048fc:	d00b      	beq.n	8004916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <UART_AdvFeatureConfig+0x154>)
 8004906:	4013      	ands	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	2220      	movs	r2, #32
 800491c:	4013      	ands	r3, r2
 800491e:	d00b      	beq.n	8004938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4a25      	ldr	r2, [pc, #148]	; (80049bc <UART_AdvFeatureConfig+0x158>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4013      	ands	r3, r2
 8004940:	d01d      	beq.n	800497e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <UART_AdvFeatureConfig+0x15c>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	035b      	lsls	r3, r3, #13
 8004962:	429a      	cmp	r2, r3
 8004964:	d10b      	bne.n	800497e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <UART_AdvFeatureConfig+0x160>)
 800496e:	4013      	ands	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	4013      	ands	r3, r2
 8004986:	d00b      	beq.n	80049a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <UART_AdvFeatureConfig+0x164>)
 8004990:	4013      	ands	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	fffdffff 	.word	0xfffdffff
 80049ac:	fffeffff 	.word	0xfffeffff
 80049b0:	fffbffff 	.word	0xfffbffff
 80049b4:	ffff7fff 	.word	0xffff7fff
 80049b8:	ffffefff 	.word	0xffffefff
 80049bc:	ffffdfff 	.word	0xffffdfff
 80049c0:	ffefffff 	.word	0xffefffff
 80049c4:	ff9fffff 	.word	0xff9fffff
 80049c8:	fff7ffff 	.word	0xfff7ffff

080049cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	228c      	movs	r2, #140	; 0x8c
 80049d8:	2100      	movs	r1, #0
 80049da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049dc:	f7fd fd7c 	bl	80024d8 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2208      	movs	r2, #8
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d10d      	bne.n	8004a0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	0399      	lsls	r1, r3, #14
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <UART_CheckIdleState+0x94>)
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	0013      	movs	r3, r2
 8004a00:	2200      	movs	r2, #0
 8004a02:	f000 f82f 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 8004a06:	1e03      	subs	r3, r0, #0
 8004a08:	d001      	beq.n	8004a0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e024      	b.n	8004a58 <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2204      	movs	r2, #4
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d10d      	bne.n	8004a38 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	03d9      	lsls	r1, r3, #15
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <UART_CheckIdleState+0x94>)
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	0013      	movs	r3, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f000 f81a 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d001      	beq.n	8004a38 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e00f      	b.n	8004a58 <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2284      	movs	r2, #132	; 0x84
 8004a3c:	2120      	movs	r1, #32
 8004a3e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2288      	movs	r2, #136	; 0x88
 8004a44:	2120      	movs	r1, #32
 8004a46:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	01ffffff 	.word	0x01ffffff

08004a64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	1dfb      	adds	r3, r7, #7
 8004a72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a74:	e062      	b.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	d05f      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fd fd2c 	bl	80024d8 <HAL_GetTick>
 8004a80:	0002      	movs	r2, r0
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11d      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4931      	ldr	r1, [pc, #196]	; (8004b64 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004a9e:	400a      	ands	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2101      	movs	r1, #1
 8004aae:	438a      	bics	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2284      	movs	r2, #132	; 0x84
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2288      	movs	r2, #136	; 0x88
 8004abe:	2120      	movs	r1, #32
 8004ac0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e046      	b.n	8004b5c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d030      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d126      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2280      	movs	r2, #128	; 0x80
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4918      	ldr	r1, [pc, #96]	; (8004b64 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2101      	movs	r1, #1
 8004b14:	438a      	bics	r2, r1
 8004b16:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2284      	movs	r2, #132	; 0x84
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2288      	movs	r2, #136	; 0x88
 8004b24:	2120      	movs	r1, #32
 8004b26:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	228c      	movs	r2, #140	; 0x8c
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e00f      	b.n	8004b5c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	425a      	negs	r2, r3
 8004b4c:	4153      	adcs	r3, r2
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	001a      	movs	r2, r3
 8004b52:	1dfb      	adds	r3, r7, #7
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d08d      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	fffffe5f 	.word	0xfffffe5f

08004b68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2280      	movs	r2, #128	; 0x80
 8004b74:	5c9b      	ldrb	r3, [r3, r2]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_UARTEx_DisableFifoMode+0x16>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e027      	b.n	8004bce <HAL_UARTEx_DisableFifoMode+0x66>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2280      	movs	r2, #128	; 0x80
 8004b82:	2101      	movs	r1, #1
 8004b84:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2284      	movs	r2, #132	; 0x84
 8004b8a:	2124      	movs	r1, #36	; 0x24
 8004b8c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	438a      	bics	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2284      	movs	r2, #132	; 0x84
 8004bc0:	2120      	movs	r1, #32
 8004bc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	dfffffff 	.word	0xdfffffff

08004bdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	5c9b      	ldrb	r3, [r3, r2]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e02e      	b.n	8004c52 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2284      	movs	r2, #132	; 0x84
 8004c00:	2124      	movs	r1, #36	; 0x24
 8004c02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2101      	movs	r1, #1
 8004c18:	438a      	bics	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	08d9      	lsrs	r1, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f854 	bl	8004ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2284      	movs	r2, #132	; 0x84
 8004c44:	2120      	movs	r1, #32
 8004c46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	5c9b      	ldrb	r3, [r3, r2]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e02f      	b.n	8004cd4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	2101      	movs	r1, #1
 8004c7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2284      	movs	r2, #132	; 0x84
 8004c80:	2124      	movs	r1, #36	; 0x24
 8004c82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2101      	movs	r1, #1
 8004c98:	438a      	bics	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 f813 	bl	8004ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2284      	movs	r2, #132	; 0x84
 8004cc6:	2120      	movs	r1, #32
 8004cc8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2280      	movs	r2, #128	; 0x80
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	f1ffffff 	.word	0xf1ffffff

08004ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ce8:	2314      	movs	r3, #20
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	4a2f      	ldr	r2, [pc, #188]	; (8004dac <UARTEx_SetNbDataToProcess+0xcc>)
 8004cee:	ca03      	ldmia	r2!, {r0, r1}
 8004cf0:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	4a2e      	ldr	r2, [pc, #184]	; (8004db0 <UARTEx_SetNbDataToProcess+0xd0>)
 8004cf8:	ca03      	ldmia	r2!, {r0, r1}
 8004cfa:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d108      	bne.n	8004d16 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	226a      	movs	r2, #106	; 0x6a
 8004d08:	2101      	movs	r1, #1
 8004d0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2268      	movs	r2, #104	; 0x68
 8004d10:	2101      	movs	r1, #1
 8004d12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d14:	e046      	b.n	8004da4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d16:	261f      	movs	r6, #31
 8004d18:	19bb      	adds	r3, r7, r6
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d1e:	201e      	movs	r0, #30
 8004d20:	183b      	adds	r3, r7, r0
 8004d22:	2208      	movs	r2, #8
 8004d24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	0e5b      	lsrs	r3, r3, #25
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	241d      	movs	r4, #29
 8004d32:	193b      	adds	r3, r7, r4
 8004d34:	2107      	movs	r1, #7
 8004d36:	400a      	ands	r2, r1
 8004d38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	0f5b      	lsrs	r3, r3, #29
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	251c      	movs	r5, #28
 8004d46:	197b      	adds	r3, r7, r5
 8004d48:	2107      	movs	r1, #7
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	197a      	adds	r2, r7, r5
 8004d54:	7812      	ldrb	r2, [r2, #0]
 8004d56:	2114      	movs	r1, #20
 8004d58:	1879      	adds	r1, r7, r1
 8004d5a:	5c8a      	ldrb	r2, [r1, r2]
 8004d5c:	435a      	muls	r2, r3
 8004d5e:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d60:	197b      	adds	r3, r7, r5
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	250c      	movs	r5, #12
 8004d66:	197a      	adds	r2, r7, r5
 8004d68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	f7fb fa60 	bl	8000230 <__divsi3>
 8004d70:	0003      	movs	r3, r0
 8004d72:	b299      	uxth	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	226a      	movs	r2, #106	; 0x6a
 8004d78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d7a:	19bb      	adds	r3, r7, r6
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	193a      	adds	r2, r7, r4
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	2114      	movs	r1, #20
 8004d84:	1879      	adds	r1, r7, r1
 8004d86:	5c8a      	ldrb	r2, [r1, r2]
 8004d88:	435a      	muls	r2, r3
 8004d8a:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d8c:	193b      	adds	r3, r7, r4
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	197a      	adds	r2, r7, r5
 8004d92:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d94:	0019      	movs	r1, r3
 8004d96:	f7fb fa4b 	bl	8000230 <__divsi3>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	b299      	uxth	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2268      	movs	r2, #104	; 0x68
 8004da2:	5299      	strh	r1, [r3, r2]
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b009      	add	sp, #36	; 0x24
 8004daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dac:	08013e8c 	.word	0x08013e8c
 8004db0:	08013e94 	.word	0x08013e94

08004db4 <__NVIC_SetPriority>:
{
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	0002      	movs	r2, r0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	1dfb      	adds	r3, r7, #7
 8004dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc8:	d828      	bhi.n	8004e1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dca:	4a2f      	ldr	r2, [pc, #188]	; (8004e88 <__NVIC_SetPriority+0xd4>)
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	33c0      	adds	r3, #192	; 0xc0
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	589b      	ldr	r3, [r3, r2]
 8004dda:	1dfa      	adds	r2, r7, #7
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	0011      	movs	r1, r2
 8004de0:	2203      	movs	r2, #3
 8004de2:	400a      	ands	r2, r1
 8004de4:	00d2      	lsls	r2, r2, #3
 8004de6:	21ff      	movs	r1, #255	; 0xff
 8004de8:	4091      	lsls	r1, r2
 8004dea:	000a      	movs	r2, r1
 8004dec:	43d2      	mvns	r2, r2
 8004dee:	401a      	ands	r2, r3
 8004df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	019b      	lsls	r3, r3, #6
 8004df6:	22ff      	movs	r2, #255	; 0xff
 8004df8:	401a      	ands	r2, r3
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	2303      	movs	r3, #3
 8004e02:	4003      	ands	r3, r0
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e08:	481f      	ldr	r0, [pc, #124]	; (8004e88 <__NVIC_SetPriority+0xd4>)
 8004e0a:	1dfb      	adds	r3, r7, #7
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	430a      	orrs	r2, r1
 8004e14:	33c0      	adds	r3, #192	; 0xc0
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	501a      	str	r2, [r3, r0]
}
 8004e1a:	e031      	b.n	8004e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <__NVIC_SetPriority+0xd8>)
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	0019      	movs	r1, r3
 8004e24:	230f      	movs	r3, #15
 8004e26:	400b      	ands	r3, r1
 8004e28:	3b08      	subs	r3, #8
 8004e2a:	089b      	lsrs	r3, r3, #2
 8004e2c:	3306      	adds	r3, #6
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	18d3      	adds	r3, r2, r3
 8004e32:	3304      	adds	r3, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	1dfa      	adds	r2, r7, #7
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	0011      	movs	r1, r2
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	400a      	ands	r2, r1
 8004e40:	00d2      	lsls	r2, r2, #3
 8004e42:	21ff      	movs	r1, #255	; 0xff
 8004e44:	4091      	lsls	r1, r2
 8004e46:	000a      	movs	r2, r1
 8004e48:	43d2      	mvns	r2, r2
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	401a      	ands	r2, r3
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	4003      	ands	r3, r0
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e64:	4809      	ldr	r0, [pc, #36]	; (8004e8c <__NVIC_SetPriority+0xd8>)
 8004e66:	1dfb      	adds	r3, r7, #7
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	001c      	movs	r4, r3
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	4023      	ands	r3, r4
 8004e70:	3b08      	subs	r3, #8
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	430a      	orrs	r2, r1
 8004e76:	3306      	adds	r3, #6
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	18c3      	adds	r3, r0, r3
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	601a      	str	r2, [r3, #0]
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b003      	add	sp, #12
 8004e86:	bd90      	pop	{r4, r7, pc}
 8004e88:	e000e100 	.word	0xe000e100
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <SysTick_Handler+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e98:	f002 f842 	bl	8006f20 <xTaskGetSchedulerState>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ea2:	f002 fe01 	bl	8007aa8 <xPortSysTickHandler>
  }
}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	e000e010 	.word	0xe000e010

08004eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004eb4:	2305      	movs	r3, #5
 8004eb6:	425b      	negs	r3, r3
 8004eb8:	2100      	movs	r1, #0
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f7ff ff7a 	bl	8004db4 <__NVIC_SetPriority>
#endif
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ece:	f3ef 8305 	mrs	r3, IPSR
 8004ed2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004eda:	2306      	movs	r3, #6
 8004edc:	425b      	negs	r3, r3
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	e00c      	b.n	8004efc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <osKernelInitialize+0x40>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <osKernelInitialize+0x40>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	e002      	b.n	8004efc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	425b      	negs	r3, r3
 8004efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004efc:	687b      	ldr	r3, [r7, #4]
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	200000b4 	.word	0x200000b4

08004f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f12:	f3ef 8305 	mrs	r3, IPSR
 8004f16:	603b      	str	r3, [r7, #0]
  return(result);
 8004f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f1e:	2306      	movs	r3, #6
 8004f20:	425b      	negs	r3, r3
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	e010      	b.n	8004f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <osKernelStart+0x48>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d109      	bne.n	8004f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f2e:	f7ff ffbf 	bl	8004eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <osKernelStart+0x48>)
 8004f34:	2202      	movs	r2, #2
 8004f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f38:	f001 fc20 	bl	800677c <vTaskStartScheduler>
      stat = osOK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	e002      	b.n	8004f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f42:	2301      	movs	r3, #1
 8004f44:	425b      	negs	r3, r3
 8004f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f48:	687b      	ldr	r3, [r7, #4]
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	200000b4 	.word	0x200000b4

08004f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b08e      	sub	sp, #56	; 0x38
 8004f5c:	af04      	add	r7, sp, #16
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f68:	f3ef 8305 	mrs	r3, IPSR
 8004f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d000      	beq.n	8004f76 <osThreadNew+0x1e>
 8004f74:	e081      	b.n	800507a <osThreadNew+0x122>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d100      	bne.n	8004f7e <osThreadNew+0x26>
 8004f7c:	e07d      	b.n	800507a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f82:	2318      	movs	r3, #24
 8004f84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <osThreadNew+0x4c>
        name = attr->name;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <osThreadNew+0x70>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b38      	cmp	r3, #56	; 0x38
 8004fbc:	d804      	bhi.n	8004fc8 <osThreadNew+0x70>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d001      	beq.n	8004fcc <osThreadNew+0x74>
        return (NULL);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e057      	b.n	800507c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	089b      	lsrs	r3, r3, #2
 8004fda:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <osThreadNew+0xaa>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b5b      	cmp	r3, #91	; 0x5b
 8004fea:	d90a      	bls.n	8005002 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <osThreadNew+0xaa>
        mem = 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	e010      	b.n	8005024 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <osThreadNew+0xcc>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <osThreadNew+0xcc>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <osThreadNew+0xcc>
          mem = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e001      	b.n	8005024 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d112      	bne.n	8005050 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005032:	68bd      	ldr	r5, [r7, #8]
 8005034:	6a3c      	ldr	r4, [r7, #32]
 8005036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	9302      	str	r3, [sp, #8]
 800503c:	9201      	str	r2, [sp, #4]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	002b      	movs	r3, r5
 8005044:	0022      	movs	r2, r4
 8005046:	f001 fa16 	bl	8006476 <xTaskCreateStatic>
 800504a:	0003      	movs	r3, r0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e014      	b.n	800507a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d111      	bne.n	800507a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	b29a      	uxth	r2, r3
 800505a:	68bc      	ldr	r4, [r7, #8]
 800505c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	2310      	movs	r3, #16
 8005062:	18fb      	adds	r3, r7, r3
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	0023      	movs	r3, r4
 800506c:	f001 fa47 	bl	80064fe <xTaskCreate>
 8005070:	0003      	movs	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <osThreadNew+0x122>
            hTask = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800507a:	693b      	ldr	r3, [r7, #16]
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b00a      	add	sp, #40	; 0x28
 8005082:	bdb0      	pop	{r4, r5, r7, pc}

08005084 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005094:	f3ef 8305 	mrs	r3, IPSR
 8005098:	613b      	str	r3, [r7, #16]
  return(result);
 800509a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800509c:	2b00      	cmp	r3, #0
 800509e:	d000      	beq.n	80050a2 <osSemaphoreNew+0x1e>
 80050a0:	e080      	b.n	80051a4 <osSemaphoreNew+0x120>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d100      	bne.n	80050aa <osSemaphoreNew+0x26>
 80050a8:	e07c      	b.n	80051a4 <osSemaphoreNew+0x120>
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d900      	bls.n	80050b4 <osSemaphoreNew+0x30>
 80050b2:	e077      	b.n	80051a4 <osSemaphoreNew+0x120>
    mem = -1;
 80050b4:	2301      	movs	r3, #1
 80050b6:	425b      	negs	r3, r3
 80050b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d015      	beq.n	80050ec <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d006      	beq.n	80050d6 <osSemaphoreNew+0x52>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b4f      	cmp	r3, #79	; 0x4f
 80050ce:	d902      	bls.n	80050d6 <osSemaphoreNew+0x52>
        mem = 1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	e00c      	b.n	80050f0 <osSemaphoreNew+0x6c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d108      	bne.n	80050f0 <osSemaphoreNew+0x6c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <osSemaphoreNew+0x6c>
          mem = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e001      	b.n	80050f0 <osSemaphoreNew+0x6c>
        }
      }
    }
    else {
      mem = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3301      	adds	r3, #1
 80050f4:	d056      	beq.n	80051a4 <osSemaphoreNew+0x120>
      if (max_count == 1U) {
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d12c      	bne.n	8005156 <osSemaphoreNew+0xd2>
        if (mem == 1) {
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10c      	bne.n	800511c <osSemaphoreNew+0x98>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	2303      	movs	r3, #3
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	0013      	movs	r3, r2
 800510c:	2200      	movs	r2, #0
 800510e:	2100      	movs	r1, #0
 8005110:	2001      	movs	r0, #1
 8005112:	f000 fb5e 	bl	80057d2 <xQueueGenericCreateStatic>
 8005116:	0003      	movs	r3, r0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e006      	b.n	800512a <osSemaphoreNew+0xa6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800511c:	2203      	movs	r2, #3
 800511e:	2100      	movs	r1, #0
 8005120:	2001      	movs	r0, #1
 8005122:	f000 fba2 	bl	800586a <xQueueGenericCreate>
 8005126:	0003      	movs	r3, r0
 8005128:	61fb      	str	r3, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d027      	beq.n	8005180 <osSemaphoreNew+0xfc>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d024      	beq.n	8005180 <osSemaphoreNew+0xfc>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005136:	69f8      	ldr	r0, [r7, #28]
 8005138:	2300      	movs	r3, #0
 800513a:	2200      	movs	r2, #0
 800513c:	2100      	movs	r1, #0
 800513e:	f000 fc37 	bl	80059b0 <xQueueGenericSend>
 8005142:	0003      	movs	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d01b      	beq.n	8005180 <osSemaphoreNew+0xfc>
            vSemaphoreDelete (hSemaphore);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 ffbf 	bl	80060ce <vQueueDelete>
            hSemaphore = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e014      	b.n	8005180 <osSemaphoreNew+0xfc>
          }
        }
      }
      else {
        if (mem == 1) {
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d109      	bne.n	8005170 <osSemaphoreNew+0xec>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0018      	movs	r0, r3
 8005166:	f000 fbd9 	bl	800591c <xQueueCreateCountingSemaphoreStatic>
 800516a:	0003      	movs	r3, r0
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e007      	b.n	8005180 <osSemaphoreNew+0xfc>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0011      	movs	r1, r2
 8005176:	0018      	movs	r0, r3
 8005178:	f000 fbf7 	bl	800596a <xQueueCreateCountingSemaphore>
 800517c:	0003      	movs	r3, r0
 800517e:	61fb      	str	r3, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00e      	beq.n	80051a4 <osSemaphoreNew+0x120>
        if (attr != NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <osSemaphoreNew+0x110>
          name = attr->name;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e001      	b.n	8005198 <osSemaphoreNew+0x114>
        } else {
          name = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	0011      	movs	r1, r2
 800519e:	0018      	movs	r0, r3
 80051a0:	f001 f8e4 	bl	800636c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80051a4:	69fb      	ldr	r3, [r7, #28]
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b008      	add	sp, #32
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80051c8:	2304      	movs	r3, #4
 80051ca:	425b      	negs	r3, r3
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e037      	b.n	8005240 <osSemaphoreAcquire+0x90>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d0:	f3ef 8305 	mrs	r3, IPSR
 80051d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80051d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01e      	beq.n	800521a <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80051e2:	2304      	movs	r3, #4
 80051e4:	425b      	negs	r3, r3
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e02a      	b.n	8005240 <osSemaphoreAcquire+0x90>
    }
    else {
      yield = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80051ee:	2308      	movs	r3, #8
 80051f0:	18fa      	adds	r2, r7, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2100      	movs	r1, #0
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 ff06 	bl	8006008 <xQueueReceiveFromISR>
 80051fc:	0003      	movs	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d003      	beq.n	800520a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005202:	2303      	movs	r3, #3
 8005204:	425b      	negs	r3, r3
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e01a      	b.n	8005240 <osSemaphoreAcquire+0x90>
      } else {
        portYIELD_FROM_ISR (yield);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <osSemaphoreAcquire+0x90>
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <osSemaphoreAcquire+0x9c>)
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	0552      	lsls	r2, r2, #21
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e012      	b.n	8005240 <osSemaphoreAcquire+0x90>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	0011      	movs	r1, r2
 8005220:	0018      	movs	r0, r3
 8005222:	f000 fe17 	bl	8005e54 <xQueueSemaphoreTake>
 8005226:	0003      	movs	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d009      	beq.n	8005240 <osSemaphoreAcquire+0x90>
      if (timeout != 0U) {
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <osSemaphoreAcquire+0x8a>
        stat = osErrorTimeout;
 8005232:	2302      	movs	r3, #2
 8005234:	425b      	negs	r3, r3
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e002      	b.n	8005240 <osSemaphoreAcquire+0x90>
      } else {
        stat = osErrorResource;
 800523a:	2303      	movs	r3, #3
 800523c:	425b      	negs	r3, r3
 800523e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005240:	697b      	ldr	r3, [r7, #20]
}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b006      	add	sp, #24
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005266:	2304      	movs	r3, #4
 8005268:	425b      	negs	r3, r3
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e029      	b.n	80052c2 <osSemaphoreRelease+0x72>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800526e:	f3ef 8305 	mrs	r3, IPSR
 8005272:	60fb      	str	r3, [r7, #12]
  return(result);
 8005274:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005276:	2b00      	cmp	r3, #0
 8005278:	d017      	beq.n	80052aa <osSemaphoreRelease+0x5a>
    yield = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800527e:	2308      	movs	r3, #8
 8005280:	18fa      	adds	r2, r7, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	0011      	movs	r1, r2
 8005286:	0018      	movs	r0, r3
 8005288:	f000 fcca 	bl	8005c20 <xQueueGiveFromISR>
 800528c:	0003      	movs	r3, r0
 800528e:	2b01      	cmp	r3, #1
 8005290:	d003      	beq.n	800529a <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
 8005292:	2303      	movs	r3, #3
 8005294:	425b      	negs	r3, r3
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	e013      	b.n	80052c2 <osSemaphoreRelease+0x72>
    } else {
      portYIELD_FROM_ISR (yield);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d010      	beq.n	80052c2 <osSemaphoreRelease+0x72>
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <osSemaphoreRelease+0x7c>)
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	0552      	lsls	r2, r2, #21
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e00b      	b.n	80052c2 <osSemaphoreRelease+0x72>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80052aa:	6938      	ldr	r0, [r7, #16]
 80052ac:	2300      	movs	r3, #0
 80052ae:	2200      	movs	r2, #0
 80052b0:	2100      	movs	r1, #0
 80052b2:	f000 fb7d 	bl	80059b0 <xQueueGenericSend>
 80052b6:	0003      	movs	r3, r0
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d002      	beq.n	80052c2 <osSemaphoreRelease+0x72>
      stat = osErrorResource;
 80052bc:	2303      	movs	r3, #3
 80052be:	425b      	negs	r3, r3
 80052c0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80052c2:	697b      	ldr	r3, [r7, #20]
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b006      	add	sp, #24
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b08b      	sub	sp, #44	; 0x2c
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e0:	f3ef 8305 	mrs	r3, IPSR
 80052e4:	613b      	str	r3, [r7, #16]
  return(result);
 80052e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d000      	beq.n	80052ee <osMessageQueueNew+0x1e>
 80052ec:	e065      	b.n	80053ba <osMessageQueueNew+0xea>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d100      	bne.n	80052f6 <osMessageQueueNew+0x26>
 80052f4:	e061      	b.n	80053ba <osMessageQueueNew+0xea>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d05e      	beq.n	80053ba <osMessageQueueNew+0xea>
    mem = -1;
 80052fc:	2301      	movs	r3, #1
 80052fe:	425b      	negs	r3, r3
 8005300:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d028      	beq.n	800535a <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d011      	beq.n	8005334 <osMessageQueueNew+0x64>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b4f      	cmp	r3, #79	; 0x4f
 8005316:	d90d      	bls.n	8005334 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	434b      	muls	r3, r1
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <osMessageQueueNew+0x64>
        mem = 1;
 800532e:	2301      	movs	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e014      	b.n	800535e <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d110      	bne.n	800535e <osMessageQueueNew+0x8e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10c      	bne.n	800535e <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <osMessageQueueNew+0x8e>
          mem = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e001      	b.n	800535e <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d10d      	bne.n	8005380 <osMessageQueueNew+0xb0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689c      	ldr	r4, [r3, #8]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	2300      	movs	r3, #0
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	0023      	movs	r3, r4
 8005376:	f000 fa2c 	bl	80057d2 <xQueueGenericCreateStatic>
 800537a:	0003      	movs	r3, r0
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e00a      	b.n	8005396 <osMessageQueueNew+0xc6>
      #endif
    }
    else {
      if (mem == 0) {
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <osMessageQueueNew+0xc6>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	0018      	movs	r0, r3
 800538e:	f000 fa6c 	bl	800586a <xQueueGenericCreate>
 8005392:	0003      	movs	r3, r0
 8005394:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <osMessageQueueNew+0xea>
      if (attr != NULL) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <osMessageQueueNew+0xda>
        name = attr->name;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e001      	b.n	80053ae <osMessageQueueNew+0xde>
      } else {
        name = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	0011      	movs	r1, r2
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 ffd9 	bl	800636c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80053ba:	69fb      	ldr	r3, [r7, #28]
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b009      	add	sp, #36	; 0x24
 80053c2:	bd90      	pop	{r4, r7, pc}

080053c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	1dfb      	adds	r3, r7, #7
 80053d2:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053dc:	f3ef 8305 	mrs	r3, IPSR
 80053e0:	617b      	str	r3, [r7, #20]
  return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d024      	beq.n	8005432 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <osMessageQueuePut+0x36>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <osMessageQueuePut+0x36>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80053fa:	2304      	movs	r3, #4
 80053fc:	425b      	negs	r3, r3
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	e034      	b.n	800546c <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005406:	2310      	movs	r3, #16
 8005408:	18fa      	adds	r2, r7, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	69b8      	ldr	r0, [r7, #24]
 800540e:	2300      	movs	r3, #0
 8005410:	f000 fb92 	bl	8005b38 <xQueueGenericSendFromISR>
 8005414:	0003      	movs	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d003      	beq.n	8005422 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800541a:	2303      	movs	r3, #3
 800541c:	425b      	negs	r3, r3
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e024      	b.n	800546c <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d021      	beq.n	800546c <osMessageQueuePut+0xa8>
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <osMessageQueuePut+0xb4>)
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	0552      	lsls	r2, r2, #21
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e01c      	b.n	800546c <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <osMessageQueuePut+0x7a>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 800543e:	2304      	movs	r3, #4
 8005440:	425b      	negs	r3, r3
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e012      	b.n	800546c <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	69b8      	ldr	r0, [r7, #24]
 800544c:	2300      	movs	r3, #0
 800544e:	f000 faaf 	bl	80059b0 <xQueueGenericSend>
 8005452:	0003      	movs	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d009      	beq.n	800546c <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 800545e:	2302      	movs	r3, #2
 8005460:	425b      	negs	r3, r3
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	e002      	b.n	800546c <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8005466:	2303      	movs	r3, #3
 8005468:	425b      	negs	r3, r3
 800546a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800546c:	69fb      	ldr	r3, [r7, #28]
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b008      	add	sp, #32
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005492:	f3ef 8305 	mrs	r3, IPSR
 8005496:	617b      	str	r3, [r7, #20]
  return(result);
 8005498:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800549a:	2b00      	cmp	r3, #0
 800549c:	d024      	beq.n	80054e8 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <osMessageQueueGet+0x34>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <osMessageQueueGet+0x34>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80054b0:	2304      	movs	r3, #4
 80054b2:	425b      	negs	r3, r3
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	e034      	b.n	8005522 <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80054bc:	2310      	movs	r3, #16
 80054be:	18fa      	adds	r2, r7, r3
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fd9f 	bl	8006008 <xQueueReceiveFromISR>
 80054ca:	0003      	movs	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d003      	beq.n	80054d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80054d0:	2303      	movs	r3, #3
 80054d2:	425b      	negs	r3, r3
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	e024      	b.n	8005522 <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d021      	beq.n	8005522 <osMessageQueueGet+0xa6>
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <osMessageQueueGet+0xb0>)
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	0552      	lsls	r2, r2, #21
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e01c      	b.n	8005522 <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osMessageQueueGet+0x78>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 80054f4:	2304      	movs	r3, #4
 80054f6:	425b      	negs	r3, r3
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e012      	b.n	8005522 <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	0018      	movs	r0, r3
 8005504:	f000 fbf1 	bl	8005cea <xQueueReceive>
 8005508:	0003      	movs	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d009      	beq.n	8005522 <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 8005514:	2302      	movs	r3, #2
 8005516:	425b      	negs	r3, r3
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	e002      	b.n	8005522 <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 800551c:	2303      	movs	r3, #3
 800551e:	425b      	negs	r3, r3
 8005520:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005522:	69fb      	ldr	r3, [r7, #28]
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b008      	add	sp, #32
 800552a:	bd80      	pop	{r7, pc}
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553c:	f3ef 8305 	mrs	r3, IPSR
 8005540:	60fb      	str	r3, [r7, #12]
  return(result);
 8005542:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8005548:	2306      	movs	r3, #6
 800554a:	425b      	negs	r3, r3
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e00d      	b.n	800556c <osMessageQueueReset+0x3c>
  }
  else if (hQueue == NULL) {
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8005556:	2304      	movs	r3, #4
 8005558:	425b      	negs	r3, r3
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e006      	b.n	800556c <osMessageQueueReset+0x3c>
  }
  else {
    stat = osOK;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2100      	movs	r1, #0
 8005566:	0018      	movs	r0, r3
 8005568:	f000 f8df 	bl	800572a <xQueueGenericReset>
  }

  return (stat);
 800556c:	697b      	ldr	r3, [r7, #20]
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b006      	add	sp, #24
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <vApplicationGetIdleTaskMemory+0x28>)
 8005588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800558e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b004      	add	sp, #16
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	200000b8 	.word	0x200000b8
 80055a4:	20000114 	.word	0x20000114

080055a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a06      	ldr	r2, [pc, #24]	; (80055d0 <vApplicationGetTimerTaskMemory+0x28>)
 80055b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80055be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b004      	add	sp, #16
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000314 	.word	0x20000314
 80055d4:	20000370 	.word	0x20000370

080055d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3308      	adds	r3, #8
 80055e4:	001a      	movs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	4252      	negs	r2, r2
 80055f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3308      	adds	r3, #8
 80055f6:	001a      	movs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3308      	adds	r3, #8
 8005600:	001a      	movs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}

08005614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b002      	add	sp, #8
 8005628:	bd80      	pop	{r7, pc}

0800562a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bd80      	pop	{r7, pc}

0800566e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3301      	adds	r3, #1
 8005682:	d103      	bne.n	800568c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e00c      	b.n	80056a6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3308      	adds	r3, #8
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e002      	b.n	800569a <vListInsert+0x2c>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d2f6      	bcs.n	8005694 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bd80      	pop	{r7, pc}

080056da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6892      	ldr	r2, [r2, #8]
 80056f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6852      	ldr	r2, [r2, #4]
 80056fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d103      	bne.n	800570e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bd80      	pop	{r7, pc}

0800572a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <xQueueGenericReset+0x18>
 800573e:	b672      	cpsid	i
 8005740:	e7fe      	b.n	8005740 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005742:	f002 f955 	bl	80079f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	434b      	muls	r3, r1
 8005754:	18d2      	adds	r2, r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	1e59      	subs	r1, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	434b      	muls	r3, r1
 8005778:	18d2      	adds	r2, r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2244      	movs	r2, #68	; 0x44
 8005782:	21ff      	movs	r1, #255	; 0xff
 8005784:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2245      	movs	r2, #69	; 0x45
 800578a:	21ff      	movs	r1, #255	; 0xff
 800578c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10d      	bne.n	80057b0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d013      	beq.n	80057c4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3310      	adds	r3, #16
 80057a0:	0018      	movs	r0, r3
 80057a2:	f001 fa2b 	bl	8006bfc <xTaskRemoveFromEventList>
 80057a6:	1e03      	subs	r3, r0, #0
 80057a8:	d00c      	beq.n	80057c4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057aa:	f002 f911 	bl	80079d0 <vPortYield>
 80057ae:	e009      	b.n	80057c4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3310      	adds	r3, #16
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7ff ff0f 	bl	80055d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3324      	adds	r3, #36	; 0x24
 80057be:	0018      	movs	r0, r3
 80057c0:	f7ff ff0a 	bl	80055d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057c4:	f002 f926 	bl	8007a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057c8:	2301      	movs	r3, #1
}
 80057ca:	0018      	movs	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b004      	add	sp, #16
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057d2:	b590      	push	{r4, r7, lr}
 80057d4:	b089      	sub	sp, #36	; 0x24
 80057d6:	af02      	add	r7, sp, #8
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <xQueueGenericCreateStatic+0x18>
 80057e6:	b672      	cpsid	i
 80057e8:	e7fe      	b.n	80057e8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <xQueueGenericCreateStatic+0x22>
 80057f0:	b672      	cpsid	i
 80057f2:	e7fe      	b.n	80057f2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <xQueueGenericCreateStatic+0x2e>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <xQueueGenericCreateStatic+0x32>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <xQueueGenericCreateStatic+0x34>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <xQueueGenericCreateStatic+0x3c>
 800580a:	b672      	cpsid	i
 800580c:	e7fe      	b.n	800580c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <xQueueGenericCreateStatic+0x48>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <xQueueGenericCreateStatic+0x4c>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericCreateStatic+0x4e>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <xQueueGenericCreateStatic+0x56>
 8005824:	b672      	cpsid	i
 8005826:	e7fe      	b.n	8005826 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005828:	2350      	movs	r3, #80	; 0x50
 800582a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b50      	cmp	r3, #80	; 0x50
 8005830:	d001      	beq.n	8005836 <xQueueGenericCreateStatic+0x64>
 8005832:	b672      	cpsid	i
 8005834:	e7fe      	b.n	8005834 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005836:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00e      	beq.n	8005860 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2246      	movs	r2, #70	; 0x46
 8005846:	2101      	movs	r1, #1
 8005848:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800584a:	2328      	movs	r3, #40	; 0x28
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	781c      	ldrb	r4, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	0023      	movs	r3, r4
 800585c:	f000 f837 	bl	80058ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005860:	697b      	ldr	r3, [r7, #20]
	}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b007      	add	sp, #28
 8005868:	bd90      	pop	{r4, r7, pc}

0800586a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800586a:	b590      	push	{r4, r7, lr}
 800586c:	b08b      	sub	sp, #44	; 0x2c
 800586e:	af02      	add	r7, sp, #8
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	1dfb      	adds	r3, r7, #7
 8005876:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <xQueueGenericCreate+0x18>
 800587e:	b672      	cpsid	i
 8005880:	e7fe      	b.n	8005880 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4353      	muls	r3, r2
 8005888:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3350      	adds	r3, #80	; 0x50
 800588e:	0018      	movs	r0, r3
 8005890:	f002 f946 	bl	8007b20 <pvPortMalloc>
 8005894:	0003      	movs	r3, r0
 8005896:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d012      	beq.n	80058c4 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3350      	adds	r3, #80	; 0x50
 80058a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2246      	movs	r2, #70	; 0x46
 80058ac:	2100      	movs	r1, #0
 80058ae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b0:	1dfb      	adds	r3, r7, #7
 80058b2:	781c      	ldrb	r4, [r3, #0]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	0023      	movs	r3, r4
 80058c0:	f000 f805 	bl	80058ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058c4:	69bb      	ldr	r3, [r7, #24]
	}
 80058c6:	0018      	movs	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b009      	add	sp, #36	; 0x24
 80058cc:	bd90      	pop	{r4, r7, pc}

080058ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	001a      	movs	r2, r3
 80058dc:	1cfb      	adds	r3, r7, #3
 80058de:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e002      	b.n	80058f4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2101      	movs	r1, #1
 8005904:	0018      	movs	r0, r3
 8005906:	f7ff ff10 	bl	800572a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	1cfa      	adds	r2, r7, #3
 800590e:	214c      	movs	r1, #76	; 0x4c
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005914:	46c0      	nop			; (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	b004      	add	sp, #16
 800591a:	bd80      	pop	{r7, pc}

0800591c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <xQueueCreateCountingSemaphoreStatic+0x16>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	429a      	cmp	r2, r3
 8005938:	d901      	bls.n	800593e <xQueueCreateCountingSemaphoreStatic+0x22>
 800593a:	b672      	cpsid	i
 800593c:	e7fe      	b.n	800593c <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	2302      	movs	r3, #2
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	0013      	movs	r3, r2
 8005948:	2200      	movs	r2, #0
 800594a:	2100      	movs	r1, #0
 800594c:	f7ff ff41 	bl	80057d2 <xQueueGenericCreateStatic>
 8005950:	0003      	movs	r3, r0
 8005952:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005960:	697b      	ldr	r3, [r7, #20]
	}
 8005962:	0018      	movs	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	b006      	add	sp, #24
 8005968:	bd80      	pop	{r7, pc}

0800596a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <xQueueCreateCountingSemaphore+0x14>
 800597a:	b672      	cpsid	i
 800597c:	e7fe      	b.n	800597c <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d901      	bls.n	800598a <xQueueCreateCountingSemaphore+0x20>
 8005986:	b672      	cpsid	i
 8005988:	e7fe      	b.n	8005988 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	2100      	movs	r1, #0
 8005990:	0018      	movs	r0, r3
 8005992:	f7ff ff6a 	bl	800586a <xQueueGenericCreate>
 8005996:	0003      	movs	r3, r0
 8005998:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80059a6:	68fb      	ldr	r3, [r7, #12]
	}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b004      	add	sp, #16
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08a      	sub	sp, #40	; 0x28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericSend+0x20>
 80059cc:	b672      	cpsid	i
 80059ce:	e7fe      	b.n	80059ce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <xQueueGenericSend+0x2e>
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueGenericSend+0x32>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericSend+0x34>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <xQueueGenericSend+0x3c>
 80059e8:	b672      	cpsid	i
 80059ea:	e7fe      	b.n	80059ea <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d103      	bne.n	80059fa <xQueueGenericSend+0x4a>
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <xQueueGenericSend+0x4e>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueGenericSend+0x50>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <xQueueGenericSend+0x58>
 8005a04:	b672      	cpsid	i
 8005a06:	e7fe      	b.n	8005a06 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a08:	f001 fa8a 	bl	8006f20 <xTaskGetSchedulerState>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d102      	bne.n	8005a16 <xQueueGenericSend+0x66>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <xQueueGenericSend+0x6a>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <xQueueGenericSend+0x6c>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <xQueueGenericSend+0x74>
 8005a20:	b672      	cpsid	i
 8005a22:	e7fe      	b.n	8005a22 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a24:	f001 ffe4 	bl	80079f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <xQueueGenericSend+0x8a>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d11e      	bne.n	8005a78 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 fb76 	bl	8006132 <prvCopyDataToQueue>
 8005a46:	0003      	movs	r3, r0
 8005a48:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	0018      	movs	r0, r3
 8005a58:	f001 f8d0 	bl	8006bfc <xTaskRemoveFromEventList>
 8005a5c:	1e03      	subs	r3, r0, #0
 8005a5e:	d007      	beq.n	8005a70 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a60:	f001 ffb6 	bl	80079d0 <vPortYield>
 8005a64:	e004      	b.n	8005a70 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a6c:	f001 ffb0 	bl	80079d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a70:	f001 ffd0 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e05b      	b.n	8005b30 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a7e:	f001 ffc9 	bl	8007a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e054      	b.n	8005b30 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a8c:	2314      	movs	r3, #20
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	0018      	movs	r0, r3
 8005a92:	f001 f90f 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a9a:	f001 ffbb 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a9e:	f000 fec1 	bl	8006824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa2:	f001 ffa5 	bl	80079f0 <vPortEnterCritical>
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2244      	movs	r2, #68	; 0x44
 8005aaa:	5c9b      	ldrb	r3, [r3, r2]
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	d103      	bne.n	8005aba <xQueueGenericSend+0x10a>
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2244      	movs	r2, #68	; 0x44
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	5499      	strb	r1, [r3, r2]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2245      	movs	r2, #69	; 0x45
 8005abe:	5c9b      	ldrb	r3, [r3, r2]
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	d103      	bne.n	8005ace <xQueueGenericSend+0x11e>
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2245      	movs	r2, #69	; 0x45
 8005aca:	2100      	movs	r1, #0
 8005acc:	5499      	strb	r1, [r3, r2]
 8005ace:	f001 ffa1 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad2:	1d3a      	adds	r2, r7, #4
 8005ad4:	2314      	movs	r3, #20
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f001 f8fe 	bl	8006cdc <xTaskCheckForTimeOut>
 8005ae0:	1e03      	subs	r3, r0, #0
 8005ae2:	d11e      	bne.n	8005b22 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 fc28 	bl	800633c <prvIsQueueFull>
 8005aec:	1e03      	subs	r3, r0, #0
 8005aee:	d011      	beq.n	8005b14 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	3310      	adds	r3, #16
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	0011      	movs	r1, r2
 8005af8:	0018      	movs	r0, r3
 8005afa:	f001 f83b 	bl	8006b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 fba7 	bl	8006254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b06:	f000 fe99 	bl	800683c <xTaskResumeAll>
 8005b0a:	1e03      	subs	r3, r0, #0
 8005b0c:	d18a      	bne.n	8005a24 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005b0e:	f001 ff5f 	bl	80079d0 <vPortYield>
 8005b12:	e787      	b.n	8005a24 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	0018      	movs	r0, r3
 8005b18:	f000 fb9c 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1c:	f000 fe8e 	bl	800683c <xTaskResumeAll>
 8005b20:	e780      	b.n	8005a24 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 fb95 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b2a:	f000 fe87 	bl	800683c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b00a      	add	sp, #40	; 0x28
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b08b      	sub	sp, #44	; 0x2c
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <xQueueGenericSendFromISR+0x1c>
 8005b50:	b672      	cpsid	i
 8005b52:	e7fe      	b.n	8005b52 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSendFromISR+0x2a>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSendFromISR+0x2e>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSendFromISR+0x30>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <xQueueGenericSendFromISR+0x38>
 8005b6c:	b672      	cpsid	i
 8005b6e:	e7fe      	b.n	8005b6e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d103      	bne.n	8005b7e <xQueueGenericSendFromISR+0x46>
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <xQueueGenericSendFromISR+0x4a>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <xQueueGenericSendFromISR+0x4c>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <xQueueGenericSendFromISR+0x54>
 8005b88:	b672      	cpsid	i
 8005b8a:	e7fe      	b.n	8005b8a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8c:	f001 ff5a 	bl	8007a44 <ulSetInterruptMaskFromISR>
 8005b90:	0003      	movs	r3, r0
 8005b92:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d302      	bcc.n	8005ba6 <xQueueGenericSendFromISR+0x6e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d131      	bne.n	8005c0a <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ba6:	241b      	movs	r4, #27
 8005ba8:	193b      	adds	r3, r7, r4
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	2145      	movs	r1, #69	; 0x45
 8005bae:	5c52      	ldrb	r2, [r2, r1]
 8005bb0:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fab7 	bl	8006132 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bc4:	193b      	adds	r3, r7, r4
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	d111      	bne.n	8005bf2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	3324      	adds	r3, #36	; 0x24
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f001 f80e 	bl	8006bfc <xTaskRemoveFromEventList>
 8005be0:	1e03      	subs	r3, r0, #0
 8005be2:	d00f      	beq.n	8005c04 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00c      	beq.n	8005c04 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e008      	b.n	8005c04 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bf2:	231b      	movs	r3, #27
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	b259      	sxtb	r1, r3
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	2245      	movs	r2, #69	; 0x45
 8005c02:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005c04:	2301      	movs	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8005c08:	e001      	b.n	8005c0e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f001 ff1d 	bl	8007a50 <vClearInterruptMaskFromISR>

	return xReturn;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b00b      	add	sp, #44	; 0x2c
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <xQueueGiveFromISR+0x18>
 8005c34:	b672      	cpsid	i
 8005c36:	e7fe      	b.n	8005c36 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <xQueueGiveFromISR+0x24>
 8005c40:	b672      	cpsid	i
 8005c42:	e7fe      	b.n	8005c42 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <xQueueGiveFromISR+0x34>
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <xQueueGiveFromISR+0x38>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <xQueueGiveFromISR+0x3a>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <xQueueGiveFromISR+0x42>
 8005c5e:	b672      	cpsid	i
 8005c60:	e7fe      	b.n	8005c60 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c62:	f001 feef 	bl	8007a44 <ulSetInterruptMaskFromISR>
 8005c66:	0003      	movs	r3, r0
 8005c68:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d22c      	bcs.n	8005cd4 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c7a:	200f      	movs	r0, #15
 8005c7c:	183b      	adds	r3, r7, r0
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	2145      	movs	r1, #69	; 0x45
 8005c82:	5c52      	ldrb	r2, [r2, r1]
 8005c84:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c8e:	183b      	adds	r3, r7, r0
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b25b      	sxtb	r3, r3
 8005c94:	3301      	adds	r3, #1
 8005c96:	d111      	bne.n	8005cbc <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d016      	beq.n	8005cce <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3324      	adds	r3, #36	; 0x24
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f000 ffa9 	bl	8006bfc <xTaskRemoveFromEventList>
 8005caa:	1e03      	subs	r3, r0, #0
 8005cac:	d00f      	beq.n	8005cce <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e008      	b.n	8005cce <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	b259      	sxtb	r1, r3
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2245      	movs	r2, #69	; 0x45
 8005ccc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e001      	b.n	8005cd8 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f001 feb8 	bl	8007a50 <vClearInterruptMaskFromISR>

	return xReturn;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b008      	add	sp, #32
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b08a      	sub	sp, #40	; 0x28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <xQueueReceive+0x1e>
 8005d04:	b672      	cpsid	i
 8005d06:	e7fe      	b.n	8005d06 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <xQueueReceive+0x2c>
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <xQueueReceive+0x30>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <xQueueReceive+0x32>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <xQueueReceive+0x3a>
 8005d20:	b672      	cpsid	i
 8005d22:	e7fe      	b.n	8005d22 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d24:	f001 f8fc 	bl	8006f20 <xTaskGetSchedulerState>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d102      	bne.n	8005d32 <xQueueReceive+0x48>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xQueueReceive+0x4c>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <xQueueReceive+0x4e>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <xQueueReceive+0x56>
 8005d3c:	b672      	cpsid	i
 8005d3e:	e7fe      	b.n	8005d3e <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d40:	f001 fe56 	bl	80079f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	0011      	movs	r1, r2
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 fa56 	bl	8006208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	1e5a      	subs	r2, r3, #1
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	3310      	adds	r3, #16
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 ff43 	bl	8006bfc <xTaskRemoveFromEventList>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d001      	beq.n	8005d7e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d7a:	f001 fe29 	bl	80079d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d7e:	f001 fe49 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e062      	b.n	8005e4c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d8c:	f001 fe42 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e05b      	b.n	8005e4c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d9a:	2314      	movs	r3, #20
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 ff88 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005da8:	f001 fe34 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dac:	f000 fd3a 	bl	8006824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005db0:	f001 fe1e 	bl	80079f0 <vPortEnterCritical>
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2244      	movs	r2, #68	; 0x44
 8005db8:	5c9b      	ldrb	r3, [r3, r2]
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	d103      	bne.n	8005dc8 <xQueueReceive+0xde>
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	2244      	movs	r2, #68	; 0x44
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	2245      	movs	r2, #69	; 0x45
 8005dcc:	5c9b      	ldrb	r3, [r3, r2]
 8005dce:	b25b      	sxtb	r3, r3
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	d103      	bne.n	8005ddc <xQueueReceive+0xf2>
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2245      	movs	r2, #69	; 0x45
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5499      	strb	r1, [r3, r2]
 8005ddc:	f001 fe1a 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005de0:	1d3a      	adds	r2, r7, #4
 8005de2:	2314      	movs	r3, #20
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	0011      	movs	r1, r2
 8005de8:	0018      	movs	r0, r3
 8005dea:	f000 ff77 	bl	8006cdc <xTaskCheckForTimeOut>
 8005dee:	1e03      	subs	r3, r0, #0
 8005df0:	d11e      	bne.n	8005e30 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 fa8b 	bl	8006310 <prvIsQueueEmpty>
 8005dfa:	1e03      	subs	r3, r0, #0
 8005dfc:	d011      	beq.n	8005e22 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	3324      	adds	r3, #36	; 0x24
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	0011      	movs	r1, r2
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 feb4 	bl	8006b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f000 fa20 	bl	8006254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e14:	f000 fd12 	bl	800683c <xTaskResumeAll>
 8005e18:	1e03      	subs	r3, r0, #0
 8005e1a:	d191      	bne.n	8005d40 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005e1c:	f001 fdd8 	bl	80079d0 <vPortYield>
 8005e20:	e78e      	b.n	8005d40 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 fa15 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2a:	f000 fd07 	bl	800683c <xTaskResumeAll>
 8005e2e:	e787      	b.n	8005d40 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f000 fa0e 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e38:	f000 fd00 	bl	800683c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fa66 	bl	8006310 <prvIsQueueEmpty>
 8005e44:	1e03      	subs	r3, r0, #0
 8005e46:	d100      	bne.n	8005e4a <xQueueReceive+0x160>
 8005e48:	e77a      	b.n	8005d40 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b00a      	add	sp, #40	; 0x28
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <xQueueSemaphoreTake+0x20>
 8005e70:	b672      	cpsid	i
 8005e72:	e7fe      	b.n	8005e72 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <xQueueSemaphoreTake+0x2c>
 8005e7c:	b672      	cpsid	i
 8005e7e:	e7fe      	b.n	8005e7e <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e80:	f001 f84e 	bl	8006f20 <xTaskGetSchedulerState>
 8005e84:	1e03      	subs	r3, r0, #0
 8005e86:	d102      	bne.n	8005e8e <xQueueSemaphoreTake+0x3a>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <xQueueSemaphoreTake+0x3e>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <xQueueSemaphoreTake+0x40>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <xQueueSemaphoreTake+0x48>
 8005e98:	b672      	cpsid	i
 8005e9a:	e7fe      	b.n	8005e9a <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e9c:	f001 fda8 	bl	80079f0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01d      	beq.n	8005ee8 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ebc:	f001 f980 	bl	80071c0 <pvTaskIncrementMutexHeldCount>
 8005ec0:	0002      	movs	r2, r0
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 fe92 	bl	8006bfc <xTaskRemoveFromEventList>
 8005ed8:	1e03      	subs	r3, r0, #0
 8005eda:	d001      	beq.n	8005ee0 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005edc:	f001 fd78 	bl	80079d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ee0:	f001 fd98 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e08b      	b.n	8006000 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <xQueueSemaphoreTake+0xa4>
 8005ef4:	b672      	cpsid	i
 8005ef6:	e7fe      	b.n	8005ef6 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ef8:	f001 fd8c 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e07f      	b.n	8006000 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f06:	230c      	movs	r3, #12
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fed2 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f14:	f001 fd7e 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f18:	f000 fc84 	bl	8006824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f1c:	f001 fd68 	bl	80079f0 <vPortEnterCritical>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2244      	movs	r2, #68	; 0x44
 8005f24:	5c9b      	ldrb	r3, [r3, r2]
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	3301      	adds	r3, #1
 8005f2a:	d103      	bne.n	8005f34 <xQueueSemaphoreTake+0xe0>
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2244      	movs	r2, #68	; 0x44
 8005f30:	2100      	movs	r1, #0
 8005f32:	5499      	strb	r1, [r3, r2]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2245      	movs	r2, #69	; 0x45
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	d103      	bne.n	8005f48 <xQueueSemaphoreTake+0xf4>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2245      	movs	r2, #69	; 0x45
 8005f44:	2100      	movs	r1, #0
 8005f46:	5499      	strb	r1, [r3, r2]
 8005f48:	f001 fd64 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f4c:	003a      	movs	r2, r7
 8005f4e:	230c      	movs	r3, #12
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	0011      	movs	r1, r2
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 fec1 	bl	8006cdc <xTaskCheckForTimeOut>
 8005f5a:	1e03      	subs	r3, r0, #0
 8005f5c:	d12e      	bne.n	8005fbc <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 f9d5 	bl	8006310 <prvIsQueueEmpty>
 8005f66:	1e03      	subs	r3, r0, #0
 8005f68:	d021      	beq.n	8005fae <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005f72:	f001 fd3d 	bl	80079f0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f000 ffec 	bl	8006f58 <xTaskPriorityInherit>
 8005f80:	0003      	movs	r3, r0
 8005f82:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005f84:	f001 fd46 	bl	8007a14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3324      	adds	r3, #36	; 0x24
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	0011      	movs	r1, r2
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 fdef 	bl	8006b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 f95b 	bl	8006254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f9e:	f000 fc4d 	bl	800683c <xTaskResumeAll>
 8005fa2:	1e03      	subs	r3, r0, #0
 8005fa4:	d000      	beq.n	8005fa8 <xQueueSemaphoreTake+0x154>
 8005fa6:	e779      	b.n	8005e9c <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005fa8:	f001 fd12 	bl	80079d0 <vPortYield>
 8005fac:	e776      	b.n	8005e9c <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f000 f94f 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb6:	f000 fc41 	bl	800683c <xTaskResumeAll>
 8005fba:	e76f      	b.n	8005e9c <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f000 f948 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fc4:	f000 fc3a 	bl	800683c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f000 f9a0 	bl	8006310 <prvIsQueueEmpty>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d100      	bne.n	8005fd6 <xQueueSemaphoreTake+0x182>
 8005fd4:	e762      	b.n	8005e9c <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8005fdc:	f001 fd08 	bl	80079f0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 f88f 	bl	8006106 <prvGetDisinheritPriorityAfterTimeout>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	0011      	movs	r1, r2
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f001 f873 	bl	80070e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ffa:	f001 fd0b 	bl	8007a14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b00a      	add	sp, #40	; 0x28
 8006006:	bd80      	pop	{r7, pc}

08006008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b08b      	sub	sp, #44	; 0x2c
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <xQueueReceiveFromISR+0x1a>
 800601e:	b672      	cpsid	i
 8006020:	e7fe      	b.n	8006020 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <xQueueReceiveFromISR+0x28>
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <xQueueReceiveFromISR+0x2c>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <xQueueReceiveFromISR+0x2e>
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <xQueueReceiveFromISR+0x36>
 800603a:	b672      	cpsid	i
 800603c:	e7fe      	b.n	800603c <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800603e:	f001 fd01 	bl	8007a44 <ulSetInterruptMaskFromISR>
 8006042:	0003      	movs	r3, r0
 8006044:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d032      	beq.n	80060b8 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006052:	2417      	movs	r4, #23
 8006054:	193b      	adds	r3, r7, r4
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	2144      	movs	r1, #68	; 0x44
 800605a:	5c52      	ldrb	r2, [r2, r1]
 800605c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	0011      	movs	r1, r2
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f8cf 	bl	8006208 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006072:	193b      	adds	r3, r7, r4
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b25b      	sxtb	r3, r3
 8006078:	3301      	adds	r3, #1
 800607a:	d111      	bne.n	80060a0 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d016      	beq.n	80060b2 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	3310      	adds	r3, #16
 8006088:	0018      	movs	r0, r3
 800608a:	f000 fdb7 	bl	8006bfc <xTaskRemoveFromEventList>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d00f      	beq.n	80060b2 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00c      	beq.n	80060b2 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e008      	b.n	80060b2 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060a0:	2317      	movs	r3, #23
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	b259      	sxtb	r1, r3
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2244      	movs	r2, #68	; 0x44
 80060b0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80060b2:	2301      	movs	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
 80060b6:	e001      	b.n	80060bc <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	0018      	movs	r0, r3
 80060c0:	f001 fcc6 	bl	8007a50 <vClearInterruptMaskFromISR>

	return xReturn;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060c6:	0018      	movs	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b00b      	add	sp, #44	; 0x2c
 80060cc:	bd90      	pop	{r4, r7, pc}

080060ce <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <vQueueDelete+0x16>
 80060e0:	b672      	cpsid	i
 80060e2:	e7fe      	b.n	80060e2 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 f968 	bl	80063bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2246      	movs	r2, #70	; 0x46
 80060f0:	5c9b      	ldrb	r3, [r3, r2]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f001 fdbd 	bl	8007c78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	46bd      	mov	sp, r7
 8006102:	b004      	add	sp, #16
 8006104:	bd80      	pop	{r7, pc}

08006106 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	2b00      	cmp	r3, #0
 8006114:	d006      	beq.n	8006124 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2238      	movs	r2, #56	; 0x38
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e001      	b.n	8006128 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006128:	68fb      	ldr	r3, [r7, #12]
	}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	b004      	add	sp, #16
 8006130:	bd80      	pop	{r7, pc}

08006132 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b086      	sub	sp, #24
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10e      	bne.n	800616e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d14e      	bne.n	80061f6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 ff63 	bl	8007028 <xTaskPriorityDisinherit>
 8006162:	0003      	movs	r3, r0
 8006164:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	e043      	b.n	80061f6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d119      	bne.n	80061a8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6858      	ldr	r0, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	0019      	movs	r1, r3
 8006180:	f00c feac 	bl	8012edc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	18d2      	adds	r2, r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	d32b      	bcc.n	80061f6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	e026      	b.n	80061f6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68d8      	ldr	r0, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	0019      	movs	r1, r3
 80061b4:	f00c fe92 	bl	8012edc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	425b      	negs	r3, r3
 80061c2:	18d2      	adds	r2, r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d207      	bcs.n	80061e4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	425b      	negs	r3, r3
 80061de:	18d2      	adds	r2, r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d105      	bne.n	80061f6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b006      	add	sp, #24
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	18d2      	adds	r2, r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	d303      	bcc.n	800623c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68d9      	ldr	r1, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	0018      	movs	r0, r3
 8006248:	f00c fe48 	bl	8012edc <memcpy>
	}
}
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800625c:	f001 fbc8 	bl	80079f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006260:	230f      	movs	r3, #15
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	2145      	movs	r1, #69	; 0x45
 8006268:	5c52      	ldrb	r2, [r2, r1]
 800626a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800626c:	e013      	b.n	8006296 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3324      	adds	r3, #36	; 0x24
 800627a:	0018      	movs	r0, r3
 800627c:	f000 fcbe 	bl	8006bfc <xTaskRemoveFromEventList>
 8006280:	1e03      	subs	r3, r0, #0
 8006282:	d001      	beq.n	8006288 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006284:	f000 fd7a 	bl	8006d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006288:	210f      	movs	r1, #15
 800628a:	187b      	adds	r3, r7, r1
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	3b01      	subs	r3, #1
 8006290:	b2da      	uxtb	r2, r3
 8006292:	187b      	adds	r3, r7, r1
 8006294:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006296:	230f      	movs	r3, #15
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	b25b      	sxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dce5      	bgt.n	800626e <prvUnlockQueue+0x1a>
 80062a2:	e000      	b.n	80062a6 <prvUnlockQueue+0x52>
					break;
 80062a4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2245      	movs	r2, #69	; 0x45
 80062aa:	21ff      	movs	r1, #255	; 0xff
 80062ac:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80062ae:	f001 fbb1 	bl	8007a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062b2:	f001 fb9d 	bl	80079f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062b6:	230e      	movs	r3, #14
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	2144      	movs	r1, #68	; 0x44
 80062be:	5c52      	ldrb	r2, [r2, r1]
 80062c0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c2:	e013      	b.n	80062ec <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3310      	adds	r3, #16
 80062d0:	0018      	movs	r0, r3
 80062d2:	f000 fc93 	bl	8006bfc <xTaskRemoveFromEventList>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d001      	beq.n	80062de <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80062da:	f000 fd4f 	bl	8006d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062de:	210e      	movs	r1, #14
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062ec:	230e      	movs	r3, #14
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dce5      	bgt.n	80062c4 <prvUnlockQueue+0x70>
 80062f8:	e000      	b.n	80062fc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80062fa:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2244      	movs	r2, #68	; 0x44
 8006300:	21ff      	movs	r1, #255	; 0xff
 8006302:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006304:	f001 fb86 	bl	8007a14 <vPortExitCritical>
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b004      	add	sp, #16
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006318:	f001 fb6a 	bl	80079f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d102      	bne.n	800632a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006324:	2301      	movs	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e001      	b.n	800632e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800632e:	f001 fb71 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006332:	68fb      	ldr	r3, [r7, #12]
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b004      	add	sp, #16
 800633a:	bd80      	pop	{r7, pc}

0800633c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006344:	f001 fb54 	bl	80079f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	429a      	cmp	r2, r3
 8006352:	d102      	bne.n	800635a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e001      	b.n	800635e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800635e:	f001 fb59 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006362:	68fb      	ldr	r3, [r7, #12]
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b004      	add	sp, #16
 800636a:	bd80      	pop	{r7, pc}

0800636c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e015      	b.n	80063a8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vQueueAddToRegistry+0x4c>)
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	00d2      	lsls	r2, r2, #3
 8006382:	58d3      	ldr	r3, [r2, r3]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <vQueueAddToRegistry+0x4c>)
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	00d2      	lsls	r2, r2, #3
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006392:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <vQueueAddToRegistry+0x4c>)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	18d3      	adds	r3, r2, r3
 800639a:	3304      	adds	r3, #4
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063a0:	e005      	b.n	80063ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b07      	cmp	r3, #7
 80063ac:	d9e6      	bls.n	800637c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	2000798c 	.word	0x2000798c

080063bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e018      	b.n	80063fc <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80063ca:	4a10      	ldr	r2, [pc, #64]	; (800640c <vQueueUnregisterQueue+0x50>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	18d3      	adds	r3, r2, r3
 80063d2:	3304      	adds	r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d10c      	bne.n	80063f6 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <vQueueUnregisterQueue+0x50>)
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	00d2      	lsls	r2, r2, #3
 80063e2:	2100      	movs	r1, #0
 80063e4:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80063e6:	4a09      	ldr	r2, [pc, #36]	; (800640c <vQueueUnregisterQueue+0x50>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	18d3      	adds	r3, r2, r3
 80063ee:	3304      	adds	r3, #4
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
				break;
 80063f4:	e005      	b.n	8006402 <vQueueUnregisterQueue+0x46>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b07      	cmp	r3, #7
 8006400:	d9e3      	bls.n	80063ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b004      	add	sp, #16
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	2000798c 	.word	0x2000798c

08006410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006420:	f001 fae6 	bl	80079f0 <vPortEnterCritical>
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2244      	movs	r2, #68	; 0x44
 8006428:	5c9b      	ldrb	r3, [r3, r2]
 800642a:	b25b      	sxtb	r3, r3
 800642c:	3301      	adds	r3, #1
 800642e:	d103      	bne.n	8006438 <vQueueWaitForMessageRestricted+0x28>
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2244      	movs	r2, #68	; 0x44
 8006434:	2100      	movs	r1, #0
 8006436:	5499      	strb	r1, [r3, r2]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2245      	movs	r2, #69	; 0x45
 800643c:	5c9b      	ldrb	r3, [r3, r2]
 800643e:	b25b      	sxtb	r3, r3
 8006440:	3301      	adds	r3, #1
 8006442:	d103      	bne.n	800644c <vQueueWaitForMessageRestricted+0x3c>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2245      	movs	r2, #69	; 0x45
 8006448:	2100      	movs	r1, #0
 800644a:	5499      	strb	r1, [r3, r2]
 800644c:	f001 fae2 	bl	8007a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3324      	adds	r3, #36	; 0x24
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	0018      	movs	r0, r3
 8006462:	f000 fba5 	bl	8006bb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	0018      	movs	r0, r3
 800646a:	f7ff fef3 	bl	8006254 <prvUnlockQueue>
	}
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	46bd      	mov	sp, r7
 8006472:	b006      	add	sp, #24
 8006474:	bd80      	pop	{r7, pc}

08006476 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006476:	b590      	push	{r4, r7, lr}
 8006478:	b08d      	sub	sp, #52	; 0x34
 800647a:	af04      	add	r7, sp, #16
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <xTaskCreateStatic+0x18>
 800648a:	b672      	cpsid	i
 800648c:	e7fe      	b.n	800648c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <xTaskCreateStatic+0x22>
 8006494:	b672      	cpsid	i
 8006496:	e7fe      	b.n	8006496 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006498:	235c      	movs	r3, #92	; 0x5c
 800649a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b5c      	cmp	r3, #92	; 0x5c
 80064a0:	d001      	beq.n	80064a6 <xTaskCreateStatic+0x30>
 80064a2:	b672      	cpsid	i
 80064a4:	e7fe      	b.n	80064a4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064a6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d020      	beq.n	80064f0 <xTaskCreateStatic+0x7a>
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01d      	beq.n	80064f0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2259      	movs	r2, #89	; 0x59
 80064c2:	2102      	movs	r1, #2
 80064c4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064c6:	683c      	ldr	r4, [r7, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	2318      	movs	r3, #24
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	0023      	movs	r3, r4
 80064e2:	f000 f859 	bl	8006598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f000 f8df 	bl	80066ac <prvAddNewTaskToReadyList>
 80064ee:	e001      	b.n	80064f4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064f4:	69bb      	ldr	r3, [r7, #24]
	}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b009      	add	sp, #36	; 0x24
 80064fc:	bd90      	pop	{r4, r7, pc}

080064fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064fe:	b590      	push	{r4, r7, lr}
 8006500:	b08d      	sub	sp, #52	; 0x34
 8006502:	af04      	add	r7, sp, #16
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	1dbb      	adds	r3, r7, #6
 800650c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800650e:	1dbb      	adds	r3, r7, #6
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	0018      	movs	r0, r3
 8006516:	f001 fb03 	bl	8007b20 <pvPortMalloc>
 800651a:	0003      	movs	r3, r0
 800651c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d010      	beq.n	8006546 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006524:	205c      	movs	r0, #92	; 0x5c
 8006526:	f001 fafb 	bl	8007b20 <pvPortMalloc>
 800652a:	0003      	movs	r3, r0
 800652c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
 800653a:	e006      	b.n	800654a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	0018      	movs	r0, r3
 8006540:	f001 fb9a 	bl	8007c78 <vPortFree>
 8006544:	e001      	b.n	800654a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01a      	beq.n	8006586 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2259      	movs	r2, #89	; 0x59
 8006554:	2100      	movs	r1, #0
 8006556:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006558:	1dbb      	adds	r3, r7, #6
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	683c      	ldr	r4, [r7, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	2300      	movs	r3, #0
 8006564:	9303      	str	r3, [sp, #12]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	9302      	str	r3, [sp, #8]
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	0023      	movs	r3, r4
 8006574:	f000 f810 	bl	8006598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	0018      	movs	r0, r3
 800657c:	f000 f896 	bl	80066ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006580:	2301      	movs	r3, #1
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e002      	b.n	800658c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006586:	2301      	movs	r3, #1
 8006588:	425b      	negs	r3, r3
 800658a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800658c:	69bb      	ldr	r3, [r7, #24]
	}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b009      	add	sp, #36	; 0x24
 8006594:	bd90      	pop	{r4, r7, pc}
	...

08006598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	001a      	movs	r2, r3
 80065b0:	21a5      	movs	r1, #165	; 0xa5
 80065b2:	f00c fc9c 	bl	8012eee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	493a      	ldr	r1, [pc, #232]	; (80066a8 <prvInitialiseNewTask+0x110>)
 80065be:	468c      	mov	ip, r1
 80065c0:	4463      	add	r3, ip
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	18d3      	adds	r3, r2, r3
 80065c6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2207      	movs	r2, #7
 80065cc:	4393      	bics	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2207      	movs	r2, #7
 80065d4:	4013      	ands	r3, r2
 80065d6:	d001      	beq.n	80065dc <prvInitialiseNewTask+0x44>
 80065d8:	b672      	cpsid	i
 80065da:	e7fe      	b.n	80065da <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e013      	b.n	8006610 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	18d3      	adds	r3, r2, r3
 80065ee:	7818      	ldrb	r0, [r3, #0]
 80065f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f2:	2134      	movs	r1, #52	; 0x34
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	18d3      	adds	r3, r2, r3
 80065f8:	185b      	adds	r3, r3, r1
 80065fa:	1c02      	adds	r2, r0, #0
 80065fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	18d3      	adds	r3, r2, r3
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d006      	beq.n	8006618 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	3301      	adds	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d9e8      	bls.n	80065e8 <prvInitialiseNewTask+0x50>
 8006616:	e000      	b.n	800661a <prvInitialiseNewTask+0x82>
			{
				break;
 8006618:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2243      	movs	r2, #67	; 0x43
 800661e:	2100      	movs	r1, #0
 8006620:	5499      	strb	r1, [r3, r2]
 8006622:	e003      	b.n	800662c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2234      	movs	r2, #52	; 0x34
 8006628:	2100      	movs	r1, #0
 800662a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2b37      	cmp	r3, #55	; 0x37
 8006630:	d901      	bls.n	8006636 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006632:	2337      	movs	r3, #55	; 0x37
 8006634:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	6a3a      	ldr	r2, [r7, #32]
 800663a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	6a3a      	ldr	r2, [r7, #32]
 8006640:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	2200      	movs	r2, #0
 8006646:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	3304      	adds	r3, #4
 800664c:	0018      	movs	r0, r3
 800664e:	f7fe ffe1 	bl	8005614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	3318      	adds	r3, #24
 8006656:	0018      	movs	r0, r3
 8006658:	f7fe ffdc 	bl	8005614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	2238      	movs	r2, #56	; 0x38
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006670:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	2200      	movs	r2, #0
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	2258      	movs	r2, #88	; 0x58
 800667c:	2100      	movs	r1, #0
 800667e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	0018      	movs	r0, r3
 8006688:	f001 f918 	bl	80078bc <pxPortInitialiseStack>
 800668c:	0002      	movs	r2, r0
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b006      	add	sp, #24
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	3fffffff 	.word	0x3fffffff

080066ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066b4:	f001 f99c 	bl	80079f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066b8:	4b2a      	ldr	r3, [pc, #168]	; (8006764 <prvAddNewTaskToReadyList+0xb8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	4b29      	ldr	r3, [pc, #164]	; (8006764 <prvAddNewTaskToReadyList+0xb8>)
 80066c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80066c2:	4b29      	ldr	r3, [pc, #164]	; (8006768 <prvAddNewTaskToReadyList+0xbc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <prvAddNewTaskToReadyList+0xbc>)
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d0:	4b24      	ldr	r3, [pc, #144]	; (8006764 <prvAddNewTaskToReadyList+0xb8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d110      	bne.n	80066fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066d8:	f000 fb6a 	bl	8006db0 <prvInitialiseTaskLists>
 80066dc:	e00d      	b.n	80066fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066de:	4b23      	ldr	r3, [pc, #140]	; (800676c <prvAddNewTaskToReadyList+0xc0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066e6:	4b20      	ldr	r3, [pc, #128]	; (8006768 <prvAddNewTaskToReadyList+0xbc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d802      	bhi.n	80066fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <prvAddNewTaskToReadyList+0xbc>)
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <prvAddNewTaskToReadyList+0xc4>)
 8006702:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <prvAddNewTaskToReadyList+0xc4>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4b18      	ldr	r3, [pc, #96]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <prvAddNewTaskToReadyList+0x74>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	4b15      	ldr	r3, [pc, #84]	; (8006774 <prvAddNewTaskToReadyList+0xc8>)
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	0013      	movs	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	189b      	adds	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4a12      	ldr	r2, [pc, #72]	; (8006778 <prvAddNewTaskToReadyList+0xcc>)
 800672e:	189a      	adds	r2, r3, r2
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	0019      	movs	r1, r3
 8006736:	0010      	movs	r0, r2
 8006738:	f7fe ff77 	bl	800562a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800673c:	f001 f96a 	bl	8007a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <prvAddNewTaskToReadyList+0xc0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006748:	4b07      	ldr	r3, [pc, #28]	; (8006768 <prvAddNewTaskToReadyList+0xbc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	429a      	cmp	r2, r3
 8006754:	d201      	bcs.n	800675a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006756:	f001 f93b 	bl	80079d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	46bd      	mov	sp, r7
 800675e:	b002      	add	sp, #8
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000c44 	.word	0x20000c44
 8006768:	20000770 	.word	0x20000770
 800676c:	20000c50 	.word	0x20000c50
 8006770:	20000c60 	.word	0x20000c60
 8006774:	20000c4c 	.word	0x20000c4c
 8006778:	20000774 	.word	0x20000774

0800677c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b089      	sub	sp, #36	; 0x24
 8006780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800678a:	003a      	movs	r2, r7
 800678c:	1d39      	adds	r1, r7, #4
 800678e:	2308      	movs	r3, #8
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	0018      	movs	r0, r3
 8006794:	f7fe fef0 	bl	8005578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006798:	683c      	ldr	r4, [r7, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	491b      	ldr	r1, [pc, #108]	; (800680c <vTaskStartScheduler+0x90>)
 80067a0:	481b      	ldr	r0, [pc, #108]	; (8006810 <vTaskStartScheduler+0x94>)
 80067a2:	9202      	str	r2, [sp, #8]
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	2300      	movs	r3, #0
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2300      	movs	r3, #0
 80067ac:	0022      	movs	r2, r4
 80067ae:	f7ff fe62 	bl	8006476 <xTaskCreateStatic>
 80067b2:	0002      	movs	r2, r0
 80067b4:	4b17      	ldr	r3, [pc, #92]	; (8006814 <vTaskStartScheduler+0x98>)
 80067b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <vTaskStartScheduler+0x98>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067c0:	2301      	movs	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e001      	b.n	80067ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d103      	bne.n	80067d8 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80067d0:	f000 fd5c 	bl	800728c <xTimerCreateTimerTask>
 80067d4:	0003      	movs	r3, r0
 80067d6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d10d      	bne.n	80067fa <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80067de:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067e0:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <vTaskStartScheduler+0x9c>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	4252      	negs	r2, r2
 80067e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <vTaskStartScheduler+0xa0>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <vTaskStartScheduler+0xa4>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067f4:	f001 f8c8 	bl	8007988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067f8:	e004      	b.n	8006804 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	d101      	bne.n	8006804 <vTaskStartScheduler+0x88>
 8006800:	b672      	cpsid	i
 8006802:	e7fe      	b.n	8006802 <vTaskStartScheduler+0x86>
}
 8006804:	46c0      	nop			; (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b005      	add	sp, #20
 800680a:	bd90      	pop	{r4, r7, pc}
 800680c:	08013e9c 	.word	0x08013e9c
 8006810:	08006d91 	.word	0x08006d91
 8006814:	20000c68 	.word	0x20000c68
 8006818:	20000c64 	.word	0x20000c64
 800681c:	20000c50 	.word	0x20000c50
 8006820:	20000c48 	.word	0x20000c48

08006824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006828:	4b03      	ldr	r3, [pc, #12]	; (8006838 <vTaskSuspendAll+0x14>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	4b02      	ldr	r3, [pc, #8]	; (8006838 <vTaskSuspendAll+0x14>)
 8006830:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000c6c 	.word	0x20000c6c

0800683c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800684a:	4b3a      	ldr	r3, [pc, #232]	; (8006934 <xTaskResumeAll+0xf8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <xTaskResumeAll+0x1a>
 8006852:	b672      	cpsid	i
 8006854:	e7fe      	b.n	8006854 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006856:	f001 f8cb 	bl	80079f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800685a:	4b36      	ldr	r3, [pc, #216]	; (8006934 <xTaskResumeAll+0xf8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1e5a      	subs	r2, r3, #1
 8006860:	4b34      	ldr	r3, [pc, #208]	; (8006934 <xTaskResumeAll+0xf8>)
 8006862:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006864:	4b33      	ldr	r3, [pc, #204]	; (8006934 <xTaskResumeAll+0xf8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d15b      	bne.n	8006924 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800686c:	4b32      	ldr	r3, [pc, #200]	; (8006938 <xTaskResumeAll+0xfc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d057      	beq.n	8006924 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006874:	e02f      	b.n	80068d6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006876:	4b31      	ldr	r3, [pc, #196]	; (800693c <xTaskResumeAll+0x100>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3318      	adds	r3, #24
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe ff29 	bl	80056da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3304      	adds	r3, #4
 800688c:	0018      	movs	r0, r3
 800688e:	f7fe ff24 	bl	80056da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <xTaskResumeAll+0x104>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d903      	bls.n	80068a6 <xTaskResumeAll+0x6a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4b27      	ldr	r3, [pc, #156]	; (8006940 <xTaskResumeAll+0x104>)
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068aa:	0013      	movs	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4a24      	ldr	r2, [pc, #144]	; (8006944 <xTaskResumeAll+0x108>)
 80068b4:	189a      	adds	r2, r3, r2
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3304      	adds	r3, #4
 80068ba:	0019      	movs	r1, r3
 80068bc:	0010      	movs	r0, r2
 80068be:	f7fe feb4 	bl	800562a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	4b20      	ldr	r3, [pc, #128]	; (8006948 <xTaskResumeAll+0x10c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80068d0:	4b1e      	ldr	r3, [pc, #120]	; (800694c <xTaskResumeAll+0x110>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d6:	4b19      	ldr	r3, [pc, #100]	; (800693c <xTaskResumeAll+0x100>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1cb      	bne.n	8006876 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068e4:	f000 fafe 	bl	8006ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <xTaskResumeAll+0x114>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00f      	beq.n	8006914 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068f4:	f000 f83c 	bl	8006970 <xTaskIncrementTick>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d002      	beq.n	8006902 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80068fc:	4b13      	ldr	r3, [pc, #76]	; (800694c <xTaskResumeAll+0x110>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3b01      	subs	r3, #1
 8006906:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f2      	bne.n	80068f4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xTaskResumeAll+0x114>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006914:	4b0d      	ldr	r3, [pc, #52]	; (800694c <xTaskResumeAll+0x110>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006920:	f001 f856 	bl	80079d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006924:	f001 f876 	bl	8007a14 <vPortExitCritical>

	return xAlreadyYielded;
 8006928:	68bb      	ldr	r3, [r7, #8]
}
 800692a:	0018      	movs	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	b004      	add	sp, #16
 8006930:	bd80      	pop	{r7, pc}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	20000c6c 	.word	0x20000c6c
 8006938:	20000c44 	.word	0x20000c44
 800693c:	20000c04 	.word	0x20000c04
 8006940:	20000c4c 	.word	0x20000c4c
 8006944:	20000774 	.word	0x20000774
 8006948:	20000770 	.word	0x20000770
 800694c:	20000c58 	.word	0x20000c58
 8006950:	20000c54 	.word	0x20000c54

08006954 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <xTaskGetTickCount+0x18>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006960:	687b      	ldr	r3, [r7, #4]
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b002      	add	sp, #8
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	20000c48 	.word	0x20000c48

08006970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697a:	4b4a      	ldr	r3, [pc, #296]	; (8006aa4 <xTaskIncrementTick+0x134>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d000      	beq.n	8006984 <xTaskIncrementTick+0x14>
 8006982:	e084      	b.n	8006a8e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006984:	4b48      	ldr	r3, [pc, #288]	; (8006aa8 <xTaskIncrementTick+0x138>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800698c:	4b46      	ldr	r3, [pc, #280]	; (8006aa8 <xTaskIncrementTick+0x138>)
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d117      	bne.n	80069c8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006998:	4b44      	ldr	r3, [pc, #272]	; (8006aac <xTaskIncrementTick+0x13c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <xTaskIncrementTick+0x36>
 80069a2:	b672      	cpsid	i
 80069a4:	e7fe      	b.n	80069a4 <xTaskIncrementTick+0x34>
 80069a6:	4b41      	ldr	r3, [pc, #260]	; (8006aac <xTaskIncrementTick+0x13c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	4b40      	ldr	r3, [pc, #256]	; (8006ab0 <xTaskIncrementTick+0x140>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b3e      	ldr	r3, [pc, #248]	; (8006aac <xTaskIncrementTick+0x13c>)
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	4b3e      	ldr	r3, [pc, #248]	; (8006ab0 <xTaskIncrementTick+0x140>)
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <xTaskIncrementTick+0x144>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	4b3c      	ldr	r3, [pc, #240]	; (8006ab4 <xTaskIncrementTick+0x144>)
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	f000 fa8e 	bl	8006ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069c8:	4b3b      	ldr	r3, [pc, #236]	; (8006ab8 <xTaskIncrementTick+0x148>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d349      	bcc.n	8006a66 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d2:	4b36      	ldr	r3, [pc, #216]	; (8006aac <xTaskIncrementTick+0x13c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069dc:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <xTaskIncrementTick+0x148>)
 80069de:	2201      	movs	r2, #1
 80069e0:	4252      	negs	r2, r2
 80069e2:	601a      	str	r2, [r3, #0]
					break;
 80069e4:	e03f      	b.n	8006a66 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e6:	4b31      	ldr	r3, [pc, #196]	; (8006aac <xTaskIncrementTick+0x13c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d203      	bcs.n	8006a06 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069fe:	4b2e      	ldr	r3, [pc, #184]	; (8006ab8 <xTaskIncrementTick+0x148>)
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a04:	e02f      	b.n	8006a66 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7fe fe65 	bl	80056da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	3318      	adds	r3, #24
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7fe fe5c 	bl	80056da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a26:	4b25      	ldr	r3, [pc, #148]	; (8006abc <xTaskIncrementTick+0x14c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d903      	bls.n	8006a36 <xTaskIncrementTick+0xc6>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	4b22      	ldr	r3, [pc, #136]	; (8006abc <xTaskIncrementTick+0x14c>)
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	0013      	movs	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	189b      	adds	r3, r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <xTaskIncrementTick+0x150>)
 8006a44:	189a      	adds	r2, r3, r2
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	0010      	movs	r0, r2
 8006a4e:	f7fe fdec 	bl	800562a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <xTaskIncrementTick+0x154>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d3b8      	bcc.n	80069d2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a64:	e7b5      	b.n	80069d2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a66:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <xTaskIncrementTick+0x154>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	4914      	ldr	r1, [pc, #80]	; (8006ac0 <xTaskIncrementTick+0x150>)
 8006a6e:	0013      	movs	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	585b      	ldr	r3, [r3, r1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d901      	bls.n	8006a80 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a80:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <xTaskIncrementTick+0x158>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e004      	b.n	8006a98 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <xTaskIncrementTick+0x15c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <xTaskIncrementTick+0x15c>)
 8006a96:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a98:	697b      	ldr	r3, [r7, #20]
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b006      	add	sp, #24
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	20000c6c 	.word	0x20000c6c
 8006aa8:	20000c48 	.word	0x20000c48
 8006aac:	20000bfc 	.word	0x20000bfc
 8006ab0:	20000c00 	.word	0x20000c00
 8006ab4:	20000c5c 	.word	0x20000c5c
 8006ab8:	20000c64 	.word	0x20000c64
 8006abc:	20000c4c 	.word	0x20000c4c
 8006ac0:	20000774 	.word	0x20000774
 8006ac4:	20000770 	.word	0x20000770
 8006ac8:	20000c58 	.word	0x20000c58
 8006acc:	20000c54 	.word	0x20000c54

08006ad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ad6:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <vTaskSwitchContext+0x90>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ade:	4b21      	ldr	r3, [pc, #132]	; (8006b64 <vTaskSwitchContext+0x94>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ae4:	e037      	b.n	8006b56 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006ae6:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <vTaskSwitchContext+0x94>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aec:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <vTaskSwitchContext+0x98>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	e007      	b.n	8006b04 <vTaskSwitchContext+0x34>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <vTaskSwitchContext+0x2e>
 8006afa:	b672      	cpsid	i
 8006afc:	e7fe      	b.n	8006afc <vTaskSwitchContext+0x2c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	4919      	ldr	r1, [pc, #100]	; (8006b6c <vTaskSwitchContext+0x9c>)
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	0013      	movs	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	585b      	ldr	r3, [r3, r1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0ee      	beq.n	8006af4 <vTaskSwitchContext+0x24>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	0013      	movs	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	189b      	adds	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a12      	ldr	r2, [pc, #72]	; (8006b6c <vTaskSwitchContext+0x9c>)
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	605a      	str	r2, [r3, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d104      	bne.n	8006b46 <vTaskSwitchContext+0x76>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <vTaskSwitchContext+0xa0>)
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <vTaskSwitchContext+0x98>)
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	20000c6c 	.word	0x20000c6c
 8006b64:	20000c58 	.word	0x20000c58
 8006b68:	20000c4c 	.word	0x20000c4c
 8006b6c:	20000774 	.word	0x20000774
 8006b70:	20000770 	.word	0x20000770

08006b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <vTaskPlaceOnEventList+0x14>
 8006b84:	b672      	cpsid	i
 8006b86:	e7fe      	b.n	8006b86 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <vTaskPlaceOnEventList+0x38>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	001a      	movs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	0011      	movs	r1, r2
 8006b94:	0018      	movs	r0, r3
 8006b96:	f7fe fd6a 	bl	800566e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 fb20 	bl	80071e4 <prvAddCurrentTaskToDelayedList>
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b002      	add	sp, #8
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000770 	.word	0x20000770

08006bb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <vTaskPlaceOnEventListRestricted+0x16>
 8006bc2:	b672      	cpsid	i
 8006bc4:	e7fe      	b.n	8006bc4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <vTaskPlaceOnEventListRestricted+0x48>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3318      	adds	r3, #24
 8006bcc:	001a      	movs	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7fe fd29 	bl	800562a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006bde:	2301      	movs	r3, #1
 8006be0:	425b      	negs	r3, r3
 8006be2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	0011      	movs	r1, r2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f000 fafa 	bl	80071e4 <prvAddCurrentTaskToDelayedList>
	}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b004      	add	sp, #16
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000770 	.word	0x20000770

08006bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <xTaskRemoveFromEventList+0x1a>
 8006c12:	b672      	cpsid	i
 8006c14:	e7fe      	b.n	8006c14 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	3318      	adds	r3, #24
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f7fe fd5d 	bl	80056da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c20:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <xTaskRemoveFromEventList+0xa0>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11d      	bne.n	8006c64 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7fe fd54 	bl	80056da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <xTaskRemoveFromEventList+0xa4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d903      	bls.n	8006c46 <xTaskRemoveFromEventList+0x4a>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <xTaskRemoveFromEventList+0xa4>)
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4a:	0013      	movs	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4a14      	ldr	r2, [pc, #80]	; (8006ca4 <xTaskRemoveFromEventList+0xa8>)
 8006c54:	189a      	adds	r2, r3, r2
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	0010      	movs	r0, r2
 8006c5e:	f7fe fce4 	bl	800562a <vListInsertEnd>
 8006c62:	e007      	b.n	8006c74 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3318      	adds	r3, #24
 8006c68:	001a      	movs	r2, r3
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <xTaskRemoveFromEventList+0xac>)
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7fe fcdb 	bl	800562a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <xTaskRemoveFromEventList+0xb0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d905      	bls.n	8006c8e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <xTaskRemoveFromEventList+0xb4>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e001      	b.n	8006c92 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006c92:	68fb      	ldr	r3, [r7, #12]
}
 8006c94:	0018      	movs	r0, r3
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b004      	add	sp, #16
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000c6c 	.word	0x20000c6c
 8006ca0:	20000c4c 	.word	0x20000c4c
 8006ca4:	20000774 	.word	0x20000774
 8006ca8:	20000c04 	.word	0x20000c04
 8006cac:	20000770 	.word	0x20000770
 8006cb0:	20000c58 	.word	0x20000c58

08006cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <vTaskInternalSetTimeOutState+0x20>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <vTaskInternalSetTimeOutState+0x24>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]
}
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000c5c 	.word	0x20000c5c
 8006cd8:	20000c48 	.word	0x20000c48

08006cdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <xTaskCheckForTimeOut+0x14>
 8006cec:	b672      	cpsid	i
 8006cee:	e7fe      	b.n	8006cee <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <xTaskCheckForTimeOut+0x1e>
 8006cf6:	b672      	cpsid	i
 8006cf8:	e7fe      	b.n	8006cf8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006cfa:	f000 fe79 	bl	80079f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <xTaskCheckForTimeOut+0x98>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	d102      	bne.n	8006d1c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e024      	b.n	8006d66 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <xTaskCheckForTimeOut+0x9c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d007      	beq.n	8006d38 <xTaskCheckForTimeOut+0x5c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e016      	b.n	8006d66 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d20c      	bcs.n	8006d5c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad2      	subs	r2, r2, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff ffaf 	bl	8006cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e004      	b.n	8006d66 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f000 fe55 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006d6a:	697b      	ldr	r3, [r7, #20]
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b006      	add	sp, #24
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000c48 	.word	0x20000c48
 8006d78:	20000c5c 	.word	0x20000c5c

08006d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <vTaskMissedYield+0x10>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000c58 	.word	0x20000c58

08006d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d98:	f000 f84e 	bl	8006e38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d9c:	4b03      	ldr	r3, [pc, #12]	; (8006dac <prvIdleTask+0x1c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d9f9      	bls.n	8006d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006da4:	f000 fe14 	bl	80079d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006da8:	e7f6      	b.n	8006d98 <prvIdleTask+0x8>
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	20000774 	.word	0x20000774

08006db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	e00c      	b.n	8006dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	0013      	movs	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <prvInitialiseTaskLists+0x68>)
 8006dc8:	189b      	adds	r3, r3, r2
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7fe fc04 	bl	80055d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b37      	cmp	r3, #55	; 0x37
 8006dda:	d9ef      	bls.n	8006dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <prvInitialiseTaskLists+0x6c>)
 8006dde:	0018      	movs	r0, r3
 8006de0:	f7fe fbfa 	bl	80055d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <prvInitialiseTaskLists+0x70>)
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7fe fbf6 	bl	80055d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <prvInitialiseTaskLists+0x74>)
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7fe fbf2 	bl	80055d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006df4:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvInitialiseTaskLists+0x78>)
 8006df6:	0018      	movs	r0, r3
 8006df8:	f7fe fbee 	bl	80055d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <prvInitialiseTaskLists+0x7c>)
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fe fbea 	bl	80055d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e04:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <prvInitialiseTaskLists+0x80>)
 8006e06:	4a05      	ldr	r2, [pc, #20]	; (8006e1c <prvInitialiseTaskLists+0x6c>)
 8006e08:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e0a:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <prvInitialiseTaskLists+0x84>)
 8006e0c:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <prvInitialiseTaskLists+0x70>)
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000774 	.word	0x20000774
 8006e1c:	20000bd4 	.word	0x20000bd4
 8006e20:	20000be8 	.word	0x20000be8
 8006e24:	20000c04 	.word	0x20000c04
 8006e28:	20000c18 	.word	0x20000c18
 8006e2c:	20000c30 	.word	0x20000c30
 8006e30:	20000bfc 	.word	0x20000bfc
 8006e34:	20000c00 	.word	0x20000c00

08006e38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3e:	e01a      	b.n	8006e76 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006e40:	f000 fdd6 	bl	80079f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e44:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <prvCheckTasksWaitingTermination+0x50>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7fe fc42 	bl	80056da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e56:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <prvCheckTasksWaitingTermination+0x54>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <prvCheckTasksWaitingTermination+0x54>)
 8006e5e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <prvCheckTasksWaitingTermination+0x58>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	1e5a      	subs	r2, r3, #1
 8006e66:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <prvCheckTasksWaitingTermination+0x58>)
 8006e68:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006e6a:	f000 fdd3 	bl	8007a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f80f 	bl	8006e94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <prvCheckTasksWaitingTermination+0x58>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e0      	bne.n	8006e40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b002      	add	sp, #8
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	20000c18 	.word	0x20000c18
 8006e8c:	20000c44 	.word	0x20000c44
 8006e90:	20000c2c 	.word	0x20000c2c

08006e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2259      	movs	r2, #89	; 0x59
 8006ea0:	5c9b      	ldrb	r3, [r3, r2]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 fee4 	bl	8007c78 <vPortFree>
				vPortFree( pxTCB );
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 fee0 	bl	8007c78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006eb8:	e010      	b.n	8006edc <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2259      	movs	r2, #89	; 0x59
 8006ebe:	5c9b      	ldrb	r3, [r3, r2]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d104      	bne.n	8006ece <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 fed6 	bl	8007c78 <vPortFree>
	}
 8006ecc:	e006      	b.n	8006edc <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2259      	movs	r2, #89	; 0x59
 8006ed2:	5c9b      	ldrb	r3, [r3, r2]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d001      	beq.n	8006edc <prvDeleteTCB+0x48>
 8006ed8:	b672      	cpsid	i
 8006eda:	e7fe      	b.n	8006eda <prvDeleteTCB+0x46>
	}
 8006edc:	46c0      	nop			; (mov r8, r8)
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b002      	add	sp, #8
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <prvResetNextTaskUnblockTime+0x34>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef4:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <prvResetNextTaskUnblockTime+0x38>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4252      	negs	r2, r2
 8006efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006efc:	e008      	b.n	8006f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <prvResetNextTaskUnblockTime+0x34>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <prvResetNextTaskUnblockTime+0x38>)
 8006f0e:	601a      	str	r2, [r3, #0]
}
 8006f10:	46c0      	nop			; (mov r8, r8)
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b002      	add	sp, #8
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000bfc 	.word	0x20000bfc
 8006f1c:	20000c64 	.word	0x20000c64

08006f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <xTaskGetSchedulerState+0x30>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e008      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <xTaskGetSchedulerState+0x34>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e001      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f46:	687b      	ldr	r3, [r7, #4]
	}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b002      	add	sp, #8
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000c50 	.word	0x20000c50
 8006f54:	20000c6c 	.word	0x20000c6c

08006f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d051      	beq.n	8007012 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f72:	4b2a      	ldr	r3, [pc, #168]	; (800701c <xTaskPriorityInherit+0xc4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d241      	bcs.n	8007000 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	db06      	blt.n	8006f92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	4b25      	ldr	r3, [pc, #148]	; (800701c <xTaskPriorityInherit+0xc4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	2238      	movs	r2, #56	; 0x38
 8006f8c:	1ad2      	subs	r2, r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6959      	ldr	r1, [r3, #20]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	0013      	movs	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <xTaskPriorityInherit+0xc8>)
 8006fa4:	189b      	adds	r3, r3, r2
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	d122      	bne.n	8006ff0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3304      	adds	r3, #4
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7fe fb93 	bl	80056da <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <xTaskPriorityInherit+0xc4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	4b18      	ldr	r3, [pc, #96]	; (8007024 <xTaskPriorityInherit+0xcc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d903      	bls.n	8006fd2 <xTaskPriorityInherit+0x7a>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	4b15      	ldr	r3, [pc, #84]	; (8007024 <xTaskPriorityInherit+0xcc>)
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd6:	0013      	movs	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4a10      	ldr	r2, [pc, #64]	; (8007020 <xTaskPriorityInherit+0xc8>)
 8006fe0:	189a      	adds	r2, r3, r2
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	0010      	movs	r0, r2
 8006fea:	f7fe fb1e 	bl	800562a <vListInsertEnd>
 8006fee:	e004      	b.n	8006ffa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <xTaskPriorityInherit+0xc4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e008      	b.n	8007012 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <xTaskPriorityInherit+0xc4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	429a      	cmp	r2, r3
 800700c:	d201      	bcs.n	8007012 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800700e:	2301      	movs	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007012:	68fb      	ldr	r3, [r7, #12]
	}
 8007014:	0018      	movs	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	b004      	add	sp, #16
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000770 	.word	0x20000770
 8007020:	20000774 	.word	0x20000774
 8007024:	20000c4c 	.word	0x20000c4c

08007028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d044      	beq.n	80070c8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800703e:	4b25      	ldr	r3, [pc, #148]	; (80070d4 <xTaskPriorityDisinherit+0xac>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <xTaskPriorityDisinherit+0x24>
 8007048:	b672      	cpsid	i
 800704a:	e7fe      	b.n	800704a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <xTaskPriorityDisinherit+0x30>
 8007054:	b672      	cpsid	i
 8007056:	e7fe      	b.n	8007056 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705c:	1e5a      	subs	r2, r3, #1
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	429a      	cmp	r2, r3
 800706c:	d02c      	beq.n	80070c8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007072:	2b00      	cmp	r3, #0
 8007074:	d128      	bne.n	80070c8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3304      	adds	r3, #4
 800707a:	0018      	movs	r0, r3
 800707c:	f7fe fb2d 	bl	80056da <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	2238      	movs	r2, #56	; 0x38
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007098:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <xTaskPriorityDisinherit+0xb0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d903      	bls.n	80070a8 <xTaskPriorityDisinherit+0x80>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <xTaskPriorityDisinherit+0xb0>)
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	0013      	movs	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	189b      	adds	r3, r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4a09      	ldr	r2, [pc, #36]	; (80070dc <xTaskPriorityDisinherit+0xb4>)
 80070b6:	189a      	adds	r2, r3, r2
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3304      	adds	r3, #4
 80070bc:	0019      	movs	r1, r3
 80070be:	0010      	movs	r0, r2
 80070c0:	f7fe fab3 	bl	800562a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c8:	68fb      	ldr	r3, [r7, #12]
	}
 80070ca:	0018      	movs	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b004      	add	sp, #16
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	20000770 	.word	0x20000770
 80070d8:	20000c4c 	.word	0x20000c4c
 80070dc:	20000774 	.word	0x20000774

080070e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070ee:	2301      	movs	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d058      	beq.n	80071aa <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8007100:	b672      	cpsid	i
 8007102:	e7fe      	b.n	8007102 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d902      	bls.n	8007114 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	e002      	b.n	800711a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007118:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d042      	beq.n	80071aa <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	429a      	cmp	r2, r3
 800712c:	d13d      	bne.n	80071aa <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800712e:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	429a      	cmp	r2, r3
 8007136:	d101      	bne.n	800713c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8007138:	b672      	cpsid	i
 800713a:	e7fe      	b.n	800713a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	db04      	blt.n	800715a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2238      	movs	r2, #56	; 0x38
 8007154:	1ad2      	subs	r2, r2, r3
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6959      	ldr	r1, [r3, #20]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	0013      	movs	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	189b      	adds	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800716a:	189b      	adds	r3, r3, r2
 800716c:	4299      	cmp	r1, r3
 800716e:	d11c      	bne.n	80071aa <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3304      	adds	r3, #4
 8007174:	0018      	movs	r0, r3
 8007176:	f7fe fab0 	bl	80056da <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d903      	bls.n	800718e <vTaskPriorityDisinheritAfterTimeout+0xae>
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	0013      	movs	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	189b      	adds	r3, r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4a07      	ldr	r2, [pc, #28]	; (80071b8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800719c:	189a      	adds	r2, r3, r2
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3304      	adds	r3, #4
 80071a2:	0019      	movs	r1, r3
 80071a4:	0010      	movs	r0, r2
 80071a6:	f7fe fa40 	bl	800562a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b006      	add	sp, #24
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000770 	.word	0x20000770
 80071b8:	20000774 	.word	0x20000774
 80071bc:	20000c4c 	.word	0x20000c4c

080071c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071d2:	3201      	adds	r2, #1
 80071d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80071d6:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80071d8:	681b      	ldr	r3, [r3, #0]
	}
 80071da:	0018      	movs	r0, r3
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20000770 	.word	0x20000770

080071e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071ee:	4b21      	ldr	r3, [pc, #132]	; (8007274 <prvAddCurrentTaskToDelayedList+0x90>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f4:	4b20      	ldr	r3, [pc, #128]	; (8007278 <prvAddCurrentTaskToDelayedList+0x94>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3304      	adds	r3, #4
 80071fa:	0018      	movs	r0, r3
 80071fc:	f7fe fa6d 	bl	80056da <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3301      	adds	r3, #1
 8007204:	d10b      	bne.n	800721e <prvAddCurrentTaskToDelayedList+0x3a>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <prvAddCurrentTaskToDelayedList+0x94>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	4b1a      	ldr	r3, [pc, #104]	; (800727c <prvAddCurrentTaskToDelayedList+0x98>)
 8007214:	0011      	movs	r1, r2
 8007216:	0018      	movs	r0, r3
 8007218:	f7fe fa07 	bl	800562a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800721c:	e026      	b.n	800726c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	18d3      	adds	r3, r2, r3
 8007224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <prvAddCurrentTaskToDelayedList+0x94>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	429a      	cmp	r2, r3
 8007234:	d209      	bcs.n	800724a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007236:	4b12      	ldr	r3, [pc, #72]	; (8007280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <prvAddCurrentTaskToDelayedList+0x94>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3304      	adds	r3, #4
 8007240:	0019      	movs	r1, r3
 8007242:	0010      	movs	r0, r2
 8007244:	f7fe fa13 	bl	800566e <vListInsert>
}
 8007248:	e010      	b.n	800726c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800724a:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <prvAddCurrentTaskToDelayedList+0xa0>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <prvAddCurrentTaskToDelayedList+0x94>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3304      	adds	r3, #4
 8007254:	0019      	movs	r1, r3
 8007256:	0010      	movs	r0, r2
 8007258:	f7fe fa09 	bl	800566e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <prvAddCurrentTaskToDelayedList+0xa4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	d202      	bcs.n	800726c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007266:	4b08      	ldr	r3, [pc, #32]	; (8007288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	601a      	str	r2, [r3, #0]
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	46bd      	mov	sp, r7
 8007270:	b004      	add	sp, #16
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000c48 	.word	0x20000c48
 8007278:	20000770 	.word	0x20000770
 800727c:	20000c30 	.word	0x20000c30
 8007280:	20000c00 	.word	0x20000c00
 8007284:	20000bfc 	.word	0x20000bfc
 8007288:	20000c64 	.word	0x20000c64

0800728c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800728c:	b590      	push	{r4, r7, lr}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007296:	f000 facd 	bl	8007834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800729a:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <xTimerCreateTimerTask+0x6c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d020      	beq.n	80072e4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072aa:	003a      	movs	r2, r7
 80072ac:	1d39      	adds	r1, r7, #4
 80072ae:	2308      	movs	r3, #8
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	0018      	movs	r0, r3
 80072b4:	f7fe f978 	bl	80055a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072b8:	683c      	ldr	r4, [r7, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	490f      	ldr	r1, [pc, #60]	; (80072fc <xTimerCreateTimerTask+0x70>)
 80072c0:	480f      	ldr	r0, [pc, #60]	; (8007300 <xTimerCreateTimerTask+0x74>)
 80072c2:	9202      	str	r2, [sp, #8]
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	2302      	movs	r3, #2
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	0022      	movs	r2, r4
 80072ce:	f7ff f8d2 	bl	8006476 <xTaskCreateStatic>
 80072d2:	0002      	movs	r2, r0
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <xTimerCreateTimerTask+0x78>)
 80072d6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072d8:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <xTimerCreateTimerTask+0x78>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80072e0:	2301      	movs	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <xTimerCreateTimerTask+0x62>
 80072ea:	b672      	cpsid	i
 80072ec:	e7fe      	b.n	80072ec <xTimerCreateTimerTask+0x60>
	return xReturn;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b005      	add	sp, #20
 80072f6:	bd90      	pop	{r4, r7, pc}
 80072f8:	20000ca0 	.word	0x20000ca0
 80072fc:	08013ea4 	.word	0x08013ea4
 8007300:	08007429 	.word	0x08007429
 8007304:	20000ca4 	.word	0x20000ca4

08007308 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007316:	2300      	movs	r3, #0
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <xTimerGenericCommand+0x1c>
 8007320:	b672      	cpsid	i
 8007322:	e7fe      	b.n	8007322 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007324:	4b1d      	ldr	r3, [pc, #116]	; (800739c <xTimerGenericCommand+0x94>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d031      	beq.n	8007390 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800732c:	2114      	movs	r1, #20
 800732e:	187b      	adds	r3, r7, r1
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007334:	187b      	adds	r3, r7, r1
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800733a:	187b      	adds	r3, r7, r1
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b05      	cmp	r3, #5
 8007344:	dc1a      	bgt.n	800737c <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007346:	f7ff fdeb 	bl	8006f20 <xTaskGetSchedulerState>
 800734a:	0003      	movs	r3, r0
 800734c:	2b02      	cmp	r3, #2
 800734e:	d10a      	bne.n	8007366 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007350:	4b12      	ldr	r3, [pc, #72]	; (800739c <xTimerGenericCommand+0x94>)
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	2314      	movs	r3, #20
 8007358:	18f9      	adds	r1, r7, r3
 800735a:	2300      	movs	r3, #0
 800735c:	f7fe fb28 	bl	80059b0 <xQueueGenericSend>
 8007360:	0003      	movs	r3, r0
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
 8007364:	e014      	b.n	8007390 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <xTimerGenericCommand+0x94>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	2314      	movs	r3, #20
 800736c:	18f9      	adds	r1, r7, r3
 800736e:	2300      	movs	r3, #0
 8007370:	2200      	movs	r2, #0
 8007372:	f7fe fb1d 	bl	80059b0 <xQueueGenericSend>
 8007376:	0003      	movs	r3, r0
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
 800737a:	e009      	b.n	8007390 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <xTimerGenericCommand+0x94>)
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	2314      	movs	r3, #20
 8007384:	18f9      	adds	r1, r7, r3
 8007386:	2300      	movs	r3, #0
 8007388:	f7fe fbd6 	bl	8005b38 <xQueueGenericSendFromISR>
 800738c:	0003      	movs	r3, r0
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007392:	0018      	movs	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	b00a      	add	sp, #40	; 0x28
 8007398:	bd80      	pop	{r7, pc}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	20000ca0 	.word	0x20000ca0

080073a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073aa:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <prvProcessExpiredTimer+0x84>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3304      	adds	r3, #4
 80073b8:	0018      	movs	r0, r3
 80073ba:	f7fe f98e 	bl	80056da <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2228      	movs	r2, #40	; 0x28
 80073c2:	5c9b      	ldrb	r3, [r3, r2]
 80073c4:	001a      	movs	r2, r3
 80073c6:	2304      	movs	r3, #4
 80073c8:	4013      	ands	r3, r2
 80073ca:	d019      	beq.n	8007400 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	18d1      	adds	r1, r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f8c3 	bl	8007564 <prvInsertTimerInActiveList>
 80073de:	1e03      	subs	r3, r0, #0
 80073e0:	d017      	beq.n	8007412 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	2300      	movs	r3, #0
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2300      	movs	r3, #0
 80073ec:	2100      	movs	r1, #0
 80073ee:	f7ff ff8b 	bl	8007308 <xTimerGenericCommand>
 80073f2:	0003      	movs	r3, r0
 80073f4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <prvProcessExpiredTimer+0x72>
 80073fc:	b672      	cpsid	i
 80073fe:	e7fe      	b.n	80073fe <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2228      	movs	r2, #40	; 0x28
 8007404:	5c9b      	ldrb	r3, [r3, r2]
 8007406:	2201      	movs	r2, #1
 8007408:	4393      	bics	r3, r2
 800740a:	b2d9      	uxtb	r1, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2228      	movs	r2, #40	; 0x28
 8007410:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	0010      	movs	r0, r2
 800741a:	4798      	blx	r3
}
 800741c:	46c0      	nop			; (mov r8, r8)
 800741e:	46bd      	mov	sp, r7
 8007420:	b004      	add	sp, #16
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000c98 	.word	0x20000c98

08007428 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007430:	2308      	movs	r3, #8
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	0018      	movs	r0, r3
 8007436:	f000 f853 	bl	80074e0 <prvGetNextExpireTime>
 800743a:	0003      	movs	r3, r0
 800743c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f000 f803 	bl	8007450 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800744a:	f000 f8cd 	bl	80075e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800744e:	e7ef      	b.n	8007430 <prvTimerTask+0x8>

08007450 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800745a:	f7ff f9e3 	bl	8006824 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800745e:	2308      	movs	r3, #8
 8007460:	18fb      	adds	r3, r7, r3
 8007462:	0018      	movs	r0, r3
 8007464:	f000 f85e 	bl	8007524 <prvSampleTimeNow>
 8007468:	0003      	movs	r3, r0
 800746a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d12b      	bne.n	80074ca <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10c      	bne.n	8007492 <prvProcessTimerOrBlockTask+0x42>
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	429a      	cmp	r2, r3
 800747e:	d808      	bhi.n	8007492 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007480:	f7ff f9dc 	bl	800683c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	0011      	movs	r1, r2
 800748a:	0018      	movs	r0, r3
 800748c:	f7ff ff88 	bl	80073a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007490:	e01d      	b.n	80074ce <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <prvProcessTimerOrBlockTask+0x88>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <prvProcessTimerOrBlockTask+0x56>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <prvProcessTimerOrBlockTask+0x58>
 80074a6:	2300      	movs	r3, #0
 80074a8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074aa:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <prvProcessTimerOrBlockTask+0x8c>)
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	0019      	movs	r1, r3
 80074b8:	f7fe ffaa 	bl	8006410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074bc:	f7ff f9be 	bl	800683c <xTaskResumeAll>
 80074c0:	1e03      	subs	r3, r0, #0
 80074c2:	d104      	bne.n	80074ce <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80074c4:	f000 fa84 	bl	80079d0 <vPortYield>
}
 80074c8:	e001      	b.n	80074ce <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80074ca:	f7ff f9b7 	bl	800683c <xTaskResumeAll>
}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b004      	add	sp, #16
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	20000c9c 	.word	0x20000c9c
 80074dc:	20000ca0 	.word	0x20000ca0

080074e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074e8:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <prvGetNextExpireTime+0x40>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <prvGetNextExpireTime+0x16>
 80074f2:	2201      	movs	r2, #1
 80074f4:	e000      	b.n	80074f8 <prvGetNextExpireTime+0x18>
 80074f6:	2200      	movs	r2, #0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <prvGetNextExpireTime+0x40>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e001      	b.n	8007514 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007514:	68fb      	ldr	r3, [r7, #12]
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b004      	add	sp, #16
 800751c:	bd80      	pop	{r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	20000c98 	.word	0x20000c98

08007524 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800752c:	f7ff fa12 	bl	8006954 <xTaskGetTickCount>
 8007530:	0003      	movs	r3, r0
 8007532:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvSampleTimeNow+0x3c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d205      	bcs.n	800754a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800753e:	f000 f91b 	bl	8007778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e002      	b.n	8007550 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007550:	4b03      	ldr	r3, [pc, #12]	; (8007560 <prvSampleTimeNow+0x3c>)
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007556:	68fb      	ldr	r3, [r7, #12]
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b004      	add	sp, #16
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000ca8 	.word	0x20000ca8

08007564 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	429a      	cmp	r2, r3
 8007588:	d812      	bhi.n	80075b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e01b      	b.n	80075d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800759e:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <prvInsertTimerInActiveList+0x7c>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3304      	adds	r3, #4
 80075a6:	0019      	movs	r1, r3
 80075a8:	0010      	movs	r0, r2
 80075aa:	f7fe f860 	bl	800566e <vListInsert>
 80075ae:	e012      	b.n	80075d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d206      	bcs.n	80075c6 <prvInsertTimerInActiveList+0x62>
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d302      	bcc.n	80075c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e007      	b.n	80075d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <prvInsertTimerInActiveList+0x80>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3304      	adds	r3, #4
 80075ce:	0019      	movs	r1, r3
 80075d0:	0010      	movs	r0, r2
 80075d2:	f7fe f84c 	bl	800566e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075d6:	697b      	ldr	r3, [r7, #20]
}
 80075d8:	0018      	movs	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	b006      	add	sp, #24
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000c9c 	.word	0x20000c9c
 80075e4:	20000c98 	.word	0x20000c98

080075e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ee:	e0af      	b.n	8007750 <prvProcessReceivedCommands+0x168>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075f0:	2308      	movs	r3, #8
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da10      	bge.n	800761c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075fa:	2308      	movs	r3, #8
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	3304      	adds	r3, #4
 8007600:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <prvProcessReceivedCommands+0x24>
 8007608:	b672      	cpsid	i
 800760a:	e7fe      	b.n	800760a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	6858      	ldr	r0, [r3, #4]
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	0019      	movs	r1, r3
 800761a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800761c:	2308      	movs	r3, #8
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	da00      	bge.n	8007628 <prvProcessReceivedCommands+0x40>
 8007626:	e092      	b.n	800774e <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007628:	2308      	movs	r3, #8
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	3304      	adds	r3, #4
 800763c:	0018      	movs	r0, r3
 800763e:	f7fe f84c 	bl	80056da <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007642:	1d3b      	adds	r3, r7, #4
 8007644:	0018      	movs	r0, r3
 8007646:	f7ff ff6d 	bl	8007524 <prvSampleTimeNow>
 800764a:	0003      	movs	r3, r0
 800764c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800764e:	2308      	movs	r3, #8
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b09      	cmp	r3, #9
 8007656:	d900      	bls.n	800765a <prvProcessReceivedCommands+0x72>
 8007658:	e07a      	b.n	8007750 <prvProcessReceivedCommands+0x168>
 800765a:	009a      	lsls	r2, r3, #2
 800765c:	4b44      	ldr	r3, [pc, #272]	; (8007770 <prvProcessReceivedCommands+0x188>)
 800765e:	18d3      	adds	r3, r2, r3
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	2228      	movs	r2, #40	; 0x28
 8007668:	5c9b      	ldrb	r3, [r3, r2]
 800766a:	2201      	movs	r2, #1
 800766c:	4313      	orrs	r3, r2
 800766e:	b2d9      	uxtb	r1, r3
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	2228      	movs	r2, #40	; 0x28
 8007674:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007676:	2008      	movs	r0, #8
 8007678:	183b      	adds	r3, r7, r0
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	18d1      	adds	r1, r2, r3
 8007682:	183b      	adds	r3, r7, r0
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	6a38      	ldr	r0, [r7, #32]
 800768a:	f7ff ff6b 	bl	8007564 <prvInsertTimerInActiveList>
 800768e:	1e03      	subs	r3, r0, #0
 8007690:	d05e      	beq.n	8007750 <prvProcessReceivedCommands+0x168>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	0010      	movs	r0, r2
 800769a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2228      	movs	r2, #40	; 0x28
 80076a0:	5c9b      	ldrb	r3, [r3, r2]
 80076a2:	001a      	movs	r2, r3
 80076a4:	2304      	movs	r3, #4
 80076a6:	4013      	ands	r3, r2
 80076a8:	d052      	beq.n	8007750 <prvProcessReceivedCommands+0x168>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076aa:	2308      	movs	r3, #8
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	18d2      	adds	r2, r2, r3
 80076b6:	6a38      	ldr	r0, [r7, #32]
 80076b8:	2300      	movs	r3, #0
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2300      	movs	r3, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	f7ff fe22 	bl	8007308 <xTimerGenericCommand>
 80076c4:	0003      	movs	r3, r0
 80076c6:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d140      	bne.n	8007750 <prvProcessReceivedCommands+0x168>
 80076ce:	b672      	cpsid	i
 80076d0:	e7fe      	b.n	80076d0 <prvProcessReceivedCommands+0xe8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	2228      	movs	r2, #40	; 0x28
 80076d6:	5c9b      	ldrb	r3, [r3, r2]
 80076d8:	2201      	movs	r2, #1
 80076da:	4393      	bics	r3, r2
 80076dc:	b2d9      	uxtb	r1, r3
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	2228      	movs	r2, #40	; 0x28
 80076e2:	5499      	strb	r1, [r3, r2]
					break;
 80076e4:	e034      	b.n	8007750 <prvProcessReceivedCommands+0x168>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	2228      	movs	r2, #40	; 0x28
 80076ea:	5c9b      	ldrb	r3, [r3, r2]
 80076ec:	2201      	movs	r2, #1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	b2d9      	uxtb	r1, r3
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	2228      	movs	r2, #40	; 0x28
 80076f6:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076f8:	2308      	movs	r3, #8
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <prvProcessReceivedCommands+0x126>
 800770a:	b672      	cpsid	i
 800770c:	e7fe      	b.n	800770c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	18d1      	adds	r1, r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	6a38      	ldr	r0, [r7, #32]
 800771c:	f7ff ff22 	bl	8007564 <prvInsertTimerInActiveList>
					break;
 8007720:	e016      	b.n	8007750 <prvProcessReceivedCommands+0x168>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	2228      	movs	r2, #40	; 0x28
 8007726:	5c9b      	ldrb	r3, [r3, r2]
 8007728:	001a      	movs	r2, r3
 800772a:	2302      	movs	r3, #2
 800772c:	4013      	ands	r3, r2
 800772e:	d104      	bne.n	800773a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	0018      	movs	r0, r3
 8007734:	f000 faa0 	bl	8007c78 <vPortFree>
 8007738:	e00a      	b.n	8007750 <prvProcessReceivedCommands+0x168>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	2228      	movs	r2, #40	; 0x28
 800773e:	5c9b      	ldrb	r3, [r3, r2]
 8007740:	2201      	movs	r2, #1
 8007742:	4393      	bics	r3, r2
 8007744:	b2d9      	uxtb	r1, r3
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	2228      	movs	r2, #40	; 0x28
 800774a:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800774c:	e000      	b.n	8007750 <prvProcessReceivedCommands+0x168>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800774e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <prvProcessReceivedCommands+0x18c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2208      	movs	r2, #8
 8007756:	18b9      	adds	r1, r7, r2
 8007758:	2200      	movs	r2, #0
 800775a:	0018      	movs	r0, r3
 800775c:	f7fe fac5 	bl	8005cea <xQueueReceive>
 8007760:	1e03      	subs	r3, r0, #0
 8007762:	d000      	beq.n	8007766 <prvProcessReceivedCommands+0x17e>
 8007764:	e744      	b.n	80075f0 <prvProcessReceivedCommands+0x8>
	}
}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46bd      	mov	sp, r7
 800776a:	b00a      	add	sp, #40	; 0x28
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	080146c0 	.word	0x080146c0
 8007774:	20000ca0 	.word	0x20000ca0

08007778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800777e:	e041      	b.n	8007804 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <prvSwitchTimerLists+0xb4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778a:	4b28      	ldr	r3, [pc, #160]	; (800782c <prvSwitchTimerLists+0xb4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3304      	adds	r3, #4
 8007798:	0018      	movs	r0, r3
 800779a:	f7fd ff9e 	bl	80056da <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	0010      	movs	r0, r2
 80077a6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2228      	movs	r2, #40	; 0x28
 80077ac:	5c9b      	ldrb	r3, [r3, r2]
 80077ae:	001a      	movs	r2, r3
 80077b0:	2304      	movs	r3, #4
 80077b2:	4013      	ands	r3, r2
 80077b4:	d026      	beq.n	8007804 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	18d3      	adds	r3, r2, r3
 80077be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d90e      	bls.n	80077e6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077d4:	4b15      	ldr	r3, [pc, #84]	; (800782c <prvSwitchTimerLists+0xb4>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3304      	adds	r3, #4
 80077dc:	0019      	movs	r1, r3
 80077de:	0010      	movs	r0, r2
 80077e0:	f7fd ff45 	bl	800566e <vListInsert>
 80077e4:	e00e      	b.n	8007804 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	2300      	movs	r3, #0
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	2300      	movs	r3, #0
 80077f0:	2100      	movs	r1, #0
 80077f2:	f7ff fd89 	bl	8007308 <xTimerGenericCommand>
 80077f6:	0003      	movs	r3, r0
 80077f8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <prvSwitchTimerLists+0x8c>
 8007800:	b672      	cpsid	i
 8007802:	e7fe      	b.n	8007802 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <prvSwitchTimerLists+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1b8      	bne.n	8007780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <prvSwitchTimerLists+0xb4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <prvSwitchTimerLists+0xb8>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b04      	ldr	r3, [pc, #16]	; (800782c <prvSwitchTimerLists+0xb4>)
 800781a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <prvSwitchTimerLists+0xb8>)
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	601a      	str	r2, [r3, #0]
}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	46bd      	mov	sp, r7
 8007826:	b006      	add	sp, #24
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	20000c98 	.word	0x20000c98
 8007830:	20000c9c 	.word	0x20000c9c

08007834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800783a:	f000 f8d9 	bl	80079f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <prvCheckForValidListAndQueue+0x68>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d124      	bne.n	8007890 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <prvCheckForValidListAndQueue+0x6c>)
 8007848:	0018      	movs	r0, r3
 800784a:	f7fd fec5 	bl	80055d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800784e:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <prvCheckForValidListAndQueue+0x70>)
 8007850:	0018      	movs	r0, r3
 8007852:	f7fd fec1 	bl	80055d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <prvCheckForValidListAndQueue+0x74>)
 8007858:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <prvCheckForValidListAndQueue+0x6c>)
 800785a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800785c:	4b13      	ldr	r3, [pc, #76]	; (80078ac <prvCheckForValidListAndQueue+0x78>)
 800785e:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <prvCheckForValidListAndQueue+0x70>)
 8007860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007862:	4913      	ldr	r1, [pc, #76]	; (80078b0 <prvCheckForValidListAndQueue+0x7c>)
 8007864:	4a13      	ldr	r2, [pc, #76]	; (80078b4 <prvCheckForValidListAndQueue+0x80>)
 8007866:	2300      	movs	r3, #0
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	000b      	movs	r3, r1
 800786c:	2110      	movs	r1, #16
 800786e:	200a      	movs	r0, #10
 8007870:	f7fd ffaf 	bl	80057d2 <xQueueGenericCreateStatic>
 8007874:	0002      	movs	r2, r0
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <prvCheckForValidListAndQueue+0x68>)
 8007878:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800787a:	4b08      	ldr	r3, [pc, #32]	; (800789c <prvCheckForValidListAndQueue+0x68>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <prvCheckForValidListAndQueue+0x68>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <prvCheckForValidListAndQueue+0x84>)
 8007888:	0011      	movs	r1, r2
 800788a:	0018      	movs	r0, r3
 800788c:	f7fe fd6e 	bl	800636c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007890:	f000 f8c0 	bl	8007a14 <vPortExitCritical>
}
 8007894:	46c0      	nop			; (mov r8, r8)
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	20000ca0 	.word	0x20000ca0
 80078a0:	20000c70 	.word	0x20000c70
 80078a4:	20000c84 	.word	0x20000c84
 80078a8:	20000c98 	.word	0x20000c98
 80078ac:	20000c9c 	.word	0x20000c9c
 80078b0:	20000d4c 	.word	0x20000d4c
 80078b4:	20000cac 	.word	0x20000cac
 80078b8:	08013eac 	.word	0x08013eac

080078bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3b04      	subs	r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2280      	movs	r2, #128	; 0x80
 80078d2:	0452      	lsls	r2, r2, #17
 80078d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3b04      	subs	r3, #4
 80078da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3b04      	subs	r3, #4
 80078e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e8:	4a08      	ldr	r2, [pc, #32]	; (800790c <pxPortInitialiseStack+0x50>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b14      	subs	r3, #20
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b20      	subs	r3, #32
 80078fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007900:	68fb      	ldr	r3, [r7, #12]
}
 8007902:	0018      	movs	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	b004      	add	sp, #16
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	08007911 	.word	0x08007911

08007910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <prvTaskExitError+0x28>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	d001      	beq.n	8007926 <prvTaskExitError+0x16>
 8007922:	b672      	cpsid	i
 8007924:	e7fe      	b.n	8007924 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007926:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0fc      	beq.n	800792a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	b002      	add	sp, #8
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000014 	.word	0x20000014

0800793c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007950 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007950:	4a0b      	ldr	r2, [pc, #44]	; (8007980 <pxCurrentTCBConst2>)
 8007952:	6813      	ldr	r3, [r2, #0]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	3020      	adds	r0, #32
 8007958:	f380 8809 	msr	PSP, r0
 800795c:	2002      	movs	r0, #2
 800795e:	f380 8814 	msr	CONTROL, r0
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007968:	46ae      	mov	lr, r5
 800796a:	bc08      	pop	{r3}
 800796c:	bc04      	pop	{r2}
 800796e:	b662      	cpsie	i
 8007970:	4718      	bx	r3
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	46c0      	nop			; (mov r8, r8)
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46c0      	nop			; (mov r8, r8)

08007980 <pxCurrentTCBConst2>:
 8007980:	20000770 	.word	0x20000770
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007984:	46c0      	nop			; (mov r8, r8)
 8007986:	46c0      	nop			; (mov r8, r8)

08007988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <xPortStartScheduler+0x40>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	4b0d      	ldr	r3, [pc, #52]	; (80079c8 <xPortStartScheduler+0x40>)
 8007992:	21ff      	movs	r1, #255	; 0xff
 8007994:	0409      	lsls	r1, r1, #16
 8007996:	430a      	orrs	r2, r1
 8007998:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800799a:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <xPortStartScheduler+0x40>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <xPortStartScheduler+0x40>)
 80079a0:	21ff      	movs	r1, #255	; 0xff
 80079a2:	0609      	lsls	r1, r1, #24
 80079a4:	430a      	orrs	r2, r1
 80079a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079a8:	f000 f898 	bl	8007adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <xPortStartScheduler+0x44>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80079b2:	f7ff ffcd 	bl	8007950 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079b6:	f7ff f88b 	bl	8006ad0 <vTaskSwitchContext>
	prvTaskExitError();
 80079ba:	f7ff ffa9 	bl	8007910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	e000ed20 	.word	0xe000ed20
 80079cc:	20000014 	.word	0x20000014

080079d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <vPortYield+0x1c>)
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	0552      	lsls	r2, r2, #21
 80079da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80079dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80079e0:	f3bf 8f6f 	isb	sy
}
 80079e4:	46c0      	nop			; (mov r8, r8)
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80079f4:	b672      	cpsid	i
	uxCriticalNesting++;
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <vPortEnterCritical+0x20>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <vPortEnterCritical+0x20>)
 80079fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007a00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007a04:	f3bf 8f6f 	isb	sy
}
 8007a08:	46c0      	nop			; (mov r8, r8)
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	20000014 	.word	0x20000014

08007a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a18:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <vPortExitCritical+0x2c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <vPortExitCritical+0x10>
 8007a20:	b672      	cpsid	i
 8007a22:	e7fe      	b.n	8007a22 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007a24:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <vPortExitCritical+0x2c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	1e5a      	subs	r2, r3, #1
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <vPortExitCritical+0x2c>)
 8007a2c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8007a2e:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <vPortExitCritical+0x2c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d100      	bne.n	8007a38 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007a36:	b662      	cpsie	i
	}
}
 8007a38:	46c0      	nop			; (mov r8, r8)
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	20000014 	.word	0x20000014

08007a44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007a44:	f3ef 8010 	mrs	r0, PRIMASK
 8007a48:	b672      	cpsid	i
 8007a4a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	0018      	movs	r0, r3

08007a50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007a50:	f380 8810 	msr	PRIMASK, r0
 8007a54:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007a56:	46c0      	nop			; (mov r8, r8)
	...

08007a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a60:	f3ef 8009 	mrs	r0, PSP
 8007a64:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <pxCurrentTCBConst>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	3820      	subs	r0, #32
 8007a6a:	6010      	str	r0, [r2, #0]
 8007a6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007a6e:	4644      	mov	r4, r8
 8007a70:	464d      	mov	r5, r9
 8007a72:	4656      	mov	r6, sl
 8007a74:	465f      	mov	r7, fp
 8007a76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007a78:	b508      	push	{r3, lr}
 8007a7a:	b672      	cpsid	i
 8007a7c:	f7ff f828 	bl	8006ad0 <vTaskSwitchContext>
 8007a80:	b662      	cpsie	i
 8007a82:	bc0c      	pop	{r2, r3}
 8007a84:	6811      	ldr	r1, [r2, #0]
 8007a86:	6808      	ldr	r0, [r1, #0]
 8007a88:	3010      	adds	r0, #16
 8007a8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a8c:	46a0      	mov	r8, r4
 8007a8e:	46a9      	mov	r9, r5
 8007a90:	46b2      	mov	sl, r6
 8007a92:	46bb      	mov	fp, r7
 8007a94:	f380 8809 	msr	PSP, r0
 8007a98:	3820      	subs	r0, #32
 8007a9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a9c:	4718      	bx	r3
 8007a9e:	46c0      	nop			; (mov r8, r8)

08007aa0 <pxCurrentTCBConst>:
 8007aa0:	20000770 	.word	0x20000770
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007aa4:	46c0      	nop			; (mov r8, r8)
 8007aa6:	46c0      	nop			; (mov r8, r8)

08007aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aae:	f7ff ffc9 	bl	8007a44 <ulSetInterruptMaskFromISR>
 8007ab2:	0003      	movs	r3, r0
 8007ab4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ab6:	f7fe ff5b 	bl	8006970 <xTaskIncrementTick>
 8007aba:	1e03      	subs	r3, r0, #0
 8007abc:	d003      	beq.n	8007ac6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007abe:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <xPortSysTickHandler+0x30>)
 8007ac0:	2280      	movs	r2, #128	; 0x80
 8007ac2:	0552      	lsls	r2, r2, #21
 8007ac4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7ff ffc1 	bl	8007a50 <vClearInterruptMaskFromISR>
}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b002      	add	sp, #8
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortSetupTimerInterrupt+0x38>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vPortSetupTimerInterrupt+0x3c>)
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	23fa      	movs	r3, #250	; 0xfa
 8007af2:	0099      	lsls	r1, r3, #2
 8007af4:	0010      	movs	r0, r2
 8007af6:	f7f8 fb11 	bl	800011c <__udivsi3>
 8007afa:	0003      	movs	r3, r0
 8007afc:	001a      	movs	r2, r3
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <vPortSetupTimerInterrupt+0x40>)
 8007b00:	3a01      	subs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007b06:	2207      	movs	r2, #7
 8007b08:	601a      	str	r2, [r3, #0]
}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	e000e010 	.word	0xe000e010
 8007b14:	e000e018 	.word	0xe000e018
 8007b18:	20000008 	.word	0x20000008
 8007b1c:	e000e014 	.word	0xe000e014

08007b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007b2c:	f7fe fe7a 	bl	8006824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b30:	4b4b      	ldr	r3, [pc, #300]	; (8007c60 <pvPortMalloc+0x140>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b38:	f000 f8ec 	bl	8007d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b3c:	4b49      	ldr	r3, [pc, #292]	; (8007c64 <pvPortMalloc+0x144>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4013      	ands	r3, r2
 8007b44:	d000      	beq.n	8007b48 <pvPortMalloc+0x28>
 8007b46:	e07e      	b.n	8007c46 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d012      	beq.n	8007b74 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007b4e:	2208      	movs	r2, #8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2207      	movs	r2, #7
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	d00a      	beq.n	8007b74 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2207      	movs	r2, #7
 8007b62:	4393      	bics	r3, r2
 8007b64:	3308      	adds	r3, #8
 8007b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2207      	movs	r2, #7
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	d001      	beq.n	8007b74 <pvPortMalloc+0x54>
 8007b70:	b672      	cpsid	i
 8007b72:	e7fe      	b.n	8007b72 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d065      	beq.n	8007c46 <pvPortMalloc+0x126>
 8007b7a:	4b3b      	ldr	r3, [pc, #236]	; (8007c68 <pvPortMalloc+0x148>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d860      	bhi.n	8007c46 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b84:	4b39      	ldr	r3, [pc, #228]	; (8007c6c <pvPortMalloc+0x14c>)
 8007b86:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007b88:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <pvPortMalloc+0x14c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b8e:	e004      	b.n	8007b9a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d903      	bls.n	8007bac <pvPortMalloc+0x8c>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f1      	bne.n	8007b90 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bac:	4b2c      	ldr	r3, [pc, #176]	; (8007c60 <pvPortMalloc+0x140>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d047      	beq.n	8007c46 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2208      	movs	r2, #8
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d916      	bls.n	8007c06 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2207      	movs	r2, #7
 8007be4:	4013      	ands	r3, r2
 8007be6:	d001      	beq.n	8007bec <pvPortMalloc+0xcc>
 8007be8:	b672      	cpsid	i
 8007bea:	e7fe      	b.n	8007bea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	1ad2      	subs	r2, r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f000 f8e7 	bl	8007dd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c06:	4b18      	ldr	r3, [pc, #96]	; (8007c68 <pvPortMalloc+0x148>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <pvPortMalloc+0x148>)
 8007c12:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c14:	4b14      	ldr	r3, [pc, #80]	; (8007c68 <pvPortMalloc+0x148>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <pvPortMalloc+0x150>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d203      	bcs.n	8007c28 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <pvPortMalloc+0x148>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <pvPortMalloc+0x150>)
 8007c26:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <pvPortMalloc+0x144>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <pvPortMalloc+0x154>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <pvPortMalloc+0x154>)
 8007c44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c46:	f7fe fdf9 	bl	800683c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2207      	movs	r2, #7
 8007c4e:	4013      	ands	r3, r2
 8007c50:	d001      	beq.n	8007c56 <pvPortMalloc+0x136>
 8007c52:	b672      	cpsid	i
 8007c54:	e7fe      	b.n	8007c54 <pvPortMalloc+0x134>
	return pvReturn;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	0018      	movs	r0, r3
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b006      	add	sp, #24
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	200019a4 	.word	0x200019a4
 8007c64:	200019b8 	.word	0x200019b8
 8007c68:	200019a8 	.word	0x200019a8
 8007c6c:	2000199c 	.word	0x2000199c
 8007c70:	200019ac 	.word	0x200019ac
 8007c74:	200019b0 	.word	0x200019b0

08007c78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d03a      	beq.n	8007d00 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	18d3      	adds	r3, r2, r3
 8007c92:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <vPortFree+0x90>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	d101      	bne.n	8007ca8 <vPortFree+0x30>
 8007ca4:	b672      	cpsid	i
 8007ca6:	e7fe      	b.n	8007ca6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <vPortFree+0x3c>
 8007cb0:	b672      	cpsid	i
 8007cb2:	e7fe      	b.n	8007cb2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <vPortFree+0x90>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	d01f      	beq.n	8007d00 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11b      	bne.n	8007d00 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <vPortFree+0x90>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cd8:	f7fe fda4 	bl	8006824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <vPortFree+0x94>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	18d2      	adds	r2, r2, r3
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <vPortFree+0x94>)
 8007ce8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	0018      	movs	r0, r3
 8007cee:	f000 f871 	bl	8007dd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <vPortFree+0x98>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <vPortFree+0x98>)
 8007cfa:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8007cfc:	f7fe fd9e 	bl	800683c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d00:	46c0      	nop			; (mov r8, r8)
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b004      	add	sp, #16
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	200019b8 	.word	0x200019b8
 8007d0c:	200019a8 	.word	0x200019a8
 8007d10:	200019b4 	.word	0x200019b4

08007d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d1a:	23c0      	movs	r3, #192	; 0xc0
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d20:	4b26      	ldr	r3, [pc, #152]	; (8007dbc <prvHeapInit+0xa8>)
 8007d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2207      	movs	r2, #7
 8007d28:	4013      	ands	r3, r2
 8007d2a:	d00c      	beq.n	8007d46 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3307      	adds	r3, #7
 8007d30:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2207      	movs	r2, #7
 8007d36:	4393      	bics	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	4b1e      	ldr	r3, [pc, #120]	; (8007dbc <prvHeapInit+0xa8>)
 8007d42:	18d3      	adds	r3, r2, r3
 8007d44:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <prvHeapInit+0xac>)
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d50:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <prvHeapInit+0xac>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	18d3      	adds	r3, r2, r3
 8007d5c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d5e:	2208      	movs	r2, #8
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2207      	movs	r2, #7
 8007d6a:	4393      	bics	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4b14      	ldr	r3, [pc, #80]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d72:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	1ad2      	subs	r2, r2, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <prvHeapInit+0xb4>)
 8007da0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <prvHeapInit+0xb8>)
 8007da8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007daa:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <prvHeapInit+0xbc>)
 8007dac:	2280      	movs	r2, #128	; 0x80
 8007dae:	0612      	lsls	r2, r2, #24
 8007db0:	601a      	str	r2, [r3, #0]
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b004      	add	sp, #16
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	20000d9c 	.word	0x20000d9c
 8007dc0:	2000199c 	.word	0x2000199c
 8007dc4:	200019a4 	.word	0x200019a4
 8007dc8:	200019ac 	.word	0x200019ac
 8007dcc:	200019a8 	.word	0x200019a8
 8007dd0:	200019b8 	.word	0x200019b8

08007dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ddc:	4b27      	ldr	r3, [pc, #156]	; (8007e7c <prvInsertBlockIntoFreeList+0xa8>)
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	e002      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x14>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d8f7      	bhi.n	8007de2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	18d3      	adds	r3, r2, r3
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d108      	bne.n	8007e16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	18d2      	adds	r2, r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	18d2      	adds	r2, r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d118      	bne.n	8007e5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <prvInsertBlockIntoFreeList+0xac>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d00d      	beq.n	8007e52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	18d2      	adds	r2, r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	e008      	b.n	8007e64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e52:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <prvInsertBlockIntoFreeList+0xac>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e003      	b.n	8007e64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d002      	beq.n	8007e72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b004      	add	sp, #16
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	2000199c 	.word	0x2000199c
 8007e80:	200019a4 	.word	0x200019a4

08007e84 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8007e88:	f003 fbf8 	bl	800b67c <touchgfx_init>
}
 8007e8c:	46c0      	nop			; (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8007e9a:	f003 fc1d 	bl	800b6d8 <touchgfx_taskEntry>
}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	b002      	add	sp, #8
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
    {
 8007eb0:	4a03      	ldr	r2, [pc, #12]	; (8007ec0 <_ZN8touchgfx12FontProviderD1Ev+0x18>)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
    }
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	0018      	movs	r0, r3
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b002      	add	sp, #8
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	08014704 	.word	0x08014704

08007ec4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
    }
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7ff ffea 	bl	8007ea8 <_ZN8touchgfx12FontProviderD1Ev>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2104      	movs	r1, #4
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f00a ff5e 	bl	8012d9a <_ZdlPvj>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b002      	add	sp, #8
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	000a      	movs	r2, r1
 8007ef2:	1cbb      	adds	r3, r7, #2
 8007ef4:	801a      	strh	r2, [r3, #0]
    switch (typography)
 8007ef6:	1cbb      	adds	r3, r7, #2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d008      	beq.n	8007f10 <_ZN23ApplicationFontProvider7getFontEt+0x28>
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d00b      	beq.n	8007f1a <_ZN23ApplicationFontProvider7getFontEt+0x32>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10e      	bne.n	8007f24 <_ZN23ApplicationFontProvider7getFontEt+0x3c>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8007f06:	f002 f9f5 	bl	800a2f4 <_ZN17TypedTextDatabase8getFontsEv>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	e00a      	b.n	8007f26 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8007f10:	f002 f9f0 	bl	800a2f4 <_ZN17TypedTextDatabase8getFontsEv>
 8007f14:	0003      	movs	r3, r0
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	e005      	b.n	8007f26 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8007f1a:	f002 f9eb 	bl	800a2f4 <_ZN17TypedTextDatabase8getFontsEv>
 8007f1e:	0003      	movs	r3, r0
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	e000      	b.n	8007f26 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    default:
        return 0;
 8007f24:	2300      	movs	r3, #0
    }
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b002      	add	sp, #8
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7ff ffb1 	bl	8007ea8 <_ZN8touchgfx12FontProviderD1Ev>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	0018      	movs	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	b002      	add	sp, #8
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	080146f0 	.word	0x080146f0

08007f54 <_ZN23ApplicationFontProviderD0Ev>:
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f7ff ffe6 	bl	8007f30 <_ZN23ApplicationFontProviderD1Ev>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2104      	movs	r1, #4
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f00a ff16 	bl	8012d9a <_ZdlPvj>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0018      	movs	r0, r3
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b002      	add	sp, #8
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
    {
 8007f80:	4a03      	ldr	r2, [pc, #12]	; (8007f90 <_ZN8touchgfx4FontD1Ev+0x18>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
    }
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	b002      	add	sp, #8
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	08014c60 	.word	0x08014c60

08007f94 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
    }
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f7ff ffea 	bl	8007f78 <_ZN8touchgfx4FontD1Ev>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2110      	movs	r1, #16
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f00a fef6 	bl	8012d9a <_ZdlPvj>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	000a      	movs	r2, r1
 8007fc2:	1cbb      	adds	r3, r7, #2
 8007fc4:	801a      	strh	r2, [r3, #0]
    {
        if (unicode == 0)
 8007fc6:	1cbb      	adds	r3, r7, #2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <_ZNK8touchgfx4Font8getGlyphEt+0x1a>
        {
            return 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e014      	b.n	8007ffc <_ZNK8touchgfx4Font8getGlyphEt+0x44>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8007fd6:	210f      	movs	r1, #15
 8007fd8:	187b      	adds	r3, r7, r1
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	187d      	adds	r5, r7, r1
 8007fe8:	2310      	movs	r3, #16
 8007fea:	18fa      	adds	r2, r7, r3
 8007fec:	1cbb      	adds	r3, r7, #2
 8007fee:	8819      	ldrh	r1, [r3, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	002b      	movs	r3, r5
 8007ff4:	47a0      	blx	r4
 8007ff6:	0003      	movs	r3, r0
 8007ff8:	617b      	str	r3, [r7, #20]
        return glyph;
 8007ffa:	697b      	ldr	r3, [r7, #20]
    }
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b006      	add	sp, #24
 8008002:	bdb0      	pop	{r4, r5, r7, pc}

08008004 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	895b      	ldrh	r3, [r3, #10]
    }
 8008010:	0018      	movs	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	b002      	add	sp, #8
 8008016:	bd80      	pop	{r7, pc}

08008018 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	899b      	ldrh	r3, [r3, #12]
    }
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	b002      	add	sp, #8
 800802a:	bd80      	pop	{r7, pc}

0800802c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	889b      	ldrh	r3, [r3, #4]
    }
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	b002      	add	sp, #8
 800803e:	bd80      	pop	{r7, pc}

08008040 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	889a      	ldrh	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	799b      	ldrb	r3, [r3, #6]
 8008050:	b29b      	uxth	r3, r3
 8008052:	18d3      	adds	r3, r2, r3
 8008054:	b29b      	uxth	r3, r3
    }
 8008056:	0018      	movs	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	b002      	add	sp, #8
 800805c:	bd80      	pop	{r7, pc}

0800805e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	79db      	ldrb	r3, [r3, #7]
 800806a:	065b      	lsls	r3, r3, #25
 800806c:	0e5b      	lsrs	r3, r3, #25
 800806e:	b2db      	uxtb	r3, r3
    }
 8008070:	0018      	movs	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	b002      	add	sp, #8
 8008076:	bd80      	pop	{r7, pc}

08008078 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	79db      	ldrb	r3, [r3, #7]
 8008084:	061b      	lsls	r3, r3, #24
 8008086:	0fdb      	lsrs	r3, r3, #31
 8008088:	b2db      	uxtb	r3, r3
    }
 800808a:	0018      	movs	r0, r3
 800808c:	46bd      	mov	sp, r7
 800808e:	b002      	add	sp, #8
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7ff ff67 	bl	8007f78 <_ZN8touchgfx4FontD1Ev>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	0018      	movs	r0, r3
 80080ae:	46bd      	mov	sp, r7
 80080b0:	b002      	add	sp, #8
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	080168b0 	.word	0x080168b0

080080b8 <_ZN8touchgfx9ConstFontD0Ev>:
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	0018      	movs	r0, r3
 80080c4:	f7ff ffe6 	bl	8008094 <_ZN8touchgfx9ConstFontD1Ev>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2118      	movs	r1, #24
 80080cc:	0018      	movs	r0, r3
 80080ce:	f00a fe64 	bl	8012d9a <_ZdlPvj>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}

080080dc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	4a05      	ldr	r2, [pc, #20]	; (80080fc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	0018      	movs	r0, r3
 80080ee:	f7ff ffd1 	bl	8008094 <_ZN8touchgfx9ConstFontD1Ev>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	0018      	movs	r0, r3
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	08014728 	.word	0x08014728

08008100 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	0018      	movs	r0, r3
 800810c:	f7ff ffe6 	bl	80080dc <_ZN8touchgfx13GeneratedFontD1Ev>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2124      	movs	r1, #36	; 0x24
 8008114:	0018      	movs	r0, r3
 8008116:	f00a fe40 	bl	8012d9a <_ZdlPvj>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	0018      	movs	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	b002      	add	sp, #8
 8008122:	bd80      	pop	{r7, pc}

08008124 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
    {
 800812c:	4a03      	ldr	r2, [pc, #12]	; (800813c <_ZN8touchgfx9TypedTextD1Ev+0x18>)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	601a      	str	r2, [r3, #0]
    }
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0018      	movs	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	b002      	add	sp, #8
 800813a:	bd80      	pop	{r7, pc}
 800813c:	08014718 	.word	0x08014718

08008140 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
    }
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	0018      	movs	r0, r3
 800814c:	f7ff ffea 	bl	8008124 <_ZN8touchgfx9TypedTextD1Ev>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2108      	movs	r1, #8
 8008154:	0018      	movs	r0, r3
 8008156:	f00a fe20 	bl	8012d9a <_ZdlPvj>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	0018      	movs	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	b002      	add	sp, #8
 8008162:	bd80      	pop	{r7, pc}

08008164 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
    }
 8008170:	0018      	movs	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	b002      	add	sp, #8
 8008176:	bd80      	pop	{r7, pc}

08008178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b08d      	sub	sp, #52	; 0x34
 800817c:	af08      	add	r7, sp, #32
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	0019      	movs	r1, r3
 8008184:	1dbb      	adds	r3, r7, #6
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	1c0a      	adds	r2, r1, #0
 800818c:	801a      	strh	r2, [r3, #0]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	881c      	ldrh	r4, [r3, #0]
 8008194:	1dbb      	adds	r3, r7, #6
 8008196:	881a      	ldrh	r2, [r3, #0]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	2340      	movs	r3, #64	; 0x40
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	9306      	str	r3, [sp, #24]
 80081a2:	233c      	movs	r3, #60	; 0x3c
 80081a4:	18fb      	adds	r3, r7, r3
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	2330      	movs	r3, #48	; 0x30
 80081ac:	18fb      	adds	r3, r7, r3
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	232c      	movs	r3, #44	; 0x2c
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	2328      	movs	r3, #40	; 0x28
 80081bc:	18fb      	adds	r3, r7, r3
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	9302      	str	r3, [sp, #8]
 80081c2:	2324      	movs	r3, #36	; 0x24
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	2320      	movs	r3, #32
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	0023      	movs	r3, r4
 80081d4:	f007 fb4e 	bl	800f874 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80081d8:	4a08      	ldr	r2, [pc, #32]	; (80081fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x84>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081e2:	619a      	str	r2, [r3, #24]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081e8:	61da      	str	r2, [r3, #28]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ee:	621a      	str	r2, [r3, #32]
{
}
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	0018      	movs	r0, r3
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b005      	add	sp, #20
 80081f8:	bd90      	pop	{r4, r7, pc}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	08014728 	.word	0x08014728

08008200 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	889b      	ldrh	r3, [r3, #4]
 8008214:	0adb      	lsrs	r3, r3, #11
 8008216:	b29b      	uxth	r3, r3
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	18d3      	adds	r3, r2, r3
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	8819      	ldrh	r1, [r3, #0]
 8008224:	885b      	ldrh	r3, [r3, #2]
 8008226:	041b      	lsls	r3, r3, #16
 8008228:	430b      	orrs	r3, r1
 800822a:	18d3      	adds	r3, r2, r3
}
 800822c:	0018      	movs	r0, r3
 800822e:	46bd      	mov	sp, r7
 8008230:	b004      	add	sp, #16
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	230a      	movs	r3, #10
 8008240:	18fb      	adds	r3, r7, r3
 8008242:	1c0a      	adds	r2, r1, #0
 8008244:	801a      	strh	r2, [r3, #0]
    if (!glyph || glyph->kerningTableSize == 0)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7b1b      	ldrb	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x24>
    {
        return 0;
 8008254:	2300      	movs	r3, #0
 8008256:	e03c      	b.n	80082d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x9e>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	7b5b      	ldrb	r3, [r3, #13]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	b219      	sxth	r1, r3
 8008268:	23e0      	movs	r3, #224	; 0xe0
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	400b      	ands	r3, r1
 800826e:	b219      	sxth	r1, r3
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	7adb      	ldrb	r3, [r3, #11]
 8008274:	b21b      	sxth	r3, r3
 8008276:	430b      	orrs	r3, r1
 8008278:	b21b      	sxth	r3, r3
 800827a:	b29b      	uxth	r3, r3
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	18d3      	adds	r3, r2, r3
 8008280:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7b1a      	ldrb	r2, [r3, #12]
 8008286:	231a      	movs	r3, #26
 8008288:	18fb      	adds	r3, r7, r3
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	231a      	movs	r3, #26
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01c      	beq.n	80082d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x9c>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	220a      	movs	r2, #10
 800829c:	18ba      	adds	r2, r7, r2
 800829e:	8812      	ldrh	r2, [r2, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d103      	bne.n	80082ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
        {
            return kerndata->distance;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	789b      	ldrb	r3, [r3, #2]
 80082a8:	b25b      	sxtb	r3, r3
 80082aa:	e012      	b.n	80082d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x9e>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	220a      	movs	r2, #10
 80082b2:	18ba      	adds	r2, r7, r2
 80082b4:	8812      	ldrh	r2, [r2, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d309      	bcc.n	80082ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x9a>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80082ba:	211a      	movs	r1, #26
 80082bc:	187b      	adds	r3, r7, r1
 80082be:	881a      	ldrh	r2, [r3, #0]
 80082c0:	187b      	adds	r3, r7, r1
 80082c2:	3a01      	subs	r2, #1
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	3304      	adds	r3, #4
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	e7de      	b.n	800828c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x58>
        {
            break;
 80082ce:	46c0      	nop			; (mov r8, r8)
        }
    }
    return 0;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b008      	add	sp, #32
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
 80082e0:	4b02      	ldr	r3, [pc, #8]	; (80082ec <__tcf_0+0x10>)
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7ff fefa 	bl	80080dc <_ZN8touchgfx13GeneratedFontD1Ev>
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200019bc 	.word	0x200019bc

080082f0 <_Z23getFont_verdana_10_4bppv>:
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80082f6:	4b1e      	ldr	r3, [pc, #120]	; (8008370 <_Z23getFont_verdana_10_4bppv+0x80>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	f3bf 8f5b 	dmb	ish
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	001a      	movs	r2, r3
 8008302:	2301      	movs	r3, #1
 8008304:	4013      	ands	r3, r2
 8008306:	425a      	negs	r2, r3
 8008308:	4153      	adcs	r3, r2
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d02b      	beq.n	8008368 <_Z23getFont_verdana_10_4bppv+0x78>
 8008310:	4b17      	ldr	r3, [pc, #92]	; (8008370 <_Z23getFont_verdana_10_4bppv+0x80>)
 8008312:	0018      	movs	r0, r3
 8008314:	f00a fd45 	bl	8012da2 <__cxa_guard_acquire>
 8008318:	0003      	movs	r3, r0
 800831a:	1e5a      	subs	r2, r3, #1
 800831c:	4193      	sbcs	r3, r2
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d021      	beq.n	8008368 <_Z23getFont_verdana_10_4bppv+0x78>
 8008324:	4913      	ldr	r1, [pc, #76]	; (8008374 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008326:	4814      	ldr	r0, [pc, #80]	; (8008378 <_Z23getFont_verdana_10_4bppv+0x88>)
 8008328:	2300      	movs	r3, #0
 800832a:	9309      	str	r3, [sp, #36]	; 0x24
 800832c:	2300      	movs	r3, #0
 800832e:	9308      	str	r3, [sp, #32]
 8008330:	233f      	movs	r3, #63	; 0x3f
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	4b11      	ldr	r3, [pc, #68]	; (800837c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008336:	9306      	str	r3, [sp, #24]
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <_Z23getFont_verdana_10_4bppv+0x90>)
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	2300      	movs	r3, #0
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	2300      	movs	r3, #0
 8008342:	9303      	str	r3, [sp, #12]
 8008344:	2301      	movs	r3, #1
 8008346:	9302      	str	r3, [sp, #8]
 8008348:	2304      	movs	r3, #4
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	2300      	movs	r3, #0
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	230a      	movs	r3, #10
 8008352:	2201      	movs	r2, #1
 8008354:	f7ff ff10 	bl	8008178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <_Z23getFont_verdana_10_4bppv+0x80>)
 800835a:	0018      	movs	r0, r3
 800835c:	f00a fd2e 	bl	8012dbc <__cxa_guard_release>
 8008360:	4b08      	ldr	r3, [pc, #32]	; (8008384 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008362:	0018      	movs	r0, r3
 8008364:	f00a fd64 	bl	8012e30 <atexit>
    return verdana_10_4bpp;
 8008368:	4b03      	ldr	r3, [pc, #12]	; (8008378 <_Z23getFont_verdana_10_4bppv+0x88>)
}
 800836a:	0018      	movs	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	200019e0 	.word	0x200019e0
 8008374:	08017d0c 	.word	0x08017d0c
 8008378:	200019bc 	.word	0x200019bc
 800837c:	08017dac 	.word	0x08017dac
 8008380:	08014774 	.word	0x08014774
 8008384:	080082dd 	.word	0x080082dd

08008388 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <__tcf_0+0x10>)
 800838e:	0018      	movs	r0, r3
 8008390:	f7ff fea4 	bl	80080dc <_ZN8touchgfx13GeneratedFontD1Ev>
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	200019e4 	.word	0x200019e4

0800839c <_Z23getFont_verdana_20_4bppv>:
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	; 0x28
 80083a0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80083a2:	4b1e      	ldr	r3, [pc, #120]	; (800841c <_Z23getFont_verdana_20_4bppv+0x80>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f3bf 8f5b 	dmb	ish
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	001a      	movs	r2, r3
 80083ae:	2301      	movs	r3, #1
 80083b0:	4013      	ands	r3, r2
 80083b2:	425a      	negs	r2, r3
 80083b4:	4153      	adcs	r3, r2
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d02b      	beq.n	8008414 <_Z23getFont_verdana_20_4bppv+0x78>
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <_Z23getFont_verdana_20_4bppv+0x80>)
 80083be:	0018      	movs	r0, r3
 80083c0:	f00a fcef 	bl	8012da2 <__cxa_guard_acquire>
 80083c4:	0003      	movs	r3, r0
 80083c6:	1e5a      	subs	r2, r3, #1
 80083c8:	4193      	sbcs	r3, r2
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d021      	beq.n	8008414 <_Z23getFont_verdana_20_4bppv+0x78>
 80083d0:	4913      	ldr	r1, [pc, #76]	; (8008420 <_Z23getFont_verdana_20_4bppv+0x84>)
 80083d2:	4814      	ldr	r0, [pc, #80]	; (8008424 <_Z23getFont_verdana_20_4bppv+0x88>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	2300      	movs	r3, #0
 80083da:	9308      	str	r3, [sp, #32]
 80083dc:	233f      	movs	r3, #63	; 0x3f
 80083de:	9307      	str	r3, [sp, #28]
 80083e0:	4b11      	ldr	r3, [pc, #68]	; (8008428 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80083e2:	9306      	str	r3, [sp, #24]
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <_Z23getFont_verdana_20_4bppv+0x90>)
 80083e6:	9305      	str	r3, [sp, #20]
 80083e8:	2300      	movs	r3, #0
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	2300      	movs	r3, #0
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	2301      	movs	r3, #1
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	2304      	movs	r3, #4
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	2300      	movs	r3, #0
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2314      	movs	r3, #20
 80083fe:	2209      	movs	r2, #9
 8008400:	f7ff feba 	bl	8008178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8008404:	4b05      	ldr	r3, [pc, #20]	; (800841c <_Z23getFont_verdana_20_4bppv+0x80>)
 8008406:	0018      	movs	r0, r3
 8008408:	f00a fcd8 	bl	8012dbc <__cxa_guard_release>
 800840c:	4b08      	ldr	r3, [pc, #32]	; (8008430 <_Z23getFont_verdana_20_4bppv+0x94>)
 800840e:	0018      	movs	r0, r3
 8008410:	f00a fd0e 	bl	8012e30 <atexit>
    return verdana_20_4bpp;
 8008414:	4b03      	ldr	r3, [pc, #12]	; (8008424 <_Z23getFont_verdana_20_4bppv+0x88>)
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20001a08 	.word	0x20001a08
 8008420:	08017d1c 	.word	0x08017d1c
 8008424:	200019e4 	.word	0x200019e4
 8008428:	08017db0 	.word	0x08017db0
 800842c:	08014778 	.word	0x08014778
 8008430:	08008389 	.word	0x08008389

08008434 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <__tcf_0+0x10>)
 800843a:	0018      	movs	r0, r3
 800843c:	f7ff fe4e 	bl	80080dc <_ZN8touchgfx13GeneratedFontD1Ev>
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20001a0c 	.word	0x20001a0c

08008448 <_Z23getFont_verdana_40_4bppv>:
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800844e:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <_Z23getFont_verdana_40_4bppv+0x80>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f3bf 8f5b 	dmb	ish
 8008456:	b2db      	uxtb	r3, r3
 8008458:	001a      	movs	r2, r3
 800845a:	2301      	movs	r3, #1
 800845c:	4013      	ands	r3, r2
 800845e:	425a      	negs	r2, r3
 8008460:	4153      	adcs	r3, r2
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d02b      	beq.n	80084c0 <_Z23getFont_verdana_40_4bppv+0x78>
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <_Z23getFont_verdana_40_4bppv+0x80>)
 800846a:	0018      	movs	r0, r3
 800846c:	f00a fc99 	bl	8012da2 <__cxa_guard_acquire>
 8008470:	0003      	movs	r3, r0
 8008472:	1e5a      	subs	r2, r3, #1
 8008474:	4193      	sbcs	r3, r2
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d021      	beq.n	80084c0 <_Z23getFont_verdana_40_4bppv+0x78>
 800847c:	4913      	ldr	r1, [pc, #76]	; (80084cc <_Z23getFont_verdana_40_4bppv+0x84>)
 800847e:	4814      	ldr	r0, [pc, #80]	; (80084d0 <_Z23getFont_verdana_40_4bppv+0x88>)
 8008480:	2300      	movs	r3, #0
 8008482:	9309      	str	r3, [sp, #36]	; 0x24
 8008484:	2300      	movs	r3, #0
 8008486:	9308      	str	r3, [sp, #32]
 8008488:	233f      	movs	r3, #63	; 0x3f
 800848a:	9307      	str	r3, [sp, #28]
 800848c:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800848e:	9306      	str	r3, [sp, #24]
 8008490:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	2300      	movs	r3, #0
 8008496:	9304      	str	r3, [sp, #16]
 8008498:	2300      	movs	r3, #0
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	2301      	movs	r3, #1
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	2304      	movs	r3, #4
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	2300      	movs	r3, #0
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2328      	movs	r3, #40	; 0x28
 80084aa:	2201      	movs	r2, #1
 80084ac:	f7ff fe64 	bl	8008178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <_Z23getFont_verdana_40_4bppv+0x80>)
 80084b2:	0018      	movs	r0, r3
 80084b4:	f00a fc82 	bl	8012dbc <__cxa_guard_release>
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <_Z23getFont_verdana_40_4bppv+0x94>)
 80084ba:	0018      	movs	r0, r3
 80084bc:	f00a fcb8 	bl	8012e30 <atexit>
    return verdana_40_4bpp;
 80084c0:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <_Z23getFont_verdana_40_4bppv+0x88>)
}
 80084c2:	0018      	movs	r0, r3
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20001a30 	.word	0x20001a30
 80084cc:	08017d9c 	.word	0x08017d9c
 80084d0:	20001a0c 	.word	0x20001a0c
 80084d4:	08017db4 	.word	0x08017db4
 80084d8:	0801477c 	.word	0x0801477c
 80084dc:	08008435 	.word	0x08008435

080084e0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	0018      	movs	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b002      	add	sp, #8
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
    {
    }
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b002      	add	sp, #8
 8008504:	bd80      	pop	{r7, pc}

08008506 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
    {
    }
 8008510:	46c0      	nop			; (mov r8, r8)
 8008512:	46bd      	mov	sp, r7
 8008514:	b002      	add	sp, #8
 8008516:	bd80      	pop	{r7, pc}

08008518 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
    {
    }
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	46bd      	mov	sp, r7
 8008526:	b002      	add	sp, #8
 8008528:	bd80      	pop	{r7, pc}

0800852a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	000a      	movs	r2, r1
 8008534:	1cfb      	adds	r3, r7, #3
 8008536:	701a      	strb	r2, [r3, #0]
    {
    }
 8008538:	46c0      	nop			; (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	b002      	add	sp, #8
 800853e:	bd80      	pop	{r7, pc}

08008540 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
    {
    }
 8008548:	46c0      	nop			; (mov r8, r8)
 800854a:	46bd      	mov	sp, r7
 800854c:	b002      	add	sp, #8
 800854e:	bd80      	pop	{r7, pc}

08008550 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
    {
    }
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b002      	add	sp, #8
 800855e:	bd80      	pop	{r7, pc}

08008560 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
    {
 8008568:	4a03      	ldr	r2, [pc, #12]	; (8008578 <_ZN8touchgfx15UIEventListenerD1Ev+0x18>)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
    }
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	0018      	movs	r0, r3
 8008572:	46bd      	mov	sp, r7
 8008574:	b002      	add	sp, #8
 8008576:	bd80      	pop	{r7, pc}
 8008578:	08014888 	.word	0x08014888

0800857c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
    }
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0018      	movs	r0, r3
 8008588:	f7ff ffea 	bl	8008560 <_ZN8touchgfx15UIEventListenerD1Ev>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2104      	movs	r1, #4
 8008590:	0018      	movs	r0, r3
 8008592:	f00a fc02 	bl	8012d9a <_ZdlPvj>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b002      	add	sp, #8
 800859e:	bd80      	pop	{r7, pc}

080085a0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	000a      	movs	r2, r1
 80085aa:	1cfb      	adds	r3, r7, #3
 80085ac:	701a      	strb	r2, [r3, #0]
    {
    }
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b002      	add	sp, #8
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	2396      	movs	r3, #150	; 0x96
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	18d3      	adds	r3, r2, r3
 80085ca:	2208      	movs	r2, #8
 80085cc:	0018      	movs	r0, r3
 80085ce:	f00a fc85 	bl	8012edc <memcpy>
    };
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	46bd      	mov	sp, r7
 80085d6:	b002      	add	sp, #8
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
    {
 80085e4:	4a03      	ldr	r2, [pc, #12]	; (80085f4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x18>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
    }
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	0018      	movs	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b002      	add	sp, #8
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	08014870 	.word	0x08014870

080085f8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
    }
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	0018      	movs	r0, r3
 8008604:	f7ff ffea 	bl	80085dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2104      	movs	r1, #4
 800860c:	0018      	movs	r0, r3
 800860e:	f00a fbc4 	bl	8012d9a <_ZdlPvj>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	0018      	movs	r0, r3
 8008616:	46bd      	mov	sp, r7
 8008618:	b002      	add	sp, #8
 800861a:	bd80      	pop	{r7, pc}

0800861c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
    {
        return instance;
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <_ZN8touchgfx3HAL11getInstanceEv+0x10>)
 8008622:	681b      	ldr	r3, [r3, #0]
    }
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	200034cc 	.word	0x200034cc

08008630 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8008638:	4a06      	ldr	r2, [pc, #24]	; (8008654 <_ZN8touchgfx10TransitionC1Ev+0x24>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	721a      	strb	r2, [r3, #8]
    {
    }
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	0018      	movs	r0, r3
 800864e:	46bd      	mov	sp, r7
 8008650:	b002      	add	sp, #8
 8008652:	bd80      	pop	{r7, pc}
 8008654:	0801484c 	.word	0x0801484c

08008658 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
    {
 8008660:	4a03      	ldr	r2, [pc, #12]	; (8008670 <_ZN8touchgfx10TransitionD1Ev+0x18>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
    }
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	0018      	movs	r0, r3
 800866a:	46bd      	mov	sp, r7
 800866c:	b002      	add	sp, #8
 800866e:	bd80      	pop	{r7, pc}
 8008670:	0801484c 	.word	0x0801484c

08008674 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
    }
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	0018      	movs	r0, r3
 8008680:	f7ff ffea 	bl	8008658 <_ZN8touchgfx10TransitionD1Ev>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	210c      	movs	r1, #12
 8008688:	0018      	movs	r0, r3
 800868a:	f00a fb86 	bl	8012d9a <_ZdlPvj>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	0018      	movs	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	b002      	add	sp, #8
 8008696:	bd80      	pop	{r7, pc}

08008698 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
    {
    }
 80086a0:	46c0      	nop			; (mov r8, r8)
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b002      	add	sp, #8
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
    {
    }
 80086b0:	46c0      	nop			; (mov r8, r8)
 80086b2:	46bd      	mov	sp, r7
 80086b4:	b002      	add	sp, #8
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
    {
    }
 80086c0:	46c0      	nop			; (mov r8, r8)
 80086c2:	46bd      	mov	sp, r7
 80086c4:	b002      	add	sp, #8
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80086d0:	f006 faf0 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 80086d4:	0002      	movs	r2, r0
 80086d6:	6813      	ldr	r3, [r2, #0]
 80086d8:	3330      	adds	r3, #48	; 0x30
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	0010      	movs	r0, r2
 80086de:	4798      	blx	r3
    }
 80086e0:	46c0      	nop			; (mov r8, r8)
 80086e2:	46bd      	mov	sp, r7
 80086e4:	b002      	add	sp, #8
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	605a      	str	r2, [r3, #4]
    }
 80086f8:	46c0      	nop			; (mov r8, r8)
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b002      	add	sp, #8
 80086fe:	bd80      	pop	{r7, pc}

08008700 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	4a05      	ldr	r2, [pc, #20]	; (8008720 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	0018      	movs	r0, r3
 8008712:	f7ff ff25 	bl	8008560 <_ZN8touchgfx15UIEventListenerD1Ev>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	0018      	movs	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	b002      	add	sp, #8
 800871e:	bd80      	pop	{r7, pc}
 8008720:	08016758 	.word	0x08016758

08008724 <_ZN8touchgfx11ApplicationD0Ev>:
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	0018      	movs	r0, r3
 8008730:	f7ff ffe6 	bl	8008700 <_ZN8touchgfx11ApplicationD1Ev>
 8008734:	239c      	movs	r3, #156	; 0x9c
 8008736:	005a      	lsls	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	0011      	movs	r1, r2
 800873c:	0018      	movs	r0, r3
 800873e:	f00a fb2c 	bl	8012d9a <_ZdlPvj>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	0018      	movs	r0, r3
 8008746:	46bd      	mov	sp, r7
 8008748:	b002      	add	sp, #8
 800874a:	bd80      	pop	{r7, pc}

0800874c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	0018      	movs	r0, r3
 8008758:	f006 facc 	bl	800ecf4 <_ZN8touchgfx11ApplicationC1Ev>
 800875c:	4a0a      	ldr	r2, [pc, #40]	; (8008788 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	239c      	movs	r3, #156	; 0x9c
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	2100      	movs	r1, #0
 800876a:	50d1      	str	r1, [r2, r3]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	239e      	movs	r3, #158	; 0x9e
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	2100      	movs	r1, #0
 8008774:	50d1      	str	r1, [r2, r3]
    {
        instance = this;
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4b04      	ldr	r3, [pc, #16]	; (800878c <_ZN8touchgfx14MVPApplicationC1Ev+0x40>)
 800877a:	601a      	str	r2, [r3, #0]
    }
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	0018      	movs	r0, r3
 8008780:	46bd      	mov	sp, r7
 8008782:	b002      	add	sp, #8
 8008784:	bd80      	pop	{r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	08014808 	.word	0x08014808
 800878c:	20003538 	.word	0x20003538

08008790 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	0018      	movs	r0, r3
 800879c:	f000 f804 	bl	80087a8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80087a0:	46c0      	nop			; (mov r8, r8)
 80087a2:	46bd      	mov	sp, r7
 80087a4:	b002      	add	sp, #8
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	239e      	movs	r3, #158	; 0x9e
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	58d3      	ldr	r3, [r2, r3]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d010      	beq.n	80087de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x36>
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	239e      	movs	r3, #158	; 0x9e
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	58d1      	ldr	r1, [r2, r3]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	239e      	movs	r3, #158	; 0x9e
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	58d3      	ldr	r3, [r2, r3]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330c      	adds	r3, #12
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	0008      	movs	r0, r1
 80087d4:	4798      	blx	r3
 80087d6:	1e03      	subs	r3, r0, #0
 80087d8:	d001      	beq.n	80087de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x36>
 80087da:	2301      	movs	r3, #1
 80087dc:	e000      	b.n	80087e0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x38>
 80087de:	2300      	movs	r3, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d011      	beq.n	8008808 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x60>
        {
            pendingScreenTransitionCallback->execute();
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	239e      	movs	r3, #158	; 0x9e
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	58d1      	ldr	r1, [r2, r3]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	239e      	movs	r3, #158	; 0x9e
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	58d3      	ldr	r3, [r2, r3]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	0008      	movs	r0, r1
 80087fc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	239e      	movs	r3, #158	; 0x9e
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	2100      	movs	r1, #0
 8008806:	50d1      	str	r1, [r2, r3]
        }
    }
 8008808:	46c0      	nop			; (mov r8, r8)
 800880a:	46bd      	mov	sp, r7
 800880c:	b002      	add	sp, #8
 800880e:	bd80      	pop	{r7, pc}

08008810 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	601a      	str	r2, [r3, #0]
    }
 8008820:	46c0      	nop			; (mov r8, r8)
 8008822:	46bd      	mov	sp, r7
 8008824:	b002      	add	sp, #8
 8008826:	bd80      	pop	{r7, pc}

08008828 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	4a05      	ldr	r2, [pc, #20]	; (8008848 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	0018      	movs	r0, r3
 800883a:	f7ff ff61 	bl	8008700 <_ZN8touchgfx11ApplicationD1Ev>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	0018      	movs	r0, r3
 8008842:	46bd      	mov	sp, r7
 8008844:	b002      	add	sp, #8
 8008846:	bd80      	pop	{r7, pc}
 8008848:	08014808 	.word	0x08014808

0800884c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	0018      	movs	r0, r3
 8008858:	f7ff ffe6 	bl	8008828 <_ZN8touchgfx14MVPApplicationD1Ev>
 800885c:	23a0      	movs	r3, #160	; 0xa0
 800885e:	005a      	lsls	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	0011      	movs	r1, r2
 8008864:	0018      	movs	r0, r3
 8008866:	f00a fa98 	bl	8012d9a <_ZdlPvj>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b002      	add	sp, #8
 8008872:	bd80      	pop	{r7, pc}

08008874 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	4a08      	ldr	r2, [pc, #32]	; (80088a0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3341      	adds	r3, #65	; 0x41
 8008886:	33ff      	adds	r3, #255	; 0xff
 8008888:	0018      	movs	r0, r3
 800888a:	f000 fc83 	bl	8009194 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	0018      	movs	r0, r3
 8008892:	f7ff ffc9 	bl	8008828 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	0018      	movs	r0, r3
 800889a:	46bd      	mov	sp, r7
 800889c:	b002      	add	sp, #8
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	080147ac 	.word	0x080147ac

080088a4 <_ZN23FrontendApplicationBaseD0Ev>:
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	0018      	movs	r0, r3
 80088b0:	f7ff ffe0 	bl	8008874 <_ZN23FrontendApplicationBaseD1Ev>
 80088b4:	23ac      	movs	r3, #172	; 0xac
 80088b6:	005a      	lsls	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	0011      	movs	r1, r2
 80088bc:	0018      	movs	r0, r3
 80088be:	f00a fa6c 	bl	8012d9a <_ZdlPvj>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b002      	add	sp, #8
 80088ca:	bd80      	pop	{r7, pc}

080088cc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	721a      	strb	r2, [r3, #8]
    }
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	46bd      	mov	sp, r7
 80088de:	b002      	add	sp, #8
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	605a      	str	r2, [r3, #4]
    }
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b002      	add	sp, #8
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	0018      	movs	r0, r3
 800890c:	f7ff ff1e 	bl	800874c <_ZN8touchgfx14MVPApplicationC1Ev>
 8008910:	4a11      	ldr	r2, [pc, #68]	; (8008958 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3341      	adds	r3, #65	; 0x41
 800891a:	33ff      	adds	r3, #255	; 0xff
 800891c:	0018      	movs	r0, r3
 800891e:	f000 f8eb 	bl	8008af8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	23a8      	movs	r3, #168	; 0xa8
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	50d1      	str	r1, [r2, r3]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	23aa      	movs	r3, #170	; 0xaa
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	50d1      	str	r1, [r2, r3]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008936:	f7ff fe71 	bl	800861c <_ZN8touchgfx3HAL11getInstanceEv>
 800893a:	0002      	movs	r2, r0
 800893c:	6813      	ldr	r3, [r2, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2100      	movs	r1, #0
 8008944:	0010      	movs	r0, r2
 8008946:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8008948:	2000      	movs	r0, #0
 800894a:	f001 fc57 	bl	800a1fc <_ZN8touchgfx5Texts11setLanguageEt>
}
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	0018      	movs	r0, r3
 8008952:	46bd      	mov	sp, r7
 8008954:	b004      	add	sp, #16
 8008956:	bd80      	pop	{r7, pc}
 8008958:	080147ac 	.word	0x080147ac

0800895c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	0018      	movs	r0, r3
 800896a:	46bd      	mov	sp, r7
 800896c:	b002      	add	sp, #8
 800896e:	bd80      	pop	{r7, pc}

08008970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	0011      	movs	r1, r2
 8008980:	0018      	movs	r0, r3
 8008982:	f7ff ffeb 	bl	800895c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	3208      	adds	r2, #8
 8008996:	ca03      	ldmia	r2!, {r0, r1}
 8008998:	c303      	stmia	r3!, {r0, r1}
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b002      	add	sp, #8
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80089a4:	b5b0      	push	{r4, r5, r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3341      	adds	r3, #65	; 0x41
 80089b0:	33ff      	adds	r3, #255	; 0xff
 80089b2:	001c      	movs	r4, r3
 80089b4:	2118      	movs	r1, #24
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	4a10      	ldr	r2, [pc, #64]	; (80089fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x58>)
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	2200      	movs	r2, #0
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	187b      	adds	r3, r7, r1
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	2508      	movs	r5, #8
 80089c8:	1978      	adds	r0, r7, r5
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f000 f8af 	bl	8008b30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80089d2:	197b      	adds	r3, r7, r5
 80089d4:	0019      	movs	r1, r3
 80089d6:	0020      	movs	r0, r4
 80089d8:	f7ff ffca 	bl	8008970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80089dc:	197b      	adds	r3, r7, r5
 80089de:	0018      	movs	r0, r3
 80089e0:	f000 fbd8 	bl	8009194 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3341      	adds	r3, #65	; 0x41
 80089e8:	33ff      	adds	r3, #255	; 0xff
 80089ea:	0019      	movs	r1, r3
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	239e      	movs	r3, #158	; 0x9e
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	50d1      	str	r1, [r2, r3]
}
 80089f4:	46c0      	nop			; (mov r8, r8)
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b008      	add	sp, #32
 80089fa:	bdb0      	pop	{r4, r5, r7, pc}
 80089fc:	08008a01 	.word	0x08008a01

08008a00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3339      	adds	r3, #57	; 0x39
 8008a0c:	33ff      	adds	r3, #255	; 0xff
 8008a0e:	0019      	movs	r1, r3
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	23a8      	movs	r3, #168	; 0xa8
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	58d3      	ldr	r3, [r2, r3]
 8008a18:	001c      	movs	r4, r3
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	23aa      	movs	r3, #170	; 0xaa
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	58d3      	ldr	r3, [r2, r3]
 8008a22:	4a05      	ldr	r2, [pc, #20]	; (8008a38 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>)
 8008a24:	4805      	ldr	r0, [pc, #20]	; (8008a3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3c>)
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	0013      	movs	r3, r2
 8008a2a:	0022      	movs	r2, r4
 8008a2c:	f000 f8b0 	bl	8008b90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b003      	add	sp, #12
 8008a36:	bd90      	pop	{r4, r7, pc}
 8008a38:	2000352c 	.word	0x2000352c
 8008a3c:	20003528 	.word	0x20003528

08008a40 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 8008a40:	b5b0      	push	{r4, r5, r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3341      	adds	r3, #65	; 0x41
 8008a4c:	33ff      	adds	r3, #255	; 0xff
 8008a4e:	001c      	movs	r4, r3
 8008a50:	2118      	movs	r1, #24
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x58>)
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	187b      	adds	r3, r7, r1
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
 8008a5e:	187b      	adds	r3, r7, r1
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	2508      	movs	r5, #8
 8008a64:	1978      	adds	r0, r7, r5
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f000 f861 	bl	8008b30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8008a6e:	197b      	adds	r3, r7, r5
 8008a70:	0019      	movs	r1, r3
 8008a72:	0020      	movs	r0, r4
 8008a74:	f7ff ff7c 	bl	8008970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8008a78:	197b      	adds	r3, r7, r5
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fb8a 	bl	8009194 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3341      	adds	r3, #65	; 0x41
 8008a84:	33ff      	adds	r3, #255	; 0xff
 8008a86:	0019      	movs	r1, r3
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	239e      	movs	r3, #158	; 0x9e
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	50d1      	str	r1, [r2, r3]
}
 8008a90:	46c0      	nop			; (mov r8, r8)
 8008a92:	46bd      	mov	sp, r7
 8008a94:	b008      	add	sp, #32
 8008a96:	bdb0      	pop	{r4, r5, r7, pc}
 8008a98:	08008a9d 	.word	0x08008a9d

08008a9c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3339      	adds	r3, #57	; 0x39
 8008aa8:	33ff      	adds	r3, #255	; 0xff
 8008aaa:	0019      	movs	r1, r3
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	23a8      	movs	r3, #168	; 0xa8
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	58d3      	ldr	r3, [r2, r3]
 8008ab4:	001c      	movs	r4, r3
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	23aa      	movs	r3, #170	; 0xaa
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	58d3      	ldr	r3, [r2, r3]
 8008abe:	4a05      	ldr	r2, [pc, #20]	; (8008ad4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>)
 8008ac0:	4805      	ldr	r0, [pc, #20]	; (8008ad8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x3c>)
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	0013      	movs	r3, r2
 8008ac6:	0022      	movs	r2, r4
 8008ac8:	f000 f990 	bl	8008dec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8008acc:	46c0      	nop			; (mov r8, r8)
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b003      	add	sp, #12
 8008ad2:	bd90      	pop	{r4, r7, pc}
 8008ad4:	2000352c 	.word	0x2000352c
 8008ad8:	20003528 	.word	0x20003528

08008adc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	4a03      	ldr	r2, [pc, #12]	; (8008af4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x18>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0018      	movs	r0, r3
 8008aee:	46bd      	mov	sp, r7
 8008af0:	b002      	add	sp, #8
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	08014870 	.word	0x08014870

08008af8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	0018      	movs	r0, r3
 8008b04:	f7ff ffea 	bl	8008adc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008b08:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	609a      	str	r2, [r3, #8]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60da      	str	r2, [r3, #12]
    {
    }
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	0018      	movs	r0, r3
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b002      	add	sp, #8
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	080147f0 	.word	0x080147f0

08008b30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	0039      	movs	r1, r7
 8008b3c:	600a      	str	r2, [r1, #0]
 8008b3e:	604b      	str	r3, [r1, #4]
    {
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff ffca 	bl	8008adc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008b48:	4a07      	ldr	r2, [pc, #28]	; (8008b68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x38>)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	003a      	movs	r2, r7
 8008b58:	3308      	adds	r3, #8
 8008b5a:	ca03      	ldmia	r2!, {r0, r1}
 8008b5c:	c303      	stmia	r3!, {r0, r1}
    }
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	0018      	movs	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	b004      	add	sp, #16
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	080147f0 	.word	0x080147f0

08008b6c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	0018      	movs	r0, r3
 8008b78:	f7ff fd5a 	bl	8008630 <_ZN8touchgfx10TransitionC1Ev>
 8008b7c:	4a03      	ldr	r2, [pc, #12]	; (8008b8c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	0018      	movs	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b002      	add	sp, #8
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08014788 	.word	0x08014788

08008b90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008b90:	b590      	push	{r4, r7, lr}
 8008b92:	b08f      	sub	sp, #60	; 0x3c
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3320      	adds	r3, #32
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	0010      	movs	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	0003      	movs	r3, r0
 8008bb2:	2bdf      	cmp	r3, #223	; 0xdf
 8008bb4:	d805      	bhi.n	8008bc2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8008bb6:	4b88      	ldr	r3, [pc, #544]	; (8008dd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8008bb8:	4a88      	ldr	r2, [pc, #544]	; (8008ddc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8008bba:	4889      	ldr	r0, [pc, #548]	; (8008de0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8008bbc:	21a7      	movs	r1, #167	; 0xa7
 8008bbe:	f00a f919 	bl	8012df4 <__assert_func>
 8008bc2:	46c0      	nop			; (mov r8, r8)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3320      	adds	r3, #32
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	0010      	movs	r0, r2
 8008bd4:	4798      	blx	r3
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	2b0f      	cmp	r3, #15
 8008bda:	d805      	bhi.n	8008be8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8008bdc:	4b81      	ldr	r3, [pc, #516]	; (8008de4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8008bde:	4a7f      	ldr	r2, [pc, #508]	; (8008ddc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8008be0:	487f      	ldr	r0, [pc, #508]	; (8008de0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8008be2:	21a8      	movs	r1, #168	; 0xa8
 8008be4:	f00a f906 	bl	8012df4 <__assert_func>
 8008be8:	46c0      	nop			; (mov r8, r8)
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3320      	adds	r3, #32
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	0010      	movs	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	0003      	movs	r3, r0
 8008bfe:	2b0b      	cmp	r3, #11
 8008c00:	d805      	bhi.n	8008c0e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8008c02:	4b79      	ldr	r3, [pc, #484]	; (8008de8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 8008c04:	4a75      	ldr	r2, [pc, #468]	; (8008ddc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8008c06:	4876      	ldr	r0, [pc, #472]	; (8008de0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8008c08:	21a9      	movs	r1, #169	; 0xa9
 8008c0a:	f00a f8f3 	bl	8012df4 <__assert_func>
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008c1c:	f006 f84a 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 8008c20:	0003      	movs	r3, r0
 8008c22:	0018      	movs	r0, r3
 8008c24:	f006 f84c 	bl	800ecc0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	0010      	movs	r0, r2
 8008c40:	4798      	blx	r3
    if (*currentTrans)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	0010      	movs	r0, r2
 8008c58:	4798      	blx	r3
    if (*currentScreen)
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3314      	adds	r3, #20
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	0010      	movs	r0, r2
 8008c72:	4798      	blx	r3
    if (*currentPresenter)
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d008      	beq.n	8008c8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3304      	adds	r3, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	0010      	movs	r0, r2
 8008c8c:	4798      	blx	r3
    if (*currentScreen)
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	0010      	movs	r0, r2
 8008ca4:	4798      	blx	r3
    if (*currentPresenter)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d008      	beq.n	8008cc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3308      	adds	r3, #8
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	0010      	movs	r0, r2
 8008cbe:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f000 f9be 	bl	8009048 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008ccc:	0003      	movs	r3, r0
 8008cce:	0019      	movs	r1, r3
 8008cd0:	200c      	movs	r0, #12
 8008cd2:	f7ff fc05 	bl	80084e0 <_ZnwjPv>
 8008cd6:	1e04      	subs	r4, r0, #0
 8008cd8:	d004      	beq.n	8008ce4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>
 8008cda:	0020      	movs	r0, r4
 8008cdc:	f7ff ff46 	bl	8008b6c <_ZN8touchgfx12NoTransitionC1Ev>
 8008ce0:	0023      	movs	r3, r4
 8008ce2:	e000      	b.n	8008ce6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x156>
 8008ce4:	0023      	movs	r3, r4
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2100      	movs	r1, #0
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f000 f9bf 	bl	8009072 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8008cf4:	0003      	movs	r3, r0
 8008cf6:	0019      	movs	r1, r3
 8008cf8:	20e0      	movs	r0, #224	; 0xe0
 8008cfa:	f7ff fbf1 	bl	80084e0 <_ZnwjPv>
 8008cfe:	1e04      	subs	r4, r0, #0
 8008d00:	d004      	beq.n	8008d0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x17c>
 8008d02:	0020      	movs	r0, r4
 8008d04:	f001 fc94 	bl	800a630 <_ZN11Screen1ViewC1Ev>
 8008d08:	0023      	movs	r3, r4
 8008d0a:	e000      	b.n	8008d0e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x17e>
 8008d0c:	0023      	movs	r3, r4
 8008d0e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2100      	movs	r1, #0
 8008d16:	0018      	movs	r0, r3
 8008d18:	f000 f9c0 	bl	800909c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8008d1c:	0003      	movs	r3, r0
 8008d1e:	0019      	movs	r1, r3
 8008d20:	2010      	movs	r0, #16
 8008d22:	f7ff fbdd 	bl	80084e0 <_ZnwjPv>
 8008d26:	1e04      	subs	r4, r0, #0
 8008d28:	d006      	beq.n	8008d38 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1a8>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	0019      	movs	r1, r3
 8008d2e:	0020      	movs	r0, r4
 8008d30:	f001 fc2a 	bl	800a588 <_ZN16Screen1PresenterC1ER11Screen1View>
 8008d34:	0023      	movs	r3, r4
 8008d36:	e000      	b.n	8008d3a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1aa>
 8008d38:	0023      	movs	r3, r4
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d40:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d46:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ca>
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	3304      	adds	r3, #4
 8008d58:	e000      	b.n	8008d5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1cc>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d5e:	0019      	movs	r1, r3
 8008d60:	0010      	movs	r0, r2
 8008d62:	f7ff fd55 	bl	8008810 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	3304      	adds	r3, #4
 8008d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d6c:	0011      	movs	r1, r2
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7ff fdb7 	bl	80088e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d78:	0011      	movs	r1, r2
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f000 f9a3 	bl	80090c6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	0010      	movs	r0, r2
 8008d98:	4798      	blx	r3
    newPresenter->activate();
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	0010      	movs	r0, r2
 8008da4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	0011      	movs	r1, r2
 8008dac:	0018      	movs	r0, r3
 8008dae:	f007 f953 	bl	8010058 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3310      	adds	r3, #16
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	0010      	movs	r0, r2
 8008dbe:	4798      	blx	r3
    newTransition->invalidate();
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	0010      	movs	r0, r2
 8008dcc:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	b00f      	add	sp, #60	; 0x3c
 8008dd6:	bd90      	pop	{r4, r7, pc}
 8008dd8:	08013eb4 	.word	0x08013eb4
 8008ddc:	080148a8 	.word	0x080148a8
 8008de0:	08013f44 	.word	0x08013f44
 8008de4:	08013f88 	.word	0x08013f88
 8008de8:	0801402c 	.word	0x0801402c

08008dec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b08f      	sub	sp, #60	; 0x3c
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3320      	adds	r3, #32
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	0010      	movs	r0, r2
 8008e0a:	4798      	blx	r3
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	2bdf      	cmp	r3, #223	; 0xdf
 8008e10:	d805      	bhi.n	8008e1e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8008e12:	4b88      	ldr	r3, [pc, #544]	; (8009034 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8008e14:	4a88      	ldr	r2, [pc, #544]	; (8009038 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8008e16:	4889      	ldr	r0, [pc, #548]	; (800903c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8008e18:	21a7      	movs	r1, #167	; 0xa7
 8008e1a:	f009 ffeb 	bl	8012df4 <__assert_func>
 8008e1e:	46c0      	nop			; (mov r8, r8)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3320      	adds	r3, #32
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	0010      	movs	r0, r2
 8008e30:	4798      	blx	r3
 8008e32:	0003      	movs	r3, r0
 8008e34:	2b0f      	cmp	r3, #15
 8008e36:	d805      	bhi.n	8008e44 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8008e38:	4b81      	ldr	r3, [pc, #516]	; (8009040 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8008e3a:	4a7f      	ldr	r2, [pc, #508]	; (8009038 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8008e3c:	487f      	ldr	r0, [pc, #508]	; (800903c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8008e3e:	21a8      	movs	r1, #168	; 0xa8
 8008e40:	f009 ffd8 	bl	8012df4 <__assert_func>
 8008e44:	46c0      	nop			; (mov r8, r8)
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3320      	adds	r3, #32
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	0010      	movs	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	0003      	movs	r3, r0
 8008e5a:	2b0b      	cmp	r3, #11
 8008e5c:	d805      	bhi.n	8008e6a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8008e5e:	4b79      	ldr	r3, [pc, #484]	; (8009044 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 8008e60:	4a75      	ldr	r2, [pc, #468]	; (8009038 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8008e62:	4876      	ldr	r0, [pc, #472]	; (800903c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8008e64:	21a9      	movs	r1, #169	; 0xa9
 8008e66:	f009 ffc5 	bl	8012df4 <__assert_func>
 8008e6a:	46c0      	nop			; (mov r8, r8)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008e78:	f005 ff1c 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 8008e7c:	0003      	movs	r3, r0
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f005 ff1e 	bl	800ecc0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d008      	beq.n	8008e9e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	330c      	adds	r3, #12
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	0010      	movs	r0, r2
 8008e9c:	4798      	blx	r3
    if (*currentTrans)
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	0010      	movs	r0, r2
 8008eb4:	4798      	blx	r3
    if (*currentScreen)
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3314      	adds	r3, #20
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	0010      	movs	r0, r2
 8008ece:	4798      	blx	r3
    if (*currentPresenter)
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d008      	beq.n	8008eea <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	0010      	movs	r0, r2
 8008ee8:	4798      	blx	r3
    if (*currentScreen)
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	0010      	movs	r0, r2
 8008f00:	4798      	blx	r3
    if (*currentPresenter)
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	0010      	movs	r0, r2
 8008f1a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	2100      	movs	r1, #0
 8008f22:	0018      	movs	r0, r3
 8008f24:	f000 f890 	bl	8009048 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	0019      	movs	r1, r3
 8008f2c:	200c      	movs	r0, #12
 8008f2e:	f7ff fad7 	bl	80084e0 <_ZnwjPv>
 8008f32:	1e04      	subs	r4, r0, #0
 8008f34:	d004      	beq.n	8008f40 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>
 8008f36:	0020      	movs	r0, r4
 8008f38:	f7ff fe18 	bl	8008b6c <_ZN8touchgfx12NoTransitionC1Ev>
 8008f3c:	0023      	movs	r3, r4
 8008f3e:	e000      	b.n	8008f42 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x156>
 8008f40:	0023      	movs	r3, r4
 8008f42:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f000 f8c7 	bl	80090de <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8008f50:	0003      	movs	r3, r0
 8008f52:	0019      	movs	r1, r3
 8008f54:	20e0      	movs	r0, #224	; 0xe0
 8008f56:	f7ff fac3 	bl	80084e0 <_ZnwjPv>
 8008f5a:	1e04      	subs	r4, r0, #0
 8008f5c:	d004      	beq.n	8008f68 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x17c>
 8008f5e:	0020      	movs	r0, r4
 8008f60:	f001 fc22 	bl	800a7a8 <_ZN11Screen2ViewC1Ev>
 8008f64:	0023      	movs	r3, r4
 8008f66:	e000      	b.n	8008f6a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x17e>
 8008f68:	0023      	movs	r3, r4
 8008f6a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2100      	movs	r1, #0
 8008f72:	0018      	movs	r0, r3
 8008f74:	f000 f8c8 	bl	8009108 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8008f78:	0003      	movs	r3, r0
 8008f7a:	0019      	movs	r1, r3
 8008f7c:	2010      	movs	r0, #16
 8008f7e:	f7ff faaf 	bl	80084e0 <_ZnwjPv>
 8008f82:	1e04      	subs	r4, r0, #0
 8008f84:	d006      	beq.n	8008f94 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1a8>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	0019      	movs	r1, r3
 8008f8a:	0020      	movs	r0, r4
 8008f8c:	f001 fbb8 	bl	800a700 <_ZN16Screen2PresenterC1ER11Screen2View>
 8008f90:	0023      	movs	r3, r4
 8008f92:	e000      	b.n	8008f96 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1aa>
 8008f94:	0023      	movs	r3, r4
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f9c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ca>
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	e000      	b.n	8008fb8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1cc>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fba:	0019      	movs	r1, r3
 8008fbc:	0010      	movs	r0, r2
 8008fbe:	f7ff fc27 	bl	8008810 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc8:	0011      	movs	r1, r2
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f7ff fc89 	bl	80088e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd4:	0011      	movs	r1, r2
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f000 f8ab 	bl	8009132 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	61fb      	str	r3, [r7, #28]
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	330c      	adds	r3, #12
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	0010      	movs	r0, r2
 8008ff4:	4798      	blx	r3
    newPresenter->activate();
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	0010      	movs	r0, r2
 8009000:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f007 f825 	bl	8010058 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3310      	adds	r3, #16
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	0010      	movs	r0, r2
 800901a:	4798      	blx	r3
    newTransition->invalidate();
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3314      	adds	r3, #20
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	0010      	movs	r0, r2
 8009028:	4798      	blx	r3
    return newPresenter;
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b00f      	add	sp, #60	; 0x3c
 8009032:	bd90      	pop	{r4, r7, pc}
 8009034:	08013eb4 	.word	0x08013eb4
 8009038:	080149ac 	.word	0x080149ac
 800903c:	08013f44 	.word	0x08013f44
 8009040:	08013f88 	.word	0x08013f88
 8009044:	0801402c 	.word	0x0801402c

08009048 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	000a      	movs	r2, r1
 8009052:	1cbb      	adds	r3, r7, #2
 8009054:	801a      	strh	r2, [r3, #0]
    {
        return *static_cast<T*>(element(index));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3324      	adds	r3, #36	; 0x24
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1cba      	adds	r2, r7, #2
 8009060:	8811      	ldrh	r1, [r2, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	0010      	movs	r0, r2
 8009066:	4798      	blx	r3
 8009068:	0003      	movs	r3, r0
    }
 800906a:	0018      	movs	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	b002      	add	sp, #8
 8009070:	bd80      	pop	{r7, pc}

08009072 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	000a      	movs	r2, r1
 800907c:	1cbb      	adds	r3, r7, #2
 800907e:	801a      	strh	r2, [r3, #0]
        return *static_cast<T*>(element(index));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3324      	adds	r3, #36	; 0x24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	1cba      	adds	r2, r7, #2
 800908a:	8811      	ldrh	r1, [r2, #0]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	0010      	movs	r0, r2
 8009090:	4798      	blx	r3
 8009092:	0003      	movs	r3, r0
    }
 8009094:	0018      	movs	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	b002      	add	sp, #8
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	000a      	movs	r2, r1
 80090a6:	1cbb      	adds	r3, r7, #2
 80090a8:	801a      	strh	r2, [r3, #0]
        return *static_cast<T*>(element(index));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3324      	adds	r3, #36	; 0x24
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	1cba      	adds	r2, r7, #2
 80090b4:	8811      	ldrh	r1, [r2, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	0010      	movs	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	0003      	movs	r3, r0
    }
 80090be:	0018      	movs	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	b002      	add	sp, #8
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	46bd      	mov	sp, r7
 80090da:	b002      	add	sp, #8
 80090dc:	bd80      	pop	{r7, pc}

080090de <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	000a      	movs	r2, r1
 80090e8:	1cbb      	adds	r3, r7, #2
 80090ea:	801a      	strh	r2, [r3, #0]
        return *static_cast<T*>(element(index));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3324      	adds	r3, #36	; 0x24
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	1cba      	adds	r2, r7, #2
 80090f6:	8811      	ldrh	r1, [r2, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	0010      	movs	r0, r2
 80090fc:	4798      	blx	r3
 80090fe:	0003      	movs	r3, r0
    }
 8009100:	0018      	movs	r0, r3
 8009102:	46bd      	mov	sp, r7
 8009104:	b002      	add	sp, #8
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	000a      	movs	r2, r1
 8009112:	1cbb      	adds	r3, r7, #2
 8009114:	801a      	strh	r2, [r3, #0]
        return *static_cast<T*>(element(index));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3324      	adds	r3, #36	; 0x24
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	1cba      	adds	r2, r7, #2
 8009120:	8811      	ldrh	r1, [r2, #0]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	0010      	movs	r0, r2
 8009126:	4798      	blx	r3
 8009128:	0003      	movs	r3, r0
    }
 800912a:	0018      	movs	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	b002      	add	sp, #8
 8009130:	bd80      	pop	{r7, pc}

08009132 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	46bd      	mov	sp, r7
 8009146:	b002      	add	sp, #8
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <_ZN8touchgfx12NoTransitionD1Ev>:
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	4a05      	ldr	r2, [pc, #20]	; (800916c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	0018      	movs	r0, r3
 800915e:	f7ff fa7b 	bl	8008658 <_ZN8touchgfx10TransitionD1Ev>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	0018      	movs	r0, r3
 8009166:	46bd      	mov	sp, r7
 8009168:	b002      	add	sp, #8
 800916a:	bd80      	pop	{r7, pc}
 800916c:	08014788 	.word	0x08014788

08009170 <_ZN8touchgfx12NoTransitionD0Ev>:
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	0018      	movs	r0, r3
 800917c:	f7ff ffe6 	bl	800914c <_ZN8touchgfx12NoTransitionD1Ev>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	210c      	movs	r1, #12
 8009184:	0018      	movs	r0, r3
 8009186:	f009 fe08 	bl	8012d9a <_ZdlPvj>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	0018      	movs	r0, r3
 800918e:	46bd      	mov	sp, r7
 8009190:	b002      	add	sp, #8
 8009192:	bd80      	pop	{r7, pc}

08009194 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	4a05      	ldr	r2, [pc, #20]	; (80091b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	0018      	movs	r0, r3
 80091a6:	f7ff fa19 	bl	80085dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	0018      	movs	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	b002      	add	sp, #8
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	080147f0 	.word	0x080147f0

080091b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	0018      	movs	r0, r3
 80091c4:	f7ff ffe6 	bl	8009194 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2110      	movs	r1, #16
 80091cc:	0018      	movs	r0, r3
 80091ce:	f009 fde4 	bl	8012d9a <_ZdlPvj>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	0018      	movs	r0, r3
 80091d6:	46bd      	mov	sp, r7
 80091d8:	b002      	add	sp, #8
 80091da:	bd80      	pop	{r7, pc}

080091dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	105b      	asrs	r3, r3, #1
 80091ee:	18d1      	adds	r1, r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	4013      	ands	r3, r2
 80091f8:	d102      	bne.n	8009200 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x24>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	e00a      	b.n	8009216 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3a>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	105b      	asrs	r3, r3, #1
 800920a:	18d3      	adds	r3, r2, r3
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	18d3      	adds	r3, r2, r3
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	0008      	movs	r0, r1
 8009218:	4798      	blx	r3
    }
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	46bd      	mov	sp, r7
 800921e:	b002      	add	sp, #8
 8009220:	bd80      	pop	{r7, pc}

08009222 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00f      	beq.n	8009252 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x30>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x26>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	4013      	ands	r3, r2
 8009242:	d101      	bne.n	8009248 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x26>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8009248:	2300      	movs	r3, #0
 800924a:	2b01      	cmp	r3, #1
 800924c:	d001      	beq.n	8009252 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x30>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8009252:	2300      	movs	r3, #0
    }
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b002      	add	sp, #8
 800925a:	bd80      	pop	{r7, pc}

0800925c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	601a      	str	r2, [r3, #0]
    }
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	0018      	movs	r0, r3
 8009270:	46bd      	mov	sp, r7
 8009272:	b002      	add	sp, #8
 8009274:	bd80      	pop	{r7, pc}

08009276 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	80da      	strh	r2, [r3, #6]
    }
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b002      	add	sp, #8
 800929e:	bd80      	pop	{r7, pc}

080092a0 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	000c      	movs	r4, r1
 80092aa:	0010      	movs	r0, r2
 80092ac:	0019      	movs	r1, r3
 80092ae:	250a      	movs	r5, #10
 80092b0:	197b      	adds	r3, r7, r5
 80092b2:	1c22      	adds	r2, r4, #0
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	2408      	movs	r4, #8
 80092b8:	193b      	adds	r3, r7, r4
 80092ba:	1c02      	adds	r2, r0, #0
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	1dbb      	adds	r3, r7, #6
 80092c0:	1c0a      	adds	r2, r1, #0
 80092c2:	801a      	strh	r2, [r3, #0]
    {
        this->x = x;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	197a      	adds	r2, r7, r5
 80092c8:	8812      	ldrh	r2, [r2, #0]
 80092ca:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	193a      	adds	r2, r7, r4
 80092d0:	8812      	ldrh	r2, [r2, #0]
 80092d2:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	1dba      	adds	r2, r7, #6
 80092d8:	8812      	ldrh	r2, [r2, #0]
 80092da:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2220      	movs	r2, #32
 80092e0:	18ba      	adds	r2, r7, r2
 80092e2:	8812      	ldrh	r2, [r2, #0]
 80092e4:	80da      	strh	r2, [r3, #6]
    }
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	0018      	movs	r0, r3
 80092ea:	46bd      	mov	sp, r7
 80092ec:	b004      	add	sp, #16
 80092ee:	bdb0      	pop	{r4, r5, r7, pc}

080092f0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 80092f8:	4a13      	ldr	r2, [pc, #76]	; (8009348 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	1d18      	adds	r0, r3, #4
 8009302:	2300      	movs	r3, #0
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	2300      	movs	r3, #0
 8009308:	2200      	movs	r2, #0
 800930a:	2100      	movs	r1, #0
 800930c:	f7ff ffc8 	bl	80092a0 <_ZN8touchgfx4RectC1Essss>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	330c      	adds	r3, #12
 8009314:	0018      	movs	r0, r3
 8009316:	f7ff ffae 	bl	8009276 <_ZN8touchgfx4RectC1Ev>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	615a      	str	r2, [r3, #20]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	619a      	str	r2, [r3, #24]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	61da      	str	r2, [r3, #28]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2224      	movs	r2, #36	; 0x24
 8009330:	2100      	movs	r1, #0
 8009332:	5499      	strb	r1, [r3, r2]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2225      	movs	r2, #37	; 0x25
 8009338:	2101      	movs	r1, #1
 800933a:	5499      	strb	r1, [r3, r2]
    {
    }
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	0018      	movs	r0, r3
 8009340:	46bd      	mov	sp, r7
 8009342:	b002      	add	sp, #8
 8009344:	bd80      	pop	{r7, pc}
 8009346:	46c0      	nop			; (mov r8, r8)
 8009348:	08016848 	.word	0x08016848

0800934c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
    {
 8009354:	4a03      	ldr	r2, [pc, #12]	; (8009364 <_ZN8touchgfx8DrawableD1Ev+0x18>)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	601a      	str	r2, [r3, #0]
    }
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	b002      	add	sp, #8
 8009362:	bd80      	pop	{r7, pc}
 8009364:	08016848 	.word	0x08016848

08009368 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
    }
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	0018      	movs	r0, r3
 8009374:	f7ff ffea 	bl	800934c <_ZN8touchgfx8DrawableD1Ev>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2128      	movs	r1, #40	; 0x28
 800937c:	0018      	movs	r0, r3
 800937e:	f009 fd0c 	bl	8012d9a <_ZdlPvj>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	b002      	add	sp, #8
 800938a:	bd80      	pop	{r7, pc}

0800938c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800938c:	b5b0      	push	{r4, r5, r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	000c      	movs	r4, r1
 8009396:	0010      	movs	r0, r2
 8009398:	0019      	movs	r1, r3
 800939a:	250a      	movs	r5, #10
 800939c:	197b      	adds	r3, r7, r5
 800939e:	1c22      	adds	r2, r4, #0
 80093a0:	801a      	strh	r2, [r3, #0]
 80093a2:	2408      	movs	r4, #8
 80093a4:	193b      	adds	r3, r7, r4
 80093a6:	1c02      	adds	r2, r0, #0
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	1dbb      	adds	r3, r7, #6
 80093ac:	1c0a      	adds	r2, r1, #0
 80093ae:	801a      	strh	r2, [r3, #0]
    {
        setXY(x, y);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3334      	adds	r3, #52	; 0x34
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	193a      	adds	r2, r7, r4
 80093ba:	2400      	movs	r4, #0
 80093bc:	5f14      	ldrsh	r4, [r2, r4]
 80093be:	197a      	adds	r2, r7, r5
 80093c0:	2100      	movs	r1, #0
 80093c2:	5e51      	ldrsh	r1, [r2, r1]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	0022      	movs	r2, r4
 80093c8:	4798      	blx	r3
        setWidth(width);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3338      	adds	r3, #56	; 0x38
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	1dba      	adds	r2, r7, #6
 80093d4:	2100      	movs	r1, #0
 80093d6:	5e51      	ldrsh	r1, [r2, r1]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	0010      	movs	r0, r2
 80093dc:	4798      	blx	r3
        setHeight(height);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	333c      	adds	r3, #60	; 0x3c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2220      	movs	r2, #32
 80093e8:	18ba      	adds	r2, r7, r2
 80093ea:	2100      	movs	r1, #0
 80093ec:	5e51      	ldrsh	r1, [r2, r1]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	0010      	movs	r0, r2
 80093f2:	4798      	blx	r3
    }
 80093f4:	46c0      	nop			; (mov r8, r8)
 80093f6:	46bd      	mov	sp, r7
 80093f8:	b004      	add	sp, #16
 80093fa:	bdb0      	pop	{r4, r5, r7, pc}

080093fc <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	000a      	movs	r2, r1
 8009406:	1cbb      	adds	r3, r7, #2
 8009408:	801a      	strh	r2, [r3, #0]
    {
        rect.x = x;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	1cba      	adds	r2, r7, #2
 800940e:	8812      	ldrh	r2, [r2, #0]
 8009410:	809a      	strh	r2, [r3, #4]
    }
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	46bd      	mov	sp, r7
 8009416:	b002      	add	sp, #8
 8009418:	bd80      	pop	{r7, pc}

0800941a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	000a      	movs	r2, r1
 8009424:	1cbb      	adds	r3, r7, #2
 8009426:	801a      	strh	r2, [r3, #0]
    {
        rect.y = y;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	1cba      	adds	r2, r7, #2
 800942c:	8812      	ldrh	r2, [r2, #0]
 800942e:	80da      	strh	r2, [r3, #6]
    }
 8009430:	46c0      	nop			; (mov r8, r8)
 8009432:	46bd      	mov	sp, r7
 8009434:	b002      	add	sp, #8
 8009436:	bd80      	pop	{r7, pc}

08009438 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	0008      	movs	r0, r1
 8009442:	0011      	movs	r1, r2
 8009444:	1cbb      	adds	r3, r7, #2
 8009446:	1c02      	adds	r2, r0, #0
 8009448:	801a      	strh	r2, [r3, #0]
 800944a:	003b      	movs	r3, r7
 800944c:	1c0a      	adds	r2, r1, #0
 800944e:	801a      	strh	r2, [r3, #0]
    {
        setX(x);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	332c      	adds	r3, #44	; 0x2c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	1cba      	adds	r2, r7, #2
 800945a:	2100      	movs	r1, #0
 800945c:	5e51      	ldrsh	r1, [r2, r1]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	0010      	movs	r0, r2
 8009462:	4798      	blx	r3
        setY(y);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3330      	adds	r3, #48	; 0x30
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	003a      	movs	r2, r7
 800946e:	2100      	movs	r1, #0
 8009470:	5e51      	ldrsh	r1, [r2, r1]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	0010      	movs	r0, r2
 8009476:	4798      	blx	r3
    }
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	46bd      	mov	sp, r7
 800947c:	b002      	add	sp, #8
 800947e:	bd80      	pop	{r7, pc}

08009480 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	000a      	movs	r2, r1
 800948a:	1cbb      	adds	r3, r7, #2
 800948c:	801a      	strh	r2, [r3, #0]
    {
        rect.width = width;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	1cba      	adds	r2, r7, #2
 8009492:	8812      	ldrh	r2, [r2, #0]
 8009494:	811a      	strh	r2, [r3, #8]
    }
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	46bd      	mov	sp, r7
 800949a:	b002      	add	sp, #8
 800949c:	bd80      	pop	{r7, pc}

0800949e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	000a      	movs	r2, r1
 80094a8:	1cbb      	adds	r3, r7, #2
 80094aa:	801a      	strh	r2, [r3, #0]
    {
        rect.height = height;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	1cba      	adds	r2, r7, #2
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	815a      	strh	r2, [r3, #10]
    }
 80094b4:	46c0      	nop			; (mov r8, r8)
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b002      	add	sp, #8
 80094ba:	bd80      	pop	{r7, pc}

080094bc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
    {
    }
 80094c4:	46c0      	nop			; (mov r8, r8)
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b002      	add	sp, #8
 80094ca:	bd80      	pop	{r7, pc}

080094cc <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
    {
    }
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	46bd      	mov	sp, r7
 80094da:	b002      	add	sp, #8
 80094dc:	bd80      	pop	{r7, pc}

080094de <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
    {
    }
 80094e8:	46c0      	nop			; (mov r8, r8)
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b002      	add	sp, #8
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
    {
    }
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	46bd      	mov	sp, r7
 80094fe:	b002      	add	sp, #8
 8009500:	bd80      	pop	{r7, pc}

08009502 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
    {
    }
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	46bd      	mov	sp, r7
 800950e:	b002      	add	sp, #8
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2225      	movs	r2, #37	; 0x25
 800951e:	5c9b      	ldrb	r3, [r3, r2]
    }
 8009520:	0018      	movs	r0, r3
 8009522:	46bd      	mov	sp, r7
 8009524:	b002      	add	sp, #8
 8009526:	bd80      	pop	{r7, pc}

08009528 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2224      	movs	r2, #36	; 0x24
 8009534:	5c9b      	ldrb	r3, [r3, r2]
    }
 8009536:	0018      	movs	r0, r3
 8009538:	46bd      	mov	sp, r7
 800953a:	b002      	add	sp, #8
 800953c:	bd80      	pop	{r7, pc}

0800953e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800953e:	b590      	push	{r4, r7, lr}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	0008      	movs	r0, r1
 8009548:	0011      	movs	r1, r2
 800954a:	1cbb      	adds	r3, r7, #2
 800954c:	1c02      	adds	r2, r0, #0
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	003b      	movs	r3, r7
 8009552:	1c0a      	adds	r2, r1, #0
 8009554:	801a      	strh	r2, [r3, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3354      	adds	r3, #84	; 0x54
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	1cba      	adds	r2, r7, #2
 8009560:	8811      	ldrh	r1, [r2, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	2004      	movs	r0, #4
 8009566:	5e12      	ldrsh	r2, [r2, r0]
 8009568:	b292      	uxth	r2, r2
 800956a:	1a8a      	subs	r2, r1, r2
 800956c:	b292      	uxth	r2, r2
 800956e:	b214      	sxth	r4, r2
 8009570:	003a      	movs	r2, r7
 8009572:	8811      	ldrh	r1, [r2, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	2006      	movs	r0, #6
 8009578:	5e12      	ldrsh	r2, [r2, r0]
 800957a:	b292      	uxth	r2, r2
 800957c:	1a8a      	subs	r2, r1, r2
 800957e:	b292      	uxth	r2, r2
 8009580:	b212      	sxth	r2, r2
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	0021      	movs	r1, r4
 8009586:	4798      	blx	r3
    }
 8009588:	46c0      	nop			; (mov r8, r8)
 800958a:	46bd      	mov	sp, r7
 800958c:	b003      	add	sp, #12
 800958e:	bd90      	pop	{r4, r7, pc}

08009590 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	4252      	negs	r2, r2
 800959e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	4252      	negs	r2, r2
 80095a6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	4252      	negs	r2, r2
 80095ae:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80095b0:	46c0      	nop			; (mov r8, r8)
 80095b2:	46bd      	mov	sp, r7
 80095b4:	b002      	add	sp, #8
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	0018      	movs	r0, r3
 80095c8:	f7ff ffe2 	bl	8009590 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]
    }
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	46bd      	mov	sp, r7
 80095de:	b004      	add	sp, #16
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
    {
 80095ec:	4a06      	ldr	r2, [pc, #24]	; (8009608 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	0018      	movs	r0, r3
 80095f8:	f000 fad4 	bl	8009ba4 <_ZN8touchgfx9ContainerD1Ev>
    }
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	0018      	movs	r0, r3
 8009600:	46bd      	mov	sp, r7
 8009602:	b002      	add	sp, #8
 8009604:	bd80      	pop	{r7, pc}
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	08016940 	.word	0x08016940

0800960c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
    }
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f7ff ffe4 	bl	80095e4 <_ZN8touchgfx6ScreenD1Ev>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	213c      	movs	r1, #60	; 0x3c
 8009620:	0018      	movs	r0, r3
 8009622:	f009 fbba 	bl	8012d9a <_ZdlPvj>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0018      	movs	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	b002      	add	sp, #8
 800962e:	bd80      	pop	{r7, pc}

08009630 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
    {
    }
 8009638:	46c0      	nop			; (mov r8, r8)
 800963a:	46bd      	mov	sp, r7
 800963c:	b002      	add	sp, #8
 800963e:	bd80      	pop	{r7, pc}

08009640 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
    {
    }
 8009648:	46c0      	nop			; (mov r8, r8)
 800964a:	46bd      	mov	sp, r7
 800964c:	b002      	add	sp, #8
 800964e:	bd80      	pop	{r7, pc}

08009650 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
    {
    }
 8009658:	46c0      	nop			; (mov r8, r8)
 800965a:	46bd      	mov	sp, r7
 800965c:	b002      	add	sp, #8
 800965e:	bd80      	pop	{r7, pc}

08009660 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
    {
    }
 8009668:	46c0      	nop			; (mov r8, r8)
 800966a:	46bd      	mov	sp, r7
 800966c:	b002      	add	sp, #8
 800966e:	bd80      	pop	{r7, pc}

08009670 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	000a      	movs	r2, r1
 800967a:	1cfb      	adds	r3, r7, #3
 800967c:	701a      	strb	r2, [r3, #0]
    {
    }
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	46bd      	mov	sp, r7
 8009682:	b002      	add	sp, #8
 8009684:	bd80      	pop	{r7, pc}

08009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	0011      	movs	r1, r2
 8009698:	0018      	movs	r0, r3
 800969a:	f002 ff7d 	bl	800c598 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b002      	add	sp, #8
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <_ZN8touchgfx3HAL3lcdEv+0x30>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2276      	movs	r2, #118	; 0x76
 80096b2:	5c9b      	ldrb	r3, [r3, r2]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d008      	beq.n	80096ca <_ZN8touchgfx3HAL3lcdEv+0x22>
 80096b8:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <_ZN8touchgfx3HAL3lcdEv+0x30>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80096c2:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <_ZN8touchgfx3HAL3lcdEv+0x30>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c8:	e002      	b.n	80096d0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 80096ca:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <_ZN8touchgfx3HAL3lcdEv+0x30>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
        }
    }
 80096d0:	0018      	movs	r0, r3
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	200034cc 	.word	0x200034cc

080096dc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	0008      	movs	r0, r1
 80096e6:	0011      	movs	r1, r2
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	230a      	movs	r3, #10
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	1c02      	adds	r2, r0, #0
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	2308      	movs	r3, #8
 80096f4:	18fb      	adds	r3, r7, r3
 80096f6:	1c0a      	adds	r2, r1, #0
 80096f8:	801a      	strh	r2, [r3, #0]
    {
        if (isVisible() && isTouchable())
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	0018      	movs	r0, r3
 80096fe:	f7ff ff08 	bl	8009512 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009702:	1e03      	subs	r3, r0, #0
 8009704:	d007      	beq.n	8009716 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3a>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	0018      	movs	r0, r3
 800970a:	f7ff ff0d 	bl	8009528 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800970e:	1e03      	subs	r3, r0, #0
 8009710:	d001      	beq.n	8009716 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3a>
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3c>
 8009716:	2300      	movs	r3, #0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x46>
        {
            *last = this;
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	601a      	str	r2, [r3, #0]
        }
    }
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	b004      	add	sp, #16
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	0018      	movs	r0, r3
 8009738:	f7ff fdda 	bl	80092f0 <_ZN8touchgfx8DrawableC1Ev>
 800973c:	4a03      	ldr	r2, [pc, #12]	; (800974c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b002      	add	sp, #8
 800974a:	bd80      	pop	{r7, pc}
 800974c:	08014b20 	.word	0x08014b20

08009750 <_ZN8touchgfx6WidgetD1Ev>:
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	4a05      	ldr	r2, [pc, #20]	; (8009770 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0018      	movs	r0, r3
 8009762:	f7ff fdf3 	bl	800934c <_ZN8touchgfx8DrawableD1Ev>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	0018      	movs	r0, r3
 800976a:	46bd      	mov	sp, r7
 800976c:	b002      	add	sp, #8
 800976e:	bd80      	pop	{r7, pc}
 8009770:	08014b20 	.word	0x08014b20

08009774 <_ZN8touchgfx6WidgetD0Ev>:
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0018      	movs	r0, r3
 8009780:	f7ff ffe6 	bl	8009750 <_ZN8touchgfx6WidgetD1Ev>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2128      	movs	r1, #40	; 0x28
 8009788:	0018      	movs	r0, r3
 800978a:	f009 fb06 	bl	8012d9a <_ZdlPvj>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	0018      	movs	r0, r3
 8009792:	46bd      	mov	sp, r7
 8009794:	b002      	add	sp, #8
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	0018      	movs	r0, r3
 80097a4:	2326      	movs	r3, #38	; 0x26
 80097a6:	001a      	movs	r2, r3
 80097a8:	2100      	movs	r1, #0
 80097aa:	f009 fba0 	bl	8012eee <memset>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	0018      	movs	r0, r3
 80097b2:	f7ff ffbb 	bl	800972c <_ZN8touchgfx6WidgetC1Ev>
 80097b6:	4a0b      	ldr	r2, [pc, #44]	; (80097e4 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2226      	movs	r2, #38	; 0x26
 80097c0:	21ff      	movs	r1, #255	; 0xff
 80097c2:	5499      	strb	r1, [r3, r2]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3328      	adds	r3, #40	; 0x28
 80097c8:	2100      	movs	r1, #0
 80097ca:	0018      	movs	r0, r3
 80097cc:	f7ff fd46 	bl	800925c <_ZN8touchgfx9colortypeC1Em>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	222c      	movs	r2, #44	; 0x2c
 80097d4:	2100      	movs	r1, #0
 80097d6:	5499      	strb	r1, [r3, r2]
    {
    }
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	0018      	movs	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	b002      	add	sp, #8
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	08016618 	.word	0x08016618

080097e8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80097f8:	46c0      	nop			; (mov r8, r8)
 80097fa:	46bd      	mov	sp, r7
 80097fc:	b002      	add	sp, #8
 80097fe:	bd80      	pop	{r7, pc}

08009800 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	000a      	movs	r2, r1
 800980a:	1cbb      	adds	r3, r7, #2
 800980c:	801a      	strh	r2, [r3, #0]
        : typedTextId(id)
 800980e:	4a06      	ldr	r2, [pc, #24]	; (8009828 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	1cba      	adds	r2, r7, #2
 8009818:	8812      	ldrh	r2, [r2, #0]
 800981a:	809a      	strh	r2, [r3, #4]
    }
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	0018      	movs	r0, r3
 8009820:	46bd      	mov	sp, r7
 8009822:	b002      	add	sp, #8
 8009824:	bd80      	pop	{r7, pc}
 8009826:	46c0      	nop			; (mov r8, r8)
 8009828:	08014718 	.word	0x08014718

0800982c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	0018      	movs	r0, r3
 8009838:	2326      	movs	r3, #38	; 0x26
 800983a:	001a      	movs	r2, r3
 800983c:	2100      	movs	r1, #0
 800983e:	f009 fb56 	bl	8012eee <memset>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	0018      	movs	r0, r3
 8009846:	f7ff ff71 	bl	800972c <_ZN8touchgfx6WidgetC1Ev>
 800984a:	4a14      	ldr	r2, [pc, #80]	; (800989c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3328      	adds	r3, #40	; 0x28
 8009854:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <_ZN8touchgfx8TextAreaC1Ev+0x74>)
 8009856:	0011      	movs	r1, r2
 8009858:	0018      	movs	r0, r3
 800985a:	f7ff ffd1 	bl	8009800 <_ZN8touchgfx9TypedTextC1Et>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3330      	adds	r3, #48	; 0x30
 8009862:	2100      	movs	r1, #0
 8009864:	0018      	movs	r0, r3
 8009866:	f7ff fcf9 	bl	800925c <_ZN8touchgfx9colortypeC1Em>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	869a      	strh	r2, [r3, #52]	; 0x34
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2236      	movs	r2, #54	; 0x36
 8009874:	21ff      	movs	r1, #255	; 0xff
 8009876:	5499      	strb	r1, [r3, r2]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2237      	movs	r2, #55	; 0x37
 800987c:	2100      	movs	r1, #0
 800987e:	5499      	strb	r1, [r3, r2]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2238      	movs	r2, #56	; 0x38
 8009884:	2100      	movs	r1, #0
 8009886:	5499      	strb	r1, [r3, r2]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2239      	movs	r2, #57	; 0x39
 800988c:	2100      	movs	r1, #0
 800988e:	5499      	strb	r1, [r3, r2]
    {
    }
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	0018      	movs	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	b002      	add	sp, #8
 8009898:	bd80      	pop	{r7, pc}
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	0801656c 	.word	0x0801656c
 80098a0:	0000ffff 	.word	0x0000ffff

080098a4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	4a05      	ldr	r2, [pc, #20]	; (80098c4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	0018      	movs	r0, r3
 80098b6:	f7ff fe95 	bl	80095e4 <_ZN8touchgfx6ScreenD1Ev>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0018      	movs	r0, r3
 80098be:	46bd      	mov	sp, r7
 80098c0:	b002      	add	sp, #8
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	08014aec 	.word	0x08014aec

080098c8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7ff ffe6 	bl	80098a4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2140      	movs	r1, #64	; 0x40
 80098dc:	0018      	movs	r0, r3
 80098de:	f009 fa5c 	bl	8012d9a <_ZdlPvj>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	0018      	movs	r0, r3
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b002      	add	sp, #8
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	4a0d      	ldr	r2, [pc, #52]	; (800992c <_ZN15Screen1ViewBaseD1Ev+0x40>)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	33a0      	adds	r3, #160	; 0xa0
 80098fe:	0018      	movs	r0, r3
 8009900:	f000 f998 	bl	8009c34 <_ZN8touchgfx8TextAreaD1Ev>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3370      	adds	r3, #112	; 0x70
 8009908:	0018      	movs	r0, r3
 800990a:	f000 f96f 	bl	8009bec <_ZN8touchgfx3BoxD1Ev>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3340      	adds	r3, #64	; 0x40
 8009912:	0018      	movs	r0, r3
 8009914:	f000 f96a 	bl	8009bec <_ZN8touchgfx3BoxD1Ev>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	0018      	movs	r0, r3
 800991c:	f7ff ffc2 	bl	80098a4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	0018      	movs	r0, r3
 8009924:	46bd      	mov	sp, r7
 8009926:	b002      	add	sp, #8
 8009928:	bd80      	pop	{r7, pc}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	08014ab8 	.word	0x08014ab8

08009930 <_ZN15Screen1ViewBaseD0Ev>:
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	0018      	movs	r0, r3
 800993c:	f7ff ffd6 	bl	80098ec <_ZN15Screen1ViewBaseD1Ev>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	21e0      	movs	r1, #224	; 0xe0
 8009944:	0018      	movs	r0, r3
 8009946:	f009 fa28 	bl	8012d9a <_ZdlPvj>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	0018      	movs	r0, r3
 800994e:	46bd      	mov	sp, r7
 8009950:	b002      	add	sp, #8
 8009952:	bd80      	pop	{r7, pc}

08009954 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800995c:	f005 f9aa 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 8009960:	0003      	movs	r3, r0
    }
 8009962:	0018      	movs	r0, r3
 8009964:	46bd      	mov	sp, r7
 8009966:	b002      	add	sp, #8
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800996c:	b5b0      	push	{r4, r5, r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	0004      	movs	r4, r0
 8009974:	0008      	movs	r0, r1
 8009976:	0011      	movs	r1, r2
 8009978:	1dfb      	adds	r3, r7, #7
 800997a:	1c22      	adds	r2, r4, #0
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	1dbb      	adds	r3, r7, #6
 8009980:	1c02      	adds	r2, r0, #0
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	1d7b      	adds	r3, r7, #5
 8009986:	1c0a      	adds	r2, r1, #0
 8009988:	701a      	strb	r2, [r3, #0]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800998a:	f7fe fe47 	bl	800861c <_ZN8touchgfx3HAL11getInstanceEv>
 800998e:	1e03      	subs	r3, r0, #0
 8009990:	d105      	bne.n	800999e <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x32>
 8009992:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x58>)
 8009994:	4a0c      	ldr	r2, [pc, #48]	; (80099c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x5c>)
 8009996:	480d      	ldr	r0, [pc, #52]	; (80099cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x60>)
 8009998:	2135      	movs	r1, #53	; 0x35
 800999a:	f009 fa2b 	bl	8012df4 <__assert_func>
 800999e:	46c0      	nop			; (mov r8, r8)
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80099a0:	f7ff fe82 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 80099a4:	6803      	ldr	r3, [r0, #0]
 80099a6:	3328      	adds	r3, #40	; 0x28
 80099a8:	681c      	ldr	r4, [r3, #0]
 80099aa:	1d7b      	adds	r3, r7, #5
 80099ac:	781d      	ldrb	r5, [r3, #0]
 80099ae:	1dbb      	adds	r3, r7, #6
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	1dfb      	adds	r3, r7, #7
 80099b4:	7819      	ldrb	r1, [r3, #0]
 80099b6:	002b      	movs	r3, r5
 80099b8:	47a0      	blx	r4
 80099ba:	0003      	movs	r3, r0
    }
 80099bc:	0018      	movs	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	b002      	add	sp, #8
 80099c2:	bdb0      	pop	{r4, r5, r7, pc}
 80099c4:	080140d0 	.word	0x080140d0
 80099c8:	08014b80 	.word	0x08014b80
 80099cc:	08014114 	.word	0x08014114

080099d0 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 80099d0:	b5b0      	push	{r4, r5, r7, lr}
 80099d2:	b08a      	sub	sp, #40	; 0x28
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	6078      	str	r0, [r7, #4]
    waitCounter(0)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	0018      	movs	r0, r3
 80099dc:	f000 f8cc 	bl	8009b78 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80099e0:	4a49      	ldr	r2, [pc, #292]	; (8009b08 <_ZN15Screen1ViewBaseC1Ev+0x138>)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3340      	adds	r3, #64	; 0x40
 80099ea:	0018      	movs	r0, r3
 80099ec:	f7ff fed4 	bl	8009798 <_ZN8touchgfx3BoxC1Ev>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3370      	adds	r3, #112	; 0x70
 80099f4:	0018      	movs	r0, r3
 80099f6:	f7ff fecf 	bl	8009798 <_ZN8touchgfx3BoxC1Ev>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	33a0      	adds	r3, #160	; 0xa0
 80099fe:	0018      	movs	r0, r3
 8009a00:	f7ff ff14 	bl	800982c <_ZN8touchgfx8TextAreaC1Ev>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	22dc      	movs	r2, #220	; 0xdc
 8009a08:	2100      	movs	r1, #0
 8009a0a:	5299      	strh	r1, [r3, r2]
{

    __background.setPosition(0, 0, 320, 240);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3340      	adds	r3, #64	; 0x40
 8009a10:	0018      	movs	r0, r3
 8009a12:	23a0      	movs	r3, #160	; 0xa0
 8009a14:	005a      	lsls	r2, r3, #1
 8009a16:	23f0      	movs	r3, #240	; 0xf0
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	0013      	movs	r3, r2
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	f7ff fcb4 	bl	800938c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3340      	adds	r3, #64	; 0x40
 8009a28:	001c      	movs	r4, r3
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	2000      	movs	r0, #0
 8009a30:	f7ff ff9c 	bl	800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009a34:	0003      	movs	r3, r0
 8009a36:	0019      	movs	r1, r3
 8009a38:	0020      	movs	r0, r4
 8009a3a:	f7ff fed5 	bl	80097e8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    background.setPosition(0, 0, 320, 240);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	3370      	adds	r3, #112	; 0x70
 8009a42:	0018      	movs	r0, r3
 8009a44:	23a0      	movs	r3, #160	; 0xa0
 8009a46:	005a      	lsls	r2, r3, #1
 8009a48:	23f0      	movs	r3, #240	; 0xf0
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	0013      	movs	r3, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2100      	movs	r1, #0
 8009a52:	f7ff fc9b 	bl	800938c <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3370      	adds	r3, #112	; 0x70
 8009a5a:	001c      	movs	r4, r3
 8009a5c:	22ff      	movs	r2, #255	; 0xff
 8009a5e:	21ff      	movs	r1, #255	; 0xff
 8009a60:	20ff      	movs	r0, #255	; 0xff
 8009a62:	f7ff ff83 	bl	800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009a66:	0003      	movs	r3, r0
 8009a68:	0019      	movs	r1, r3
 8009a6a:	0020      	movs	r0, r4
 8009a6c:	f7ff febc 	bl	80097e8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea.setXY(116, 102);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	33a0      	adds	r3, #160	; 0xa0
 8009a74:	2266      	movs	r2, #102	; 0x66
 8009a76:	2174      	movs	r1, #116	; 0x74
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f7ff fcdd 	bl	8009438 <_ZN8touchgfx8Drawable5setXYEss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	33a0      	adds	r3, #160	; 0xa0
 8009a82:	001c      	movs	r4, r3
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f7ff ff6f 	bl	800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009a8e:	0003      	movs	r3, r0
 8009a90:	617c      	str	r4, [r7, #20]
 8009a92:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	631a      	str	r2, [r3, #48]	; 0x30
    textArea.setLinespacing(0);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	33a0      	adds	r3, #160	; 0xa0
 8009a9e:	61fb      	str	r3, [r7, #28]
 8009aa0:	211a      	movs	r1, #26
 8009aa2:	187b      	adds	r3, r7, r1
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	187a      	adds	r2, r7, r1
 8009aac:	8812      	ldrh	r2, [r2, #0]
 8009aae:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	33a0      	adds	r3, #160	; 0xa0
 8009ab4:	001c      	movs	r4, r3
 8009ab6:	250c      	movs	r5, #12
 8009ab8:	197b      	adds	r3, r7, r5
 8009aba:	2100      	movs	r1, #0
 8009abc:	0018      	movs	r0, r3
 8009abe:	f7ff fe9f 	bl	8009800 <_ZN8touchgfx9TypedTextC1Et>
 8009ac2:	197b      	adds	r3, r7, r5
 8009ac4:	0019      	movs	r1, r3
 8009ac6:	0020      	movs	r0, r4
 8009ac8:	f004 f818 	bl	800dafc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8009acc:	197b      	adds	r3, r7, r5
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f7fe fb28 	bl	8008124 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3340      	adds	r3, #64	; 0x40
 8009ada:	0019      	movs	r1, r3
 8009adc:	0010      	movs	r0, r2
 8009ade:	f7ff fdd2 	bl	8009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3370      	adds	r3, #112	; 0x70
 8009ae8:	0019      	movs	r1, r3
 8009aea:	0010      	movs	r0, r2
 8009aec:	f7ff fdcb 	bl	8009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea);
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	33a0      	adds	r3, #160	; 0xa0
 8009af6:	0019      	movs	r1, r3
 8009af8:	0010      	movs	r0, r2
 8009afa:	f7ff fdc4 	bl	8009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	0018      	movs	r0, r3
 8009b02:	46bd      	mov	sp, r7
 8009b04:	b008      	add	sp, #32
 8009b06:	bdb0      	pop	{r4, r5, r7, pc}
 8009b08:	08014ab8 	.word	0x08014ab8

08009b0c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]

}
 8009b14:	46c0      	nop			; (mov r8, r8)
 8009b16:	46bd      	mov	sp, r7
 8009b18:	b002      	add	sp, #8
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <_ZN15Screen1ViewBase15handleTickEventEv>:

//Handles delays
void Screen1ViewBase::handleTickEvent()
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
    if(waitCounter > 0)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	22dc      	movs	r2, #220	; 0xdc
 8009b28:	5a9b      	ldrh	r3, [r3, r2]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d014      	beq.n	8009b58 <_ZN15Screen1ViewBase15handleTickEventEv+0x3c>
    {
        waitCounter--;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	22dc      	movs	r2, #220	; 0xdc
 8009b32:	5a9b      	ldrh	r3, [r3, r2]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b299      	uxth	r1, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	22dc      	movs	r2, #220	; 0xdc
 8009b3c:	5299      	strh	r1, [r3, r2]
        if(waitCounter == 0)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	22dc      	movs	r2, #220	; 0xdc
 8009b42:	5a9b      	ldrh	r3, [r3, r2]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <_ZN15Screen1ViewBase15handleTickEventEv+0x3c>
        {
            //GoTo_Screen2
            //When Wait completed change screen to Screen2
            //Go to Screen2 with no screen transition
            application().gotoScreen2ScreenNoTransition();
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f7ff ff02 	bl	8009954 <_ZN15Screen1ViewBase11applicationEv>
 8009b50:	0003      	movs	r3, r0
 8009b52:	0018      	movs	r0, r3
 8009b54:	f7fe ff74 	bl	8008a40 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        }
    }
}
 8009b58:	46c0      	nop			; (mov r8, r8)
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b002      	add	sp, #8
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen is done with transition/load
void Screen1ViewBase::afterTransition()
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
    //Wait
    //When screen is entered delay
    //Delay for 1000 ms (60 Ticks)
    waitCounter = WAIT_DURATION;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	22dc      	movs	r2, #220	; 0xdc
 8009b6c:	213c      	movs	r1, #60	; 0x3c
 8009b6e:	5299      	strh	r1, [r3, r2]
}
 8009b70:	46c0      	nop			; (mov r8, r8)
 8009b72:	46bd      	mov	sp, r7
 8009b74:	b002      	add	sp, #8
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	0018      	movs	r0, r3
 8009b84:	f006 f8f8 	bl	800fd78 <_ZN8touchgfx6ScreenC1Ev>
 8009b88:	4a05      	ldr	r2, [pc, #20]	; (8009ba0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	0018      	movs	r0, r3
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b002      	add	sp, #8
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	08014aec 	.word	0x08014aec

08009ba4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	4a05      	ldr	r2, [pc, #20]	; (8009bc4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f7ff fbc9 	bl	800934c <_ZN8touchgfx8DrawableD1Ev>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	08015c9c 	.word	0x08015c9c

08009bc8 <_ZN8touchgfx9ContainerD0Ev>:
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f7ff ffe6 	bl	8009ba4 <_ZN8touchgfx9ContainerD1Ev>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	212c      	movs	r1, #44	; 0x2c
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f009 f8dc 	bl	8012d9a <_ZdlPvj>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	0018      	movs	r0, r3
 8009be6:	46bd      	mov	sp, r7
 8009be8:	b002      	add	sp, #8
 8009bea:	bd80      	pop	{r7, pc}

08009bec <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	4a05      	ldr	r2, [pc, #20]	; (8009c0c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f7ff fda7 	bl	8009750 <_ZN8touchgfx6WidgetD1Ev>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	0018      	movs	r0, r3
 8009c06:	46bd      	mov	sp, r7
 8009c08:	b002      	add	sp, #8
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	08016618 	.word	0x08016618

08009c10 <_ZN8touchgfx3BoxD0Ev>:
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f7ff ffe6 	bl	8009bec <_ZN8touchgfx3BoxD1Ev>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2130      	movs	r1, #48	; 0x30
 8009c24:	0018      	movs	r0, r3
 8009c26:	f009 f8b8 	bl	8012d9a <_ZdlPvj>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	b002      	add	sp, #8
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3328      	adds	r3, #40	; 0x28
 8009c46:	0018      	movs	r0, r3
 8009c48:	f7fe fa6c 	bl	8008124 <_ZN8touchgfx9TypedTextD1Ev>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f7ff fd7e 	bl	8009750 <_ZN8touchgfx6WidgetD1Ev>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	0018      	movs	r0, r3
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	b002      	add	sp, #8
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	0801656c 	.word	0x0801656c

08009c64 <_ZN8touchgfx8TextAreaD0Ev>:
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	0018      	movs	r0, r3
 8009c70:	f7ff ffe0 	bl	8009c34 <_ZN8touchgfx8TextAreaD1Ev>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	213c      	movs	r1, #60	; 0x3c
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f009 f88e 	bl	8012d9a <_ZdlPvj>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	0018      	movs	r0, r3
 8009c82:	46bd      	mov	sp, r7
 8009c84:	b002      	add	sp, #8
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	4a05      	ldr	r2, [pc, #20]	; (8009ca8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f7ff fca3 	bl	80095e4 <_ZN8touchgfx6ScreenD1Ev>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	b002      	add	sp, #8
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	08014c18 	.word	0x08014c18

08009cac <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	f7ff ffe6 	bl	8009c88 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2140      	movs	r1, #64	; 0x40
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	f009 f86a 	bl	8012d9a <_ZdlPvj>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	0018      	movs	r0, r3
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <_ZN15Screen2ViewBaseD1Ev+0x40>)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	33a0      	adds	r3, #160	; 0xa0
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f7ff ffa6 	bl	8009c34 <_ZN8touchgfx8TextAreaD1Ev>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3370      	adds	r3, #112	; 0x70
 8009cec:	0018      	movs	r0, r3
 8009cee:	f7ff ff7d 	bl	8009bec <_ZN8touchgfx3BoxD1Ev>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3340      	adds	r3, #64	; 0x40
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7ff ff78 	bl	8009bec <_ZN8touchgfx3BoxD1Ev>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f7ff ffc2 	bl	8009c88 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	0018      	movs	r0, r3
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b002      	add	sp, #8
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	08014be4 	.word	0x08014be4

08009d14 <_ZN15Screen2ViewBaseD0Ev>:
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f7ff ffd6 	bl	8009cd0 <_ZN15Screen2ViewBaseD1Ev>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	21e0      	movs	r1, #224	; 0xe0
 8009d28:	0018      	movs	r0, r3
 8009d2a:	f009 f836 	bl	8012d9a <_ZdlPvj>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	0018      	movs	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b002      	add	sp, #8
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8009d40:	f004 ffb8 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 8009d44:	0003      	movs	r3, r0
    }
 8009d46:	0018      	movs	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	b002      	add	sp, #8
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 8009d50:	b5b0      	push	{r4, r5, r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
    waitCounter(0)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f000 f8cc 	bl	8009ef8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8009d60:	4a49      	ldr	r2, [pc, #292]	; (8009e88 <_ZN15Screen2ViewBaseC1Ev+0x138>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3340      	adds	r3, #64	; 0x40
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f7ff fd14 	bl	8009798 <_ZN8touchgfx3BoxC1Ev>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3370      	adds	r3, #112	; 0x70
 8009d74:	0018      	movs	r0, r3
 8009d76:	f7ff fd0f 	bl	8009798 <_ZN8touchgfx3BoxC1Ev>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	33a0      	adds	r3, #160	; 0xa0
 8009d7e:	0018      	movs	r0, r3
 8009d80:	f7ff fd54 	bl	800982c <_ZN8touchgfx8TextAreaC1Ev>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	22dc      	movs	r2, #220	; 0xdc
 8009d88:	2100      	movs	r1, #0
 8009d8a:	5299      	strh	r1, [r3, r2]
{

    __background.setPosition(0, 0, 320, 240);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3340      	adds	r3, #64	; 0x40
 8009d90:	0018      	movs	r0, r3
 8009d92:	23a0      	movs	r3, #160	; 0xa0
 8009d94:	005a      	lsls	r2, r3, #1
 8009d96:	23f0      	movs	r3, #240	; 0xf0
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	0013      	movs	r3, r2
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f7ff faf4 	bl	800938c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3340      	adds	r3, #64	; 0x40
 8009da8:	001c      	movs	r4, r3
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7ff fddc 	bl	800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009db4:	0003      	movs	r3, r0
 8009db6:	0019      	movs	r1, r3
 8009db8:	0020      	movs	r0, r4
 8009dba:	f7ff fd15 	bl	80097e8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    background.setPosition(0, 0, 320, 240);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3370      	adds	r3, #112	; 0x70
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	23a0      	movs	r3, #160	; 0xa0
 8009dc6:	005a      	lsls	r2, r3, #1
 8009dc8:	23f0      	movs	r3, #240	; 0xf0
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	0013      	movs	r3, r2
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	f7ff fadb 	bl	800938c <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3370      	adds	r3, #112	; 0x70
 8009dda:	001c      	movs	r4, r3
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2100      	movs	r1, #0
 8009de0:	2000      	movs	r0, #0
 8009de2:	f7ff fdc3 	bl	800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009de6:	0003      	movs	r3, r0
 8009de8:	0019      	movs	r1, r3
 8009dea:	0020      	movs	r0, r4
 8009dec:	f7ff fcfc 	bl	80097e8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea.setXY(116, 102);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	33a0      	adds	r3, #160	; 0xa0
 8009df4:	2266      	movs	r2, #102	; 0x66
 8009df6:	2174      	movs	r1, #116	; 0x74
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f7ff fb1d 	bl	8009438 <_ZN8touchgfx8Drawable5setXYEss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	33a0      	adds	r3, #160	; 0xa0
 8009e02:	001c      	movs	r4, r3
 8009e04:	22ff      	movs	r2, #255	; 0xff
 8009e06:	21ff      	movs	r1, #255	; 0xff
 8009e08:	20ff      	movs	r0, #255	; 0xff
 8009e0a:	f7ff fdaf 	bl	800996c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	617c      	str	r4, [r7, #20]
 8009e12:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
    textArea.setLinespacing(0);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	33a0      	adds	r3, #160	; 0xa0
 8009e1e:	61fb      	str	r3, [r7, #28]
 8009e20:	211a      	movs	r1, #26
 8009e22:	187b      	adds	r3, r7, r1
 8009e24:	2200      	movs	r2, #0
 8009e26:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	187a      	adds	r2, r7, r1
 8009e2c:	8812      	ldrh	r2, [r2, #0]
 8009e2e:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	33a0      	adds	r3, #160	; 0xa0
 8009e34:	001c      	movs	r4, r3
 8009e36:	250c      	movs	r5, #12
 8009e38:	197b      	adds	r3, r7, r5
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f7ff fcdf 	bl	8009800 <_ZN8touchgfx9TypedTextC1Et>
 8009e42:	197b      	adds	r3, r7, r5
 8009e44:	0019      	movs	r1, r3
 8009e46:	0020      	movs	r0, r4
 8009e48:	f003 fe58 	bl	800dafc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8009e4c:	197b      	adds	r3, r7, r5
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f7fe f968 	bl	8008124 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3340      	adds	r3, #64	; 0x40
 8009e5a:	0019      	movs	r1, r3
 8009e5c:	0010      	movs	r0, r2
 8009e5e:	f7ff fc12 	bl	8009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3370      	adds	r3, #112	; 0x70
 8009e68:	0019      	movs	r1, r3
 8009e6a:	0010      	movs	r0, r2
 8009e6c:	f7ff fc0b 	bl	8009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea);
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	33a0      	adds	r3, #160	; 0xa0
 8009e76:	0019      	movs	r1, r3
 8009e78:	0010      	movs	r0, r2
 8009e7a:	f7ff fc04 	bl	8009686 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	0018      	movs	r0, r3
 8009e82:	46bd      	mov	sp, r7
 8009e84:	b008      	add	sp, #32
 8009e86:	bdb0      	pop	{r4, r5, r7, pc}
 8009e88:	08014be4 	.word	0x08014be4

08009e8c <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]

}
 8009e94:	46c0      	nop			; (mov r8, r8)
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b002      	add	sp, #8
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <_ZN15Screen2ViewBase15handleTickEventEv>:

//Handles delays
void Screen2ViewBase::handleTickEvent()
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
    if(waitCounter > 0)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	22dc      	movs	r2, #220	; 0xdc
 8009ea8:	5a9b      	ldrh	r3, [r3, r2]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d014      	beq.n	8009ed8 <_ZN15Screen2ViewBase15handleTickEventEv+0x3c>
    {
        waitCounter--;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	22dc      	movs	r2, #220	; 0xdc
 8009eb2:	5a9b      	ldrh	r3, [r3, r2]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b299      	uxth	r1, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	22dc      	movs	r2, #220	; 0xdc
 8009ebc:	5299      	strh	r1, [r3, r2]
        if(waitCounter == 0)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	22dc      	movs	r2, #220	; 0xdc
 8009ec2:	5a9b      	ldrh	r3, [r3, r2]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d107      	bne.n	8009ed8 <_ZN15Screen2ViewBase15handleTickEventEv+0x3c>
        {
            //GoTo_Screen1
            //When Wait completed change screen to Screen1
            //Go to Screen1 with no screen transition
            application().gotoScreen1ScreenNoTransition();
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f7ff ff34 	bl	8009d38 <_ZN15Screen2ViewBase11applicationEv>
 8009ed0:	0003      	movs	r3, r0
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f7fe fd66 	bl	80089a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        }
    }
}
 8009ed8:	46c0      	nop			; (mov r8, r8)
 8009eda:	46bd      	mov	sp, r7
 8009edc:	b002      	add	sp, #8
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN15Screen2ViewBase15afterTransitionEv>:

//Called when the screen is done with transition/load
void Screen2ViewBase::afterTransition()
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
    //Wait
    //When screen is entered delay
    //Delay for 1000 ms (60 Ticks)
    waitCounter = WAIT_DURATION;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	22dc      	movs	r2, #220	; 0xdc
 8009eec:	213c      	movs	r1, #60	; 0x3c
 8009eee:	5299      	strh	r1, [r3, r2]
}
 8009ef0:	46c0      	nop			; (mov r8, r8)
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	0018      	movs	r0, r3
 8009f04:	f005 ff38 	bl	800fd78 <_ZN8touchgfx6ScreenC1Ev>
 8009f08:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	0018      	movs	r0, r3
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	b002      	add	sp, #8
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	08014c18 	.word	0x08014c18

08009f24 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
    return bitmap_database;
 8009f28:	4b01      	ldr	r3, [pc, #4]	; (8009f30 <_ZN14BitmapDatabase11getInstanceEv+0xc>)
}
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	08014c44 	.word	0x08014c44

08009f34 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8009f38:	2301      	movs	r3, #1
}
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	230a      	movs	r3, #10
 8009f4c:	18fb      	adds	r3, r7, r3
 8009f4e:	1c0a      	adds	r2, r1, #0
 8009f50:	801a      	strh	r2, [r3, #0]
    {
        return 0;
 8009f52:	2300      	movs	r3, #0
    }
 8009f54:	0018      	movs	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b004      	add	sp, #16
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009f64:	2300      	movs	r3, #0
    }
 8009f66:	0018      	movs	r0, r3
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b002      	add	sp, #8
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	1dbb      	adds	r3, r7, #6
 8009f7c:	801a      	strh	r2, [r3, #0]
    {
        typedTexts = data;
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	601a      	str	r2, [r3, #0]
        fonts = f;
 8009f84:	4b06      	ldr	r3, [pc, #24]	; (8009fa0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	601a      	str	r2, [r3, #0]
        numberOfTypedTexts = n;
 8009f8a:	4b06      	ldr	r3, [pc, #24]	; (8009fa4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009f8c:	1dba      	adds	r2, r7, #6
 8009f8e:	8812      	ldrh	r2, [r2, #0]
 8009f90:	801a      	strh	r2, [r3, #0]
    }
 8009f92:	46c0      	nop			; (mov r8, r8)
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b004      	add	sp, #16
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	2000353c 	.word	0x2000353c
 8009fa0:	20003544 	.word	0x20003544
 8009fa4:	20003540 	.word	0x20003540

08009fa8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009fa8:	b40e      	push	{r1, r2, r3}
 8009faa:	b5b0      	push	{r4, r5, r7, lr}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009fb2:	2320      	movs	r3, #32
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	4694      	mov	ip, r2
 8009fb8:	44bc      	add	ip, r7
 8009fba:	4463      	add	r3, ip
 8009fbc:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009fbe:	250e      	movs	r5, #14
 8009fc0:	197c      	adds	r4, r7, r5
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	f005 fa7d 	bl	800f4c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009fce:	0003      	movs	r3, r0
 8009fd0:	8023      	strh	r3, [r4, #0]
    va_end(pArg);
    return width;
 8009fd2:	197b      	adds	r3, r7, r5
 8009fd4:	881b      	ldrh	r3, [r3, #0]
}
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	b005      	add	sp, #20
 8009fdc:	bcb0      	pop	{r4, r5, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	b003      	add	sp, #12
 8009fe2:	4718      	bx	r3

08009fe4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009fe4:	b40c      	push	{r2, r3}
 8009fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	000a      	movs	r2, r1
 8009ff0:	1cfb      	adds	r3, r7, #3
 8009ff2:	701a      	strb	r2, [r3, #0]
    va_list pArg;
    va_start(pArg, text);
 8009ff4:	2324      	movs	r3, #36	; 0x24
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	4694      	mov	ip, r2
 8009ffa:	44bc      	add	ip, r7
 8009ffc:	4463      	add	r3, ip
 8009ffe:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800a000:	260e      	movs	r6, #14
 800a002:	19bc      	adds	r4, r7, r6
 800a004:	68bd      	ldr	r5, [r7, #8]
 800a006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a008:	1cfb      	adds	r3, r7, #3
 800a00a:	7819      	ldrb	r1, [r3, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	002b      	movs	r3, r5
 800a010:	f005 fa5a 	bl	800f4c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a014:	0003      	movs	r3, r0
 800a016:	8023      	strh	r3, [r4, #0]
    va_end(pArg);
    return width;
 800a018:	19bb      	adds	r3, r7, r6
 800a01a:	881b      	ldrh	r3, [r3, #0]
}
 800a01c:	0018      	movs	r0, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	b005      	add	sp, #20
 800a022:	bcf0      	pop	{r4, r5, r6, r7}
 800a024:	bc08      	pop	{r3}
 800a026:	b002      	add	sp, #8
 800a028:	4718      	bx	r3
	...

0800a02c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800a02c:	b590      	push	{r4, r7, lr}
 800a02e:	b08b      	sub	sp, #44	; 0x2c
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	000a      	movs	r2, r1
 800a036:	1cfb      	adds	r3, r7, #3
 800a038:	701a      	strb	r2, [r3, #0]
    if (fontGsubTable && nextCharacters.peekChar())
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d016      	beq.n	800a070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	331a      	adds	r3, #26
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	8adb      	ldrh	r3, [r3, #22]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d105      	bne.n	800a05c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x30>
 800a050:	4b4e      	ldr	r3, [pc, #312]	; (800a18c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x160>)
 800a052:	4a4f      	ldr	r2, [pc, #316]	; (800a190 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x164>)
 800a054:	484f      	ldr	r0, [pc, #316]	; (800a194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 800a056:	21c0      	movs	r1, #192	; 0xc0
 800a058:	f008 fecc 	bl	8012df4 <__assert_func>
            return buffer[pos];
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	8a9b      	ldrh	r3, [r3, #20]
 800a060:	001a      	movs	r2, r3
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	0052      	lsls	r2, r2, #1
 800a066:	5ad3      	ldrh	r3, [r2, r3]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 800a070:	2300      	movs	r3, #0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d100      	bne.n	800a078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4c>
 800a076:	e080      	b.n	800a17a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x14e>
    {
        substituteGlyphs();
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	0018      	movs	r0, r3
 800a07c:	f006 fd7a 	bl	8010b74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	331a      	adds	r3, #26
 800a084:	623b      	str	r3, [r7, #32]
 800a086:	211e      	movs	r1, #30
 800a088:	187b      	adds	r3, r7, r1
 800a08a:	2201      	movs	r2, #1
 800a08c:	801a      	strh	r2, [r3, #0]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	8adb      	ldrh	r3, [r3, #22]
 800a092:	187a      	adds	r2, r7, r1
 800a094:	8812      	ldrh	r2, [r2, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d305      	bcc.n	800a0a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7a>
 800a09a:	4b3f      	ldr	r3, [pc, #252]	; (800a198 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16c>)
 800a09c:	4a3f      	ldr	r2, [pc, #252]	; (800a19c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x170>)
 800a09e:	483d      	ldr	r0, [pc, #244]	; (800a194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 800a0a0:	21c5      	movs	r1, #197	; 0xc5
 800a0a2:	f008 fea7 	bl	8012df4 <__assert_func>
            const uint16_t index = pos + offset;
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	8a99      	ldrh	r1, [r3, #20]
 800a0aa:	201c      	movs	r0, #28
 800a0ac:	183b      	adds	r3, r7, r0
 800a0ae:	221e      	movs	r2, #30
 800a0b0:	18ba      	adds	r2, r7, r2
 800a0b2:	8812      	ldrh	r2, [r2, #0]
 800a0b4:	188a      	adds	r2, r1, r2
 800a0b6:	801a      	strh	r2, [r3, #0]
            return buffer[index < size ? index : index - size];
 800a0b8:	183b      	adds	r3, r7, r0
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	d803      	bhi.n	800a0c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>
 800a0c0:	231c      	movs	r3, #28
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	e003      	b.n	800a0d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa4>
 800a0c8:	231c      	movs	r3, #28
 800a0ca:	18fb      	adds	r3, r7, r3
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	3b0a      	subs	r3, #10
 800a0d0:	6a3a      	ldr	r2, [r7, #32]
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	5a9b      	ldrh	r3, [r3, r2]
 800a0d6:	4a32      	ldr	r2, [pc, #200]	; (800a1a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x174>)
 800a0d8:	4694      	mov	ip, r2
 800a0da:	4463      	add	r3, ip
 800a0dc:	425a      	negs	r2, r3
 800a0de:	4153      	adcs	r3, r2
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d049      	beq.n	800a17a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x14e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	331a      	adds	r3, #26
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	321a      	adds	r2, #26
 800a0ee:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	8ad2      	ldrh	r2, [r2, #22]
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	d105      	bne.n	800a104 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xd8>
 800a0f8:	4b24      	ldr	r3, [pc, #144]	; (800a18c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x160>)
 800a0fa:	4a25      	ldr	r2, [pc, #148]	; (800a190 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x164>)
 800a0fc:	4825      	ldr	r0, [pc, #148]	; (800a194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 800a0fe:	21c0      	movs	r1, #192	; 0xc0
 800a100:	f008 fe78 	bl	8012df4 <__assert_func>
            return buffer[pos];
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	8a92      	ldrh	r2, [r2, #20]
 800a108:	0011      	movs	r1, r2
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	0049      	lsls	r1, r1, #1
 800a10e:	5a8a      	ldrh	r2, [r1, r2]
 800a110:	613b      	str	r3, [r7, #16]
 800a112:	230e      	movs	r3, #14
 800a114:	18fb      	adds	r3, r7, r3
 800a116:	801a      	strh	r2, [r3, #0]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	8adb      	ldrh	r3, [r3, #22]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d808      	bhi.n	800a132 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x106>
 800a120:	4c20      	ldr	r4, [pc, #128]	; (800a1a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x178>)
 800a122:	4a21      	ldr	r2, [pc, #132]	; (800a1a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x17c>)
 800a124:	230e      	movs	r3, #14
 800a126:	33ff      	adds	r3, #255	; 0xff
 800a128:	0019      	movs	r1, r3
 800a12a:	481a      	ldr	r0, [pc, #104]	; (800a194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 800a12c:	0023      	movs	r3, r4
 800a12e:	f008 fe61 	bl	8012df4 <__assert_func>
            const uint16_t index = pos + 1;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	8a9a      	ldrh	r2, [r3, #20]
 800a136:	210c      	movs	r1, #12
 800a138:	187b      	adds	r3, r7, r1
 800a13a:	3201      	adds	r2, #1
 800a13c:	801a      	strh	r2, [r3, #0]
            buffer[index < size ? index : 0] = newChar;
 800a13e:	187b      	adds	r3, r7, r1
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	2b09      	cmp	r3, #9
 800a144:	d803      	bhi.n	800a14e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x122>
 800a146:	230c      	movs	r3, #12
 800a148:	18fb      	adds	r3, r7, r3
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	e000      	b.n	800a150 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x124>
 800a14e:	2300      	movs	r3, #0
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	210e      	movs	r1, #14
 800a156:	1879      	adds	r1, r7, r1
 800a158:	8809      	ldrh	r1, [r1, #0]
 800a15a:	5299      	strh	r1, [r3, r2]
            nextCharacters.replaceAt0(0x093F);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	331a      	adds	r3, #26
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	2116      	movs	r1, #22
 800a164:	187b      	adds	r3, r7, r1
 800a166:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x180>)
 800a168:	801a      	strh	r2, [r3, #0]
            buffer[pos] = newChar;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	8a9b      	ldrh	r3, [r3, #20]
 800a16e:	001a      	movs	r2, r3
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	0052      	lsls	r2, r2, #1
 800a174:	1879      	adds	r1, r7, r1
 800a176:	8809      	ldrh	r1, [r1, #0]
 800a178:	52d1      	strh	r1, [r2, r3]
        }
    }
    return getNextChar();
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	0018      	movs	r0, r3
 800a17e:	f006 fbcf 	bl	8010920 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800a182:	0003      	movs	r3, r0
}
 800a184:	0018      	movs	r0, r3
 800a186:	46bd      	mov	sp, r7
 800a188:	b00b      	add	sp, #44	; 0x2c
 800a18a:	bd90      	pop	{r4, r7, pc}
 800a18c:	08014154 	.word	0x08014154
 800a190:	08014d7c 	.word	0x08014d7c
 800a194:	08014160 	.word	0x08014160
 800a198:	080141a8 	.word	0x080141a8
 800a19c:	08014ca8 	.word	0x08014ca8
 800a1a0:	fffff6c1 	.word	0xfffff6c1
 800a1a4:	080141b8 	.word	0x080141b8
 800a1a8:	08014e28 	.word	0x08014e28
 800a1ac:	0000093f 	.word	0x0000093f

0800a1b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f006 fb68 	bl	8010890 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800a1c0:	46c0      	nop			; (mov r8, r8)
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	b002      	add	sp, #8
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b089      	sub	sp, #36	; 0x24
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	1d38      	adds	r0, r7, #4
 800a1d2:	6001      	str	r1, [r0, #0]
 800a1d4:	6042      	str	r2, [r0, #4]
 800a1d6:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800a1d8:	2330      	movs	r3, #48	; 0x30
 800a1da:	18fb      	adds	r3, r7, r3
 800a1dc:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800a1de:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	1d39      	adds	r1, r7, #4
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	0023      	movs	r3, r4
 800a1f0:	f004 f970 	bl	800e4d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800a1f4:	46c0      	nop			; (mov r8, r8)
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	b007      	add	sp, #28
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a1fc:	b590      	push	{r4, r7, lr}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	0002      	movs	r2, r0
 800a204:	1dbb      	adds	r3, r7, #6
 800a206:	801a      	strh	r2, [r3, #0]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a20c:	1dbb      	adds	r3, r7, #6
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d12a      	bne.n	800a26a <_ZN8touchgfx5Texts11setLanguageEt+0x6e>
    {
        if (languagesArray[id] != 0)
 800a214:	1dbb      	adds	r3, r7, #6
 800a216:	881a      	ldrh	r2, [r3, #0]
 800a218:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	58d3      	ldr	r3, [r2, r3]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d017      	beq.n	800a252 <_ZN8touchgfx5Texts11setLanguageEt+0x56>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a222:	1dbb      	adds	r3, r7, #6
 800a224:	881a      	ldrh	r2, [r3, #0]
 800a226:	4b1c      	ldr	r3, [pc, #112]	; (800a298 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	58d3      	ldr	r3, [r2, r3]
 800a22c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	18d2      	adds	r2, r2, r3
 800a236:	4b19      	ldr	r3, [pc, #100]	; (800a29c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a238:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	18d2      	adds	r2, r2, r3
 800a242:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a244:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	18d3      	adds	r3, r2, r3
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e00b      	b.n	800a26a <_ZN8touchgfx5Texts11setLanguageEt+0x6e>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800a252:	4b12      	ldr	r3, [pc, #72]	; (800a29c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a254:	4a13      	ldr	r2, [pc, #76]	; (800a2a4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800a256:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800a258:	4a13      	ldr	r2, [pc, #76]	; (800a2a8 <_ZN8touchgfx5Texts11setLanguageEt+0xac>)
 800a25a:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a25c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800a25e:	1dbb      	adds	r3, r7, #6
 800a260:	881a      	ldrh	r2, [r3, #0]
 800a262:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <_ZN8touchgfx5Texts11setLanguageEt+0xb0>)
 800a264:	0092      	lsls	r2, r2, #2
 800a266:	58d3      	ldr	r3, [r2, r3]
 800a268:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00f      	beq.n	800a290 <_ZN8touchgfx5Texts11setLanguageEt+0x94>
    {
        currentLanguage = id;
 800a270:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <_ZN8touchgfx5Texts11setLanguageEt+0xb4>)
 800a272:	1dba      	adds	r2, r7, #6
 800a274:	8812      	ldrh	r2, [r2, #0]
 800a276:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800a278:	f000 f83c 	bl	800a2f4 <_ZN17TypedTextDatabase8getFontsEv>
 800a27c:	0004      	movs	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800a27e:	f000 f833 	bl	800a2e8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800a282:	0003      	movs	r3, r0
 800a284:	001a      	movs	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	0021      	movs	r1, r4
 800a28a:	0018      	movs	r0, r3
 800a28c:	f7ff fe70 	bl	8009f70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800a290:	46c0      	nop			; (mov r8, r8)
 800a292:	46bd      	mov	sp, r7
 800a294:	b005      	add	sp, #20
 800a296:	bd90      	pop	{r4, r7, pc}
 800a298:	20001a34 	.word	0x20001a34
 800a29c:	20001a3c 	.word	0x20001a3c
 800a2a0:	20001a40 	.word	0x20001a40
 800a2a4:	08017dc0 	.word	0x08017dc0
 800a2a8:	08017db8 	.word	0x08017db8
 800a2ac:	08017de8 	.word	0x08017de8
 800a2b0:	20001a38 	.word	0x20001a38

0800a2b4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	000a      	movs	r2, r1
 800a2be:	1cbb      	adds	r3, r7, #2
 800a2c0:	801a      	strh	r2, [r3, #0]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800a2c2:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800a2c8:	6819      	ldr	r1, [r3, #0]
 800a2ca:	1cbb      	adds	r3, r7, #2
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	18cb      	adds	r3, r1, r3
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	18d3      	adds	r3, r2, r3
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b002      	add	sp, #8
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20001a3c 	.word	0x20001a3c
 800a2e4:	20001a40 	.word	0x20001a40

0800a2e8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a2ec:	2302      	movs	r3, #2
}
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a2f8:	4b01      	ldr	r3, [pc, #4]	; (800a300 <_ZN17TypedTextDatabase8getFontsEv+0xc>)
}
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20001a44 	.word	0x20001a44

0800a304 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d112      	bne.n	800a33a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	4a0b      	ldr	r2, [pc, #44]	; (800a344 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d10e      	bne.n	800a33a <_Z41__static_initialization_and_destruction_0ii+0x36>
    &(getFont_verdana_20_4bpp()),
 800a31c:	f7fe f83e 	bl	800839c <_Z23getFont_verdana_20_4bppv>
 800a320:	0002      	movs	r2, r0
};
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a324:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800a326:	f7fe f88f 	bl	8008448 <_Z23getFont_verdana_40_4bppv>
 800a32a:	0002      	movs	r2, r0
};
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a32e:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800a330:	f7fd ffde 	bl	80082f0 <_Z23getFont_verdana_10_4bppv>
 800a334:	0002      	movs	r2, r0
};
 800a336:	4b04      	ldr	r3, [pc, #16]	; (800a348 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a338:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	46bd      	mov	sp, r7
 800a33e:	b002      	add	sp, #8
 800a340:	bd80      	pop	{r7, pc}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	0000ffff 	.word	0x0000ffff
 800a348:	20001a44 	.word	0x20001a44

0800a34c <_GLOBAL__sub_I_touchgfx_fonts>:
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <_GLOBAL__sub_I_touchgfx_fonts+0x14>)
 800a352:	0019      	movs	r1, r3
 800a354:	2001      	movs	r0, #1
 800a356:	f7ff ffd5 	bl	800a304 <_Z41__static_initialization_and_destruction_0ii>
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	0000ffff 	.word	0x0000ffff

0800a364 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	4a05      	ldr	r2, [pc, #20]	; (800a384 <_ZN19FrontendApplicationD1Ev+0x20>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	0018      	movs	r0, r3
 800a376:	f7fe fa7d 	bl	8008874 <_ZN23FrontendApplicationBaseD1Ev>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	0018      	movs	r0, r3
 800a37e:	46bd      	mov	sp, r7
 800a380:	b002      	add	sp, #8
 800a382:	bd80      	pop	{r7, pc}
 800a384:	08014ee4 	.word	0x08014ee4

0800a388 <_ZN19FrontendApplicationD0Ev>:
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	0018      	movs	r0, r3
 800a394:	f7ff ffe6 	bl	800a364 <_ZN19FrontendApplicationD1Ev>
 800a398:	23ac      	movs	r3, #172	; 0xac
 800a39a:	005a      	lsls	r2, r3, #1
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	0011      	movs	r1, r2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f008 fcfa 	bl	8012d9a <_ZdlPvj>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	b002      	add	sp, #8
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	23aa      	movs	r3, #170	; 0xaa
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	58d3      	ldr	r3, [r2, r3]
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f000 f82b 	bl	800a41c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f004 fb41 	bl	800ea50 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	b002      	add	sp, #8
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	f7fe fa86 	bl	80088fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a3f0:	4a03      	ldr	r2, [pc, #12]	; (800a400 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	601a      	str	r2, [r3, #0]
{

}
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b004      	add	sp, #16
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	08014ee4 	.word	0x08014ee4

0800a404 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
{

}
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	0018      	movs	r0, r3
 800a416:	46bd      	mov	sp, r7
 800a418:	b002      	add	sp, #8
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <_ZN5Model4tickEv>:

void Model::tick()
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]

}
 800a424:	46c0      	nop			; (mov r8, r8)
 800a426:	46bd      	mov	sp, r7
 800a428:	b002      	add	sp, #8
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
    {
    }
 800a434:	46c0      	nop			; (mov r8, r8)
 800a436:	46bd      	mov	sp, r7
 800a438:	b002      	add	sp, #8
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    {
    }
 800a444:	46c0      	nop			; (mov r8, r8)
 800a446:	46bd      	mov	sp, r7
 800a448:	b002      	add	sp, #8
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
    {
 800a454:	4a03      	ldr	r2, [pc, #12]	; (800a464 <_ZN8touchgfx9PresenterD1Ev+0x18>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]
    }
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0018      	movs	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	b002      	add	sp, #8
 800a462:	bd80      	pop	{r7, pc}
 800a464:	08014f60 	.word	0x08014f60

0800a468 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
    }
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	0018      	movs	r0, r3
 800a474:	f7ff ffea 	bl	800a44c <_ZN8touchgfx9PresenterD1Ev>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2104      	movs	r1, #4
 800a47c:	0018      	movs	r0, r3
 800a47e:	f008 fc8c 	bl	8012d9a <_ZdlPvj>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	0018      	movs	r0, r3
 800a486:	46bd      	mov	sp, r7
 800a488:	b002      	add	sp, #8
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
    {
 800a494:	4a03      	ldr	r2, [pc, #12]	; (800a4a4 <_ZN8touchgfx9PresenterC1Ev+0x18>)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	601a      	str	r2, [r3, #0]
    }
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	0018      	movs	r0, r3
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	b002      	add	sp, #8
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	08014f60 	.word	0x08014f60

0800a4a8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	4a05      	ldr	r2, [pc, #20]	; (800a4c8 <_ZN13ModelListenerC1Ev+0x20>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	605a      	str	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	0018      	movs	r0, r3
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	b002      	add	sp, #8
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	46c0      	nop			; (mov r8, r8)
 800a4c8:	08014f50 	.word	0x08014f50

0800a4cc <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	4a03      	ldr	r2, [pc, #12]	; (800a4e4 <_ZN13ModelListenerD1Ev+0x18>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	0018      	movs	r0, r3
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	b002      	add	sp, #8
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	08014f50 	.word	0x08014f50

0800a4e8 <_ZN13ModelListenerD0Ev>:
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f7ff ffea 	bl	800a4cc <_ZN13ModelListenerD1Ev>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2108      	movs	r1, #8
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f008 fc4c 	bl	8012d9a <_ZdlPvj>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	0018      	movs	r0, r3
 800a506:	46bd      	mov	sp, r7
 800a508:	b002      	add	sp, #8
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	4a09      	ldr	r2, [pc, #36]	; (800a53c <_ZN16Screen1PresenterD1Ev+0x30>)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	4a09      	ldr	r2, [pc, #36]	; (800a540 <_ZN16Screen1PresenterD1Ev+0x34>)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	605a      	str	r2, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3304      	adds	r3, #4
 800a524:	0018      	movs	r0, r3
 800a526:	f7ff ffd1 	bl	800a4cc <_ZN13ModelListenerD1Ev>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	0018      	movs	r0, r3
 800a52e:	f7ff ff8d 	bl	800a44c <_ZN8touchgfx9PresenterD1Ev>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	0018      	movs	r0, r3
 800a536:	46bd      	mov	sp, r7
 800a538:	b002      	add	sp, #8
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	08014f28 	.word	0x08014f28
 800a540:	08014f40 	.word	0x08014f40

0800a544 <_ZThn4_N16Screen1PresenterD1Ev>:
 800a544:	b408      	push	{r3}
 800a546:	4b02      	ldr	r3, [pc, #8]	; (800a550 <_ZThn4_N16Screen1PresenterD1Ev+0xc>)
 800a548:	469c      	mov	ip, r3
 800a54a:	3804      	subs	r0, #4
 800a54c:	bc08      	pop	{r3}
 800a54e:	4760      	bx	ip
 800a550:	0800a50d 	.word	0x0800a50d

0800a554 <_ZN16Screen1PresenterD0Ev>:
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	0018      	movs	r0, r3
 800a560:	f7ff ffd4 	bl	800a50c <_ZN16Screen1PresenterD1Ev>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2110      	movs	r1, #16
 800a568:	0018      	movs	r0, r3
 800a56a:	f008 fc16 	bl	8012d9a <_ZdlPvj>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	0018      	movs	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	b002      	add	sp, #8
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZThn4_N16Screen1PresenterD0Ev>:
 800a578:	b408      	push	{r3}
 800a57a:	4b02      	ldr	r3, [pc, #8]	; (800a584 <_ZThn4_N16Screen1PresenterD0Ev+0xc>)
 800a57c:	469c      	mov	ip, r3
 800a57e:	3804      	subs	r0, #4
 800a580:	bc08      	pop	{r3}
 800a582:	4760      	bx	ip
 800a584:	0800a555 	.word	0x0800a555

0800a588 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
    : view(v)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	0018      	movs	r0, r3
 800a596:	f7ff ff79 	bl	800a48c <_ZN8touchgfx9PresenterC1Ev>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	3304      	adds	r3, #4
 800a59e:	0018      	movs	r0, r3
 800a5a0:	f7ff ff82 	bl	800a4a8 <_ZN13ModelListenerC1Ev>
 800a5a4:	4a06      	ldr	r2, [pc, #24]	; (800a5c0 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	605a      	str	r2, [r3, #4]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	60da      	str	r2, [r3, #12]
{

}
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b002      	add	sp, #8
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	08014f28 	.word	0x08014f28
 800a5c4:	08014f40 	.word	0x08014f40

0800a5c8 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]

}
 800a5d0:	46c0      	nop			; (mov r8, r8)
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b002      	add	sp, #8
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

}
 800a5e0:	46c0      	nop			; (mov r8, r8)
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	b002      	add	sp, #8
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	4a05      	ldr	r2, [pc, #20]	; (800a608 <_ZN11Screen1ViewD1Ev+0x20>)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7ff f977 	bl	80098ec <_ZN15Screen1ViewBaseD1Ev>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	0018      	movs	r0, r3
 800a602:	46bd      	mov	sp, r7
 800a604:	b002      	add	sp, #8
 800a606:	bd80      	pop	{r7, pc}
 800a608:	08014f78 	.word	0x08014f78

0800a60c <_ZN11Screen1ViewD0Ev>:
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	0018      	movs	r0, r3
 800a618:	f7ff ffe6 	bl	800a5e8 <_ZN11Screen1ViewD1Ev>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	21e0      	movs	r1, #224	; 0xe0
 800a620:	0018      	movs	r0, r3
 800a622:	f008 fbba 	bl	8012d9a <_ZdlPvj>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	0018      	movs	r0, r3
 800a62a:	46bd      	mov	sp, r7
 800a62c:	b002      	add	sp, #8
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	0018      	movs	r0, r3
 800a63c:	f7ff f9c8 	bl	80099d0 <_ZN15Screen1ViewBaseC1Ev>
 800a640:	4a03      	ldr	r2, [pc, #12]	; (800a650 <_ZN11Screen1ViewC1Ev+0x20>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
{

}
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	0018      	movs	r0, r3
 800a64a:	46bd      	mov	sp, r7
 800a64c:	b002      	add	sp, #8
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	08014f78 	.word	0x08014f78

0800a654 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0018      	movs	r0, r3
 800a660:	f7ff fa54 	bl	8009b0c <_ZN15Screen1ViewBase11setupScreenEv>
}
 800a664:	46c0      	nop			; (mov r8, r8)
 800a666:	46bd      	mov	sp, r7
 800a668:	b002      	add	sp, #8
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	0018      	movs	r0, r3
 800a678:	f7fe ffea 	bl	8009650 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a67c:	46c0      	nop			; (mov r8, r8)
 800a67e:	46bd      	mov	sp, r7
 800a680:	b002      	add	sp, #8
 800a682:	bd80      	pop	{r7, pc}

0800a684 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <_ZN16Screen2PresenterD1Ev+0x30>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	4a09      	ldr	r2, [pc, #36]	; (800a6b8 <_ZN16Screen2PresenterD1Ev+0x34>)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	605a      	str	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3304      	adds	r3, #4
 800a69c:	0018      	movs	r0, r3
 800a69e:	f7ff ff15 	bl	800a4cc <_ZN13ModelListenerD1Ev>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7ff fed1 	bl	800a44c <_ZN8touchgfx9PresenterD1Ev>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	b002      	add	sp, #8
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	08014fac 	.word	0x08014fac
 800a6b8:	08014fc4 	.word	0x08014fc4

0800a6bc <_ZThn4_N16Screen2PresenterD1Ev>:
 800a6bc:	b408      	push	{r3}
 800a6be:	4b02      	ldr	r3, [pc, #8]	; (800a6c8 <_ZThn4_N16Screen2PresenterD1Ev+0xc>)
 800a6c0:	469c      	mov	ip, r3
 800a6c2:	3804      	subs	r0, #4
 800a6c4:	bc08      	pop	{r3}
 800a6c6:	4760      	bx	ip
 800a6c8:	0800a685 	.word	0x0800a685

0800a6cc <_ZN16Screen2PresenterD0Ev>:
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	0018      	movs	r0, r3
 800a6d8:	f7ff ffd4 	bl	800a684 <_ZN16Screen2PresenterD1Ev>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2110      	movs	r1, #16
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f008 fb5a 	bl	8012d9a <_ZdlPvj>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	b002      	add	sp, #8
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <_ZThn4_N16Screen2PresenterD0Ev>:
 800a6f0:	b408      	push	{r3}
 800a6f2:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <_ZThn4_N16Screen2PresenterD0Ev+0xc>)
 800a6f4:	469c      	mov	ip, r3
 800a6f6:	3804      	subs	r0, #4
 800a6f8:	bc08      	pop	{r3}
 800a6fa:	4760      	bx	ip
 800a6fc:	0800a6cd 	.word	0x0800a6cd

0800a700 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
    : view(v)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	0018      	movs	r0, r3
 800a70e:	f7ff febd 	bl	800a48c <_ZN8touchgfx9PresenterC1Ev>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3304      	adds	r3, #4
 800a716:	0018      	movs	r0, r3
 800a718:	f7ff fec6 	bl	800a4a8 <_ZN13ModelListenerC1Ev>
 800a71c:	4a06      	ldr	r2, [pc, #24]	; (800a738 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	4a06      	ldr	r2, [pc, #24]	; (800a73c <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	605a      	str	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	60da      	str	r2, [r3, #12]
{

}
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0018      	movs	r0, r3
 800a732:	46bd      	mov	sp, r7
 800a734:	b002      	add	sp, #8
 800a736:	bd80      	pop	{r7, pc}
 800a738:	08014fac 	.word	0x08014fac
 800a73c:	08014fc4 	.word	0x08014fc4

0800a740 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]

}
 800a748:	46c0      	nop			; (mov r8, r8)
 800a74a:	46bd      	mov	sp, r7
 800a74c:	b002      	add	sp, #8
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]

}
 800a758:	46c0      	nop			; (mov r8, r8)
 800a75a:	46bd      	mov	sp, r7
 800a75c:	b002      	add	sp, #8
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	4a05      	ldr	r2, [pc, #20]	; (800a780 <_ZN11Screen2ViewD1Ev+0x20>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	0018      	movs	r0, r3
 800a772:	f7ff faad 	bl	8009cd0 <_ZN15Screen2ViewBaseD1Ev>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	0018      	movs	r0, r3
 800a77a:	46bd      	mov	sp, r7
 800a77c:	b002      	add	sp, #8
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	08014fd4 	.word	0x08014fd4

0800a784 <_ZN11Screen2ViewD0Ev>:
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	0018      	movs	r0, r3
 800a790:	f7ff ffe6 	bl	800a760 <_ZN11Screen2ViewD1Ev>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	21e0      	movs	r1, #224	; 0xe0
 800a798:	0018      	movs	r0, r3
 800a79a:	f008 fafe 	bl	8012d9a <_ZdlPvj>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	0018      	movs	r0, r3
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	b002      	add	sp, #8
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	0018      	movs	r0, r3
 800a7b4:	f7ff facc 	bl	8009d50 <_ZN15Screen2ViewBaseC1Ev>
 800a7b8:	4a03      	ldr	r2, [pc, #12]	; (800a7c8 <_ZN11Screen2ViewC1Ev+0x20>)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	601a      	str	r2, [r3, #0]
{

}
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	b002      	add	sp, #8
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	08014fd4 	.word	0x08014fd4

0800a7cc <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	f7ff fb58 	bl	8009e8c <_ZN15Screen2ViewBase11setupScreenEv>
}
 800a7dc:	46c0      	nop			; (mov r8, r8)
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	b002      	add	sp, #8
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f7fe ff2e 	bl	8009650 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a7f4:	46c0      	nop			; (mov r8, r8)
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
    {
 800a804:	4a03      	ldr	r2, [pc, #12]	; (800a814 <_ZN8touchgfx15TouchControllerD1Ev+0x18>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	601a      	str	r2, [r3, #0]
    }
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	0018      	movs	r0, r3
 800a80e:	46bd      	mov	sp, r7
 800a810:	b002      	add	sp, #8
 800a812:	bd80      	pop	{r7, pc}
 800a814:	08015020 	.word	0x08015020

0800a818 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
    }
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	0018      	movs	r0, r3
 800a824:	f7ff ffea 	bl	800a7fc <_ZN8touchgfx15TouchControllerD1Ev>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2104      	movs	r1, #4
 800a82c:	0018      	movs	r0, r3
 800a82e:	f008 fab4 	bl	8012d9a <_ZdlPvj>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	0018      	movs	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	b002      	add	sp, #8
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800a844:	46c0      	nop			; (mov r8, r8)
 800a846:	46bd      	mov	sp, r7
 800a848:	b002      	add	sp, #8
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	0018      	movs	r0, r3
 800a85c:	46bd      	mov	sp, r7
 800a85e:	b004      	add	sp, #16
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	4a05      	ldr	r2, [pc, #20]	; (800a884 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	0018      	movs	r0, r3
 800a876:	f7ff ffc1 	bl	800a7fc <_ZN8touchgfx15TouchControllerD1Ev>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	0018      	movs	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	b002      	add	sp, #8
 800a882:	bd80      	pop	{r7, pc}
 800a884:	08015008 	.word	0x08015008

0800a888 <_ZN20STM32TouchControllerD0Ev>:
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	0018      	movs	r0, r3
 800a894:	f7ff ffe6 	bl	800a864 <_ZN20STM32TouchControllerD1Ev>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2104      	movs	r1, #4
 800a89c:	0018      	movs	r0, r3
 800a89e:	f008 fa7c 	bl	8012d9a <_ZdlPvj>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	b002      	add	sp, #8
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	0002      	movs	r2, r0
 800a8b4:	1dfb      	adds	r3, r7, #7
 800a8b6:	701a      	strb	r2, [r3, #0]

}
 800a8b8:	46c0      	nop			; (mov r8, r8)
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	b002      	add	sp, #8
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	0002      	movs	r2, r0
 800a8c8:	1dfb      	adds	r3, r7, #7
 800a8ca:	701a      	strb	r2, [r3, #0]

}
 800a8cc:	46c0      	nop			; (mov r8, r8)
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	b002      	add	sp, #8
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	0002      	movs	r2, r0
 800a8dc:	1dfb      	adds	r3, r7, #7
 800a8de:	701a      	strb	r2, [r3, #0]

}
 800a8e0:	46c0      	nop			; (mov r8, r8)
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	b002      	add	sp, #8
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
    {
 800a8f0:	4a03      	ldr	r2, [pc, #12]	; (800a900 <_ZN8touchgfx3HALD1Ev+0x18>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	601a      	str	r2, [r3, #0]
    }
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	b002      	add	sp, #8
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	08015f44 	.word	0x08015f44

0800a904 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
    }
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	0018      	movs	r0, r3
 800a910:	f7ff ffea 	bl	800a8e8 <_ZN8touchgfx3HALD1Ev>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2178      	movs	r1, #120	; 0x78
 800a918:	0018      	movs	r0, r3
 800a91a:	f008 fa3e 	bl	8012d9a <_ZdlPvj>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	0018      	movs	r0, r3
 800a922:	46bd      	mov	sp, r7
 800a924:	b002      	add	sp, #8
 800a926:	bd80      	pop	{r7, pc}

0800a928 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	000a      	movs	r2, r1
 800a932:	1cfb      	adds	r3, r7, #3
 800a934:	701a      	strb	r2, [r3, #0]
        requestedOrientation = orientation;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	1cfa      	adds	r2, r7, #3
 800a93a:	2174      	movs	r1, #116	; 0x74
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	545a      	strb	r2, [r3, r1]
        displayOrientationChangeRequested = true;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2275      	movs	r2, #117	; 0x75
 800a944:	2101      	movs	r1, #1
 800a946:	5499      	strb	r1, [r3, r2]
    }
 800a948:	46c0      	nop			; (mov r8, r8)
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b002      	add	sp, #8
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2277      	movs	r2, #119	; 0x77
 800a95c:	5c9b      	ldrb	r3, [r3, r2]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	0010      	movs	r0, r2
 800a970:	4798      	blx	r3
 800a972:	0003      	movs	r3, r0
 800a974:	e000      	b.n	800a978 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800a976:	2300      	movs	r3, #0
        }
    }
 800a978:	0018      	movs	r0, r3
 800a97a:	46bd      	mov	sp, r7
 800a97c:	b002      	add	sp, #8
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	0018      	movs	r0, r3
 800a98c:	f002 fd98 	bl	800d4c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3394      	adds	r3, #148	; 0x94
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	0010      	movs	r0, r2
 800a99c:	4798      	blx	r3
    }
 800a99e:	46c0      	nop			; (mov r8, r8)
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b002      	add	sp, #8
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
    {
        return false;
 800a9b0:	2300      	movs	r3, #0
    }
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	b002      	add	sp, #8
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 800a9bc:	b5b0      	push	{r4, r5, r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	0019      	movs	r1, r3
 800a9c8:	1dbb      	adds	r3, r7, #6
 800a9ca:	801a      	strh	r2, [r3, #0]
 800a9cc:	1d7b      	adds	r3, r7, #5
 800a9ce:	1c0a      	adds	r2, r1, #0
 800a9d0:	701a      	strb	r2, [r3, #0]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 800a9d2:	f7fe fe69 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800a9d6:	0002      	movs	r2, r0
 800a9d8:	6813      	ldr	r3, [r2, #0]
 800a9da:	3324      	adds	r3, #36	; 0x24
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	251a      	movs	r5, #26
 800a9e0:	197c      	adds	r4, r7, r5
 800a9e2:	0010      	movs	r0, r2
 800a9e4:	4798      	blx	r3
 800a9e6:	0003      	movs	r3, r0
 800a9e8:	8023      	strh	r3, [r4, #0]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800a9ea:	197b      	adds	r3, r7, r5
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xac>)
 800a9f0:	8812      	ldrh	r2, [r2, #0]
 800a9f2:	4353      	muls	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800aa02:	1d7b      	adds	r3, r7, #5
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d005      	beq.n	800aa16 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x5a>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800aa0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	18d3      	adds	r3, r2, r3
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800aa16:	2338      	movs	r3, #56	; 0x38
 800aa18:	18fb      	adds	r3, r7, r3
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x70>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800aa20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	18d3      	adds	r3, r2, r3
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800aa2c:	1dbb      	adds	r3, r7, #6
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	d80e      	bhi.n	800aa52 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x96>
 800aa34:	009a      	lsls	r2, r3, #2
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xb0>)
 800aa38:	18d3      	adds	r3, r2, r3
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	469f      	mov	pc, r3
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3374      	adds	r3, #116	; 0x74
 800aa44:	681c      	ldr	r4, [r3, #0]
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	6a3a      	ldr	r2, [r7, #32]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	47a0      	blx	r4
            break;
 800aa50:	e005      	b.n	800aa5e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa2>
        default:
            assert(0 && "Unsupported bit depth");
 800aa52:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xb4>)
 800aa54:	4a07      	ldr	r2, [pc, #28]	; (800aa74 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xb8>)
 800aa56:	4908      	ldr	r1, [pc, #32]	; (800aa78 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xbc>)
 800aa58:	4808      	ldr	r0, [pc, #32]	; (800aa7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc0>)
 800aa5a:	f008 f9cb 	bl	8012df4 <__assert_func>
            break;
        }
    }
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b00a      	add	sp, #40	; 0x28
 800aa64:	bdb0      	pop	{r4, r5, r7, pc}
 800aa66:	46c0      	nop			; (mov r8, r8)
 800aa68:	200034c8 	.word	0x200034c8
 800aa6c:	08015030 	.word	0x08015030
 800aa70:	080141c4 	.word	0x080141c4
 800aa74:	080151bc 	.word	0x080151bc
 800aa78:	00000289 	.word	0x00000289
 800aa7c:	080141e4 	.word	0x080141e4

0800aa80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800aa80:	b590      	push	{r4, r7, lr}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d107      	bne.n	800aaa4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x24>
 800aa94:	4c10      	ldr	r4, [pc, #64]	; (800aad8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800aa96:	4a11      	ldr	r2, [pc, #68]	; (800aadc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800aa98:	23a7      	movs	r3, #167	; 0xa7
 800aa9a:	0099      	lsls	r1, r3, #2
 800aa9c:	4810      	ldr	r0, [pc, #64]	; (800aae0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800aa9e:	0023      	movs	r3, r4
 800aaa0:	f008 f9a8 	bl	8012df4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	1e5a      	subs	r2, r3, #1
 800aaba:	4193      	sbcs	r3, r2
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800aac0:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	1e5a      	subs	r2, r3, #1
 800aac6:	4193      	sbcs	r3, r2
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800aacc:	701a      	strb	r2, [r3, #0]
    }
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b005      	add	sp, #20
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	08014228 	.word	0x08014228
 800aadc:	0801516c 	.word	0x0801516c
 800aae0:	080141e4 	.word	0x080141e4
 800aae4:	200034ca 	.word	0x200034ca
 800aae8:	200034cb 	.word	0x200034cb

0800aaec <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800aaf4:	2300      	movs	r3, #0
    }
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	b002      	add	sp, #8
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	000a      	movs	r2, r1
 800ab08:	1cbb      	adds	r3, r7, #2
 800ab0a:	801a      	strh	r2, [r3, #0]
    {
        if (taskDelayFunc)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <_ZN8touchgfx3HAL9taskDelayEt+0x22>
        {
            taskDelayFunc(ms);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	1cba      	adds	r2, r7, #2
 800ab1a:	8812      	ldrh	r2, [r2, #0]
 800ab1c:	0010      	movs	r0, r2
 800ab1e:	4798      	blx	r3
        }
    }
 800ab20:	46c0      	nop			; (mov r8, r8)
 800ab22:	46bd      	mov	sp, r7
 800ab24:	b002      	add	sp, #8
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800ab30:	4b02      	ldr	r3, [pc, #8]	; (800ab3c <_ZN8touchgfx3HAL17getTFTCurrentLineEv+0x14>)
    }
 800ab32:	0018      	movs	r0, r3
 800ab34:	46bd      	mov	sp, r7
 800ab36:	b002      	add	sp, #8
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	0000ffff 	.word	0x0000ffff

0800ab40 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3318      	adds	r3, #24
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	0010      	movs	r0, r2
 800ab58:	4798      	blx	r3
 800ab5a:	0003      	movs	r3, r0
    }
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	b002      	add	sp, #8
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2274      	movs	r2, #116	; 0x74
 800ab70:	5c9a      	ldrb	r2, [r3, r2]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2134      	movs	r1, #52	; 0x34
 800ab76:	5c5b      	ldrb	r3, [r3, r1]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d017      	beq.n	800abac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800ab7c:	4b19      	ldr	r3, [pc, #100]	; (800abe4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x80>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d12a      	bne.n	800abda <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800ab84:	4b18      	ldr	r3, [pc, #96]	; (800abe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800ab86:	881a      	ldrh	r2, [r3, #0]
 800ab88:	4b18      	ldr	r3, [pc, #96]	; (800abec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800ab8a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800ab8c:	4b18      	ldr	r3, [pc, #96]	; (800abf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800ab8e:	881a      	ldrh	r2, [r3, #0]
 800ab90:	4b18      	ldr	r3, [pc, #96]	; (800abf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800ab92:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800ab94:	4b15      	ldr	r3, [pc, #84]	; (800abec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800ab96:	881a      	ldrh	r2, [r3, #0]
 800ab98:	4b15      	ldr	r3, [pc, #84]	; (800abf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800ab9a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800ab9c:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800ab9e:	881a      	ldrh	r2, [r3, #0]
 800aba0:	4b11      	ldr	r3, [pc, #68]	; (800abe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800aba2:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800aba4:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x80>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800abaa:	e016      	b.n	800abda <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800abac:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x80>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d012      	beq.n	800abda <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800abb6:	881a      	ldrh	r2, [r3, #0]
 800abb8:	4b0c      	ldr	r3, [pc, #48]	; (800abec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800abba:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800abbc:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800abbe:	881a      	ldrh	r2, [r3, #0]
 800abc0:	4b0c      	ldr	r3, [pc, #48]	; (800abf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800abc2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800abc4:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800abc6:	881a      	ldrh	r2, [r3, #0]
 800abc8:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800abca:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800abcc:	4b07      	ldr	r3, [pc, #28]	; (800abec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800abce:	881a      	ldrh	r2, [r3, #0]
 800abd0:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800abd2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800abd4:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x80>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	701a      	strb	r2, [r3, #0]
    }
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	46bd      	mov	sp, r7
 800abde:	b002      	add	sp, #8
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	200034c4 	.word	0x200034c4
 800abe8:	200034c0 	.word	0x200034c0
 800abec:	200034c6 	.word	0x200034c6
 800abf0:	200034c2 	.word	0x200034c2
 800abf4:	200034c8 	.word	0x200034c8

0800abf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	0018      	movs	r0, r3
 800ac04:	f001 fece 	bl	800c9a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800ac08:	46c0      	nop			; (mov r8, r8)
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	4a05      	ldr	r2, [pc, #20]	; (800ac30 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	0018      	movs	r0, r3
 800ac22:	f7ff fe61 	bl	800a8e8 <_ZN8touchgfx3HALD1Ev>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	0018      	movs	r0, r3
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b002      	add	sp, #8
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	0801544c 	.word	0x0801544c

0800ac34 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f7ff ffe6 	bl	800ac10 <_ZN20TouchGFXGeneratedHALD1Ev>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2178      	movs	r1, #120	; 0x78
 800ac48:	0018      	movs	r0, r3
 800ac4a:	f008 f8a6 	bl	8012d9a <_ZdlPvj>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	0018      	movs	r0, r3
 800ac52:	46bd      	mov	sp, r7
 800ac54:	b002      	add	sp, #8
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	0018      	movs	r0, r3
 800ac64:	f7ff ffc8 	bl	800abf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800ac68:	46c0      	nop			; (mov r8, r8)
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	b002      	add	sp, #8
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZN11TouchGFXHAL10initializeEv>:
 *
 */
//#error "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

	/* Prepares Display for operation */
	MB1642BDisplayDriver_DisplayReset();
 800ac78:	f7f6 fd12 	bl	80016a0 <MB1642BDisplayDriver_DisplayReset>
	MB1642BDisplayDriver_DisplayInit();
 800ac7c:	f7f6 fcc0 	bl	8001600 <MB1642BDisplayDriver_DisplayInit>
	MB1642BDisplayDriver_DisplayOn();
 800ac80:	f7f6 fcb2 	bl	80015e8 <MB1642BDisplayDriver_DisplayOn>

    TouchGFXGeneratedHAL::initialize();
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 ffe0 	bl	800bc4c <_ZN20TouchGFXGeneratedHAL10initializeEv>
//    lockDMAToFrontPorch(false);
    /* Wait for first VSync from display */
//    touchgfx::OSWrappers::waitForVSync();
//    touchgfx::OSWrappers::signalRenderingDone();

}
 800ac8c:	46c0      	nop			; (mov r8, r8)
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	b002      	add	sp, #8
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	0018      	movs	r0, r3
 800aca0:	f001 f835 	bl	800bd0e <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800aca4:	0003      	movs	r3, r0
}
 800aca6:	0018      	movs	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	b002      	add	sp, #8
 800acac:	bd80      	pop	{r7, pc}

0800acae <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	0011      	movs	r1, r2
 800acbe:	0018      	movs	r0, r3
 800acc0:	f001 f82e 	bl	800bd20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800acc4:	46c0      	nop			; (mov r8, r8)
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}

0800accc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	0011      	movs	r1, r2
 800acdc:	0018      	movs	r0, r3
 800acde:	f001 f828 	bl	800bd32 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800ace2:	46c0      	nop			; (mov r8, r8)
 800ace4:	46bd      	mov	sp, r7
 800ace6:	b002      	add	sp, #8
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
    TE = 0;
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <_ZN11TouchGFXHAL10beginFrameEv+0x20>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	801a      	strh	r2, [r3, #0]
    return TouchGFXGeneratedHAL::beginFrame();
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	0018      	movs	r0, r3
 800acfe:	f000 ffe9 	bl	800bcd4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800ad02:	0003      	movs	r3, r0
}
 800ad04:	0018      	movs	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	b002      	add	sp, #8
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200000ac 	.word	0x200000ac

0800ad10 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f000 ffe7 	bl	800bcee <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (TE > 0)
 800ad20:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <_ZN11TouchGFXHAL8endFrameEv+0x2c>)
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	1e5a      	subs	r2, r3, #1
 800ad28:	4193      	sbcs	r3, r2
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <_ZN11TouchGFXHAL8endFrameEv+0x24>
    {
        touchgfx::OSWrappers::signalVSync();
 800ad30:	f000 f8d8 	bl	800aee4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    }
}
 800ad34:	46c0      	nop			; (mov r8, r8)
 800ad36:	46bd      	mov	sp, r7
 800ad38:	b002      	add	sp, #8
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	200000ac 	.word	0x200000ac

0800ad40 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	f000 fffd 	bl	800bd54 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800ad5a:	0003      	movs	r3, r0
}
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	b004      	add	sp, #16
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	0018      	movs	r0, r3
 800ad70:	f000 ff90 	bl	800bc94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800ad74:	46c0      	nop			; (mov r8, r8)
 800ad76:	46bd      	mov	sp, r7
 800ad78:	b002      	add	sp, #8
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	0018      	movs	r0, r3
 800ad88:	f000 ff8c 	bl	800bca4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800ad8c:	46c0      	nop			; (mov r8, r8)
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	b002      	add	sp, #8
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f000 ff88 	bl	800bcb4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800ada4:	46c0      	nop			; (mov r8, r8)
 800ada6:	46bd      	mov	sp, r7
 800ada8:	b002      	add	sp, #8
 800adaa:	bd80      	pop	{r7, pc}

0800adac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	0018      	movs	r0, r3
 800adb8:	f000 ff84 	bl	800bcc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800adbc:	46c0      	nop			; (mov r8, r8)
 800adbe:	46bd      	mov	sp, r7
 800adc0:	b002      	add	sp, #8
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	4a05      	ldr	r2, [pc, #20]	; (800ade4 <_ZN11TouchGFXHALD1Ev+0x20>)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	0018      	movs	r0, r3
 800add6:	f7ff ff1b 	bl	800ac10 <_ZN20TouchGFXGeneratedHALD1Ev>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	0018      	movs	r0, r3
 800adde:	46bd      	mov	sp, r7
 800ade0:	b002      	add	sp, #8
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	080150bc 	.word	0x080150bc

0800ade8 <_ZN11TouchGFXHALD0Ev>:
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0018      	movs	r0, r3
 800adf4:	f7ff ffe6 	bl	800adc4 <_ZN11TouchGFXHALD1Ev>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2178      	movs	r1, #120	; 0x78
 800adfc:	0018      	movs	r0, r3
 800adfe:	f007 ffcc 	bl	8012d9a <_ZdlPvj>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	0018      	movs	r0, r3
 800ae06:	46bd      	mov	sp, r7
 800ae08:	b002      	add	sp, #8
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800ae10:	2200      	movs	r2, #0
 800ae12:	2101      	movs	r1, #1
 800ae14:	2001      	movs	r0, #1
 800ae16:	f7fa f935 	bl	8005084 <osSemaphoreNew>
 800ae1a:	0002      	movs	r2, r0
 800ae1c:	4b10      	ldr	r3, [pc, #64]	; (800ae60 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800ae1e:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800ae20:	4b0f      	ldr	r3, [pc, #60]	; (800ae60 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800ae28:	4b0e      	ldr	r3, [pc, #56]	; (800ae64 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800ae2a:	4a0f      	ldr	r2, [pc, #60]	; (800ae68 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800ae2c:	480f      	ldr	r0, [pc, #60]	; (800ae6c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800ae2e:	2125      	movs	r1, #37	; 0x25
 800ae30:	f007 ffe0 	bl	8012df4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800ae34:	2200      	movs	r2, #0
 800ae36:	2104      	movs	r1, #4
 800ae38:	2001      	movs	r0, #1
 800ae3a:	f7fa fa49 	bl	80052d0 <osMessageQueueNew>
 800ae3e:	0002      	movs	r2, r0
 800ae40:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800ae42:	601a      	str	r2, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d105      	bne.n	800ae58 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 800ae4e:	4a06      	ldr	r2, [pc, #24]	; (800ae68 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800ae50:	4806      	ldr	r0, [pc, #24]	; (800ae6c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800ae52:	2129      	movs	r1, #41	; 0x29
 800ae54:	f007 ffce 	bl	8012df4 <__assert_func>
}
 800ae58:	46c0      	nop			; (mov r8, r8)
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	46c0      	nop			; (mov r8, r8)
 800ae60:	20001a50 	.word	0x20001a50
 800ae64:	08014260 	.word	0x08014260
 800ae68:	08015210 	.word	0x08015210
 800ae6c:	080142ac 	.word	0x080142ac
 800ae70:	20001a54 	.word	0x20001a54
 800ae74:	080142d8 	.word	0x080142d8

0800ae78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	2301      	movs	r3, #1
 800ae82:	425b      	negs	r3, r3
 800ae84:	0019      	movs	r1, r3
 800ae86:	0010      	movs	r0, r2
 800ae88:	f7fa f992 	bl	80051b0 <osSemaphoreAcquire>
}
 800ae8c:	46c0      	nop			; (mov r8, r8)
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	20001a50 	.word	0x20001a50

0800ae98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800ae9c:	4b03      	ldr	r3, [pc, #12]	; (800aeac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	0018      	movs	r0, r3
 800aea2:	f7fa f9d5 	bl	8005250 <osSemaphoreRelease>
}
 800aea6:	46c0      	nop			; (mov r8, r8)
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20001a50 	.word	0x20001a50

0800aeb0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800aeb4:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2100      	movs	r1, #0
 800aeba:	0018      	movs	r0, r3
 800aebc:	f7fa f978 	bl	80051b0 <osSemaphoreAcquire>
}
 800aec0:	46c0      	nop			; (mov r8, r8)
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	20001a50 	.word	0x20001a50

0800aecc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800aed0:	4b03      	ldr	r3, [pc, #12]	; (800aee0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	0018      	movs	r0, r3
 800aed6:	f7fa f9bb 	bl	8005250 <osSemaphoreRelease>
}
 800aeda:	46c0      	nop			; (mov r8, r8)
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	20001a50 	.word	0x20001a50

0800aee4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800aeea:	6818      	ldr	r0, [r3, #0]
 800aeec:	4904      	ldr	r1, [pc, #16]	; (800af00 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800aeee:	2300      	movs	r3, #0
 800aef0:	2200      	movs	r2, #0
 800aef2:	f7fa fa67 	bl	80053c4 <osMessageQueuePut>
}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20001a54 	.word	0x20001a54
 800af00:	20000018 	.word	0x20000018

0800af04 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
/*
* Signal that the rendering of the frame has completed. Used by
* some systems to avoid using any previous vsync.
*/
void OSWrappers::signalRenderingDone()
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
    osMessageQueueReset(vsync_queue);
 800af08:	4b03      	ldr	r3, [pc, #12]	; (800af18 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x14>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	0018      	movs	r0, r3
 800af0e:	f7fa fb0f 	bl	8005530 <osMessageQueueReset>
}
 800af12:	46c0      	nop			; (mov r8, r8)
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20001a54 	.word	0x20001a54

0800af1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	1d39      	adds	r1, r7, #4
 800af28:	2300      	movs	r3, #0
 800af2a:	2200      	movs	r2, #0
 800af2c:	f7fa faa6 	bl	800547c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	2301      	movs	r3, #1
 800af36:	425b      	negs	r3, r3
 800af38:	1d39      	adds	r1, r7, #4
 800af3a:	2200      	movs	r2, #0
 800af3c:	f7fa fa9e 	bl	800547c <osMessageQueueGet>
}
 800af40:	46c0      	nop			; (mov r8, r8)
 800af42:	46bd      	mov	sp, r7
 800af44:	b002      	add	sp, #8
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20001a54 	.word	0x20001a54

0800af4c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
        : color(0)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]
    }
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	0018      	movs	r0, r3
 800af5e:	46bd      	mov	sp, r7
 800af60:	b002      	add	sp, #8
 800af62:	bd80      	pop	{r7, pc}

0800af64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800af6c:	4b03      	ldr	r3, [pc, #12]	; (800af7c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x18>)
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]
    }
 800af72:	46c0      	nop			; (mov r8, r8)
 800af74:	46bd      	mov	sp, r7
 800af76:	b002      	add	sp, #8
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	46c0      	nop			; (mov r8, r8)
 800af7c:	20003548 	.word	0x20003548

0800af80 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800af8e:	4a0a      	ldr	r2, [pc, #40]	; (800afb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x38>)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	605a      	str	r2, [r3, #4]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	609a      	str	r2, [r3, #8]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	611a      	str	r2, [r3, #16]
    {
    }
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	0018      	movs	r0, r3
 800afb0:	46bd      	mov	sp, r7
 800afb2:	b004      	add	sp, #16
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	08015380 	.word	0x08015380

0800afbc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
    {
 800afc4:	4a03      	ldr	r2, [pc, #12]	; (800afd4 <_ZN8touchgfx7MVPHeapD1Ev+0x18>)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	601a      	str	r2, [r3, #0]
    }
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	0018      	movs	r0, r3
 800afce:	46bd      	mov	sp, r7
 800afd0:	b002      	add	sp, #8
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	08015380 	.word	0x08015380

0800afd8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
    }
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	0018      	movs	r0, r3
 800afe4:	f7ff ffea 	bl	800afbc <_ZN8touchgfx7MVPHeapD1Ev>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2114      	movs	r1, #20
 800afec:	0018      	movs	r0, r3
 800afee:	f007 fed4 	bl	8012d9a <_ZdlPvj>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	0018      	movs	r0, r3
 800aff6:	46bd      	mov	sp, r7
 800aff8:	b002      	add	sp, #8
 800affa:	bd80      	pop	{r7, pc}

0800affc <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
    {
 800b004:	4a03      	ldr	r2, [pc, #12]	; (800b014 <_ZN8touchgfx3LCDD1Ev+0x18>)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	601a      	str	r2, [r3, #0]
    }
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	0018      	movs	r0, r3
 800b00e:	46bd      	mov	sp, r7
 800b010:	b002      	add	sp, #8
 800b012:	bd80      	pop	{r7, pc}
 800b014:	08016680 	.word	0x08016680

0800b018 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
    }
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	0018      	movs	r0, r3
 800b024:	f7ff ffea 	bl	800affc <_ZN8touchgfx3LCDD1Ev>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2108      	movs	r1, #8
 800b02c:	0018      	movs	r0, r3
 800b02e:	f007 feb4 	bl	8012d9a <_ZdlPvj>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	0018      	movs	r0, r3
 800b036:	46bd      	mov	sp, r7
 800b038:	b002      	add	sp, #8
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
    {
 800b044:	4a03      	ldr	r2, [pc, #12]	; (800b054 <_ZN8touchgfx9DMA_QueueD1Ev+0x18>)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	601a      	str	r2, [r3, #0]
    }
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	0018      	movs	r0, r3
 800b04e:	46bd      	mov	sp, r7
 800b050:	b002      	add	sp, #8
 800b052:	bd80      	pop	{r7, pc}
 800b054:	0801535c 	.word	0x0801535c

0800b058 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
    }
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	0018      	movs	r0, r3
 800b064:	f7ff ffea 	bl	800b03c <_ZN8touchgfx9DMA_QueueD1Ev>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2104      	movs	r1, #4
 800b06c:	0018      	movs	r0, r3
 800b06e:	f007 fe94 	bl	8012d9a <_ZdlPvj>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	0018      	movs	r0, r3
 800b076:	46bd      	mov	sp, r7
 800b078:	b002      	add	sp, #8
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
    {
    }
 800b084:	46c0      	nop			; (mov r8, r8)
 800b086:	46bd      	mov	sp, r7
 800b088:	b002      	add	sp, #8
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800b094:	2300      	movs	r3, #0
    }
 800b096:	0018      	movs	r0, r3
 800b098:	46bd      	mov	sp, r7
 800b09a:	b002      	add	sp, #8
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
    {
 800b0a8:	4a03      	ldr	r2, [pc, #12]	; (800b0b8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x18>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	601a      	str	r2, [r3, #0]
    }
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b002      	add	sp, #8
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	0801638c 	.word	0x0801638c

0800b0bc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
    }
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	f7ff ffea 	bl	800b0a0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	210c      	movs	r1, #12
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f007 fe62 	bl	8012d9a <_ZdlPvj>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	0018      	movs	r0, r3
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b002      	add	sp, #8
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800b0ea:	4a08      	ldr	r2, [pc, #32]	; (800b10c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x2c>)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	605a      	str	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	721a      	strb	r2, [r3, #8]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	725a      	strb	r2, [r3, #9]
    {
    }
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	0018      	movs	r0, r3
 800b106:	46bd      	mov	sp, r7
 800b108:	b002      	add	sp, #8
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	0801638c 	.word	0x0801638c

0800b110 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	801a      	strh	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	805a      	strh	r2, [r3, #2]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	809a      	strh	r2, [r3, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	80da      	strh	r2, [r3, #6]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	811a      	strh	r2, [r3, #8]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	815a      	strh	r2, [r3, #10]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	819a      	strh	r2, [r3, #12]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	739a      	strb	r2, [r3, #14]
        {
        }
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	0018      	movs	r0, r3
 800b14c:	46bd      	mov	sp, r7
 800b14e:	b002      	add	sp, #8
 800b150:	bd80      	pop	{r7, pc}

0800b152 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	0018      	movs	r0, r3
 800b15e:	f7ff ffd7 	bl	800b110 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	611a      	str	r2, [r3, #16]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	829a      	strh	r2, [r3, #20]
    {
    }
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	0018      	movs	r0, r3
 800b172:	46bd      	mov	sp, r7
 800b174:	b002      	add	sp, #8
 800b176:	bd80      	pop	{r7, pc}

0800b178 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
          useDMAAcceleration(true)
 800b186:	4a4b      	ldr	r2, [pc, #300]	; (800b2b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	605a      	str	r2, [r3, #4]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	609a      	str	r2, [r3, #8]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	60da      	str	r2, [r3, #12]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	611a      	str	r2, [r3, #16]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	615a      	str	r2, [r3, #20]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	619a      	str	r2, [r3, #24]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	331c      	adds	r3, #28
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f7ff ffcc 	bl	800b152 <_ZN8touchgfx8GesturesC1Ev>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	63da      	str	r2, [r3, #60]	; 0x3c
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	641a      	str	r2, [r3, #64]	; 0x40
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	645a      	str	r2, [r3, #68]	; 0x44
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2248      	movs	r2, #72	; 0x48
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	5499      	strb	r1, [r3, r2]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2249      	movs	r2, #73	; 0x49
 800b1de:	2101      	movs	r1, #1
 800b1e0:	5499      	strb	r1, [r3, r2]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	224a      	movs	r2, #74	; 0x4a
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	5499      	strb	r1, [r3, r2]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	64da      	str	r2, [r3, #76]	; 0x4c
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3350      	adds	r3, #80	; 0x50
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7fe f83e 	bl	8009276 <_ZN8touchgfx4RectC1Ev>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2264      	movs	r2, #100	; 0x64
 800b1fe:	2101      	movs	r1, #1
 800b200:	5499      	strb	r1, [r3, r2]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2265      	movs	r2, #101	; 0x65
 800b206:	2100      	movs	r1, #0
 800b208:	5499      	strb	r1, [r3, r2]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2266      	movs	r2, #102	; 0x66
 800b20e:	2100      	movs	r1, #0
 800b210:	5499      	strb	r1, [r3, r2]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2267      	movs	r2, #103	; 0x67
 800b216:	2101      	movs	r1, #1
 800b218:	5499      	strb	r1, [r3, r2]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2268      	movs	r2, #104	; 0x68
 800b21e:	2100      	movs	r1, #0
 800b220:	5499      	strb	r1, [r3, r2]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2269      	movs	r2, #105	; 0x69
 800b226:	2100      	movs	r1, #0
 800b228:	5499      	strb	r1, [r3, r2]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	226a      	movs	r2, #106	; 0x6a
 800b22e:	2100      	movs	r1, #0
 800b230:	5499      	strb	r1, [r3, r2]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	226b      	movs	r2, #107	; 0x6b
 800b236:	2100      	movs	r1, #0
 800b238:	5499      	strb	r1, [r3, r2]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	226c      	movs	r2, #108	; 0x6c
 800b23e:	2100      	movs	r1, #0
 800b240:	5499      	strb	r1, [r3, r2]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	671a      	str	r2, [r3, #112]	; 0x70
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2275      	movs	r2, #117	; 0x75
 800b24c:	2100      	movs	r1, #0
 800b24e:	5499      	strb	r1, [r3, r2]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2276      	movs	r2, #118	; 0x76
 800b254:	2100      	movs	r1, #0
 800b256:	5499      	strb	r1, [r3, r2]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2277      	movs	r2, #119	; 0x77
 800b25c:	2101      	movs	r1, #1
 800b25e:	5499      	strb	r1, [r3, r2]
        instance = this;
 800b260:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	601a      	str	r2, [r3, #0]
        DISPLAY_WIDTH = width;
 800b266:	4b15      	ldr	r3, [pc, #84]	; (800b2bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800b268:	2118      	movs	r1, #24
 800b26a:	187a      	adds	r2, r7, r1
 800b26c:	8812      	ldrh	r2, [r2, #0]
 800b26e:	801a      	strh	r2, [r3, #0]
        DISPLAY_HEIGHT = height;
 800b270:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 800b272:	201c      	movs	r0, #28
 800b274:	183a      	adds	r2, r7, r0
 800b276:	8812      	ldrh	r2, [r2, #0]
 800b278:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800b27a:	4b12      	ldr	r3, [pc, #72]	; (800b2c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800b280:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800b282:	881a      	ldrh	r2, [r3, #0]
 800b284:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 800b286:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800b288:	4b0d      	ldr	r3, [pc, #52]	; (800b2c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 800b28a:	881a      	ldrh	r2, [r3, #0]
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x154>)
 800b28e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800b290:	187a      	adds	r2, r7, r1
 800b292:	183b      	adds	r3, r7, r0
 800b294:	8812      	ldrh	r2, [r2, #0]
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d301      	bcc.n	800b2a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>
 800b29c:	2100      	movs	r1, #0
 800b29e:	e000      	b.n	800b2a2 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12a>
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2234      	movs	r2, #52	; 0x34
 800b2a6:	5499      	strb	r1, [r3, r2]
    }
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	b004      	add	sp, #16
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	46c0      	nop			; (mov r8, r8)
 800b2b4:	08015f44 	.word	0x08015f44
 800b2b8:	200034cc 	.word	0x200034cc
 800b2bc:	200034c0 	.word	0x200034c0
 800b2c0:	200034c2 	.word	0x200034c2
 800b2c4:	200034c4 	.word	0x200034c4
 800b2c8:	200034c6 	.word	0x200034c6
 800b2cc:	200034c8 	.word	0x200034c8

0800b2d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f7fd fb61 	bl	80089a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b002      	add	sp, #8
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800b2ec:	b590      	push	{r4, r7, lr}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af02      	add	r7, sp, #8
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	683c      	ldr	r4, [r7, #0]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	0023      	movs	r3, r4
 800b308:	f7ff fe3a 	bl	800af80 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800b30c:	4a03      	ldr	r2, [pc, #12]	; (800b31c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	601a      	str	r2, [r3, #0]
    {

    }
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	0018      	movs	r0, r3
 800b316:	46bd      	mov	sp, r7
 800b318:	b005      	add	sp, #20
 800b31a:	bd90      	pop	{r4, r7, pc}
 800b31c:	08015348 	.word	0x08015348

0800b320 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <__tcf_0+0x10>)
 800b326:	0018      	movs	r0, r3
 800b328:	f000 fa0c 	bl	800b744 <_ZN12FrontendHeapD1Ev>
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20001a58 	.word	0x20001a58

0800b334 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800b334:	b580      	push	{r7, lr}
 800b336:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800b338:	4b13      	ldr	r3, [pc, #76]	; (800b388 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f3bf 8f5b 	dmb	ish
 800b340:	b2db      	uxtb	r3, r3
 800b342:	001a      	movs	r2, r3
 800b344:	2301      	movs	r3, #1
 800b346:	4013      	ands	r3, r2
 800b348:	425a      	negs	r2, r3
 800b34a:	4153      	adcs	r3, r2
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d015      	beq.n	800b37e <_ZN12FrontendHeap11getInstanceEv+0x4a>
 800b352:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800b354:	0018      	movs	r0, r3
 800b356:	f007 fd24 	bl	8012da2 <__cxa_guard_acquire>
 800b35a:	0003      	movs	r3, r0
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	4193      	sbcs	r3, r2
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00b      	beq.n	800b37e <_ZN12FrontendHeap11getInstanceEv+0x4a>
 800b366:	4b09      	ldr	r3, [pc, #36]	; (800b38c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800b368:	0018      	movs	r0, r3
 800b36a:	f000 f86d 	bl	800b448 <_ZN12FrontendHeapC1Ev>
 800b36e:	4b06      	ldr	r3, [pc, #24]	; (800b388 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800b370:	0018      	movs	r0, r3
 800b372:	f007 fd23 	bl	8012dbc <__cxa_guard_release>
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <_ZN12FrontendHeap11getInstanceEv+0x5c>)
 800b378:	0018      	movs	r0, r3
 800b37a:	f007 fd59 	bl	8012e30 <atexit>
        return instance;
 800b37e:	4b03      	ldr	r3, [pc, #12]	; (800b38c <_ZN12FrontendHeap11getInstanceEv+0x58>)
    }
 800b380:	0018      	movs	r0, r3
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	46c0      	nop			; (mov r8, r8)
 800b388:	20001cdc 	.word	0x20001cdc
 800b38c:	20001a58 	.word	0x20001a58
 800b390:	0800b321 	.word	0x0800b321

0800b394 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	4a05      	ldr	r2, [pc, #20]	; (800b3b4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f7ff fe09 	bl	800afbc <_ZN8touchgfx7MVPHeapD1Ev>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	b002      	add	sp, #8
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	08015348 	.word	0x08015348

0800b3b8 <_ZN16FrontendHeapBaseD0Ev>:
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f7ff ffe6 	bl	800b394 <_ZN16FrontendHeapBaseD1Ev>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2114      	movs	r1, #20
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	f007 fce4 	bl	8012d9a <_ZdlPvj>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b002      	add	sp, #8
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	f001 f830 	bl	800c44c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800b3ec:	4a03      	ldr	r2, [pc, #12]	; (800b3fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	08015314 	.word	0x08015314

0800b400 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	0018      	movs	r0, r3
 800b40c:	f001 f81e 	bl	800c44c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800b410:	4a03      	ldr	r2, [pc, #12]	; (800b420 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	0018      	movs	r0, r3
 800b41a:	46bd      	mov	sp, r7
 800b41c:	b002      	add	sp, #8
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	080152e0 	.word	0x080152e0

0800b424 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	0018      	movs	r0, r3
 800b430:	f001 f80c 	bl	800c44c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800b434:	4a03      	ldr	r2, [pc, #12]	; (800b444 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	0018      	movs	r0, r3
 800b43e:	46bd      	mov	sp, r7
 800b440:	b002      	add	sp, #8
 800b442:	bd80      	pop	{r7, pc}
 800b444:	080152ac 	.word	0x080152ac

0800b448 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800b448:	b590      	push	{r4, r7, lr}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af02      	add	r7, sp, #8
 800b44e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3314      	adds	r3, #20
 800b456:	0019      	movs	r1, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	332c      	adds	r3, #44	; 0x2c
 800b45c:	001a      	movs	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3315      	adds	r3, #21
 800b462:	33ff      	adds	r3, #255	; 0xff
 800b464:	001c      	movs	r4, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	332d      	adds	r3, #45	; 0x2d
 800b46a:	33ff      	adds	r3, #255	; 0xff
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	0023      	movs	r3, r4
 800b470:	f7ff ff3c 	bl	800b2ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800b474:	4a18      	ldr	r2, [pc, #96]	; (800b4d8 <_ZN12FrontendHeapC1Ev+0x90>)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3314      	adds	r3, #20
 800b47e:	0018      	movs	r0, r3
 800b480:	f7ff ffac 	bl	800b3dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	332c      	adds	r3, #44	; 0x2c
 800b488:	0018      	movs	r0, r3
 800b48a:	f7ff ffb9 	bl	800b400 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3315      	adds	r3, #21
 800b492:	33ff      	adds	r3, #255	; 0xff
 800b494:	0018      	movs	r0, r3
 800b496:	f7ff ffc5 	bl	800b424 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3329      	adds	r3, #41	; 0x29
 800b49e:	33ff      	adds	r3, #255	; 0xff
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f7fe ffaf 	bl	800a404 <_ZN5ModelC1Ev>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	332d      	adds	r3, #45	; 0x2d
 800b4aa:	33ff      	adds	r3, #255	; 0xff
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3329      	adds	r3, #41	; 0x29
 800b4b2:	33ff      	adds	r3, #255	; 0xff
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	0019      	movs	r1, r3
 800b4b8:	f7fe ff8e 	bl	800a3d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	332d      	adds	r3, #45	; 0x2d
 800b4c2:	33ff      	adds	r3, #255	; 0xff
 800b4c4:	0019      	movs	r1, r3
 800b4c6:	0010      	movs	r0, r2
 800b4c8:	f7ff ff02 	bl	800b2d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	b003      	add	sp, #12
 800b4d4:	bd90      	pop	{r4, r7, pc}
 800b4d6:	46c0      	nop			; (mov r8, r8)
 800b4d8:	08015298 	.word	0x08015298

0800b4dc <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	3318      	adds	r3, #24
 800b4e8:	0018      	movs	r0, r3
 800b4ea:	f7ff fd2f 	bl	800af4c <_ZN8touchgfx9colortypeC1Ev>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	b002      	add	sp, #8
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZN8touchgfx5NoDMAC1Ev>:
 * @see DMA_Interface
 */
class NoDMA : public DMA_Interface
{
public:
    NoDMA()
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
        : DMA_Interface(q), q(&b, 1)
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	330c      	adds	r3, #12
 800b506:	0019      	movs	r1, r3
 800b508:	0010      	movs	r0, r2
 800b50a:	f7ff fde9 	bl	800b0e0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800b50e:	4a0b      	ldr	r2, [pc, #44]	; (800b53c <_ZN8touchgfx5NoDMAC1Ev+0x44>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	330c      	adds	r3, #12
 800b518:	0018      	movs	r0, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3320      	adds	r3, #32
 800b51e:	2201      	movs	r2, #1
 800b520:	0019      	movs	r1, r3
 800b522:	f002 f8f3 	bl	800d70c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3320      	adds	r3, #32
 800b52a:	0018      	movs	r0, r3
 800b52c:	f7ff ffd6 	bl	800b4dc <_ZN8touchgfx6BlitOpC1Ev>
    {
    }
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	0018      	movs	r0, r3
 800b534:	46bd      	mov	sp, r7
 800b536:	b002      	add	sp, #8
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	08015248 	.word	0x08015248

0800b540 <_ZN8touchgfx5NoDMA11getBlitCapsEv>:
    /**
     * No blit operations supported by this DMA implementation.
     *
     * @return Zero (no blit ops supported).
     */
    virtual BlitOperations getBlitCaps()
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
    {
        return static_cast<BlitOperations>(0);
 800b548:	2300      	movs	r3, #0
    }
 800b54a:	0018      	movs	r0, r3
 800b54c:	46bd      	mov	sp, r7
 800b54e:	b002      	add	sp, #8
 800b550:	bd80      	pop	{r7, pc}
	...

0800b554 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataCopy(const BlitOp& blitOp)
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x18>)
 800b560:	4a03      	ldr	r2, [pc, #12]	; (800b570 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x1c>)
 800b562:	4804      	ldr	r0, [pc, #16]	; (800b574 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x20>)
 800b564:	213c      	movs	r1, #60	; 0x3c
 800b566:	f007 fc45 	bl	8012df4 <__assert_func>
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	0801431c 	.word	0x0801431c
 800b570:	080153d0 	.word	0x080153d0
 800b574:	08014340 	.word	0x08014340

0800b578 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataFill(const BlitOp& blitOp)
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 800b582:	4b03      	ldr	r3, [pc, #12]	; (800b590 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x18>)
 800b584:	4a03      	ldr	r2, [pc, #12]	; (800b594 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x1c>)
 800b586:	4804      	ldr	r0, [pc, #16]	; (800b598 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x20>)
 800b588:	2146      	movs	r1, #70	; 0x46
 800b58a:	f007 fc33 	bl	8012df4 <__assert_func>
 800b58e:	46c0      	nop			; (mov r8, r8)
 800b590:	0801431c 	.word	0x0801431c
 800b594:	08015388 	.word	0x08015388
 800b598:	08014340 	.word	0x08014340

0800b59c <_ZN8touchgfx5NoDMA18signalDMAInterruptEv>:
    }

    /** Does nothing. */
    virtual void signalDMAInterrupt()
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
    {
    }
 800b5a4:	46c0      	nop			; (mov r8, r8)
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	b002      	add	sp, #8
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <_ZN8touchgfx5NoDMA5flushEv>:

    /**
     * Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
    {
    }
 800b5b4:	46c0      	nop			; (mov r8, r8)
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	b002      	add	sp, #8
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	683c      	ldr	r4, [r7, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	68b9      	ldr	r1, [r7, #8]
 800b5d2:	2324      	movs	r3, #36	; 0x24
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	2320      	movs	r3, #32
 800b5dc:	18fb      	adds	r3, r7, r3
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	0023      	movs	r3, r4
 800b5e4:	f7ff fdc8 	bl	800b178 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800b5e8:	4a03      	ldr	r2, [pc, #12]	; (800b5f8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	601a      	str	r2, [r3, #0]
    }
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	0018      	movs	r0, r3
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	b005      	add	sp, #20
 800b5f6:	bd90      	pop	{r4, r7, pc}
 800b5f8:	0801544c 	.word	0x0801544c

0800b5fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af02      	add	r7, sp, #8
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	683c      	ldr	r4, [r7, #0]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	2324      	movs	r3, #36	; 0x24
 800b614:	18fb      	adds	r3, r7, r3
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	2320      	movs	r3, #32
 800b61c:	18fb      	adds	r3, r7, r3
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	0023      	movs	r3, r4
 800b624:	f7ff ffca 	bl	800b5bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800b628:	4a03      	ldr	r2, [pc, #12]	; (800b638 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	601a      	str	r2, [r3, #0]
    }
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	0018      	movs	r0, r3
 800b632:	46bd      	mov	sp, r7
 800b634:	b005      	add	sp, #20
 800b636:	bd90      	pop	{r4, r7, pc}
 800b638:	080150bc 	.word	0x080150bc

0800b63c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	4a03      	ldr	r2, [pc, #12]	; (800b654 <_ZN8touchgfx15TouchControllerC1Ev+0x18>)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	0018      	movs	r0, r3
 800b64e:	46bd      	mov	sp, r7
 800b650:	b002      	add	sp, #8
 800b652:	bd80      	pop	{r7, pc}
 800b654:	08015020 	.word	0x08015020

0800b658 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	0018      	movs	r0, r3
 800b664:	f7ff ffea 	bl	800b63c <_ZN8touchgfx15TouchControllerC1Ev>
 800b668:	4a03      	ldr	r2, [pc, #12]	; (800b678 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	0018      	movs	r0, r3
 800b672:	46bd      	mov	sp, r7
 800b674:	b002      	add	sp, #8
 800b676:	bd80      	pop	{r7, pc}
 800b678:	08015008 	.word	0x08015008

0800b67c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b085      	sub	sp, #20
 800b680:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800b682:	f7fe fc4f 	bl	8009f24 <_ZN14BitmapDatabase11getInstanceEv>
 800b686:	0004      	movs	r4, r0
 800b688:	f7fe fc54 	bl	8009f34 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800b68c:	0003      	movs	r3, r0
 800b68e:	0019      	movs	r1, r3
 800b690:	2300      	movs	r3, #0
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	2300      	movs	r3, #0
 800b696:	2200      	movs	r2, #0
 800b698:	0020      	movs	r0, r4
 800b69a:	f005 fb4f 	bl	8010d3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800b69e:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <touchgfx_init+0x50>)
 800b6a0:	0018      	movs	r0, r3
 800b6a2:	f7ff fc5f 	bl	800af64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f7fe fda8 	bl	800a1fc <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 800b6ac:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <touchgfx_init+0x54>)
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	f005 fa90 	bl	8010bd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800b6b4:	f7ff fe3e 	bl	800b334 <_ZN12FrontendHeap11getInstanceEv>
 800b6b8:	0003      	movs	r3, r0
 800b6ba:	607b      	str	r3, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 800b6bc:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <touchgfx_init+0x58>)
 800b6be:	0018      	movs	r0, r3
 800b6c0:	f7ff fad6 	bl	800ac70 <_ZN11TouchGFXHAL10initializeEv>
}
 800b6c4:	46c0      	nop			; (mov r8, r8)
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	b003      	add	sp, #12
 800b6ca:	bd90      	pop	{r4, r7, pc}
 800b6cc:	20001d9c 	.word	0x20001d9c
 800b6d0:	2000001c 	.word	0x2000001c
 800b6d4:	20001da0 	.word	0x20001da0

0800b6d8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 800b6dc:	4b03      	ldr	r3, [pc, #12]	; (800b6ec <touchgfx_taskEntry+0x14>)
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f001 f999 	bl	800ca16 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800b6e4:	46c0      	nop			; (mov r8, r8)
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	20001da0 	.word	0x20001da0

0800b6f0 <_ZN8touchgfx5NoDMAD1Ev>:
class NoDMA : public DMA_Interface
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	4a08      	ldr	r2, [pc, #32]	; (800b71c <_ZN8touchgfx5NoDMAD1Ev+0x2c>)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	330c      	adds	r3, #12
 800b702:	0018      	movs	r0, r3
 800b704:	f000 f93a 	bl	800b97c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	0018      	movs	r0, r3
 800b70c:	f7ff fcc8 	bl	800b0a0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	0018      	movs	r0, r3
 800b714:	46bd      	mov	sp, r7
 800b716:	b002      	add	sp, #8
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	08015248 	.word	0x08015248

0800b720 <_ZN8touchgfx5NoDMAD0Ev>:
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	0018      	movs	r0, r3
 800b72c:	f7ff ffe0 	bl	800b6f0 <_ZN8touchgfx5NoDMAD1Ev>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2140      	movs	r1, #64	; 0x40
 800b734:	0018      	movs	r0, r3
 800b736:	f007 fb30 	bl	8012d9a <_ZdlPvj>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	0018      	movs	r0, r3
 800b73e:	46bd      	mov	sp, r7
 800b740:	b002      	add	sp, #8
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	4a10      	ldr	r2, [pc, #64]	; (800b790 <_ZN12FrontendHeapD1Ev+0x4c>)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	332d      	adds	r3, #45	; 0x2d
 800b756:	33ff      	adds	r3, #255	; 0xff
 800b758:	0018      	movs	r0, r3
 800b75a:	f7fe fe03 	bl	800a364 <_ZN19FrontendApplicationD1Ev>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3315      	adds	r3, #21
 800b762:	33ff      	adds	r3, #255	; 0xff
 800b764:	0018      	movs	r0, r3
 800b766:	f000 f829 	bl	800b7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	332c      	adds	r3, #44	; 0x2c
 800b76e:	0018      	movs	r0, r3
 800b770:	f000 f848 	bl	800b804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3314      	adds	r3, #20
 800b778:	0018      	movs	r0, r3
 800b77a:	f000 f867 	bl	800b84c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	0018      	movs	r0, r3
 800b782:	f7ff fe07 	bl	800b394 <_ZN16FrontendHeapBaseD1Ev>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	0018      	movs	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b002      	add	sp, #8
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	08015298 	.word	0x08015298

0800b794 <_ZN12FrontendHeapD0Ev>:
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	0018      	movs	r0, r3
 800b7a0:	f7ff ffd0 	bl	800b744 <_ZN12FrontendHeapD1Ev>
 800b7a4:	23a1      	movs	r3, #161	; 0xa1
 800b7a6:	009a      	lsls	r2, r3, #2
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	0011      	movs	r1, r2
 800b7ac:	0018      	movs	r0, r3
 800b7ae:	f007 faf4 	bl	8012d9a <_ZdlPvj>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	b002      	add	sp, #8
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	4a05      	ldr	r2, [pc, #20]	; (800b7dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	f000 fe3b 	bl	800c448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	0018      	movs	r0, r3
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b002      	add	sp, #8
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	080152ac 	.word	0x080152ac

0800b7e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	f7ff ffe6 	bl	800b7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2114      	movs	r1, #20
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f007 fad0 	bl	8012d9a <_ZdlPvj>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	0018      	movs	r0, r3
 800b7fe:	46bd      	mov	sp, r7
 800b800:	b002      	add	sp, #8
 800b802:	bd80      	pop	{r7, pc}

0800b804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	4a05      	ldr	r2, [pc, #20]	; (800b824 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	0018      	movs	r0, r3
 800b816:	f000 fe17 	bl	800c448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	0018      	movs	r0, r3
 800b81e:	46bd      	mov	sp, r7
 800b820:	b002      	add	sp, #8
 800b822:	bd80      	pop	{r7, pc}
 800b824:	080152e0 	.word	0x080152e0

0800b828 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	0018      	movs	r0, r3
 800b834:	f7ff ffe6 	bl	800b804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	21e8      	movs	r1, #232	; 0xe8
 800b83c:	0018      	movs	r0, r3
 800b83e:	f007 faac 	bl	8012d9a <_ZdlPvj>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	0018      	movs	r0, r3
 800b846:	46bd      	mov	sp, r7
 800b848:	b002      	add	sp, #8
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	4a05      	ldr	r2, [pc, #20]	; (800b86c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	0018      	movs	r0, r3
 800b85e:	f000 fdf3 	bl	800c448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	0018      	movs	r0, r3
 800b866:	46bd      	mov	sp, r7
 800b868:	b002      	add	sp, #8
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	08015314 	.word	0x08015314

0800b870 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	0018      	movs	r0, r3
 800b87c:	f7ff ffe6 	bl	800b84c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2118      	movs	r1, #24
 800b884:	0018      	movs	r0, r3
 800b886:	f007 fa88 	bl	8012d9a <_ZdlPvj>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	0018      	movs	r0, r3
 800b88e:	46bd      	mov	sp, r7
 800b890:	b002      	add	sp, #8
 800b892:	bd80      	pop	{r7, pc}

0800b894 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	4a05      	ldr	r2, [pc, #20]	; (800b8b4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	f7ff fba9 	bl	800affc <_ZN8touchgfx3LCDD1Ev>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	b002      	add	sp, #8
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	0801753c 	.word	0x0801753c

0800b8b8 <_ZN8touchgfx8LCD16bppD0Ev>:
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f7ff ffe6 	bl	800b894 <_ZN8touchgfx8LCD16bppD1Ev>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2178      	movs	r1, #120	; 0x78
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	f007 fa64 	bl	8012d9a <_ZdlPvj>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	b002      	add	sp, #8
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <_Z41__static_initialization_and_destruction_0ii>:
 800b8dc:	b590      	push	{r4, r7, lr}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d11b      	bne.n	800b924 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	4a1d      	ldr	r2, [pc, #116]	; (800b964 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d117      	bne.n	800b924 <_Z41__static_initialization_and_destruction_0ii+0x48>
static STM32TouchController tc;
 800b8f4:	4b1c      	ldr	r3, [pc, #112]	; (800b968 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800b8f6:	0018      	movs	r0, r3
 800b8f8:	f7ff feae 	bl	800b658 <_ZN20STM32TouchControllerC1Ev>
static NoDMA dma;
 800b8fc:	4b1b      	ldr	r3, [pc, #108]	; (800b96c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800b8fe:	0018      	movs	r0, r3
 800b900:	f7ff fdfa 	bl	800b4f8 <_ZN8touchgfx5NoDMAC1Ev>
static LCD16bpp display;
 800b904:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800b906:	0018      	movs	r0, r3
 800b908:	f006 f812 	bl	8011930 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800b90c:	4c16      	ldr	r4, [pc, #88]	; (800b968 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800b90e:	4a18      	ldr	r2, [pc, #96]	; (800b970 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800b910:	4916      	ldr	r1, [pc, #88]	; (800b96c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800b912:	4818      	ldr	r0, [pc, #96]	; (800b974 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800b914:	23a0      	movs	r3, #160	; 0xa0
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	23f0      	movs	r3, #240	; 0xf0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	0023      	movs	r3, r4
 800b920:	f7ff fe6c 	bl	800b5fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d117      	bne.n	800b95a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	4a0d      	ldr	r2, [pc, #52]	; (800b964 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d113      	bne.n	800b95a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800b932:	4b10      	ldr	r3, [pc, #64]	; (800b974 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800b934:	0018      	movs	r0, r3
 800b936:	f7ff fa45 	bl	800adc4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800b93a:	4b0f      	ldr	r3, [pc, #60]	; (800b978 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800b93c:	0018      	movs	r0, r3
 800b93e:	f7fc faf7 	bl	8007f30 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800b942:	4b0b      	ldr	r3, [pc, #44]	; (800b970 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800b944:	0018      	movs	r0, r3
 800b946:	f7ff ffa5 	bl	800b894 <_ZN8touchgfx8LCD16bppD1Ev>
static NoDMA dma;
 800b94a:	4b08      	ldr	r3, [pc, #32]	; (800b96c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800b94c:	0018      	movs	r0, r3
 800b94e:	f7ff fecf 	bl	800b6f0 <_ZN8touchgfx5NoDMAD1Ev>
static STM32TouchController tc;
 800b952:	4b05      	ldr	r3, [pc, #20]	; (800b968 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800b954:	0018      	movs	r0, r3
 800b956:	f7fe ff85 	bl	800a864 <_ZN20STM32TouchControllerD1Ev>
}
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	46bd      	mov	sp, r7
 800b95e:	b003      	add	sp, #12
 800b960:	bd90      	pop	{r4, r7, pc}
 800b962:	46c0      	nop			; (mov r8, r8)
 800b964:	0000ffff 	.word	0x0000ffff
 800b968:	20001ce0 	.word	0x20001ce0
 800b96c:	20001ce4 	.word	0x20001ce4
 800b970:	20001d24 	.word	0x20001d24
 800b974:	20001da0 	.word	0x20001da0
 800b978:	2000001c 	.word	0x2000001c

0800b97c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	4a05      	ldr	r2, [pc, #20]	; (800b99c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	0018      	movs	r0, r3
 800b98e:	f7ff fb55 	bl	800b03c <_ZN8touchgfx9DMA_QueueD1Ev>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	0018      	movs	r0, r3
 800b996:	46bd      	mov	sp, r7
 800b998:	b002      	add	sp, #8
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	080163dc 	.word	0x080163dc

0800b9a0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f7ff ffe6 	bl	800b97c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2114      	movs	r1, #20
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f007 f9f0 	bl	8012d9a <_ZdlPvj>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	0018      	movs	r0, r3
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	b002      	add	sp, #8
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800b9cc:	2301      	movs	r3, #1
    }
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	b002      	add	sp, #8
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800b9de:	230c      	movs	r3, #12
    }
 800b9e0:	0018      	movs	r0, r3
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	b002      	add	sp, #8
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	000a      	movs	r2, r1
 800b9f2:	1cbb      	adds	r3, r7, #2
 800b9f4:	801a      	strh	r2, [r3, #0]
    {
        return &stBlocks[index];
 800b9f6:	1cbb      	adds	r3, r7, #2
 800b9f8:	881a      	ldrh	r2, [r3, #0]
 800b9fa:	0013      	movs	r3, r2
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	189b      	adds	r3, r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	3308      	adds	r3, #8
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	18d3      	adds	r3, r2, r3
    }
 800ba08:	0018      	movs	r0, r3
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	b002      	add	sp, #8
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	000a      	movs	r2, r1
 800ba1a:	1cbb      	adds	r3, r7, #2
 800ba1c:	801a      	strh	r2, [r3, #0]
    {
        return &stBlocks[index];
 800ba1e:	1cbb      	adds	r3, r7, #2
 800ba20:	881a      	ldrh	r2, [r3, #0]
 800ba22:	0013      	movs	r3, r2
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	189b      	adds	r3, r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	18d3      	adds	r3, r2, r3
    }
 800ba30:	0018      	movs	r0, r3
 800ba32:	46bd      	mov	sp, r7
 800ba34:	b002      	add	sp, #8
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800ba40:	2301      	movs	r3, #1
    }
 800ba42:	0018      	movs	r0, r3
 800ba44:	46bd      	mov	sp, r7
 800ba46:	b002      	add	sp, #8
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b082      	sub	sp, #8
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800ba52:	23e0      	movs	r3, #224	; 0xe0
    }
 800ba54:	0018      	movs	r0, r3
 800ba56:	46bd      	mov	sp, r7
 800ba58:	b002      	add	sp, #8
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	000a      	movs	r2, r1
 800ba66:	1cbb      	adds	r3, r7, #2
 800ba68:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800ba6a:	1cbb      	adds	r3, r7, #2
 800ba6c:	881a      	ldrh	r2, [r3, #0]
 800ba6e:	0013      	movs	r3, r2
 800ba70:	00db      	lsls	r3, r3, #3
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	015b      	lsls	r3, r3, #5
 800ba76:	3308      	adds	r3, #8
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	18d3      	adds	r3, r2, r3
    }
 800ba7c:	0018      	movs	r0, r3
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b002      	add	sp, #8
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	000a      	movs	r2, r1
 800ba8e:	1cbb      	adds	r3, r7, #2
 800ba90:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800ba92:	1cbb      	adds	r3, r7, #2
 800ba94:	881a      	ldrh	r2, [r3, #0]
 800ba96:	0013      	movs	r3, r2
 800ba98:	00db      	lsls	r3, r3, #3
 800ba9a:	1a9b      	subs	r3, r3, r2
 800ba9c:	015b      	lsls	r3, r3, #5
 800ba9e:	3308      	adds	r3, #8
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	18d3      	adds	r3, r2, r3
    }
 800baa4:	0018      	movs	r0, r3
 800baa6:	46bd      	mov	sp, r7
 800baa8:	b002      	add	sp, #8
 800baaa:	bd80      	pop	{r7, pc}

0800baac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800bab4:	2301      	movs	r3, #1
    }
 800bab6:	0018      	movs	r0, r3
 800bab8:	46bd      	mov	sp, r7
 800baba:	b002      	add	sp, #8
 800babc:	bd80      	pop	{r7, pc}

0800babe <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800bac6:	2310      	movs	r3, #16
    }
 800bac8:	0018      	movs	r0, r3
 800baca:	46bd      	mov	sp, r7
 800bacc:	b002      	add	sp, #8
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	000a      	movs	r2, r1
 800bada:	1cbb      	adds	r3, r7, #2
 800badc:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800bade:	1cbb      	adds	r3, r7, #2
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	3308      	adds	r3, #8
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	18d3      	adds	r3, r2, r3
    }
 800baea:	0018      	movs	r0, r3
 800baec:	46bd      	mov	sp, r7
 800baee:	b002      	add	sp, #8
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b082      	sub	sp, #8
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	000a      	movs	r2, r1
 800bafc:	1cbb      	adds	r3, r7, #2
 800bafe:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800bb00:	1cbb      	adds	r3, r7, #2
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	011b      	lsls	r3, r3, #4
 800bb06:	3308      	adds	r3, #8
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	18d3      	adds	r3, r2, r3
    }
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b002      	add	sp, #8
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <_GLOBAL__sub_I_touchgfx_init>:
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	4b03      	ldr	r3, [pc, #12]	; (800bb28 <_GLOBAL__sub_I_touchgfx_init+0x14>)
 800bb1a:	0019      	movs	r1, r3
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	f7ff fedd 	bl	800b8dc <_Z41__static_initialization_and_destruction_0ii>
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	0000ffff 	.word	0x0000ffff

0800bb2c <_GLOBAL__sub_D_touchgfx_init>:
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <_GLOBAL__sub_D_touchgfx_init+0x14>)
 800bb32:	0019      	movs	r1, r3
 800bb34:	2000      	movs	r0, #0
 800bb36:	f7ff fed1 	bl	800b8dc <_Z41__static_initialization_and_destruction_0ii>
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	0000ffff 	.word	0x0000ffff

0800bb44 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
    {
 800bb4c:	4a03      	ldr	r2, [pc, #12]	; (800bb5c <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x18>)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	601a      	str	r2, [r3, #0]
    }
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	0018      	movs	r0, r3
 800bb56:	46bd      	mov	sp, r7
 800bb58:	b002      	add	sp, #8
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	08015504 	.word	0x08015504

0800bb60 <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
    }
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f7ff ffea 	bl	800bb44 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2104      	movs	r1, #4
 800bb74:	0018      	movs	r0, r3
 800bb76:	f007 f910 	bl	8012d9a <_ZdlPvj>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b002      	add	sp, #8
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2266      	movs	r2, #102	; 0x66
 800bb90:	5c9b      	ldrb	r3, [r3, r2]
 800bb92:	3301      	adds	r3, #1
 800bb94:	b2d9      	uxtb	r1, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2266      	movs	r2, #102	; 0x66
 800bb9a:	5499      	strb	r1, [r3, r2]
    }
 800bb9c:	46c0      	nop			; (mov r8, r8)
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	b002      	add	sp, #8
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	619a      	str	r2, [r3, #24]
    }
 800bbb4:	46c0      	nop			; (mov r8, r8)
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	b002      	add	sp, #8
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	000a      	movs	r2, r1
 800bbc6:	1cfb      	adds	r3, r7, #3
 800bbc8:	701a      	strb	r2, [r3, #0]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800bbca:	1cfb      	adds	r3, r7, #3
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x1e>
 800bbd2:	1cfb      	adds	r3, r7, #3
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d106      	bne.n	800bbe8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x2c>
            refreshStrategy = s;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	1cfa      	adds	r2, r7, #3
 800bbde:	2148      	movs	r1, #72	; 0x48
 800bbe0:	7812      	ldrb	r2, [r2, #0]
 800bbe2:	545a      	strb	r2, [r3, r1]
            return true;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e029      	b.n	800bc3c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x80>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800bbe8:	1cfb      	adds	r3, r7, #3
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d124      	bne.n	800bc3a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7e>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d014      	beq.n	800bc22 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x66>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3384      	adds	r3, #132	; 0x84
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	0010      	movs	r0, r2
 800bc04:	4798      	blx	r3
 800bc06:	0003      	movs	r3, r0
 800bc08:	001a      	movs	r2, r3
 800bc0a:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x88>)
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d008      	beq.n	800bc22 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x66>
 800bc10:	4b0d      	ldr	r3, [pc, #52]	; (800bc48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x8c>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2201      	movs	r2, #1
 800bc16:	4053      	eors	r3, r2
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x66>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x68>
 800bc22:	2300      	movs	r3, #0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d006      	beq.n	800bc36 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7a>
                refreshStrategy = s;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	1cfa      	adds	r2, r7, #3
 800bc2c:	2148      	movs	r1, #72	; 0x48
 800bc2e:	7812      	ldrb	r2, [r2, #0]
 800bc30:	545a      	strb	r2, [r3, r1]
                return true;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e002      	b.n	800bc3c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x80>
            return false;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e000      	b.n	800bc3c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x80>
        return false;
 800bc3a:	2300      	movs	r3, #0
    }
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	b002      	add	sp, #8
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0000ffff 	.word	0x0000ffff
 800bc48:	200034ca 	.word	0x200034ca

0800bc4c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
                   3, /* number of blocks */
                   2  /* bytes per pixel */
                   > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 800bc4c:	b5b0      	push	{r4, r5, r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	0018      	movs	r0, r3
 800bc58:	f001 f9a0 	bl	800cf9c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 800bc5c:	687d      	ldr	r5, [r7, #4]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	334c      	adds	r3, #76	; 0x4c
 800bc64:	681c      	ldr	r4, [r3, #0]
 800bc66:	f003 f825 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800bc6a:	0003      	movs	r3, r0
 800bc6c:	0019      	movs	r1, r3
 800bc6e:	0028      	movs	r0, r5
 800bc70:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a06      	ldr	r2, [pc, #24]	; (800bc90 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800bc76:	0011      	movs	r1, r2
 800bc78:	0018      	movs	r0, r3
 800bc7a:	f7ff ff93 	bl	800bba4 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2102      	movs	r1, #2
 800bc82:	0018      	movs	r0, r3
 800bc84:	f7ff ff9a 	bl	800bbbc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 800bc88:	46c0      	nop			; (mov r8, r8)
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b002      	add	sp, #8
 800bc8e:	bdb0      	pop	{r4, r5, r7, pc}
 800bc90:	20001e18 	.word	0x20001e18

0800bc94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
}
 800bc9c:	46c0      	nop			; (mov r8, r8)
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	b002      	add	sp, #8
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
}
 800bcac:	46c0      	nop			; (mov r8, r8)
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	b002      	add	sp, #8
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
}
 800bcbc:	46c0      	nop			; (mov r8, r8)
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	b002      	add	sp, #8
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
}
 800bccc:	46c0      	nop			; (mov r8, r8)
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	b002      	add	sp, #8
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	0018      	movs	r0, r3
 800bce0:	f000 fe7e 	bl	800c9e0 <_ZN8touchgfx3HAL10beginFrameEv>
 800bce4:	0003      	movs	r3, r0
}
 800bce6:	0018      	movs	r0, r3
 800bce8:	46bd      	mov	sp, r7
 800bcea:	b002      	add	sp, #8
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  // We must guard the next frame until we're done transferring all blocks over our display interface
  // through either a semaphore if user is running an OS or a simple variable if not
  PartialFrameBufferManager::transmitRemainingBlocks();
 800bcf6:	f000 fda1 	bl	800c83c <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv>

  HAL::endFrame();
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f000 fe7b 	bl	800c9f8 <_ZN8touchgfx3HAL8endFrameEv>
  touchgfx::OSWrappers::signalRenderingDone();
 800bd02:	f7ff f8ff 	bl	800af04 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 800bd06:	46c0      	nop			; (mov r8, r8)
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	b002      	add	sp, #8
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	0018      	movs	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b002      	add	sp, #8
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 800bd2a:	46c0      	nop			; (mov r8, r8)
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	b002      	add	sp, #8
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	0011      	movs	r1, r2
 800bd42:	0018      	movs	r0, r3
 800bd44:	f000 fe35 	bl	800c9b2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
  // Try transmitting a block
  PartialFrameBufferManager::tryTransmitBlock();
 800bd48:	f000 fdb2 	bl	800c8b0 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv>
}
 800bd4c:	46c0      	nop			; (mov r8, r8)
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	b002      	add	sp, #8
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	68b9      	ldr	r1, [r7, #8]
 800bd6a:	f000 ff70 	bl	800cc4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800bd6e:	0003      	movs	r3, r0
}
 800bd70:	0018      	movs	r0, r3
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b004      	add	sp, #16
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
__weak void FrameBufferAllocatorWaitOnTransfer()
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
   */
}
 800bd7c:	46c0      	nop			; (mov r8, r8)
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
__weak void FrameBufferAllocatorSignalBlockDrawn()
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
   */
}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <_ZN8touchgfx14transmitActiveEv>:

/**
 * Check if a Frame Buffer Block is beeing transmitted.
 */
__weak int transmitActive()
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
  return touchgfxDisplayDriverTransmitActive();
 800bd90:	f7f5 fb52 	bl	8001438 <touchgfxDisplayDriverTransmitActive>
 800bd94:	0003      	movs	r3, r0
}
 800bd96:	0018      	movs	r0, r3
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <_ZN8touchgfx19shouldTransferBlockEt>:

/**
 * Check if a Frame Buffer Block ending at bottom should be transferred.
 */
__weak int shouldTransferBlock(uint16_t bottom)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	0002      	movs	r2, r0
 800bda4:	1dbb      	adds	r3, r7, #6
 800bda6:	801a      	strh	r2, [r3, #0]
  return touchgfxDisplayDriverShouldTransferBlock(bottom);
 800bda8:	1dbb      	adds	r3, r7, #6
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	0018      	movs	r0, r3
 800bdae:	f7f5 fb4d 	bl	800144c <touchgfxDisplayDriverShouldTransferBlock>
 800bdb2:	0003      	movs	r3, r0
}
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	b002      	add	sp, #8
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <_ZN8touchgfx13transmitBlockEPKhtttt>:

/**
 * Transmit a Frame Buffer Block.
 */
__weak void transmitBlock(const uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af02      	add	r7, sp, #8
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	000c      	movs	r4, r1
 800bdc6:	0010      	movs	r0, r2
 800bdc8:	0019      	movs	r1, r3
 800bdca:	250a      	movs	r5, #10
 800bdcc:	197b      	adds	r3, r7, r5
 800bdce:	1c22      	adds	r2, r4, #0
 800bdd0:	801a      	strh	r2, [r3, #0]
 800bdd2:	2608      	movs	r6, #8
 800bdd4:	19bb      	adds	r3, r7, r6
 800bdd6:	1c02      	adds	r2, r0, #0
 800bdd8:	801a      	strh	r2, [r3, #0]
 800bdda:	1dbb      	adds	r3, r7, #6
 800bddc:	1c0a      	adds	r2, r1, #0
 800bdde:	801a      	strh	r2, [r3, #0]
  touchgfxDisplayDriverTransmitBlock(pixels, x, y, w, h);
 800bde0:	1dbb      	adds	r3, r7, #6
 800bde2:	881c      	ldrh	r4, [r3, #0]
 800bde4:	19bb      	adds	r3, r7, r6
 800bde6:	881a      	ldrh	r2, [r3, #0]
 800bde8:	197b      	adds	r3, r7, r5
 800bdea:	8819      	ldrh	r1, [r3, #0]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	2320      	movs	r3, #32
 800bdf0:	2508      	movs	r5, #8
 800bdf2:	46ac      	mov	ip, r5
 800bdf4:	44bc      	add	ip, r7
 800bdf6:	4463      	add	r3, ip
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	0023      	movs	r3, r4
 800bdfe:	f7f5 fb55 	bl	80014ac <touchgfxDisplayDriverTransmitBlock>
}
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	46bd      	mov	sp, r7
 800be06:	b005      	add	sp, #20
 800be08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be0a <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	af00      	add	r7, sp, #0
  // After completed transmission start new transfer if blocks are ready.
  PartialFrameBufferManager::tryTransmitBlockFromIRQ();
 800be0e:	f000 fd8d 	bl	800c92c <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv>
}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  /* VSync has occurred, increment TouchGFX engine vsync counter */
  touchgfx::HAL::getInstance()->vSync();
 800be1c:	f7fc fbfe 	bl	800861c <_ZN8touchgfx3HAL11getInstanceEv>
 800be20:	0003      	movs	r3, r0
 800be22:	0018      	movs	r0, r3
 800be24:	f7ff feae 	bl	800bb84 <_ZN8touchgfx3HAL5vSyncEv>

  /* VSync has occurred, signal TouchGFX engine */
  touchgfx::OSWrappers::signalVSync();
 800be28:	f7ff f85c 	bl	800aee4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800be2c:	46c0      	nop			; (mov r8, r8)
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	4a03      	ldr	r2, [pc, #12]	; (800be4c <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x18>)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	0018      	movs	r0, r3
 800be46:	46bd      	mov	sp, r7
 800be48:	b002      	add	sp, #8
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	08015504 	.word	0x08015504

0800be50 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 800be50:	b5b0      	push	{r4, r5, r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
    {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	0018      	movs	r0, r3
 800be5c:	f7ff ffea 	bl	800be34 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 800be60:	4a17      	ldr	r2, [pc, #92]	; (800bec0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x70>)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a16      	ldr	r2, [pc, #88]	; (800bec4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x74>)
 800be6a:	4694      	mov	ip, r2
 800be6c:	4463      	add	r3, ip
 800be6e:	2402      	movs	r4, #2
 800be70:	001d      	movs	r5, r3
 800be72:	2c00      	cmp	r4, #0
 800be74:	db05      	blt.n	800be82 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x32>
 800be76:	0028      	movs	r0, r5
 800be78:	f7fd f9fd 	bl	8009276 <_ZN8touchgfx4RectC1Ev>
 800be7c:	3508      	adds	r5, #8
 800be7e:	3c01      	subs	r4, #1
 800be80:	e7f7      	b.n	800be72 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x22>
        sendingBlock = -1;
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	23b5      	movs	r3, #181	; 0xb5
 800be86:	015b      	lsls	r3, r3, #5
 800be88:	2101      	movs	r1, #1
 800be8a:	4249      	negs	r1, r1
 800be8c:	50d1      	str	r1, [r2, r3]
        drawingBlock = -1;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	490d      	ldr	r1, [pc, #52]	; (800bec8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x78>)
 800be92:	2201      	movs	r2, #1
 800be94:	4252      	negs	r2, r2
 800be96:	505a      	str	r2, [r3, r1]
        for (uint32_t i = 0; i < blocks; i++)
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d809      	bhi.n	800beb6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x66>
        {
            state[i] = EMPTY;
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	18d3      	adds	r3, r2, r3
 800bea8:	3304      	adds	r3, #4
 800beaa:	2200      	movs	r2, #0
 800beac:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3301      	adds	r3, #1
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e7f2      	b.n	800be9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x4c>
        }
    }
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b004      	add	sp, #16
 800bebe:	bdb0      	pop	{r4, r5, r7, pc}
 800bec0:	08015420 	.word	0x08015420
 800bec4:	00001688 	.word	0x00001688
 800bec8:	000016a4 	.word	0x000016a4

0800becc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	4a05      	ldr	r2, [pc, #20]	; (800beec <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev+0x20>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	0018      	movs	r0, r3
 800bede:	f7ff fe31 	bl	800bb44 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	0018      	movs	r0, r3
 800bee6:	46bd      	mov	sp, r7
 800bee8:	b002      	add	sp, #8
 800beea:	bd80      	pop	{r7, pc}
 800beec:	08015420 	.word	0x08015420

0800bef0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev>:
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	0018      	movs	r0, r3
 800befc:	f7ff ffe6 	bl	800becc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
 800bf00:	4a05      	ldr	r2, [pc, #20]	; (800bf18 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev+0x28>)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	0011      	movs	r1, r2
 800bf06:	0018      	movs	r0, r3
 800bf08:	f006 ff47 	bl	8012d9a <_ZdlPvj>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	0018      	movs	r0, r3
 800bf10:	46bd      	mov	sp, r7
 800bf12:	b002      	add	sp, #8
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	46c0      	nop			; (mov r8, r8)
 800bf18:	000016a8 	.word	0x000016a8

0800bf1c <_Z41__static_initialization_and_destruction_0ii>:
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d107      	bne.n	800bf3c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	4a0b      	ldr	r2, [pc, #44]	; (800bf5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d103      	bne.n	800bf3c <_Z41__static_initialization_and_destruction_0ii+0x20>
                   > blockAllocator;
 800bf34:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800bf36:	0018      	movs	r0, r3
 800bf38:	f7ff ff8a 	bl	800be50 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d107      	bne.n	800bf52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	4a05      	ldr	r2, [pc, #20]	; (800bf5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d103      	bne.n	800bf52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	f7ff ffbd 	bl	800becc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
}
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	46bd      	mov	sp, r7
 800bf56:	b002      	add	sp, #8
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	0000ffff 	.word	0x0000ffff
 800bf60:	20001e18 	.word	0x20001e18

0800bf64 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 800bf64:	b590      	push	{r4, r7, lr}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	000c      	movs	r4, r1
 800bf6e:	0010      	movs	r0, r2
 800bf70:	0019      	movs	r1, r3
 800bf72:	230a      	movs	r3, #10
 800bf74:	18fb      	adds	r3, r7, r3
 800bf76:	1c22      	adds	r2, r4, #0
 800bf78:	801a      	strh	r2, [r3, #0]
 800bf7a:	2308      	movs	r3, #8
 800bf7c:	18fb      	adds	r3, r7, r3
 800bf7e:	1c02      	adds	r2, r0, #0
 800bf80:	801a      	strh	r2, [r3, #0]
 800bf82:	1dbb      	adds	r3, r7, #6
 800bf84:	1c0a      	adds	r2, r1, #0
 800bf86:	801a      	strh	r2, [r3, #0]
    {
        drawingBlock++;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4a4f      	ldr	r2, [pc, #316]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bf8c:	589b      	ldr	r3, [r3, r2]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	494d      	ldr	r1, [pc, #308]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bf94:	505a      	str	r2, [r3, r1]
        if (drawingBlock == blocks)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	4a4b      	ldr	r2, [pc, #300]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bf9a:	589b      	ldr	r3, [r3, r2]
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d103      	bne.n	800bfa8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x44>
        {
            drawingBlock = 0;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	4a49      	ldr	r2, [pc, #292]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	5099      	str	r1, [r3, r2]
        }
        while (state[drawingBlock] != EMPTY)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4a47      	ldr	r2, [pc, #284]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bfac:	589b      	ldr	r3, [r3, r2]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	18d3      	adds	r3, r2, r3
 800bfb2:	791b      	ldrb	r3, [r3, #4]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	1e5a      	subs	r2, r3, #1
 800bfb8:	4193      	sbcs	r3, r2
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x62>
        {
            FrameBufferAllocatorWaitOnTransfer();
 800bfc0:	f7ff feda 	bl	800bd78 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 800bfc4:	e7f0      	b.n	800bfa8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x44>
        }
        assert(state[drawingBlock] == EMPTY);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4a3f      	ldr	r2, [pc, #252]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bfca:	589b      	ldr	r3, [r3, r2]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	18d3      	adds	r3, r2, r3
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d005      	beq.n	800bfe4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x80>
 800bfd8:	4b3c      	ldr	r3, [pc, #240]	; (800c0cc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x168>)
 800bfda:	4a3d      	ldr	r2, [pc, #244]	; (800c0d0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 800bfdc:	483d      	ldr	r0, [pc, #244]	; (800c0d4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 800bfde:	21ac      	movs	r1, #172	; 0xac
 800bfe0:	f006 ff08 	bl	8012df4 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4a38      	ldr	r2, [pc, #224]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800bfe8:	589b      	ldr	r3, [r3, r2]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	18d3      	adds	r3, r2, r3
 800bfee:	2201      	movs	r2, #1
 800bff0:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 800bff2:	1dbb      	adds	r3, r7, #6
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	0019      	movs	r1, r3
 800bffe:	23f0      	movs	r3, #240	; 0xf0
 800c000:	00d8      	lsls	r0, r3, #3
 800c002:	f7f4 f88b 	bl	800011c <__udivsi3>
 800c006:	0003      	movs	r3, r0
 800c008:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	4a2e      	ldr	r2, [pc, #184]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800c00e:	589a      	ldr	r2, [r3, r2]
 800c010:	0013      	movs	r3, r2
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	1a9b      	subs	r3, r3, r2
 800c016:	01db      	lsls	r3, r3, #7
 800c018:	3308      	adds	r3, #8
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	18d2      	adds	r2, r2, r3
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4a28      	ldr	r2, [pc, #160]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800c026:	589a      	ldr	r2, [r3, r2]
 800c028:	230a      	movs	r3, #10
 800c02a:	18fb      	adds	r3, r7, r3
 800c02c:	2100      	movs	r1, #0
 800c02e:	5e59      	ldrsh	r1, [r3, r1]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4829      	ldr	r0, [pc, #164]	; (800c0d8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 800c034:	4684      	mov	ip, r0
 800c036:	4462      	add	r2, ip
 800c038:	00d2      	lsls	r2, r2, #3
 800c03a:	52d1      	strh	r1, [r2, r3]
        blockRect[drawingBlock].y = y;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4a22      	ldr	r2, [pc, #136]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800c040:	589b      	ldr	r3, [r3, r2]
 800c042:	2208      	movs	r2, #8
 800c044:	18ba      	adds	r2, r7, r2
 800c046:	2100      	movs	r1, #0
 800c048:	5e51      	ldrsh	r1, [r2, r1]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	4822      	ldr	r0, [pc, #136]	; (800c0d8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 800c04e:	4684      	mov	ip, r0
 800c050:	4463      	add	r3, ip
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	18d3      	adds	r3, r2, r3
 800c056:	3302      	adds	r3, #2
 800c058:	1c0a      	adds	r2, r1, #0
 800c05a:	801a      	strh	r2, [r3, #0]
        blockRect[drawingBlock].width = width;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	4a1a      	ldr	r2, [pc, #104]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800c060:	589b      	ldr	r3, [r3, r2]
 800c062:	1dba      	adds	r2, r7, #6
 800c064:	2100      	movs	r1, #0
 800c066:	5e51      	ldrsh	r1, [r2, r1]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	481b      	ldr	r0, [pc, #108]	; (800c0d8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 800c06c:	4684      	mov	ip, r0
 800c06e:	4463      	add	r3, ip
 800c070:	00db      	lsls	r3, r3, #3
 800c072:	18d3      	adds	r3, r2, r3
 800c074:	3304      	adds	r3, #4
 800c076:	1c0a      	adds	r2, r1, #0
 800c078:	801a      	strh	r2, [r3, #0]
        blockRect[drawingBlock].height = MIN(height, lines);
 800c07a:	2328      	movs	r3, #40	; 0x28
 800c07c:	18fb      	adds	r3, r7, r3
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	001a      	movs	r2, r3
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	429a      	cmp	r2, r3
 800c086:	dd00      	ble.n	800c08a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x126>
 800c088:	001a      	movs	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	490e      	ldr	r1, [pc, #56]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800c08e:	585b      	ldr	r3, [r3, r1]
 800c090:	b211      	sxth	r1, r2
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	4810      	ldr	r0, [pc, #64]	; (800c0d8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 800c096:	4684      	mov	ip, r0
 800c098:	4463      	add	r3, ip
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	18d3      	adds	r3, r2, r3
 800c09e:	3306      	adds	r3, #6
 800c0a0:	1c0a      	adds	r2, r1, #0
 800c0a2:	801a      	strh	r2, [r3, #0]
        return blockRect[drawingBlock].height;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4a08      	ldr	r2, [pc, #32]	; (800c0c8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800c0a8:	589b      	ldr	r3, [r3, r2]
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	490a      	ldr	r1, [pc, #40]	; (800c0d8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 800c0ae:	468c      	mov	ip, r1
 800c0b0:	4463      	add	r3, ip
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	18d3      	adds	r3, r2, r3
 800c0b6:	3306      	adds	r3, #6
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	5e9b      	ldrsh	r3, [r3, r2]
 800c0bc:	b29b      	uxth	r3, r3
    }
 800c0be:	0018      	movs	r0, r3
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	b007      	add	sp, #28
 800c0c4:	bd90      	pop	{r4, r7, pc}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	000016a4 	.word	0x000016a4
 800c0cc:	08014420 	.word	0x08014420
 800c0d0:	080158ac 	.word	0x080158ac
 800c0d4:	08014440 	.word	0x08014440
 800c0d8:	000002d1 	.word	0x000002d1

0800c0dc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a0d      	ldr	r2, [pc, #52]	; (800c11c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x40>)
 800c0e8:	589b      	ldr	r3, [r3, r2]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	18d3      	adds	r3, r2, r3
 800c0ee:	791b      	ldrb	r3, [r3, #4]
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d005      	beq.n	800c102 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x26>
 800c0f6:	4b0a      	ldr	r3, [pc, #40]	; (800c120 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x44>)
 800c0f8:	4a0a      	ldr	r2, [pc, #40]	; (800c124 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 800c0fa:	480b      	ldr	r0, [pc, #44]	; (800c128 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 800c0fc:	21bb      	movs	r1, #187	; 0xbb
 800c0fe:	f006 fe79 	bl	8012df4 <__assert_func>
        state[drawingBlock] = DRAWN;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a05      	ldr	r2, [pc, #20]	; (800c11c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x40>)
 800c106:	589b      	ldr	r3, [r3, r2]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	18d3      	adds	r3, r2, r3
 800c10c:	2202      	movs	r2, #2
 800c10e:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 800c110:	f7ff fe37 	bl	800bd82 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 800c114:	46c0      	nop			; (mov r8, r8)
 800c116:	46bd      	mov	sp, r7
 800c118:	b002      	add	sp, #8
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	000016a4 	.word	0x000016a4
 800c120:	08014494 	.word	0x08014494
 800c124:	080157d8 	.word	0x080157d8
 800c128:	08014440 	.word	0x08014440

0800c12c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d811      	bhi.n	800c162 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x36>
        {
            if (state[i] == DRAWN)
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	18d3      	adds	r3, r2, r3
 800c144:	3304      	adds	r3, #4
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	3b02      	subs	r3, #2
 800c14c:	425a      	negs	r2, r3
 800c14e:	4153      	adcs	r3, r2
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x2e>
            {
                return true;
 800c156:	2301      	movs	r3, #1
 800c158:	e004      	b.n	800c164 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x38>
        for (uint32_t i = 0; i < blocks; i++)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3301      	adds	r3, #1
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	e7ea      	b.n	800c138 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0xc>
            }
        }
        return false;
 800c162:	2300      	movs	r3, #0
    }
 800c164:	0018      	movs	r0, r3
 800c166:	46bd      	mov	sp, r7
 800c168:	b004      	add	sp, #16
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	23b5      	movs	r3, #181	; 0xb5
 800c17a:	015b      	lsls	r3, r3, #5
 800c17c:	58d3      	ldr	r3, [r2, r3]
 800c17e:	1c59      	adds	r1, r3, #1
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	23b5      	movs	r3, #181	; 0xb5
 800c184:	015b      	lsls	r3, r3, #5
 800c186:	50d1      	str	r1, [r2, r3]
        if (sendingBlock == blocks)
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	23b5      	movs	r3, #181	; 0xb5
 800c18c:	015b      	lsls	r3, r3, #5
 800c18e:	58d3      	ldr	r3, [r2, r3]
 800c190:	2b03      	cmp	r3, #3
 800c192:	d104      	bne.n	800c19e <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x32>
        {
            sendingBlock = 0;
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	23b5      	movs	r3, #181	; 0xb5
 800c198:	015b      	lsls	r3, r3, #5
 800c19a:	2100      	movs	r1, #0
 800c19c:	50d1      	str	r1, [r2, r3]
        }
        assert(state[sendingBlock] == DRAWN);
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	23b5      	movs	r3, #181	; 0xb5
 800c1a2:	015b      	lsls	r3, r3, #5
 800c1a4:	58d3      	ldr	r3, [r2, r3]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	18d3      	adds	r3, r2, r3
 800c1aa:	791b      	ldrb	r3, [r3, #4]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d005      	beq.n	800c1be <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x52>
 800c1b2:	4b16      	ldr	r3, [pc, #88]	; (800c20c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa0>)
 800c1b4:	4a16      	ldr	r2, [pc, #88]	; (800c210 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa4>)
 800c1b6:	4817      	ldr	r0, [pc, #92]	; (800c214 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa8>)
 800c1b8:	21df      	movs	r1, #223	; 0xdf
 800c1ba:	f006 fe1b 	bl	8012df4 <__assert_func>
        rect = blockRect[sendingBlock];
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	23b5      	movs	r3, #181	; 0xb5
 800c1c2:	015b      	lsls	r3, r3, #5
 800c1c4:	58d3      	ldr	r3, [r2, r3]
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	4813      	ldr	r0, [pc, #76]	; (800c218 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 800c1cc:	4684      	mov	ip, r0
 800c1ce:	4463      	add	r3, ip
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	0008      	movs	r0, r1
 800c1d4:	18d3      	adds	r3, r2, r3
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	0019      	movs	r1, r3
 800c1da:	f006 fe7f 	bl	8012edc <memcpy>
        state[sendingBlock] = SENDING;
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	23b5      	movs	r3, #181	; 0xb5
 800c1e2:	015b      	lsls	r3, r3, #5
 800c1e4:	58d3      	ldr	r3, [r2, r3]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	18d3      	adds	r3, r2, r3
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	23b5      	movs	r3, #181	; 0xb5
 800c1f2:	015b      	lsls	r3, r3, #5
 800c1f4:	58d2      	ldr	r2, [r2, r3]
 800c1f6:	0013      	movs	r3, r2
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	1a9b      	subs	r3, r3, r2
 800c1fc:	01db      	lsls	r3, r3, #7
 800c1fe:	3308      	adds	r3, #8
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	18d3      	adds	r3, r2, r3
    }
 800c204:	0018      	movs	r0, r3
 800c206:	46bd      	mov	sp, r7
 800c208:	b002      	add	sp, #8
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	080144b8 	.word	0x080144b8
 800c210:	080156d8 	.word	0x080156d8
 800c214:	08014440 	.word	0x08014440
 800c218:	000002d1 	.word	0x000002d1

0800c21c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	23b5      	movs	r3, #181	; 0xb5
 800c228:	015b      	lsls	r3, r3, #5
 800c22a:	58d3      	ldr	r3, [r2, r3]
 800c22c:	3301      	adds	r3, #1
 800c22e:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b03      	cmp	r3, #3
 800c234:	d101      	bne.n	800c23a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x1e>
        {
            nextSendingBlock = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	18d3      	adds	r3, r2, r3
 800c240:	3304      	adds	r3, #4
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b02      	cmp	r3, #2
 800c248:	d005      	beq.n	800c256 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x3a>
 800c24a:	4b08      	ldr	r3, [pc, #32]	; (800c26c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 800c24c:	4a08      	ldr	r2, [pc, #32]	; (800c270 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 800c24e:	4809      	ldr	r0, [pc, #36]	; (800c274 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 800c250:	21ec      	movs	r1, #236	; 0xec
 800c252:	f006 fdcf 	bl	8012df4 <__assert_func>
        return blockRect[nextSendingBlock];
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	4a07      	ldr	r2, [pc, #28]	; (800c278 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x5c>)
 800c25a:	4694      	mov	ip, r2
 800c25c:	4463      	add	r3, ip
 800c25e:	00db      	lsls	r3, r3, #3
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	18d3      	adds	r3, r2, r3
    }
 800c264:	0018      	movs	r0, r3
 800c266:	46bd      	mov	sp, r7
 800c268:	b004      	add	sp, #16
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	080144d8 	.word	0x080144d8
 800c270:	080155f8 	.word	0x080155f8
 800c274:	08014440 	.word	0x08014440
 800c278:	000002d1 	.word	0x000002d1

0800c27c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a0b      	ldr	r2, [pc, #44]	; (800c2b4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x38>)
 800c288:	589b      	ldr	r3, [r3, r2]
 800c28a:	3301      	adds	r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b03      	cmp	r3, #3
 800c292:	d101      	bne.n	800c298 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x1c>
        {
            nextDrawingBlock = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	18d3      	adds	r3, r2, r3
 800c29e:	3304      	adds	r3, #4
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	425a      	negs	r2, r3
 800c2a6:	4153      	adcs	r3, r2
 800c2a8:	b2db      	uxtb	r3, r3
    }
 800c2aa:	0018      	movs	r0, r3
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	b004      	add	sp, #16
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	46c0      	nop			; (mov r8, r8)
 800c2b4:	000016a4 	.word	0x000016a4

0800c2b8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 800c2b8:	b590      	push	{r4, r7, lr}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	23b5      	movs	r3, #181	; 0xb5
 800c2c4:	015b      	lsls	r3, r3, #5
 800c2c6:	58d3      	ldr	r3, [r2, r3]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	18d3      	adds	r3, r2, r3
 800c2cc:	791b      	ldrb	r3, [r3, #4]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d008      	beq.n	800c2e6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x2e>
 800c2d4:	4c0a      	ldr	r4, [pc, #40]	; (800c300 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 800c2d6:	4a0b      	ldr	r2, [pc, #44]	; (800c304 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x4c>)
 800c2d8:	2302      	movs	r3, #2
 800c2da:	33ff      	adds	r3, #255	; 0xff
 800c2dc:	0019      	movs	r1, r3
 800c2de:	480a      	ldr	r0, [pc, #40]	; (800c308 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x50>)
 800c2e0:	0023      	movs	r3, r4
 800c2e2:	f006 fd87 	bl	8012df4 <__assert_func>
        state[sendingBlock] = EMPTY;
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	23b5      	movs	r3, #181	; 0xb5
 800c2ea:	015b      	lsls	r3, r3, #5
 800c2ec:	58d3      	ldr	r3, [r2, r3]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	18d3      	adds	r3, r2, r3
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	711a      	strb	r2, [r3, #4]
    }
 800c2f6:	46c0      	nop			; (mov r8, r8)
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	b003      	add	sp, #12
 800c2fc:	bd90      	pop	{r4, r7, pc}
 800c2fe:	46c0      	nop			; (mov r8, r8)
 800c300:	080144fc 	.word	0x080144fc
 800c304:	08015528 	.word	0x08015528
 800c308:	08014440 	.word	0x08014440

0800c30c <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
 800c310:	4b03      	ldr	r3, [pc, #12]	; (800c320 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv+0x14>)
 800c312:	0019      	movs	r1, r3
 800c314:	2001      	movs	r0, #1
 800c316:	f7ff fe01 	bl	800bf1c <_Z41__static_initialization_and_destruction_0ii>
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	0000ffff 	.word	0x0000ffff

0800c324 <_GLOBAL__sub_D__ZN20TouchGFXGeneratedHAL10initializeEv>:
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
 800c328:	4b03      	ldr	r3, [pc, #12]	; (800c338 <_GLOBAL__sub_D__ZN20TouchGFXGeneratedHAL10initializeEv+0x14>)
 800c32a:	0019      	movs	r1, r3
 800c32c:	2000      	movs	r0, #0
 800c32e:	f7ff fdf5 	bl	800bf1c <_Z41__static_initialization_and_destruction_0ii>
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	46c0      	nop			; (mov r8, r8)
 800c338:	0000ffff 	.word	0x0000ffff

0800c33c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c33c:	8880      	ldrh	r0, [r0, #4]
 800c33e:	4770      	bx	lr

0800c340 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c340:	2300      	movs	r3, #0
 800c342:	8083      	strh	r3, [r0, #4]
 800c344:	4770      	bx	lr
	...

0800c348 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	6803      	ldr	r3, [r0, #0]
 800c34c:	0004      	movs	r4, r0
 800c34e:	000d      	movs	r5, r1
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	2100      	movs	r1, #0
 800c354:	4798      	blx	r3
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	0006      	movs	r6, r0
 800c35a:	6a1b      	ldr	r3, [r3, #32]
 800c35c:	0020      	movs	r0, r4
 800c35e:	4798      	blx	r3
 800c360:	1bae      	subs	r6, r5, r6
 800c362:	0001      	movs	r1, r0
 800c364:	b2b0      	uxth	r0, r6
 800c366:	f7f3 fed9 	bl	800011c <__udivsi3>
 800c36a:	88a3      	ldrh	r3, [r4, #4]
 800c36c:	b286      	uxth	r6, r0
 800c36e:	42b3      	cmp	r3, r6
 800c370:	d805      	bhi.n	800c37e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x36>
 800c372:	2120      	movs	r1, #32
 800c374:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c376:	4a0e      	ldr	r2, [pc, #56]	; (800c3b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800c378:	480e      	ldr	r0, [pc, #56]	; (800c3b4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800c37a:	f006 fd3b 	bl	8012df4 <__assert_func>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	2100      	movs	r1, #0
 800c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c384:	0020      	movs	r0, r4
 800c386:	4798      	blx	r3
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	0007      	movs	r7, r0
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	0020      	movs	r0, r4
 800c390:	4798      	blx	r3
 800c392:	1bed      	subs	r5, r5, r7
 800c394:	0001      	movs	r1, r0
 800c396:	b2a8      	uxth	r0, r5
 800c398:	f7f3 ff46 	bl	8000228 <__aeabi_uidivmod>
 800c39c:	2900      	cmp	r1, #0
 800c39e:	d003      	beq.n	800c3a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>
 800c3a0:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 800c3a2:	4a03      	ldr	r2, [pc, #12]	; (800c3b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800c3a4:	2121      	movs	r1, #33	; 0x21
 800c3a6:	e7e7      	b.n	800c378 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x30>
 800c3a8:	0030      	movs	r0, r6
 800c3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ac:	080159df 	.word	0x080159df
 800c3b0:	08015b4a 	.word	0x08015b4a
 800c3b4:	080159f4 	.word	0x080159f4
 800c3b8:	08015a22 	.word	0x08015a22

0800c3bc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	6803      	ldr	r3, [r0, #0]
 800c3c0:	000d      	movs	r5, r1
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	0004      	movs	r4, r0
 800c3c6:	4798      	blx	r3
 800c3c8:	4285      	cmp	r5, r0
 800c3ca:	d905      	bls.n	800c3d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800c3cc:	2132      	movs	r1, #50	; 0x32
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800c3d0:	4a0c      	ldr	r2, [pc, #48]	; (800c404 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c3d2:	480d      	ldr	r0, [pc, #52]	; (800c408 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800c3d4:	f006 fd0e 	bl	8012df4 <__assert_func>
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	0020      	movs	r0, r4
 800c3dc:	69db      	ldr	r3, [r3, #28]
 800c3de:	88a5      	ldrh	r5, [r4, #4]
 800c3e0:	4798      	blx	r3
 800c3e2:	4285      	cmp	r5, r0
 800c3e4:	d303      	bcc.n	800c3ee <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800c3e8:	4a06      	ldr	r2, [pc, #24]	; (800c404 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c3ea:	2133      	movs	r1, #51	; 0x33
 800c3ec:	e7f1      	b.n	800c3d2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	88a1      	ldrh	r1, [r4, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	0020      	movs	r0, r4
 800c3f6:	4798      	blx	r3
 800c3f8:	88a3      	ldrh	r3, [r4, #4]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	80a3      	strh	r3, [r4, #4]
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}
 800c400:	08015a9c 	.word	0x08015a9c
 800c404:	08015b8d 	.word	0x08015b8d
 800c408:	080159f4 	.word	0x080159f4
 800c40c:	08015ab3 	.word	0x08015ab3

0800c410 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c410:	b570      	push	{r4, r5, r6, lr}
 800c412:	6803      	ldr	r3, [r0, #0]
 800c414:	0016      	movs	r6, r2
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	0004      	movs	r4, r0
 800c41a:	000d      	movs	r5, r1
 800c41c:	4798      	blx	r3
 800c41e:	4286      	cmp	r6, r0
 800c420:	d905      	bls.n	800c42e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800c424:	4a06      	ldr	r2, [pc, #24]	; (800c440 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800c426:	213c      	movs	r1, #60	; 0x3c
 800c428:	4806      	ldr	r0, [pc, #24]	; (800c444 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800c42a:	f006 fce3 	bl	8012df4 <__assert_func>
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	0029      	movs	r1, r5
 800c432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c434:	0020      	movs	r0, r4
 800c436:	4798      	blx	r3
 800c438:	bd70      	pop	{r4, r5, r6, pc}
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	08015a9c 	.word	0x08015a9c
 800c440:	08015b00 	.word	0x08015b00
 800c444:	080159f4 	.word	0x080159f4

0800c448 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c448:	4770      	bx	lr
	...

0800c44c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c44c:	4b02      	ldr	r3, [pc, #8]	; (800c458 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c44e:	3308      	adds	r3, #8
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	2300      	movs	r3, #0
 800c454:	8083      	strh	r3, [r0, #4]
 800c456:	4770      	bx	lr
 800c458:	08015acc 	.word	0x08015acc

0800c45c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c45c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c45e:	2000      	movs	r0, #0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d007      	beq.n	800c474 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x18>
 800c464:	2800      	cmp	r0, #0
 800c466:	d105      	bne.n	800c474 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x18>
 800c468:	1a58      	subs	r0, r3, r1
 800c46a:	4242      	negs	r2, r0
 800c46c:	4150      	adcs	r0, r2
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	b2c0      	uxtb	r0, r0
 800c472:	e7f5      	b.n	800c460 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c474:	4770      	bx	lr

0800c476 <_ZN8touchgfx9Container9removeAllEv>:
 800c476:	2200      	movs	r2, #0
 800c478:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d004      	beq.n	800c488 <_ZN8touchgfx9Container9removeAllEv+0x12>
 800c47e:	6999      	ldr	r1, [r3, #24]
 800c480:	6281      	str	r1, [r0, #40]	; 0x28
 800c482:	615a      	str	r2, [r3, #20]
 800c484:	619a      	str	r2, [r3, #24]
 800c486:	e7f7      	b.n	800c478 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c488:	4770      	bx	lr

0800c48a <_ZN8touchgfx9Container6unlinkEv>:
 800c48a:	2300      	movs	r3, #0
 800c48c:	6283      	str	r3, [r0, #40]	; 0x28
 800c48e:	4770      	bx	lr

0800c490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	1d43      	adds	r3, r0, #5
 800c496:	7fdb      	ldrb	r3, [r3, #31]
 800c498:	000f      	movs	r7, r1
 800c49a:	0015      	movs	r5, r2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c4a0:	9b01      	ldr	r3, [sp, #4]
 800c4a2:	6018      	str	r0, [r3, #0]
 800c4a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c4a6:	2c00      	cmp	r4, #0
 800c4a8:	d023      	beq.n	800c4f2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x62>
 800c4aa:	1da3      	adds	r3, r4, #6
 800c4ac:	7fdb      	ldrb	r3, [r3, #31]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d01d      	beq.n	800c4ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c4b2:	2304      	movs	r3, #4
 800c4b4:	5ee1      	ldrsh	r1, [r4, r3]
 800c4b6:	428f      	cmp	r7, r1
 800c4b8:	db19      	blt.n	800c4ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c4ba:	8923      	ldrh	r3, [r4, #8]
 800c4bc:	b289      	uxth	r1, r1
 800c4be:	18cb      	adds	r3, r1, r3
 800c4c0:	b21b      	sxth	r3, r3
 800c4c2:	429f      	cmp	r7, r3
 800c4c4:	da13      	bge.n	800c4ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c4c6:	2306      	movs	r3, #6
 800c4c8:	5ee2      	ldrsh	r2, [r4, r3]
 800c4ca:	4295      	cmp	r5, r2
 800c4cc:	db0f      	blt.n	800c4ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c4ce:	8963      	ldrh	r3, [r4, #10]
 800c4d0:	b292      	uxth	r2, r2
 800c4d2:	18d3      	adds	r3, r2, r3
 800c4d4:	b21b      	sxth	r3, r3
 800c4d6:	429d      	cmp	r5, r3
 800c4d8:	da09      	bge.n	800c4ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	1aaa      	subs	r2, r5, r2
 800c4de:	69db      	ldr	r3, [r3, #28]
 800c4e0:	1a79      	subs	r1, r7, r1
 800c4e2:	001e      	movs	r6, r3
 800c4e4:	b212      	sxth	r2, r2
 800c4e6:	b209      	sxth	r1, r1
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	0020      	movs	r0, r4
 800c4ec:	47b0      	blx	r6
 800c4ee:	69a4      	ldr	r4, [r4, #24]
 800c4f0:	e7d9      	b.n	800c4a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
 800c4f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800c4f4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	8003      	strh	r3, [r0, #0]
 800c4f8:	8043      	strh	r3, [r0, #2]
 800c4fa:	8083      	strh	r3, [r0, #4]
 800c4fc:	80c3      	strh	r3, [r0, #6]
 800c4fe:	4770      	bx	lr

0800c500 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	000d      	movs	r5, r1
 800c504:	0016      	movs	r6, r2
 800c506:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c508:	2c00      	cmp	r4, #0
 800c50a:	d007      	beq.n	800c51c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1c>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	0020      	movs	r0, r4
 800c510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c512:	0032      	movs	r2, r6
 800c514:	0029      	movs	r1, r5
 800c516:	4798      	blx	r3
 800c518:	69a4      	ldr	r4, [r4, #24]
 800c51a:	e7f5      	b.n	800c508 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c51c:	bd70      	pop	{r4, r5, r6, pc}

0800c51e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c51e:	b570      	push	{r4, r5, r6, lr}
 800c520:	000d      	movs	r5, r1
 800c522:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c524:	2c00      	cmp	r4, #0
 800c526:	d006      	beq.n	800c536 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x18>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	0021      	movs	r1, r4
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	0028      	movs	r0, r5
 800c530:	4798      	blx	r3
 800c532:	69a4      	ldr	r4, [r4, #24]
 800c534:	e7f6      	b.n	800c524 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c538:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d007      	beq.n	800c54e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>
 800c53e:	428b      	cmp	r3, r1
 800c540:	d10a      	bne.n	800c558 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x20>
 800c542:	2100      	movs	r1, #0
 800c544:	699a      	ldr	r2, [r3, #24]
 800c546:	6159      	str	r1, [r3, #20]
 800c548:	6282      	str	r2, [r0, #40]	; 0x28
 800c54a:	428a      	cmp	r2, r1
 800c54c:	d100      	bne.n	800c550 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c54e:	4770      	bx	lr
 800c550:	6199      	str	r1, [r3, #24]
 800c552:	e7fc      	b.n	800c54e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>
 800c554:	1e13      	subs	r3, r2, #0
 800c556:	d0fa      	beq.n	800c54e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>
 800c558:	699a      	ldr	r2, [r3, #24]
 800c55a:	428a      	cmp	r2, r1
 800c55c:	d1fa      	bne.n	800c554 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c55e:	698a      	ldr	r2, [r1, #24]
 800c560:	619a      	str	r2, [r3, #24]
 800c562:	2300      	movs	r3, #0
 800c564:	614b      	str	r3, [r1, #20]
 800c566:	618b      	str	r3, [r1, #24]
 800c568:	e7f1      	b.n	800c54e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>

0800c56a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c56a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c56c:	b510      	push	{r4, lr}
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x12>
 800c572:	6803      	ldr	r3, [r0, #0]
 800c574:	0011      	movs	r1, r2
 800c576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c578:	4798      	blx	r3
 800c57a:	bd10      	pop	{r4, pc}
 800c57c:	2900      	cmp	r1, #0
 800c57e:	d105      	bne.n	800c58c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c580:	6193      	str	r3, [r2, #24]
 800c582:	6282      	str	r2, [r0, #40]	; 0x28
 800c584:	6150      	str	r0, [r2, #20]
 800c586:	e7f8      	b.n	800c57a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x10>
 800c588:	1e23      	subs	r3, r4, #0
 800c58a:	d0f6      	beq.n	800c57a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x10>
 800c58c:	699c      	ldr	r4, [r3, #24]
 800c58e:	4299      	cmp	r1, r3
 800c590:	d1fa      	bne.n	800c588 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1e>
 800c592:	6194      	str	r4, [r2, #24]
 800c594:	618a      	str	r2, [r1, #24]
 800c596:	e7f5      	b.n	800c584 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800c598 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	4288      	cmp	r0, r1
 800c59c:	d105      	bne.n	800c5aa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c59e:	2123      	movs	r1, #35	; 0x23
 800c5a0:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800c5a2:	4a13      	ldr	r2, [pc, #76]	; (800c5f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c5a4:	4813      	ldr	r0, [pc, #76]	; (800c5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c5a6:	f006 fc25 	bl	8012df4 <__assert_func>
 800c5aa:	694b      	ldr	r3, [r1, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x20>
 800c5b0:	4b11      	ldr	r3, [pc, #68]	; (800c5f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800c5b2:	4a0f      	ldr	r2, [pc, #60]	; (800c5f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c5b4:	2124      	movs	r1, #36	; 0x24
 800c5b6:	e7f5      	b.n	800c5a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c5b8:	6148      	str	r0, [r1, #20]
 800c5ba:	618b      	str	r3, [r1, #24]
 800c5bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d102      	bne.n	800c5c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x30>
 800c5c2:	6281      	str	r1, [r0, #40]	; 0x28
 800c5c4:	bd10      	pop	{r4, pc}
 800c5c6:	0013      	movs	r3, r2
 800c5c8:	699a      	ldr	r2, [r3, #24]
 800c5ca:	2a00      	cmp	r2, #0
 800c5cc:	d005      	beq.n	800c5da <_ZN8touchgfx9Container3addERNS_8DrawableE+0x42>
 800c5ce:	428b      	cmp	r3, r1
 800c5d0:	d1f9      	bne.n	800c5c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2e>
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800c5d4:	4a06      	ldr	r2, [pc, #24]	; (800c5f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c5d6:	2135      	movs	r1, #53	; 0x35
 800c5d8:	e7e4      	b.n	800c5a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c5da:	428b      	cmp	r3, r1
 800c5dc:	d103      	bne.n	800c5e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
 800c5de:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800c5e0:	4a03      	ldr	r2, [pc, #12]	; (800c5f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c5e2:	2138      	movs	r1, #56	; 0x38
 800c5e4:	e7de      	b.n	800c5a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c5e6:	6199      	str	r1, [r3, #24]
 800c5e8:	e7ec      	b.n	800c5c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800c5ea:	46c0      	nop			; (mov r8, r8)
 800c5ec:	08015bcb 	.word	0x08015bcb
 800c5f0:	08015d20 	.word	0x08015d20
 800c5f4:	08015bf7 	.word	0x08015bf7
 800c5f8:	08015c2a 	.word	0x08015c2a
 800c5fc:	08015c60 	.word	0x08015c60

0800c600 <_ZN8touchgfx4RectaNERKS0_>:
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	2300      	movs	r3, #0
 800c604:	5ec7      	ldrsh	r7, [r0, r3]
 800c606:	2300      	movs	r3, #0
 800c608:	5ece      	ldrsh	r6, [r1, r3]
 800c60a:	888b      	ldrh	r3, [r1, #4]
 800c60c:	b085      	sub	sp, #20
 800c60e:	199b      	adds	r3, r3, r6
 800c610:	b29b      	uxth	r3, r3
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	466b      	mov	r3, sp
 800c616:	2200      	movs	r2, #0
 800c618:	5e9b      	ldrsh	r3, [r3, r2]
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	429f      	cmp	r7, r3
 800c61e:	da39      	bge.n	800c694 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c620:	8883      	ldrh	r3, [r0, #4]
 800c622:	19db      	adds	r3, r3, r7
 800c624:	b29b      	uxth	r3, r3
 800c626:	469c      	mov	ip, r3
 800c628:	b21b      	sxth	r3, r3
 800c62a:	9302      	str	r3, [sp, #8]
 800c62c:	429e      	cmp	r6, r3
 800c62e:	da31      	bge.n	800c694 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c630:	2302      	movs	r3, #2
 800c632:	5ecc      	ldrsh	r4, [r1, r3]
 800c634:	2302      	movs	r3, #2
 800c636:	5ec5      	ldrsh	r5, [r0, r3]
 800c638:	88cb      	ldrh	r3, [r1, #6]
 800c63a:	191b      	adds	r3, r3, r4
 800c63c:	b21b      	sxth	r3, r3
 800c63e:	429d      	cmp	r5, r3
 800c640:	da28      	bge.n	800c694 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c642:	88c3      	ldrh	r3, [r0, #6]
 800c644:	195b      	adds	r3, r3, r5
 800c646:	b29b      	uxth	r3, r3
 800c648:	b21a      	sxth	r2, r3
 800c64a:	9203      	str	r2, [sp, #12]
 800c64c:	4294      	cmp	r4, r2
 800c64e:	da21      	bge.n	800c694 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c650:	1c3a      	adds	r2, r7, #0
 800c652:	42b7      	cmp	r7, r6
 800c654:	da00      	bge.n	800c658 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800c656:	1c32      	adds	r2, r6, #0
 800c658:	b212      	sxth	r2, r2
 800c65a:	1c2e      	adds	r6, r5, #0
 800c65c:	42a5      	cmp	r5, r4
 800c65e:	da00      	bge.n	800c662 <_ZN8touchgfx4RectaNERKS0_+0x62>
 800c660:	1c26      	adds	r6, r4, #0
 800c662:	9c01      	ldr	r4, [sp, #4]
 800c664:	9d02      	ldr	r5, [sp, #8]
 800c666:	b236      	sxth	r6, r6
 800c668:	42ac      	cmp	r4, r5
 800c66a:	dc01      	bgt.n	800c670 <_ZN8touchgfx4RectaNERKS0_+0x70>
 800c66c:	9c00      	ldr	r4, [sp, #0]
 800c66e:	46a4      	mov	ip, r4
 800c670:	4664      	mov	r4, ip
 800c672:	1aa4      	subs	r4, r4, r2
 800c674:	8084      	strh	r4, [r0, #4]
 800c676:	884c      	ldrh	r4, [r1, #2]
 800c678:	88c9      	ldrh	r1, [r1, #6]
 800c67a:	9d03      	ldr	r5, [sp, #12]
 800c67c:	1861      	adds	r1, r4, r1
 800c67e:	b289      	uxth	r1, r1
 800c680:	b20c      	sxth	r4, r1
 800c682:	42a5      	cmp	r5, r4
 800c684:	db00      	blt.n	800c688 <_ZN8touchgfx4RectaNERKS0_+0x88>
 800c686:	000b      	movs	r3, r1
 800c688:	1b9b      	subs	r3, r3, r6
 800c68a:	80c3      	strh	r3, [r0, #6]
 800c68c:	8002      	strh	r2, [r0, #0]
 800c68e:	8046      	strh	r6, [r0, #2]
 800c690:	b005      	add	sp, #20
 800c692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c694:	2300      	movs	r3, #0
 800c696:	8003      	strh	r3, [r0, #0]
 800c698:	8043      	strh	r3, [r0, #2]
 800c69a:	8083      	strh	r3, [r0, #4]
 800c69c:	80c3      	strh	r3, [r0, #6]
 800c69e:	e7f7      	b.n	800c690 <_ZN8touchgfx4RectaNERKS0_+0x90>

0800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c6a0:	2104      	movs	r1, #4
 800c6a2:	5e42      	ldrsh	r2, [r0, r1]
 800c6a4:	0003      	movs	r3, r0
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	dd04      	ble.n	800c6b6 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c6ac:	2006      	movs	r0, #6
 800c6ae:	5e18      	ldrsh	r0, [r3, r0]
 800c6b0:	1e43      	subs	r3, r0, #1
 800c6b2:	4318      	orrs	r0, r3
 800c6b4:	0fc0      	lsrs	r0, r0, #31
 800c6b6:	4770      	bx	lr

0800c6b8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6bc:	0004      	movs	r4, r0
 800c6be:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	8003      	strh	r3, [r0, #0]
 800c6c4:	8043      	strh	r3, [r0, #2]
 800c6c6:	8083      	strh	r3, [r0, #4]
 800c6c8:	80c3      	strh	r3, [r0, #6]
 800c6ca:	2d00      	cmp	r5, #0
 800c6cc:	d048      	beq.n	800c760 <_ZNK8touchgfx9Container16getContainedAreaEv+0xa8>
 800c6ce:	1d28      	adds	r0, r5, #4
 800c6d0:	f7ff ffe6 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d111      	bne.n	800c6fc <_ZNK8touchgfx9Container16getContainedAreaEv+0x44>
 800c6d8:	0020      	movs	r0, r4
 800c6da:	f7ff ffe1 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c6de:	2304      	movs	r3, #4
 800c6e0:	5eee      	ldrsh	r6, [r5, r3]
 800c6e2:	2206      	movs	r2, #6
 800c6e4:	5eab      	ldrsh	r3, [r5, r2]
 800c6e6:	2108      	movs	r1, #8
 800c6e8:	5e6a      	ldrsh	r2, [r5, r1]
 800c6ea:	270a      	movs	r7, #10
 800c6ec:	5fe9      	ldrsh	r1, [r5, r7]
 800c6ee:	9101      	str	r1, [sp, #4]
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d005      	beq.n	800c700 <_ZNK8touchgfx9Container16getContainedAreaEv+0x48>
 800c6f4:	8026      	strh	r6, [r4, #0]
 800c6f6:	8063      	strh	r3, [r4, #2]
 800c6f8:	80a2      	strh	r2, [r4, #4]
 800c6fa:	80e1      	strh	r1, [r4, #6]
 800c6fc:	69ad      	ldr	r5, [r5, #24]
 800c6fe:	e7e4      	b.n	800c6ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c700:	2000      	movs	r0, #0
 800c702:	5e21      	ldrsh	r1, [r4, r0]
 800c704:	1c08      	adds	r0, r1, #0
 800c706:	42b1      	cmp	r1, r6
 800c708:	dd00      	ble.n	800c70c <_ZNK8touchgfx9Container16getContainedAreaEv+0x54>
 800c70a:	1c30      	adds	r0, r6, #0
 800c70c:	b200      	sxth	r0, r0
 800c70e:	9002      	str	r0, [sp, #8]
 800c710:	2002      	movs	r0, #2
 800c712:	5e27      	ldrsh	r7, [r4, r0]
 800c714:	1c38      	adds	r0, r7, #0
 800c716:	429f      	cmp	r7, r3
 800c718:	dd00      	ble.n	800c71c <_ZNK8touchgfx9Container16getContainedAreaEv+0x64>
 800c71a:	1c18      	adds	r0, r3, #0
 800c71c:	b200      	sxth	r0, r0
 800c71e:	9003      	str	r0, [sp, #12]
 800c720:	88a0      	ldrh	r0, [r4, #4]
 800c722:	18b6      	adds	r6, r6, r2
 800c724:	4684      	mov	ip, r0
 800c726:	4461      	add	r1, ip
 800c728:	1c0a      	adds	r2, r1, #0
 800c72a:	b230      	sxth	r0, r6
 800c72c:	b209      	sxth	r1, r1
 800c72e:	4281      	cmp	r1, r0
 800c730:	da00      	bge.n	800c734 <_ZNK8touchgfx9Container16getContainedAreaEv+0x7c>
 800c732:	1c32      	adds	r2, r6, #0
 800c734:	88e1      	ldrh	r1, [r4, #6]
 800c736:	b212      	sxth	r2, r2
 800c738:	19cf      	adds	r7, r1, r7
 800c73a:	9901      	ldr	r1, [sp, #4]
 800c73c:	185b      	adds	r3, r3, r1
 800c73e:	b21e      	sxth	r6, r3
 800c740:	1c39      	adds	r1, r7, #0
 800c742:	b23f      	sxth	r7, r7
 800c744:	42b7      	cmp	r7, r6
 800c746:	da00      	bge.n	800c74a <_ZNK8touchgfx9Container16getContainedAreaEv+0x92>
 800c748:	1c19      	adds	r1, r3, #0
 800c74a:	9b02      	ldr	r3, [sp, #8]
 800c74c:	8023      	strh	r3, [r4, #0]
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	8063      	strh	r3, [r4, #2]
 800c752:	9b02      	ldr	r3, [sp, #8]
 800c754:	1ad2      	subs	r2, r2, r3
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	80a2      	strh	r2, [r4, #4]
 800c75a:	1ac8      	subs	r0, r1, r3
 800c75c:	80e0      	strh	r0, [r4, #6]
 800c75e:	e7cd      	b.n	800c6fc <_ZNK8touchgfx9Container16getContainedAreaEv+0x44>
 800c760:	0020      	movs	r0, r4
 800c762:	b005      	add	sp, #20
 800c764:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c766 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c766:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c768:	1d83      	adds	r3, r0, #6
 800c76a:	7fdb      	ldrb	r3, [r3, #31]
 800c76c:	b085      	sub	sp, #20
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d031      	beq.n	800c7d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x70>
 800c772:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c774:	2c00      	cmp	r4, #0
 800c776:	d02e      	beq.n	800c7d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x70>
 800c778:	2200      	movs	r2, #0
 800c77a:	5e8b      	ldrsh	r3, [r1, r2]
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	2302      	movs	r3, #2
 800c780:	5ecd      	ldrsh	r5, [r1, r3]
 800c782:	2304      	movs	r3, #4
 800c784:	5ece      	ldrsh	r6, [r1, r3]
 800c786:	2306      	movs	r3, #6
 800c788:	5ecf      	ldrsh	r7, [r1, r3]
 800c78a:	1da3      	adds	r3, r4, #6
 800c78c:	7fdb      	ldrb	r3, [r3, #31]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d01e      	beq.n	800c7d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6a>
 800c792:	9a01      	ldr	r2, [sp, #4]
 800c794:	ab02      	add	r3, sp, #8
 800c796:	0018      	movs	r0, r3
 800c798:	801a      	strh	r2, [r3, #0]
 800c79a:	805d      	strh	r5, [r3, #2]
 800c79c:	809e      	strh	r6, [r3, #4]
 800c79e:	80df      	strh	r7, [r3, #6]
 800c7a0:	1d21      	adds	r1, r4, #4
 800c7a2:	f7ff ff2d 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800c7a6:	a802      	add	r0, sp, #8
 800c7a8:	f7ff ff7a 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d10f      	bne.n	800c7d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6a>
 800c7b0:	ab02      	add	r3, sp, #8
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	88a2      	ldrh	r2, [r4, #4]
 800c7b6:	0020      	movs	r0, r4
 800c7b8:	1a9b      	subs	r3, r3, r2
 800c7ba:	aa02      	add	r2, sp, #8
 800c7bc:	8013      	strh	r3, [r2, #0]
 800c7be:	8853      	ldrh	r3, [r2, #2]
 800c7c0:	88e2      	ldrh	r2, [r4, #6]
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	aa02      	add	r2, sp, #8
 800c7c6:	8053      	strh	r3, [r2, #2]
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	0011      	movs	r1, r2
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	4798      	blx	r3
 800c7d0:	69a4      	ldr	r4, [r4, #24]
 800c7d2:	2c00      	cmp	r4, #0
 800c7d4:	d1d9      	bne.n	800c78a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
 800c7d6:	b005      	add	sp, #20
 800c7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7dc:	1d83      	adds	r3, r0, #6
 800c7de:	7fdb      	ldrb	r3, [r3, #31]
 800c7e0:	000d      	movs	r5, r1
 800c7e2:	0016      	movs	r6, r2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d027      	beq.n	800c838 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5e>
 800c7e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c7ea:	2c00      	cmp	r4, #0
 800c7ec:	d024      	beq.n	800c838 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5e>
 800c7ee:	1da3      	adds	r3, r4, #6
 800c7f0:	7fdb      	ldrb	r3, [r3, #31]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d01e      	beq.n	800c834 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
 800c7f6:	2208      	movs	r2, #8
 800c7f8:	0029      	movs	r1, r5
 800c7fa:	4668      	mov	r0, sp
 800c7fc:	f006 fb6e 	bl	8012edc <memcpy>
 800c800:	4668      	mov	r0, sp
 800c802:	1d21      	adds	r1, r4, #4
 800c804:	f7ff fefc 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800c808:	4668      	mov	r0, sp
 800c80a:	f7ff ff49 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d110      	bne.n	800c834 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
 800c812:	466b      	mov	r3, sp
 800c814:	88a2      	ldrh	r2, [r4, #4]
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	4669      	mov	r1, sp
 800c81a:	1a9b      	subs	r3, r3, r2
 800c81c:	466a      	mov	r2, sp
 800c81e:	8013      	strh	r3, [r2, #0]
 800c820:	8853      	ldrh	r3, [r2, #2]
 800c822:	88e2      	ldrh	r2, [r4, #6]
 800c824:	0020      	movs	r0, r4
 800c826:	1a9b      	subs	r3, r3, r2
 800c828:	466a      	mov	r2, sp
 800c82a:	8053      	strh	r3, [r2, #2]
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	0032      	movs	r2, r6
 800c830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c832:	4798      	blx	r3
 800c834:	69a4      	ldr	r4, [r4, #24]
 800c836:	e7d8      	b.n	800c7ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x10>
 800c838:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

0800c83c <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv>:
 800c83c:	b530      	push	{r4, r5, lr}
 800c83e:	4b1b      	ldr	r3, [pc, #108]	; (800c8ac <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x70>)
 800c840:	b085      	sub	sp, #20
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	699c      	ldr	r4, [r3, #24]
 800c846:	f7ff faa1 	bl	800bd8c <_ZN8touchgfx14transmitActiveEv>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d1fb      	bne.n	800c846 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0xa>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	0020      	movs	r0, r4
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	4798      	blx	r3
 800c856:	2800      	cmp	r0, #0
 800c858:	d026      	beq.n	800c8a8 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x6c>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	0020      	movs	r0, r4
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	4798      	blx	r3
 800c862:	ad02      	add	r5, sp, #8
 800c864:	0001      	movs	r1, r0
 800c866:	2208      	movs	r2, #8
 800c868:	0028      	movs	r0, r5
 800c86a:	f006 fb37 	bl	8012edc <memcpy>
 800c86e:	8868      	ldrh	r0, [r5, #2]
 800c870:	88eb      	ldrh	r3, [r5, #6]
 800c872:	18c0      	adds	r0, r0, r3
 800c874:	b280      	uxth	r0, r0
 800c876:	f7ff fa91 	bl	800bd9c <_ZN8touchgfx19shouldTransferBlockEt>
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d0f7      	beq.n	800c86e <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x32>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	0029      	movs	r1, r5
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	0020      	movs	r0, r4
 800c886:	4798      	blx	r3
 800c888:	88ab      	ldrh	r3, [r5, #4]
 800c88a:	886a      	ldrh	r2, [r5, #2]
 800c88c:	8829      	ldrh	r1, [r5, #0]
 800c88e:	88ed      	ldrh	r5, [r5, #6]
 800c890:	9500      	str	r5, [sp, #0]
 800c892:	f7ff fa93 	bl	800bdbc <_ZN8touchgfx13transmitBlockEPKhtttt>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	0020      	movs	r0, r4
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	4798      	blx	r3
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d0d5      	beq.n	800c84e <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x12>
 800c8a2:	f7ff fa73 	bl	800bd8c <_ZN8touchgfx14transmitActiveEv>
 800c8a6:	e7fa      	b.n	800c89e <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x62>
 800c8a8:	b005      	add	sp, #20
 800c8aa:	bd30      	pop	{r4, r5, pc}
 800c8ac:	200034cc 	.word	0x200034cc

0800c8b0 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv>:
 800c8b0:	b530      	push	{r4, r5, lr}
 800c8b2:	4b1d      	ldr	r3, [pc, #116]	; (800c928 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x78>)
 800c8b4:	b085      	sub	sp, #20
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	699d      	ldr	r5, [r3, #24]
 800c8ba:	682b      	ldr	r3, [r5, #0]
 800c8bc:	0028      	movs	r0, r5
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	4798      	blx	r3
 800c8c2:	f7ff fa63 	bl	800bd8c <_ZN8touchgfx14transmitActiveEv>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d11d      	bne.n	800c906 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x56>
 800c8ca:	682b      	ldr	r3, [r5, #0]
 800c8cc:	0028      	movs	r0, r5
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4798      	blx	r3
 800c8d2:	ac02      	add	r4, sp, #8
 800c8d4:	0001      	movs	r1, r0
 800c8d6:	2208      	movs	r2, #8
 800c8d8:	0020      	movs	r0, r4
 800c8da:	f006 faff 	bl	8012edc <memcpy>
 800c8de:	8863      	ldrh	r3, [r4, #2]
 800c8e0:	88e0      	ldrh	r0, [r4, #6]
 800c8e2:	18c0      	adds	r0, r0, r3
 800c8e4:	b280      	uxth	r0, r0
 800c8e6:	f7ff fa59 	bl	800bd9c <_ZN8touchgfx19shouldTransferBlockEt>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d00c      	beq.n	800c90a <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x5a>
 800c8f0:	0021      	movs	r1, r4
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	0028      	movs	r0, r5
 800c8f6:	4798      	blx	r3
 800c8f8:	88a3      	ldrh	r3, [r4, #4]
 800c8fa:	8862      	ldrh	r2, [r4, #2]
 800c8fc:	8821      	ldrh	r1, [r4, #0]
 800c8fe:	88e4      	ldrh	r4, [r4, #6]
 800c900:	9400      	str	r4, [sp, #0]
 800c902:	f7ff fa5b 	bl	800bdbc <_ZN8touchgfx13transmitBlockEPKhtttt>
 800c906:	b005      	add	sp, #20
 800c908:	bd30      	pop	{r4, r5, pc}
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	0028      	movs	r0, r5
 800c90e:	4798      	blx	r3
 800c910:	2800      	cmp	r0, #0
 800c912:	d1f8      	bne.n	800c906 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x56>
 800c914:	8860      	ldrh	r0, [r4, #2]
 800c916:	88e3      	ldrh	r3, [r4, #6]
 800c918:	18c0      	adds	r0, r0, r3
 800c91a:	b280      	uxth	r0, r0
 800c91c:	f7ff fa3e 	bl	800bd9c <_ZN8touchgfx19shouldTransferBlockEt>
 800c920:	2800      	cmp	r0, #0
 800c922:	d0f7      	beq.n	800c914 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x64>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	e7e3      	b.n	800c8f0 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x40>
 800c928:	200034cc 	.word	0x200034cc

0800c92c <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv>:
 800c92c:	b530      	push	{r4, r5, lr}
 800c92e:	4b17      	ldr	r3, [pc, #92]	; (800c98c <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv+0x60>)
 800c930:	b085      	sub	sp, #20
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	699d      	ldr	r5, [r3, #24]
 800c936:	682b      	ldr	r3, [r5, #0]
 800c938:	0028      	movs	r0, r5
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	4798      	blx	r3
 800c93e:	682b      	ldr	r3, [r5, #0]
 800c940:	0028      	movs	r0, r5
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	4798      	blx	r3
 800c946:	2800      	cmp	r0, #0
 800c948:	d01d      	beq.n	800c986 <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv+0x5a>
 800c94a:	682b      	ldr	r3, [r5, #0]
 800c94c:	0028      	movs	r0, r5
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	4798      	blx	r3
 800c952:	ac02      	add	r4, sp, #8
 800c954:	0001      	movs	r1, r0
 800c956:	2208      	movs	r2, #8
 800c958:	0020      	movs	r0, r4
 800c95a:	f006 fabf 	bl	8012edc <memcpy>
 800c95e:	8860      	ldrh	r0, [r4, #2]
 800c960:	88e3      	ldrh	r3, [r4, #6]
 800c962:	18c0      	adds	r0, r0, r3
 800c964:	b280      	uxth	r0, r0
 800c966:	f7ff fa19 	bl	800bd9c <_ZN8touchgfx19shouldTransferBlockEt>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d00b      	beq.n	800c986 <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv+0x5a>
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	0021      	movs	r1, r4
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	0028      	movs	r0, r5
 800c976:	4798      	blx	r3
 800c978:	88a3      	ldrh	r3, [r4, #4]
 800c97a:	8862      	ldrh	r2, [r4, #2]
 800c97c:	8821      	ldrh	r1, [r4, #0]
 800c97e:	88e4      	ldrh	r4, [r4, #6]
 800c980:	9400      	str	r4, [sp, #0]
 800c982:	f7ff fa1b 	bl	800bdbc <_ZN8touchgfx13transmitBlockEPKhtttt>
 800c986:	b005      	add	sp, #20
 800c988:	bd30      	pop	{r4, r5, pc}
 800c98a:	46c0      	nop			; (mov r8, r8)
 800c98c:	200034cc 	.word	0x200034cc

0800c990 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c990:	b513      	push	{r0, r1, r4, lr}
 800c992:	6803      	ldr	r3, [r0, #0]
 800c994:	3390      	adds	r3, #144	; 0x90
 800c996:	681c      	ldr	r4, [r3, #0]
 800c998:	2300      	movs	r3, #0
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	466b      	mov	r3, sp
 800c9a0:	47a0      	blx	r4
 800c9a2:	bd13      	pop	{r0, r1, r4, pc}

0800c9a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c9a4:	0002      	movs	r2, r0
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	324b      	adds	r2, #75	; 0x4b
 800c9aa:	3069      	adds	r0, #105	; 0x69
 800c9ac:	7013      	strb	r3, [r2, #0]
 800c9ae:	7003      	strb	r3, [r0, #0]
 800c9b0:	4770      	bx	lr

0800c9b2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c9b2:	0002      	movs	r2, r0
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	324b      	adds	r2, #75	; 0x4b
 800c9b8:	3069      	adds	r0, #105	; 0x69
 800c9ba:	7013      	strb	r3, [r2, #0]
 800c9bc:	7003      	strb	r3, [r0, #0]
 800c9be:	4770      	bx	lr

0800c9c0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	b510      	push	{r4, lr}
 800c9c4:	6842      	ldr	r2, [r0, #4]
 800c9c6:	7253      	strb	r3, [r2, #9]
 800c9c8:	6840      	ldr	r0, [r0, #4]
 800c9ca:	6803      	ldr	r3, [r0, #0]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	4798      	blx	r3
 800c9d0:	bd10      	pop	{r4, pc}

0800c9d2 <_ZN8touchgfx3HAL8flushDMAEv>:
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	6840      	ldr	r0, [r0, #4]
 800c9d6:	6803      	ldr	r3, [r0, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	4798      	blx	r3
 800c9dc:	bd10      	pop	{r4, pc}
	...

0800c9e0 <_ZN8touchgfx3HAL10beginFrameEv>:
 800c9e0:	4b04      	ldr	r3, [pc, #16]	; (800c9f4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	2a00      	cmp	r2, #0
 800c9e8:	d002      	beq.n	800c9f0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c9ea:	306a      	adds	r0, #106	; 0x6a
 800c9ec:	7802      	ldrb	r2, [r0, #0]
 800c9ee:	4053      	eors	r3, r2
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	4770      	bx	lr
 800c9f4:	200034ca 	.word	0x200034ca

0800c9f8 <_ZN8touchgfx3HAL8endFrameEv>:
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	0004      	movs	r4, r0
 800c9fc:	6840      	ldr	r0, [r0, #4]
 800c9fe:	6803      	ldr	r3, [r0, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	4798      	blx	r3
 800ca04:	0023      	movs	r3, r4
 800ca06:	3369      	adds	r3, #105	; 0x69
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <_ZN8touchgfx3HAL8endFrameEv+0x1c>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	346a      	adds	r4, #106	; 0x6a
 800ca12:	7023      	strb	r3, [r4, #0]
 800ca14:	bd10      	pop	{r4, pc}

0800ca16 <_ZN8touchgfx3HAL9taskEntryEv>:
 800ca16:	b510      	push	{r4, lr}
 800ca18:	0004      	movs	r4, r0
 800ca1a:	6803      	ldr	r3, [r0, #0]
 800ca1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca1e:	4798      	blx	r3
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca24:	0020      	movs	r0, r4
 800ca26:	4798      	blx	r3
 800ca28:	f7fe fa78 	bl	800af1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca30:	e7f8      	b.n	800ca24 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800ca34 <_ZN8touchgfx3HAL4tickEv>:
 800ca34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca36:	6803      	ldr	r3, [r0, #0]
 800ca38:	b085      	sub	sp, #20
 800ca3a:	3398      	adds	r3, #152	; 0x98
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	0004      	movs	r4, r0
 800ca40:	4798      	blx	r3
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d100      	bne.n	800ca48 <_ZN8touchgfx3HAL4tickEv+0x14>
 800ca46:	e0a6      	b.n	800cb96 <_ZN8touchgfx3HAL4tickEv+0x162>
 800ca48:	2001      	movs	r0, #1
 800ca4a:	f7fd ff2f 	bl	800a8ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ca4e:	0023      	movs	r3, r4
 800ca50:	0025      	movs	r5, r4
 800ca52:	2600      	movs	r6, #0
 800ca54:	0027      	movs	r7, r4
 800ca56:	3366      	adds	r3, #102	; 0x66
 800ca58:	781a      	ldrb	r2, [r3, #0]
 800ca5a:	3567      	adds	r5, #103	; 0x67
 800ca5c:	702a      	strb	r2, [r5, #0]
 800ca5e:	3b1b      	subs	r3, #27
 800ca60:	76de      	strb	r6, [r3, #27]
 800ca62:	3775      	adds	r7, #117	; 0x75
 800ca64:	701e      	strb	r6, [r3, #0]
 800ca66:	783b      	ldrb	r3, [r7, #0]
 800ca68:	42b3      	cmp	r3, r6
 800ca6a:	d005      	beq.n	800ca78 <_ZN8touchgfx3HAL4tickEv+0x44>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	0020      	movs	r0, r4
 800ca70:	33ac      	adds	r3, #172	; 0xac
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4798      	blx	r3
 800ca76:	703e      	strb	r6, [r7, #0]
 800ca78:	0023      	movs	r3, r4
 800ca7a:	2601      	movs	r6, #1
 800ca7c:	334a      	adds	r3, #74	; 0x4a
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	6862      	ldr	r2, [r4, #4]
 800ca82:	4073      	eors	r3, r6
 800ca84:	7253      	strb	r3, [r2, #9]
 800ca86:	4b4f      	ldr	r3, [pc, #316]	; (800cbc4 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800ca88:	701e      	strb	r6, [r3, #0]
 800ca8a:	f002 f913 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800ca8e:	6803      	ldr	r3, [r0, #0]
 800ca90:	0031      	movs	r1, r6
 800ca92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca94:	4798      	blx	r3
 800ca96:	782b      	ldrb	r3, [r5, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d100      	bne.n	800ca9e <_ZN8touchgfx3HAL4tickEv+0x6a>
 800ca9c:	702e      	strb	r6, [r5, #0]
 800ca9e:	f002 f909 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800caa2:	6803      	ldr	r3, [r0, #0]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	4798      	blx	r3
 800caa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	4798      	blx	r3
 800cab0:	0022      	movs	r2, r4
 800cab2:	782b      	ldrb	r3, [r5, #0]
 800cab4:	3268      	adds	r2, #104	; 0x68
 800cab6:	3b01      	subs	r3, #1
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	702b      	strb	r3, [r5, #0]
 800cabc:	7812      	ldrb	r2, [r2, #0]
 800cabe:	2a00      	cmp	r2, #0
 800cac0:	d001      	beq.n	800cac6 <_ZN8touchgfx3HAL4tickEv+0x92>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1eb      	bne.n	800ca9e <_ZN8touchgfx3HAL4tickEv+0x6a>
 800cac6:	0021      	movs	r1, r4
 800cac8:	4a3f      	ldr	r2, [pc, #252]	; (800cbc8 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800caca:	3164      	adds	r1, #100	; 0x64
 800cacc:	7813      	ldrb	r3, [r2, #0]
 800cace:	3301      	adds	r3, #1
 800cad0:	b25b      	sxtb	r3, r3
 800cad2:	7013      	strb	r3, [r2, #0]
 800cad4:	7809      	ldrb	r1, [r1, #0]
 800cad6:	b249      	sxtb	r1, r1
 800cad8:	4299      	cmp	r1, r3
 800cada:	dc10      	bgt.n	800cafe <_ZN8touchgfx3HAL4tickEv+0xca>
 800cadc:	2300      	movs	r3, #0
 800cade:	68e0      	ldr	r0, [r4, #12]
 800cae0:	7013      	strb	r3, [r2, #0]
 800cae2:	6803      	ldr	r3, [r0, #0]
 800cae4:	aa03      	add	r2, sp, #12
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	a902      	add	r1, sp, #8
 800caea:	4798      	blx	r3
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	2800      	cmp	r0, #0
 800caf0:	d05e      	beq.n	800cbb0 <_ZN8touchgfx3HAL4tickEv+0x17c>
 800caf2:	33a4      	adds	r3, #164	; 0xa4
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	9a03      	ldr	r2, [sp, #12]
 800caf8:	9902      	ldr	r1, [sp, #8]
 800cafa:	0020      	movs	r0, r4
 800cafc:	4798      	blx	r3
 800cafe:	466b      	mov	r3, sp
 800cb00:	1ddd      	adds	r5, r3, #7
 800cb02:	2300      	movs	r3, #0
 800cb04:	6960      	ldr	r0, [r4, #20]
 800cb06:	702b      	strb	r3, [r5, #0]
 800cb08:	4298      	cmp	r0, r3
 800cb0a:	d00a      	beq.n	800cb22 <_ZN8touchgfx3HAL4tickEv+0xee>
 800cb0c:	6803      	ldr	r3, [r0, #0]
 800cb0e:	0029      	movs	r1, r5
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	4798      	blx	r3
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d004      	beq.n	800cb22 <_ZN8touchgfx3HAL4tickEv+0xee>
 800cb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb1a:	7829      	ldrb	r1, [r5, #0]
 800cb1c:	6803      	ldr	r3, [r0, #0]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	4798      	blx	r3
 800cb22:	0020      	movs	r0, r4
 800cb24:	301c      	adds	r0, #28
 800cb26:	f006 f897 	bl	8012c58 <_ZN8touchgfx8Gestures4tickEv>
 800cb2a:	0023      	movs	r3, r4
 800cb2c:	336c      	adds	r3, #108	; 0x6c
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d02a      	beq.n	800cb8a <_ZN8touchgfx3HAL4tickEv+0x156>
 800cb34:	6920      	ldr	r0, [r4, #16]
 800cb36:	6803      	ldr	r3, [r0, #0]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	4798      	blx	r3
 800cb3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb3e:	0005      	movs	r5, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d100      	bne.n	800cb46 <_ZN8touchgfx3HAL4tickEv+0x112>
 800cb44:	6720      	str	r0, [r4, #112]	; 0x70
 800cb46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb48:	4a20      	ldr	r2, [pc, #128]	; (800cbcc <_ZN8touchgfx3HAL4tickEv+0x198>)
 800cb4a:	1aeb      	subs	r3, r5, r3
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d91c      	bls.n	800cb8a <_ZN8touchgfx3HAL4tickEv+0x156>
 800cb50:	6920      	ldr	r0, [r4, #16]
 800cb52:	6803      	ldr	r3, [r0, #0]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	4798      	blx	r3
 800cb58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb5a:	0006      	movs	r6, r0
 800cb5c:	2164      	movs	r1, #100	; 0x64
 800cb5e:	1ae8      	subs	r0, r5, r3
 800cb60:	f7f3 fadc 	bl	800011c <__udivsi3>
 800cb64:	0001      	movs	r1, r0
 800cb66:	0030      	movs	r0, r6
 800cb68:	f7f3 fad8 	bl	800011c <__udivsi3>
 800cb6c:	0023      	movs	r3, r4
 800cb6e:	2264      	movs	r2, #100	; 0x64
 800cb70:	3365      	adds	r3, #101	; 0x65
 800cb72:	2800      	cmp	r0, #0
 800cb74:	dd02      	ble.n	800cb7c <_ZN8touchgfx3HAL4tickEv+0x148>
 800cb76:	2863      	cmp	r0, #99	; 0x63
 800cb78:	dd1f      	ble.n	800cbba <_ZN8touchgfx3HAL4tickEv+0x186>
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	6920      	ldr	r0, [r4, #16]
 800cb80:	2100      	movs	r1, #0
 800cb82:	6803      	ldr	r3, [r0, #0]
 800cb84:	69db      	ldr	r3, [r3, #28]
 800cb86:	4798      	blx	r3
 800cb88:	6725      	str	r5, [r4, #112]	; 0x70
 800cb8a:	f002 f893 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800cb8e:	6803      	ldr	r3, [r0, #0]
 800cb90:	2100      	movs	r1, #0
 800cb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb94:	4798      	blx	r3
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	0020      	movs	r0, r4
 800cb9a:	339c      	adds	r3, #156	; 0x9c
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4798      	blx	r3
 800cba0:	2001      	movs	r0, #1
 800cba2:	f7fd fe8d 	bl	800a8c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cba6:	2300      	movs	r3, #0
 800cba8:	4a06      	ldr	r2, [pc, #24]	; (800cbc4 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800cbaa:	7013      	strb	r3, [r2, #0]
 800cbac:	b005      	add	sp, #20
 800cbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb0:	33a8      	adds	r3, #168	; 0xa8
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	0020      	movs	r0, r4
 800cbb6:	4798      	blx	r3
 800cbb8:	e7a1      	b.n	800cafe <_ZN8touchgfx3HAL4tickEv+0xca>
 800cbba:	2264      	movs	r2, #100	; 0x64
 800cbbc:	1a10      	subs	r0, r2, r0
 800cbbe:	7018      	strb	r0, [r3, #0]
 800cbc0:	e7dd      	b.n	800cb7e <_ZN8touchgfx3HAL4tickEv+0x14a>
 800cbc2:	46c0      	nop			; (mov r8, r8)
 800cbc4:	200034d0 	.word	0x200034d0
 800cbc8:	200034d1 	.word	0x200034d1
 800cbcc:	05f5e100 	.word	0x05f5e100

0800cbd0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800cbd0:	b510      	push	{r4, lr}
 800cbd2:	f7fe f961 	bl	800ae98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800cbd6:	bd10      	pop	{r4, pc}

0800cbd8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	301c      	adds	r0, #28
 800cbdc:	63c1      	str	r1, [r0, #60]	; 0x3c
 800cbde:	f006 f839 	bl	8012c54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>
 800cbe2:	bd10      	pop	{r4, pc}

0800cbe4 <_ZN8touchgfx3HAL5touchEll>:
 800cbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe6:	0004      	movs	r4, r0
 800cbe8:	250e      	movs	r5, #14
 800cbea:	b087      	sub	sp, #28
 800cbec:	a804      	add	r0, sp, #16
 800cbee:	9104      	str	r1, [sp, #16]
 800cbf0:	9205      	str	r2, [sp, #20]
 800cbf2:	f001 fe07 	bl	800e804 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	ae03      	add	r6, sp, #12
 800cbfa:	0027      	movs	r7, r4
 800cbfc:	446d      	add	r5, sp
 800cbfe:	8033      	strh	r3, [r6, #0]
 800cc00:	9b05      	ldr	r3, [sp, #20]
 800cc02:	0029      	movs	r1, r5
 800cc04:	0030      	movs	r0, r6
 800cc06:	802b      	strh	r3, [r5, #0]
 800cc08:	f001 fe48 	bl	800e89c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800cc0c:	0020      	movs	r0, r4
 800cc0e:	376b      	adds	r7, #107	; 0x6b
 800cc10:	8833      	ldrh	r3, [r6, #0]
 800cc12:	7839      	ldrb	r1, [r7, #0]
 800cc14:	469c      	mov	ip, r3
 800cc16:	301c      	adds	r0, #28
 800cc18:	882b      	ldrh	r3, [r5, #0]
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d011      	beq.n	800cc42 <_ZN8touchgfx3HAL5touchEll+0x5e>
 800cc1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800cc20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	b292      	uxth	r2, r2
 800cc26:	b289      	uxth	r1, r1
 800cc28:	4663      	mov	r3, ip
 800cc2a:	f006 f823 	bl	8012c74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d005      	beq.n	800cc3e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800cc32:	2200      	movs	r2, #0
 800cc34:	5eb3      	ldrsh	r3, [r6, r2]
 800cc36:	65e3      	str	r3, [r4, #92]	; 0x5c
 800cc38:	2200      	movs	r2, #0
 800cc3a:	5eab      	ldrsh	r3, [r5, r2]
 800cc3c:	6623      	str	r3, [r4, #96]	; 0x60
 800cc3e:	b007      	add	sp, #28
 800cc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc42:	4662      	mov	r2, ip
 800cc44:	f006 f852 	bl	8012cec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	703b      	strb	r3, [r7, #0]
 800cc4c:	e7f1      	b.n	800cc32 <_ZN8touchgfx3HAL5touchEll+0x4e>

0800cc4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800cc4e:	b510      	push	{r4, lr}
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00a      	beq.n	800cc6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x1c>
 800cc54:	0008      	movs	r0, r1
 800cc56:	2401      	movs	r4, #1
 800cc58:	4050      	eors	r0, r2
 800cc5a:	4220      	tst	r0, r4
 800cc5c:	d007      	beq.n	800cc6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800cc5e:	2000      	movs	r0, #0
 800cc60:	5c14      	ldrb	r4, [r2, r0]
 800cc62:	540c      	strb	r4, [r1, r0]
 800cc64:	3001      	adds	r0, #1
 800cc66:	4283      	cmp	r3, r0
 800cc68:	d1fa      	bne.n	800cc60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	bd10      	pop	{r4, pc}
 800cc6e:	4222      	tst	r2, r4
 800cc70:	d004      	beq.n	800cc7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x2e>
 800cc72:	7810      	ldrb	r0, [r2, #0]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	7008      	strb	r0, [r1, #0]
 800cc78:	3201      	adds	r2, #1
 800cc7a:	3101      	adds	r1, #1
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d926      	bls.n	800ccce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800cc80:	0008      	movs	r0, r1
 800cc82:	2403      	movs	r4, #3
 800cc84:	4050      	eors	r0, r2
 800cc86:	4220      	tst	r0, r4
 800cc88:	d01a      	beq.n	800ccc0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	5a14      	ldrh	r4, [r2, r0]
 800cc8e:	520c      	strh	r4, [r1, r0]
 800cc90:	3002      	adds	r0, #2
 800cc92:	1a1c      	subs	r4, r3, r0
 800cc94:	2c01      	cmp	r4, #1
 800cc96:	d8f9      	bhi.n	800cc8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x3e>
 800cc98:	1e98      	subs	r0, r3, #2
 800cc9a:	0840      	lsrs	r0, r0, #1
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	0040      	lsls	r0, r0, #1
 800cca0:	1809      	adds	r1, r1, r0
 800cca2:	1812      	adds	r2, r2, r0
 800cca4:	2001      	movs	r0, #1
 800cca6:	4003      	ands	r3, r0
 800cca8:	0898      	lsrs	r0, r3, #2
 800ccaa:	0080      	lsls	r0, r0, #2
 800ccac:	1a1b      	subs	r3, r3, r0
 800ccae:	1812      	adds	r2, r2, r0
 800ccb0:	1809      	adds	r1, r1, r0
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	4283      	cmp	r3, r0
 800ccb6:	d0d8      	beq.n	800cc6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x1c>
 800ccb8:	5c14      	ldrb	r4, [r2, r0]
 800ccba:	540c      	strb	r4, [r1, r0]
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	e7f9      	b.n	800ccb4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800ccc0:	4222      	tst	r2, r4
 800ccc2:	d004      	beq.n	800ccce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800ccc4:	8810      	ldrh	r0, [r2, #0]
 800ccc6:	3b02      	subs	r3, #2
 800ccc8:	8008      	strh	r0, [r1, #0]
 800ccca:	3202      	adds	r2, #2
 800cccc:	3102      	adds	r1, #2
 800ccce:	2000      	movs	r0, #0
 800ccd0:	1a1c      	subs	r4, r3, r0
 800ccd2:	2c03      	cmp	r4, #3
 800ccd4:	d9e8      	bls.n	800cca8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5a>
 800ccd6:	5814      	ldr	r4, [r2, r0]
 800ccd8:	500c      	str	r4, [r1, r0]
 800ccda:	3004      	adds	r0, #4
 800ccdc:	e7f8      	b.n	800ccd0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x82>

0800ccde <_ZN8touchgfx3HAL7noTouchEv>:
 800ccde:	b510      	push	{r4, lr}
 800cce0:	0004      	movs	r4, r0
 800cce2:	346b      	adds	r4, #107	; 0x6b
 800cce4:	7823      	ldrb	r3, [r4, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800ccea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800ccec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	b292      	uxth	r2, r2
 800ccf2:	301c      	adds	r0, #28
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	f005 fff9 	bl	8012cec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	7023      	strb	r3, [r4, #0]
 800ccfe:	bd10      	pop	{r4, pc}

0800cd00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800cd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd02:	0005      	movs	r5, r0
 800cd04:	b087      	sub	sp, #28
 800cd06:	6980      	ldr	r0, [r0, #24]
 800cd08:	9302      	str	r3, [sp, #8]
 800cd0a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd0c:	0014      	movs	r4, r2
 800cd0e:	000f      	movs	r7, r1
 800cd10:	881a      	ldrh	r2, [r3, #0]
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d106      	bne.n	800cd24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x24>
 800cd16:	2130      	movs	r1, #48	; 0x30
 800cd18:	4b1c      	ldr	r3, [pc, #112]	; (800cd8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800cd1a:	4a1d      	ldr	r2, [pc, #116]	; (800cd90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800cd1c:	31ff      	adds	r1, #255	; 0xff
 800cd1e:	481d      	ldr	r0, [pc, #116]	; (800cd94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800cd20:	f006 f868 	bl	8012df4 <__assert_func>
 800cd24:	2300      	movs	r3, #0
 800cd26:	9305      	str	r3, [sp, #20]
 800cd28:	6803      	ldr	r3, [r0, #0]
 800cd2a:	a905      	add	r1, sp, #20
 800cd2c:	9101      	str	r1, [sp, #4]
 800cd2e:	9200      	str	r2, [sp, #0]
 800cd30:	681e      	ldr	r6, [r3, #0]
 800cd32:	0022      	movs	r2, r4
 800cd34:	9b02      	ldr	r3, [sp, #8]
 800cd36:	0039      	movs	r1, r7
 800cd38:	47b0      	blx	r6
 800cd3a:	9b02      	ldr	r3, [sp, #8]
 800cd3c:	4e16      	ldr	r6, [pc, #88]	; (800cd98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 800cd3e:	9003      	str	r0, [sp, #12]
 800cd40:	8033      	strh	r3, [r6, #0]
 800cd42:	f7fc fcb1 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800cd46:	6803      	ldr	r3, [r0, #0]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	4798      	blx	r3
 800cd4c:	280c      	cmp	r0, #12
 800cd4e:	d80f      	bhi.n	800cd70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x70>
 800cd50:	f7f3 f9da 	bl	8000108 <__gnu_thumb1_case_uqi>
 800cd54:	17171107 	.word	0x17171107
 800cd58:	17171717 	.word	0x17171717
 800cd5c:	17171717 	.word	0x17171717
 800cd60:	17          	.byte	0x17
 800cd61:	00          	.byte	0x00
 800cd62:	8833      	ldrh	r3, [r6, #0]
 800cd64:	435c      	muls	r4, r3
 800cd66:	19e4      	adds	r4, r4, r7
 800cd68:	0064      	lsls	r4, r4, #1
 800cd6a:	9b05      	ldr	r3, [sp, #20]
 800cd6c:	1b1c      	subs	r4, r3, r4
 800cd6e:	63ec      	str	r4, [r5, #60]	; 0x3c
 800cd70:	9803      	ldr	r0, [sp, #12]
 800cd72:	b007      	add	sp, #28
 800cd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd76:	8833      	ldrh	r3, [r6, #0]
 800cd78:	435c      	muls	r4, r3
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	19e4      	adds	r4, r4, r7
 800cd7e:	435c      	muls	r4, r3
 800cd80:	e7f3      	b.n	800cd6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cd82:	21a6      	movs	r1, #166	; 0xa6
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 800cd86:	4a02      	ldr	r2, [pc, #8]	; (800cd90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800cd88:	0049      	lsls	r1, r1, #1
 800cd8a:	e7c8      	b.n	800cd1e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1e>
 800cd8c:	08015dc9 	.word	0x08015dc9
 800cd90:	080160de 	.word	0x080160de
 800cd94:	08015e0e 	.word	0x08015e0e
 800cd98:	200034c6 	.word	0x200034c6
 800cd9c:	08015e34 	.word	0x08015e34

0800cda0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800cda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda2:	b08d      	sub	sp, #52	; 0x34
 800cda4:	930a      	str	r3, [sp, #40]	; 0x28
 800cda6:	ab12      	add	r3, sp, #72	; 0x48
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	9108      	str	r1, [sp, #32]
 800cdac:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdae:	ab13      	add	r3, sp, #76	; 0x4c
 800cdb0:	881d      	ldrh	r5, [r3, #0]
 800cdb2:	ab14      	add	r3, sp, #80	; 0x50
 800cdb4:	781e      	ldrb	r6, [r3, #0]
 800cdb6:	6803      	ldr	r3, [r0, #0]
 800cdb8:	9209      	str	r2, [sp, #36]	; 0x24
 800cdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdbc:	0004      	movs	r4, r0
 800cdbe:	9307      	str	r3, [sp, #28]
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x4c>)
 800cdc2:	881f      	ldrh	r7, [r3, #0]
 800cdc4:	f7fc fc70 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800cdc8:	6803      	ldr	r3, [r0, #0]
 800cdca:	6a1b      	ldr	r3, [r3, #32]
 800cdcc:	4798      	blx	r3
 800cdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd0:	9004      	str	r0, [sp, #16]
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	0020      	movs	r0, r4
 800cdd6:	9703      	str	r7, [sp, #12]
 800cdd8:	9602      	str	r6, [sp, #8]
 800cdda:	9501      	str	r5, [sp, #4]
 800cddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cde0:	9908      	ldr	r1, [sp, #32]
 800cde2:	9c07      	ldr	r4, [sp, #28]
 800cde4:	47a0      	blx	r4
 800cde6:	b00d      	add	sp, #52	; 0x34
 800cde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	200034c6 	.word	0x200034c6

0800cdf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800cdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdf2:	0005      	movs	r5, r0
 800cdf4:	b08d      	sub	sp, #52	; 0x34
 800cdf6:	0010      	movs	r0, r2
 800cdf8:	000f      	movs	r7, r1
 800cdfa:	9200      	str	r2, [sp, #0]
 800cdfc:	9301      	str	r3, [sp, #4]
 800cdfe:	f003 feef 	bl	8010be0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d100      	bne.n	800ce08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18>
 800ce06:	e08e      	b.n	800cf26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x136>
 800ce08:	4c4a      	ldr	r4, [pc, #296]	; (800cf34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>)
 800ce0a:	ae09      	add	r6, sp, #36	; 0x24
 800ce0c:	6820      	ldr	r0, [r4, #0]
 800ce0e:	6803      	ldr	r3, [r0, #0]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	4798      	blx	r3
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	6803      	ldr	r3, [r0, #0]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1a:	4798      	blx	r3
 800ce1c:	9b00      	ldr	r3, [sp, #0]
 800ce1e:	0030      	movs	r0, r6
 800ce20:	8033      	strh	r3, [r6, #0]
 800ce22:	4b45      	ldr	r3, [pc, #276]	; (800cf38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x148>)
 800ce24:	881b      	ldrh	r3, [r3, #0]
 800ce26:	9302      	str	r3, [sp, #8]
 800ce28:	4b44      	ldr	r3, [pc, #272]	; (800cf3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14c>)
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	9303      	str	r3, [sp, #12]
 800ce2e:	f003 ff99 	bl	8010d64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ce32:	4b41      	ldr	r3, [pc, #260]	; (800cf38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x148>)
 800ce34:	8018      	strh	r0, [r3, #0]
 800ce36:	0030      	movs	r0, r6
 800ce38:	f003 ffd0 	bl	8010ddc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ce3c:	6826      	ldr	r6, [r4, #0]
 800ce3e:	4b3f      	ldr	r3, [pc, #252]	; (800cf3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14c>)
 800ce40:	8018      	strh	r0, [r3, #0]
 800ce42:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800ce44:	9800      	ldr	r0, [sp, #0]
 800ce46:	9304      	str	r3, [sp, #16]
 800ce48:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	f003 fec8 	bl	8010be0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	6430      	str	r0, [r6, #64]	; 0x40
 800ce54:	63d8      	str	r0, [r3, #60]	; 0x3c
 800ce56:	2204      	movs	r2, #4
 800ce58:	5ebb      	ldrsh	r3, [r7, r2]
 800ce5a:	0038      	movs	r0, r7
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	2206      	movs	r2, #6
 800ce60:	5ebb      	ldrsh	r3, [r7, r2]
 800ce62:	2200      	movs	r2, #0
 800ce64:	9306      	str	r3, [sp, #24]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	0011      	movs	r1, r2
 800ce6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce6c:	4798      	blx	r3
 800ce6e:	1dbb      	adds	r3, r7, #6
 800ce70:	7fda      	ldrb	r2, [r3, #31]
 800ce72:	1d39      	adds	r1, r7, #4
 800ce74:	9207      	str	r2, [sp, #28]
 800ce76:	2201      	movs	r2, #1
 800ce78:	77da      	strb	r2, [r3, #31]
 800ce7a:	9b01      	ldr	r3, [sp, #4]
 800ce7c:	2204      	movs	r2, #4
 800ce7e:	5e9b      	ldrsh	r3, [r3, r2]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dd52      	ble.n	800cf2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13a>
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	2206      	movs	r2, #6
 800ce88:	5e9b      	ldrsh	r3, [r3, r2]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dd4d      	ble.n	800cf2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13a>
 800ce8e:	2208      	movs	r2, #8
 800ce90:	a80a      	add	r0, sp, #40	; 0x28
 800ce92:	f006 f823 	bl	8012edc <memcpy>
 800ce96:	9901      	ldr	r1, [sp, #4]
 800ce98:	a80a      	add	r0, sp, #40	; 0x28
 800ce9a:	f7ff fbb1 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800ce9e:	a809      	add	r0, sp, #36	; 0x24
 800cea0:	f004 f8f8 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800cea4:	0004      	movs	r4, r0
 800cea6:	f7fc fbff 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800ceaa:	6803      	ldr	r3, [r0, #0]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	4798      	blx	r3
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4284      	cmp	r4, r0
 800ceb4:	d00e      	beq.n	800ced4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe4>
 800ceb6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d00b      	beq.n	800ced4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe4>
 800cebc:	a809      	add	r0, sp, #36	; 0x24
 800cebe:	f004 f8e9 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800cec2:	0004      	movs	r4, r0
 800cec4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800cec6:	6803      	ldr	r3, [r0, #0]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	4798      	blx	r3
 800cecc:	1a24      	subs	r4, r4, r0
 800cece:	4263      	negs	r3, r4
 800ced0:	4163      	adcs	r3, r4
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	002c      	movs	r4, r5
 800ced6:	2500      	movs	r5, #0
 800ced8:	3476      	adds	r4, #118	; 0x76
 800ceda:	7023      	strb	r3, [r4, #0]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	697e      	ldr	r6, [r7, #20]
 800cee0:	617d      	str	r5, [r7, #20]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	a90a      	add	r1, sp, #40	; 0x28
 800cee6:	0038      	movs	r0, r7
 800cee8:	4798      	blx	r3
 800ceea:	9a07      	ldr	r2, [sp, #28]
 800ceec:	1dbb      	adds	r3, r7, #6
 800ceee:	617e      	str	r6, [r7, #20]
 800cef0:	7025      	strb	r5, [r4, #0]
 800cef2:	77da      	strb	r2, [r3, #31]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	9a06      	ldr	r2, [sp, #24]
 800cef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefa:	9900      	ldr	r1, [sp, #0]
 800cefc:	0038      	movs	r0, r7
 800cefe:	4798      	blx	r3
 800cf00:	4c0c      	ldr	r4, [pc, #48]	; (800cf34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>)
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	6820      	ldr	r0, [r4, #0]
 800cf06:	9a02      	ldr	r2, [sp, #8]
 800cf08:	63c3      	str	r3, [r0, #60]	; 0x3c
 800cf0a:	9b05      	ldr	r3, [sp, #20]
 800cf0c:	6403      	str	r3, [r0, #64]	; 0x40
 800cf0e:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x148>)
 800cf10:	801a      	strh	r2, [r3, #0]
 800cf12:	4b0a      	ldr	r3, [pc, #40]	; (800cf3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14c>)
 800cf14:	9a03      	ldr	r2, [sp, #12]
 800cf16:	801a      	strh	r2, [r3, #0]
 800cf18:	6803      	ldr	r3, [r0, #0]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
 800cf1c:	4798      	blx	r3
 800cf1e:	6820      	ldr	r0, [r4, #0]
 800cf20:	6803      	ldr	r3, [r0, #0]
 800cf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf24:	4798      	blx	r3
 800cf26:	b00d      	add	sp, #52	; 0x34
 800cf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2a:	2208      	movs	r2, #8
 800cf2c:	a80a      	add	r0, sp, #40	; 0x28
 800cf2e:	f005 ffd5 	bl	8012edc <memcpy>
 800cf32:	e7b4      	b.n	800ce9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xae>
 800cf34:	200034cc 	.word	0x200034cc
 800cf38:	200034c6 	.word	0x200034c6
 800cf3c:	200034c8 	.word	0x200034c8

0800cf40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800cf40:	b510      	push	{r4, lr}
 800cf42:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800cf44:	0004      	movs	r4, r0
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d007      	beq.n	800cf5c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1c>
 800cf4c:	6803      	ldr	r3, [r0, #0]
 800cf4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf50:	4798      	blx	r3
 800cf52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf54:	4298      	cmp	r0, r3
 800cf56:	d101      	bne.n	800cf5c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1c>
 800cf58:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800cf5a:	bd10      	pop	{r4, pc}
 800cf5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800cf5e:	e7fc      	b.n	800cf5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800cf60:	200034ca 	.word	0x200034ca

0800cf64 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800cf68:	0004      	movs	r4, r0
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10d      	bne.n	800cf8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x28>
 800cf70:	0003      	movs	r3, r0
 800cf72:	3348      	adds	r3, #72	; 0x48
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d008      	beq.n	800cf8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x28>
 800cf7a:	6840      	ldr	r0, [r0, #4]
 800cf7c:	f000 fbd2 	bl	800d724 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d003      	beq.n	800cf8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x28>
 800cf84:	6862      	ldr	r2, [r4, #4]
 800cf86:	7a53      	ldrb	r3, [r2, #9]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d0fc      	beq.n	800cf86 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800cf8c:	f7fd ff74 	bl	800ae78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800cf90:	0020      	movs	r0, r4
 800cf92:	f7ff ffd5 	bl	800cf40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cf96:	bd10      	pop	{r4, pc}
 800cf98:	200034ca 	.word	0x200034ca

0800cf9c <_ZN8touchgfx3HAL10initializeEv>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	0004      	movs	r4, r0
 800cfa0:	f7fd ff34 	bl	800ae0c <_ZN8touchgfx10OSWrappers10initializeEv>
 800cfa4:	6860      	ldr	r0, [r4, #4]
 800cfa6:	6803      	ldr	r3, [r0, #0]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	4798      	blx	r3
 800cfac:	68e0      	ldr	r0, [r4, #12]
 800cfae:	6803      	ldr	r3, [r0, #0]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	4798      	blx	r3
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	0020      	movs	r0, r4
 800cfb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfba:	4798      	blx	r3
 800cfbc:	bd10      	pop	{r4, pc}
	...

0800cfc0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	290c      	cmp	r1, #12
 800cfc4:	d817      	bhi.n	800cff6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800cfc6:	0008      	movs	r0, r1
 800cfc8:	f7f3 f89e 	bl	8000108 <__gnu_thumb1_case_uqi>
 800cfcc:	0d07090b 	.word	0x0d07090b
 800cfd0:	130d0d0d 	.word	0x130d0d0d
 800cfd4:	13131313 	.word	0x13131313
 800cfd8:	0d          	.byte	0x0d
 800cfd9:	00          	.byte	0x00
 800cfda:	2020      	movs	r0, #32
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	2018      	movs	r0, #24
 800cfe0:	e7fc      	b.n	800cfdc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1c>
 800cfe2:	2010      	movs	r0, #16
 800cfe4:	e7fa      	b.n	800cfdc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1c>
 800cfe6:	4b05      	ldr	r3, [pc, #20]	; (800cffc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800cfe8:	4a05      	ldr	r2, [pc, #20]	; (800d000 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800cfea:	4906      	ldr	r1, [pc, #24]	; (800d004 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800cfec:	4806      	ldr	r0, [pc, #24]	; (800d008 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x48>)
 800cfee:	f005 ff01 	bl	8012df4 <__assert_func>
 800cff2:	2008      	movs	r0, #8
 800cff4:	e7f2      	b.n	800cfdc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1c>
 800cff6:	2000      	movs	r0, #0
 800cff8:	e7f0      	b.n	800cfdc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1c>
 800cffa:	46c0      	nop			; (mov r8, r8)
 800cffc:	08015f07 	.word	0x08015f07
 800d000:	080162a0 	.word	0x080162a0
 800d004:	0000022f 	.word	0x0000022f
 800d008:	08015e0e 	.word	0x08015e0e

0800d00c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	0014      	movs	r4, r2
 800d010:	001d      	movs	r5, r3
 800d012:	ab06      	add	r3, sp, #24
 800d014:	881f      	ldrh	r7, [r3, #0]
 800d016:	ab07      	add	r3, sp, #28
 800d018:	000e      	movs	r6, r1
 800d01a:	7819      	ldrb	r1, [r3, #0]
 800d01c:	f7ff ffd0 	bl	800cfc0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800d020:	437c      	muls	r4, r7
 800d022:	10c0      	asrs	r0, r0, #3
 800d024:	19a6      	adds	r6, r4, r6
 800d026:	4370      	muls	r0, r6
 800d028:	1828      	adds	r0, r5, r0
 800d02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800d02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02e:	b091      	sub	sp, #68	; 0x44
 800d030:	0005      	movs	r5, r0
 800d032:	a81b      	add	r0, sp, #108	; 0x6c
 800d034:	7804      	ldrb	r4, [r0, #0]
 800d036:	a81c      	add	r0, sp, #112	; 0x70
 800d038:	8800      	ldrh	r0, [r0, #0]
 800d03a:	ae06      	add	r6, sp, #24
 800d03c:	9005      	str	r0, [sp, #20]
 800d03e:	a81d      	add	r0, sp, #116	; 0x74
 800d040:	7807      	ldrb	r7, [r0, #0]
 800d042:	2041      	movs	r0, #65	; 0x41
 800d044:	1980      	adds	r0, r0, r6
 800d046:	7fc6      	ldrb	r6, [r0, #31]
 800d048:	2000      	movs	r0, #0
 800d04a:	9306      	str	r3, [sp, #24]
 800d04c:	ab16      	add	r3, sp, #88	; 0x58
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	900e      	str	r0, [sp, #56]	; 0x38
 800d052:	9307      	str	r3, [sp, #28]
 800d054:	ab17      	add	r3, sp, #92	; 0x5c
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	ab18      	add	r3, sp, #96	; 0x60
 800d05c:	881b      	ldrh	r3, [r3, #0]
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	ab19      	add	r3, sp, #100	; 0x64
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	469c      	mov	ip, r3
 800d066:	ab1a      	add	r3, sp, #104	; 0x68
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2f02      	cmp	r7, #2
 800d06c:	d02e      	beq.n	800d0cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa0>
 800d06e:	3004      	adds	r0, #4
 800d070:	2bff      	cmp	r3, #255	; 0xff
 800d072:	d102      	bne.n	800d07a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x4e>
 800d074:	2c00      	cmp	r4, #0
 800d076:	d100      	bne.n	800d07a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x4e>
 800d078:	3803      	subs	r0, #3
 800d07a:	ac08      	add	r4, sp, #32
 800d07c:	60a2      	str	r2, [r4, #8]
 800d07e:	9a03      	ldr	r2, [sp, #12]
 800d080:	9008      	str	r0, [sp, #32]
 800d082:	8222      	strh	r2, [r4, #16]
 800d084:	9a04      	ldr	r2, [sp, #16]
 800d086:	0028      	movs	r0, r5
 800d088:	8262      	strh	r2, [r4, #18]
 800d08a:	4662      	mov	r2, ip
 800d08c:	6061      	str	r1, [r4, #4]
 800d08e:	82a2      	strh	r2, [r4, #20]
 800d090:	7723      	strb	r3, [r4, #28]
 800d092:	f7ff ff55 	bl	800cf40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d096:	9a05      	ldr	r2, [sp, #20]
 800d098:	0003      	movs	r3, r0
 800d09a:	9200      	str	r2, [sp, #0]
 800d09c:	9601      	str	r6, [sp, #4]
 800d09e:	9a07      	ldr	r2, [sp, #28]
 800d0a0:	9906      	ldr	r1, [sp, #24]
 800d0a2:	0028      	movs	r0, r5
 800d0a4:	f7ff ffb2 	bl	800d00c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d0a8:	9b05      	ldr	r3, [sp, #20]
 800d0aa:	60e0      	str	r0, [r4, #12]
 800d0ac:	82e3      	strh	r3, [r4, #22]
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	7767      	strb	r7, [r4, #29]
 800d0b2:	77a6      	strb	r6, [r4, #30]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800d0b8:	9b04      	ldr	r3, [sp, #16]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10d      	bne.n	800d0da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 800d0be:	21b0      	movs	r1, #176	; 0xb0
 800d0c0:	4b0f      	ldr	r3, [pc, #60]	; (800d100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800d0c2:	4a10      	ldr	r2, [pc, #64]	; (800d104 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800d0c4:	31ff      	adds	r1, #255	; 0xff
 800d0c6:	4810      	ldr	r0, [pc, #64]	; (800d108 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800d0c8:	f005 fe94 	bl	8012df4 <__assert_func>
 800d0cc:	2040      	movs	r0, #64	; 0x40
 800d0ce:	2bff      	cmp	r3, #255	; 0xff
 800d0d0:	d1d3      	bne.n	800d07a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x4e>
 800d0d2:	2c00      	cmp	r4, #0
 800d0d4:	d1d1      	bne.n	800d07a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x4e>
 800d0d6:	3820      	subs	r0, #32
 800d0d8:	e7cf      	b.n	800d07a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x4e>
 800d0da:	682b      	ldr	r3, [r5, #0]
 800d0dc:	0028      	movs	r0, r5
 800d0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e0:	6826      	ldr	r6, [r4, #0]
 800d0e2:	4798      	blx	r3
 800d0e4:	4206      	tst	r6, r0
 800d0e6:	d104      	bne.n	800d0f2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 800d0e8:	21d8      	movs	r1, #216	; 0xd8
 800d0ea:	4b08      	ldr	r3, [pc, #32]	; (800d10c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 800d0ec:	4a05      	ldr	r2, [pc, #20]	; (800d104 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800d0ee:	0049      	lsls	r1, r1, #1
 800d0f0:	e7e9      	b.n	800d0c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9a>
 800d0f2:	6868      	ldr	r0, [r5, #4]
 800d0f4:	0021      	movs	r1, r4
 800d0f6:	6803      	ldr	r3, [r0, #0]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	4798      	blx	r3
 800d0fc:	b011      	add	sp, #68	; 0x44
 800d0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d100:	08015e8a 	.word	0x08015e8a
 800d104:	08016142 	.word	0x08016142
 800d108:	08015e0e 	.word	0x08015e0e
 800d10c:	08015ec2 	.word	0x08015ec2

0800d110 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800d110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d112:	b08f      	sub	sp, #60	; 0x3c
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	ac14      	add	r4, sp, #80	; 0x50
 800d118:	8824      	ldrh	r4, [r4, #0]
 800d11a:	ab1b      	add	r3, sp, #108	; 0x6c
 800d11c:	940b      	str	r4, [sp, #44]	; 0x2c
 800d11e:	ac15      	add	r4, sp, #84	; 0x54
 800d120:	8824      	ldrh	r4, [r4, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	940c      	str	r4, [sp, #48]	; 0x30
 800d126:	ac16      	add	r4, sp, #88	; 0x58
 800d128:	8824      	ldrh	r4, [r4, #0]
 800d12a:	ad18      	add	r5, sp, #96	; 0x60
 800d12c:	940d      	str	r4, [sp, #52]	; 0x34
 800d12e:	ae19      	add	r6, sp, #100	; 0x64
 800d130:	ac17      	add	r4, sp, #92	; 0x5c
 800d132:	af1a      	add	r7, sp, #104	; 0x68
 800d134:	7824      	ldrb	r4, [r4, #0]
 800d136:	782d      	ldrb	r5, [r5, #0]
 800d138:	8836      	ldrh	r6, [r6, #0]
 800d13a:	783f      	ldrb	r7, [r7, #0]
 800d13c:	9308      	str	r3, [sp, #32]
 800d13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d140:	9707      	str	r7, [sp, #28]
 800d142:	9303      	str	r3, [sp, #12]
 800d144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d146:	9606      	str	r6, [sp, #24]
 800d148:	9302      	str	r3, [sp, #8]
 800d14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d14c:	9505      	str	r5, [sp, #20]
 800d14e:	9301      	str	r3, [sp, #4]
 800d150:	9404      	str	r4, [sp, #16]
 800d152:	0013      	movs	r3, r2
 800d154:	2200      	movs	r2, #0
 800d156:	f7ff ff69 	bl	800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800d15a:	b00f      	add	sp, #60	; 0x3c
 800d15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d160 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800d160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d162:	b091      	sub	sp, #68	; 0x44
 800d164:	930c      	str	r3, [sp, #48]	; 0x30
 800d166:	ab16      	add	r3, sp, #88	; 0x58
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	0015      	movs	r5, r2
 800d16c:	930d      	str	r3, [sp, #52]	; 0x34
 800d16e:	ab17      	add	r3, sp, #92	; 0x5c
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	910b      	str	r1, [sp, #44]	; 0x2c
 800d174:	930e      	str	r3, [sp, #56]	; 0x38
 800d176:	ab18      	add	r3, sp, #96	; 0x60
 800d178:	881b      	ldrh	r3, [r3, #0]
 800d17a:	0004      	movs	r4, r0
 800d17c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d17e:	ab19      	add	r3, sp, #100	; 0x64
 800d180:	781e      	ldrb	r6, [r3, #0]
 800d182:	ab1a      	add	r3, sp, #104	; 0x68
 800d184:	781f      	ldrb	r7, [r3, #0]
 800d186:	f7fc fa8f 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800d18a:	6803      	ldr	r3, [r0, #0]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	4798      	blx	r3
 800d190:	4b0b      	ldr	r3, [pc, #44]	; (800d1c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x60>)
 800d192:	9008      	str	r0, [sp, #32]
 800d194:	9007      	str	r0, [sp, #28]
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	2200      	movs	r2, #0
 800d19a:	9306      	str	r3, [sp, #24]
 800d19c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d19e:	9705      	str	r7, [sp, #20]
 800d1a0:	9303      	str	r3, [sp, #12]
 800d1a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1a4:	9604      	str	r6, [sp, #16]
 800d1a6:	9302      	str	r3, [sp, #8]
 800d1a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1ac:	9301      	str	r3, [sp, #4]
 800d1ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1b0:	0020      	movs	r0, r4
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	002b      	movs	r3, r5
 800d1b6:	f7ff ff39 	bl	800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800d1ba:	b011      	add	sp, #68	; 0x44
 800d1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	200034c6 	.word	0x200034c6

0800d1c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800d1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1c6:	b091      	sub	sp, #68	; 0x44
 800d1c8:	930c      	str	r3, [sp, #48]	; 0x30
 800d1ca:	ab16      	add	r3, sp, #88	; 0x58
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	0015      	movs	r5, r2
 800d1d0:	930d      	str	r3, [sp, #52]	; 0x34
 800d1d2:	ab17      	add	r3, sp, #92	; 0x5c
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800d1d8:	930e      	str	r3, [sp, #56]	; 0x38
 800d1da:	ab18      	add	r3, sp, #96	; 0x60
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	0004      	movs	r4, r0
 800d1e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1e2:	ab19      	add	r3, sp, #100	; 0x64
 800d1e4:	781e      	ldrb	r6, [r3, #0]
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x60>)
 800d1e8:	881f      	ldrh	r7, [r3, #0]
 800d1ea:	f7fc fa5d 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800d1ee:	6803      	ldr	r3, [r0, #0]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	4798      	blx	r3
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	9307      	str	r3, [sp, #28]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	9305      	str	r3, [sp, #20]
 800d1fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1fe:	9008      	str	r0, [sp, #32]
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d204:	9706      	str	r7, [sp, #24]
 800d206:	9302      	str	r3, [sp, #8]
 800d208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d20a:	9604      	str	r6, [sp, #16]
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d210:	2200      	movs	r2, #0
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d216:	002b      	movs	r3, r5
 800d218:	0020      	movs	r0, r4
 800d21a:	f7ff ff07 	bl	800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800d21e:	b011      	add	sp, #68	; 0x44
 800d220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d222:	46c0      	nop			; (mov r8, r8)
 800d224:	200034c6 	.word	0x200034c6

0800d228 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800d228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d22a:	b093      	sub	sp, #76	; 0x4c
 800d22c:	9307      	str	r3, [sp, #28]
 800d22e:	ab18      	add	r3, sp, #96	; 0x60
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	ac0a      	add	r4, sp, #40	; 0x28
 800d234:	9308      	str	r3, [sp, #32]
 800d236:	ab19      	add	r3, sp, #100	; 0x64
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	0005      	movs	r5, r0
 800d23c:	9309      	str	r3, [sp, #36]	; 0x24
 800d23e:	ab1a      	add	r3, sp, #104	; 0x68
 800d240:	781f      	ldrb	r7, [r3, #0]
 800d242:	ab1b      	add	r3, sp, #108	; 0x6c
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	9105      	str	r1, [sp, #20]
 800d248:	9303      	str	r3, [sp, #12]
 800d24a:	ab1c      	add	r3, sp, #112	; 0x70
 800d24c:	781e      	ldrb	r6, [r3, #0]
 800d24e:	2300      	movs	r3, #0
 800d250:	9206      	str	r2, [sp, #24]
 800d252:	61a3      	str	r3, [r4, #24]
 800d254:	9304      	str	r3, [sp, #16]
 800d256:	3308      	adds	r3, #8
 800d258:	2fff      	cmp	r7, #255	; 0xff
 800d25a:	d100      	bne.n	800d25e <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x36>
 800d25c:	3b06      	subs	r3, #6
 800d25e:	930a      	str	r3, [sp, #40]	; 0x28
 800d260:	9b04      	ldr	r3, [sp, #16]
 800d262:	0028      	movs	r0, r5
 800d264:	6063      	str	r3, [r4, #4]
 800d266:	f7ff fe6b 	bl	800cf40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d26a:	9a03      	ldr	r2, [sp, #12]
 800d26c:	0003      	movs	r3, r0
 800d26e:	9601      	str	r6, [sp, #4]
 800d270:	9200      	str	r2, [sp, #0]
 800d272:	9906      	ldr	r1, [sp, #24]
 800d274:	9a07      	ldr	r2, [sp, #28]
 800d276:	0028      	movs	r0, r5
 800d278:	f7ff fec8 	bl	800d00c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d27c:	9b08      	ldr	r3, [sp, #32]
 800d27e:	60e0      	str	r0, [r4, #12]
 800d280:	8223      	strh	r3, [r4, #16]
 800d282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d284:	7766      	strb	r6, [r4, #29]
 800d286:	8263      	strh	r3, [r4, #18]
 800d288:	9b04      	ldr	r3, [sp, #16]
 800d28a:	77a6      	strb	r6, [r4, #30]
 800d28c:	82a3      	strh	r3, [r4, #20]
 800d28e:	9b03      	ldr	r3, [sp, #12]
 800d290:	7727      	strb	r7, [r4, #28]
 800d292:	82e3      	strh	r3, [r4, #22]
 800d294:	9b05      	ldr	r3, [sp, #20]
 800d296:	0028      	movs	r0, r5
 800d298:	61a3      	str	r3, [r4, #24]
 800d29a:	682b      	ldr	r3, [r5, #0]
 800d29c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a0:	4798      	blx	r3
 800d2a2:	4206      	tst	r6, r0
 800d2a4:	d106      	bne.n	800d2b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x8c>
 800d2a6:	21e8      	movs	r1, #232	; 0xe8
 800d2a8:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800d2aa:	4a07      	ldr	r2, [pc, #28]	; (800d2c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0xa0>)
 800d2ac:	31ff      	adds	r1, #255	; 0xff
 800d2ae:	4807      	ldr	r0, [pc, #28]	; (800d2cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0xa4>)
 800d2b0:	f005 fda0 	bl	8012df4 <__assert_func>
 800d2b4:	6868      	ldr	r0, [r5, #4]
 800d2b6:	0021      	movs	r1, r4
 800d2b8:	6803      	ldr	r3, [r0, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4798      	blx	r3
 800d2be:	b013      	add	sp, #76	; 0x4c
 800d2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2c2:	46c0      	nop			; (mov r8, r8)
 800d2c4:	08015ec2 	.word	0x08015ec2
 800d2c8:	0801620b 	.word	0x0801620b
 800d2cc:	08015e0e 	.word	0x08015e0e

0800d2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2d2:	001e      	movs	r6, r3
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	881f      	ldrh	r7, [r3, #0]
 800d2da:	9103      	str	r1, [sp, #12]
 800d2dc:	0015      	movs	r5, r2
 800d2de:	0004      	movs	r4, r0
 800d2e0:	f7fc f9e2 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800d2e4:	6803      	ldr	r3, [r0, #0]
 800d2e6:	6a1b      	ldr	r3, [r3, #32]
 800d2e8:	4798      	blx	r3
 800d2ea:	9700      	str	r7, [sp, #0]
 800d2ec:	9001      	str	r0, [sp, #4]
 800d2ee:	0033      	movs	r3, r6
 800d2f0:	002a      	movs	r2, r5
 800d2f2:	9903      	ldr	r1, [sp, #12]
 800d2f4:	0020      	movs	r0, r4
 800d2f6:	f7ff fe89 	bl	800d00c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d2fa:	b005      	add	sp, #20
 800d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fe:	46c0      	nop			; (mov r8, r8)
 800d300:	200034c6 	.word	0x200034c6

0800d304 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800d304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d306:	b08b      	sub	sp, #44	; 0x2c
 800d308:	001f      	movs	r7, r3
 800d30a:	ab10      	add	r3, sp, #64	; 0x40
 800d30c:	881d      	ldrh	r5, [r3, #0]
 800d30e:	ab11      	add	r3, sp, #68	; 0x44
 800d310:	881e      	ldrh	r6, [r3, #0]
 800d312:	ab12      	add	r3, sp, #72	; 0x48
 800d314:	9200      	str	r2, [sp, #0]
 800d316:	881a      	ldrh	r2, [r3, #0]
 800d318:	ab14      	add	r3, sp, #80	; 0x50
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	0004      	movs	r4, r0
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	2300      	movs	r3, #0
 800d322:	a815      	add	r0, sp, #84	; 0x54
 800d324:	8800      	ldrh	r0, [r0, #0]
 800d326:	9308      	str	r3, [sp, #32]
 800d328:	ab02      	add	r3, sp, #8
 800d32a:	829a      	strh	r2, [r3, #20]
 800d32c:	9a01      	ldr	r2, [sp, #4]
 800d32e:	9002      	str	r0, [sp, #8]
 800d330:	0020      	movs	r0, r4
 800d332:	771a      	strb	r2, [r3, #28]
 800d334:	9103      	str	r1, [sp, #12]
 800d336:	821d      	strh	r5, [r3, #16]
 800d338:	825e      	strh	r6, [r3, #18]
 800d33a:	f7ff fe01 	bl	800cf40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d33e:	9900      	ldr	r1, [sp, #0]
 800d340:	0003      	movs	r3, r0
 800d342:	003a      	movs	r2, r7
 800d344:	0020      	movs	r0, r4
 800d346:	f7ff ffc3 	bl	800d2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d34a:	4b16      	ldr	r3, [pc, #88]	; (800d3a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 800d34c:	aa02      	add	r2, sp, #8
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	9005      	str	r0, [sp, #20]
 800d352:	82d3      	strh	r3, [r2, #22]
 800d354:	f7fc f9a8 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800d358:	6803      	ldr	r3, [r0, #0]
 800d35a:	6a1b      	ldr	r3, [r3, #32]
 800d35c:	4798      	blx	r3
 800d35e:	ab02      	add	r3, sp, #8
 800d360:	7798      	strb	r0, [r3, #30]
 800d362:	7758      	strb	r0, [r3, #29]
 800d364:	2d00      	cmp	r5, #0
 800d366:	d001      	beq.n	800d36c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800d368:	2e00      	cmp	r6, #0
 800d36a:	d106      	bne.n	800d37a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800d36c:	21e6      	movs	r1, #230	; 0xe6
 800d36e:	4b0e      	ldr	r3, [pc, #56]	; (800d3a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800d370:	4a0e      	ldr	r2, [pc, #56]	; (800d3ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800d372:	0049      	lsls	r1, r1, #1
 800d374:	480e      	ldr	r0, [pc, #56]	; (800d3b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800d376:	f005 fd3d 	bl	8012df4 <__assert_func>
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	0020      	movs	r0, r4
 800d37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d380:	9d02      	ldr	r5, [sp, #8]
 800d382:	4798      	blx	r3
 800d384:	4205      	tst	r5, r0
 800d386:	d104      	bne.n	800d392 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800d388:	21ce      	movs	r1, #206	; 0xce
 800d38a:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800d38c:	4a07      	ldr	r2, [pc, #28]	; (800d3ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800d38e:	31ff      	adds	r1, #255	; 0xff
 800d390:	e7f0      	b.n	800d374 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800d392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d394:	6860      	ldr	r0, [r4, #4]
 800d396:	9308      	str	r3, [sp, #32]
 800d398:	6803      	ldr	r3, [r0, #0]
 800d39a:	a902      	add	r1, sp, #8
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	4798      	blx	r3
 800d3a0:	b00b      	add	sp, #44	; 0x2c
 800d3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a4:	200034c6 	.word	0x200034c6
 800d3a8:	08015e8a 	.word	0x08015e8a
 800d3ac:	08015ff4 	.word	0x08015ff4
 800d3b0:	08015e0e 	.word	0x08015e0e
 800d3b4:	08015ec2 	.word	0x08015ec2

0800d3b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800d3bc:	b08b      	sub	sp, #44	; 0x2c
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	0005      	movs	r5, r0
 800d3c2:	9100      	str	r1, [sp, #0]
 800d3c4:	9201      	str	r2, [sp, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d106      	bne.n	800d3d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800d3ca:	21fc      	movs	r1, #252	; 0xfc
 800d3cc:	4b1b      	ldr	r3, [pc, #108]	; (800d43c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 800d3ce:	4a1c      	ldr	r2, [pc, #112]	; (800d440 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 800d3d0:	0049      	lsls	r1, r1, #1
 800d3d2:	481c      	ldr	r0, [pc, #112]	; (800d444 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800d3d4:	f005 fd0e 	bl	8012df4 <__assert_func>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	9308      	str	r3, [sp, #32]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	9302      	str	r3, [sp, #8]
 800d3e0:	466b      	mov	r3, sp
 800d3e2:	881e      	ldrh	r6, [r3, #0]
 800d3e4:	885f      	ldrh	r7, [r3, #2]
 800d3e6:	6803      	ldr	r3, [r0, #0]
 800d3e8:	ac02      	add	r4, sp, #8
 800d3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ec:	4798      	blx	r3
 800d3ee:	003a      	movs	r2, r7
 800d3f0:	0031      	movs	r1, r6
 800d3f2:	0003      	movs	r3, r0
 800d3f4:	0028      	movs	r0, r5
 800d3f6:	f7ff ff6b 	bl	800d2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d3fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d3fc:	6060      	str	r0, [r4, #4]
 800d3fe:	60e3      	str	r3, [r4, #12]
 800d400:	466b      	mov	r3, sp
 800d402:	889b      	ldrh	r3, [r3, #4]
 800d404:	8223      	strh	r3, [r4, #16]
 800d406:	466b      	mov	r3, sp
 800d408:	88db      	ldrh	r3, [r3, #6]
 800d40a:	8263      	strh	r3, [r4, #18]
 800d40c:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	82a3      	strh	r3, [r4, #20]
 800d412:	82e3      	strh	r3, [r4, #22]
 800d414:	f7fc f948 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800d418:	6803      	ldr	r3, [r0, #0]
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	4798      	blx	r3
 800d41e:	23ff      	movs	r3, #255	; 0xff
 800d420:	7760      	strb	r0, [r4, #29]
 800d422:	77a0      	strb	r0, [r4, #30]
 800d424:	6868      	ldr	r0, [r5, #4]
 800d426:	7723      	strb	r3, [r4, #28]
 800d428:	6803      	ldr	r3, [r0, #0]
 800d42a:	0021      	movs	r1, r4
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	4798      	blx	r3
 800d430:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800d432:	b00b      	add	sp, #44	; 0x2c
 800d434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d436:	46c0      	nop			; (mov r8, r8)
 800d438:	200034cb 	.word	0x200034cb
 800d43c:	08015d5b 	.word	0x08015d5b
 800d440:	08016098 	.word	0x08016098
 800d444:	08015e0e 	.word	0x08015e0e
 800d448:	200034c6 	.word	0x200034c6

0800d44c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d44e:	001f      	movs	r7, r3
 800d450:	2300      	movs	r3, #0
 800d452:	0005      	movs	r5, r0
 800d454:	b08d      	sub	sp, #52	; 0x34
 800d456:	930a      	str	r3, [sp, #40]	; 0x28
 800d458:	3301      	adds	r3, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	b28b      	uxth	r3, r1
 800d45e:	9301      	str	r3, [sp, #4]
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	000e      	movs	r6, r1
 800d464:	9102      	str	r1, [sp, #8]
 800d466:	9203      	str	r2, [sp, #12]
 800d468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46a:	0028      	movs	r0, r5
 800d46c:	4798      	blx	r3
 800d46e:	0c36      	lsrs	r6, r6, #16
 800d470:	0032      	movs	r2, r6
 800d472:	9901      	ldr	r1, [sp, #4]
 800d474:	0003      	movs	r3, r0
 800d476:	0028      	movs	r0, r5
 800d478:	f7ff ff2a 	bl	800d2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d47c:	ac04      	add	r4, sp, #16
 800d47e:	6060      	str	r0, [r4, #4]
 800d480:	60e7      	str	r7, [r4, #12]
 800d482:	ab02      	add	r3, sp, #8
 800d484:	889b      	ldrh	r3, [r3, #4]
 800d486:	8223      	strh	r3, [r4, #16]
 800d488:	ab02      	add	r3, sp, #8
 800d48a:	88db      	ldrh	r3, [r3, #6]
 800d48c:	8263      	strh	r3, [r4, #18]
 800d48e:	4b0b      	ldr	r3, [pc, #44]	; (800d4bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x70>)
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	82a3      	strh	r3, [r4, #20]
 800d494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d496:	82e3      	strh	r3, [r4, #22]
 800d498:	f7fc f906 	bl	80096a8 <_ZN8touchgfx3HAL3lcdEv>
 800d49c:	6803      	ldr	r3, [r0, #0]
 800d49e:	6a1b      	ldr	r3, [r3, #32]
 800d4a0:	4798      	blx	r3
 800d4a2:	23ff      	movs	r3, #255	; 0xff
 800d4a4:	7760      	strb	r0, [r4, #29]
 800d4a6:	77a0      	strb	r0, [r4, #30]
 800d4a8:	6868      	ldr	r0, [r5, #4]
 800d4aa:	7723      	strb	r3, [r4, #28]
 800d4ac:	6803      	ldr	r3, [r0, #0]
 800d4ae:	0021      	movs	r1, r4
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	4798      	blx	r3
 800d4b4:	0038      	movs	r0, r7
 800d4b6:	b00d      	add	sp, #52	; 0x34
 800d4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ba:	46c0      	nop			; (mov r8, r8)
 800d4bc:	200034c6 	.word	0x200034c6

0800d4c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	0005      	movs	r5, r0
 800d4c4:	356a      	adds	r5, #106	; 0x6a
 800d4c6:	782b      	ldrb	r3, [r5, #0]
 800d4c8:	0004      	movs	r4, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d010      	beq.n	800d4f0 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x30>
 800d4ce:	2002      	movs	r0, #2
 800d4d0:	f7fd fa00 	bl	800a8d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d4d4:	0022      	movs	r2, r4
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	3269      	adds	r2, #105	; 0x69
 800d4da:	702b      	strb	r3, [r5, #0]
 800d4dc:	7013      	strb	r3, [r2, #0]
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	0020      	movs	r0, r4
 800d4e2:	33a0      	adds	r3, #160	; 0xa0
 800d4e4:	681d      	ldr	r5, [r3, #0]
 800d4e6:	f7ff fd2b 	bl	800cf40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d4ea:	0001      	movs	r1, r0
 800d4ec:	0020      	movs	r0, r4
 800d4ee:	47a8      	blx	r5
 800d4f0:	bd70      	pop	{r4, r5, r6, pc}

0800d4f2 <_ZN8touchgfx13DMA_Interface5flushEv>:
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	6803      	ldr	r3, [r0, #0]
 800d4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4f8:	4798      	blx	r3
 800d4fa:	bd10      	pop	{r4, pc}

0800d4fc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d4fc:	68c3      	ldr	r3, [r0, #12]
 800d4fe:	6900      	ldr	r0, [r0, #16]
 800d500:	1a18      	subs	r0, r3, r0
 800d502:	4243      	negs	r3, r0
 800d504:	4158      	adcs	r0, r3
 800d506:	b2c0      	uxtb	r0, r0
 800d508:	4770      	bx	lr

0800d50a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d50a:	6903      	ldr	r3, [r0, #16]
 800d50c:	68c2      	ldr	r2, [r0, #12]
 800d50e:	1a9b      	subs	r3, r3, r2
 800d510:	2b00      	cmp	r3, #0
 800d512:	dc01      	bgt.n	800d518 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv+0xe>
 800d514:	6882      	ldr	r2, [r0, #8]
 800d516:	189b      	adds	r3, r3, r2
 800d518:	2201      	movs	r2, #1
 800d51a:	2100      	movs	r1, #0
 800d51c:	0fd8      	lsrs	r0, r3, #31
 800d51e:	429a      	cmp	r2, r3
 800d520:	4148      	adcs	r0, r1
 800d522:	b2c0      	uxtb	r0, r0
 800d524:	4770      	bx	lr

0800d526 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d526:	6903      	ldr	r3, [r0, #16]
 800d528:	6840      	ldr	r0, [r0, #4]
 800d52a:	015b      	lsls	r3, r3, #5
 800d52c:	18c0      	adds	r0, r0, r3
 800d52e:	4770      	bx	lr

0800d530 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d530:	b510      	push	{r4, lr}
 800d532:	6803      	ldr	r3, [r0, #0]
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	4798      	blx	r3
 800d538:	bd10      	pop	{r4, pc}

0800d53a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d53a:	4770      	bx	lr

0800d53c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d53c:	4770      	bx	lr
	...

0800d540 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d540:	2301      	movs	r3, #1
 800d542:	b570      	push	{r4, r5, r6, lr}
 800d544:	7203      	strb	r3, [r0, #8]
 800d546:	0004      	movs	r4, r0
 800d548:	6840      	ldr	r0, [r0, #4]
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	4798      	blx	r3
 800d550:	6803      	ldr	r3, [r0, #0]
 800d552:	0005      	movs	r5, r0
 800d554:	2b08      	cmp	r3, #8
 800d556:	d025      	beq.n	800d5a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d558:	d80a      	bhi.n	800d570 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d02d      	beq.n	800d5ba <_ZN8touchgfx13DMA_Interface7executeEv+0x7a>
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d018      	beq.n	800d594 <_ZN8touchgfx13DMA_Interface7executeEv+0x54>
 800d562:	2b01      	cmp	r3, #1
 800d564:	d109      	bne.n	800d57a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	0020      	movs	r0, r4
 800d56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56c:	4798      	blx	r3
 800d56e:	e016      	b.n	800d59e <_ZN8touchgfx13DMA_Interface7executeEv+0x5e>
 800d570:	2b40      	cmp	r3, #64	; 0x40
 800d572:	d0f8      	beq.n	800d566 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d574:	d807      	bhi.n	800d586 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800d576:	2b20      	cmp	r3, #32
 800d578:	d0f5      	beq.n	800d566 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d57a:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800d57c:	4a12      	ldr	r2, [pc, #72]	; (800d5c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800d57e:	218b      	movs	r1, #139	; 0x8b
 800d580:	4812      	ldr	r0, [pc, #72]	; (800d5cc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800d582:	f005 fc37 	bl	8012df4 <__assert_func>
 800d586:	2b80      	cmp	r3, #128	; 0x80
 800d588:	d0ed      	beq.n	800d566 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d58a:	2280      	movs	r2, #128	; 0x80
 800d58c:	0052      	lsls	r2, r2, #1
 800d58e:	4293      	cmp	r3, r2
 800d590:	d0e9      	beq.n	800d566 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d592:	e7f2      	b.n	800d57a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	7f01      	ldrb	r1, [r0, #28]
 800d598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59a:	0020      	movs	r0, r4
 800d59c:	4798      	blx	r3
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a2:	e006      	b.n	800d5b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x72>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	7f01      	ldrb	r1, [r0, #28]
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5aa:	0020      	movs	r0, r4
 800d5ac:	4798      	blx	r3
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b2:	0029      	movs	r1, r5
 800d5b4:	0020      	movs	r0, r4
 800d5b6:	4798      	blx	r3
 800d5b8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	0020      	movs	r0, r4
 800d5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c0:	4798      	blx	r3
 800d5c2:	e7f4      	b.n	800d5ae <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800d5c4:	080162e9 	.word	0x080162e9
 800d5c8:	080163f8 	.word	0x080163f8
 800d5cc:	0801630e 	.word	0x0801630e

0800d5d0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	0004      	movs	r4, r0
 800d5d4:	000e      	movs	r6, r1
 800d5d6:	6860      	ldr	r0, [r4, #4]
 800d5d8:	6803      	ldr	r3, [r0, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	4798      	blx	r3
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d1f9      	bne.n	800d5d6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d5e2:	4d0a      	ldr	r5, [pc, #40]	; (800d60c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x3c>)
 800d5e4:	6828      	ldr	r0, [r5, #0]
 800d5e6:	6803      	ldr	r3, [r0, #0]
 800d5e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5ea:	4798      	blx	r3
 800d5ec:	f7fd fc60 	bl	800aeb0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d5f0:	6860      	ldr	r0, [r4, #4]
 800d5f2:	0031      	movs	r1, r6
 800d5f4:	6803      	ldr	r3, [r0, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	4798      	blx	r3
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	0020      	movs	r0, r4
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	4798      	blx	r3
 800d602:	6828      	ldr	r0, [r5, #0]
 800d604:	6803      	ldr	r3, [r0, #0]
 800d606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d608:	4798      	blx	r3
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	200034cc 	.word	0x200034cc

0800d610 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d610:	b510      	push	{r4, lr}
 800d612:	f7fd fc31 	bl	800ae78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d616:	f7fd fc3f 	bl	800ae98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800d61a:	bd10      	pop	{r4, pc}

0800d61c <_ZN8touchgfx13DMA_Interface5startEv>:
 800d61c:	b510      	push	{r4, lr}
 800d61e:	0004      	movs	r4, r0
 800d620:	6840      	ldr	r0, [r0, #4]
 800d622:	6803      	ldr	r3, [r0, #0]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4798      	blx	r3
 800d628:	2800      	cmp	r0, #0
 800d62a:	d109      	bne.n	800d640 <_ZN8touchgfx13DMA_Interface5startEv+0x24>
 800d62c:	7a63      	ldrb	r3, [r4, #9]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <_ZN8touchgfx13DMA_Interface5startEv+0x24>
 800d632:	7a23      	ldrb	r3, [r4, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d103      	bne.n	800d640 <_ZN8touchgfx13DMA_Interface5startEv+0x24>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	0020      	movs	r0, r4
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	4798      	blx	r3
 800d640:	bd10      	pop	{r4, pc}
	...

0800d644 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800d644:	b510      	push	{r4, lr}
 800d646:	0004      	movs	r4, r0
 800d648:	68c0      	ldr	r0, [r0, #12]
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	1a1b      	subs	r3, r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	dc01      	bgt.n	800d656 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x12>
 800d652:	68a2      	ldr	r2, [r4, #8]
 800d654:	189b      	adds	r3, r3, r2
 800d656:	2b01      	cmp	r3, #1
 800d658:	dd0f      	ble.n	800d67a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x36>
 800d65a:	6863      	ldr	r3, [r4, #4]
 800d65c:	0140      	lsls	r0, r0, #5
 800d65e:	1818      	adds	r0, r3, r0
 800d660:	221f      	movs	r2, #31
 800d662:	f005 fc3b 	bl	8012edc <memcpy>
 800d666:	68e3      	ldr	r3, [r4, #12]
 800d668:	68a2      	ldr	r2, [r4, #8]
 800d66a:	3301      	adds	r3, #1
 800d66c:	429a      	cmp	r2, r3
 800d66e:	dc00      	bgt.n	800d672 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x2e>
 800d670:	1a9b      	subs	r3, r3, r2
 800d672:	f3bf 8f5b 	dmb	ish
 800d676:	60e3      	str	r3, [r4, #12]
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	4b03      	ldr	r3, [pc, #12]	; (800d688 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>)
 800d67c:	4a03      	ldr	r2, [pc, #12]	; (800d68c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x48>)
 800d67e:	2139      	movs	r1, #57	; 0x39
 800d680:	4803      	ldr	r0, [pc, #12]	; (800d690 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800d682:	f005 fbb7 	bl	8012df4 <__assert_func>
 800d686:	46c0      	nop			; (mov r8, r8)
 800d688:	08016334 	.word	0x08016334
 800d68c:	08016428 	.word	0x08016428
 800d690:	0801630e 	.word	0x0801630e

0800d694 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800d694:	b510      	push	{r4, lr}
 800d696:	6803      	ldr	r3, [r0, #0]
 800d698:	0004      	movs	r4, r0
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4798      	blx	r3
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d005      	beq.n	800d6ae <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x1a>
 800d6a2:	4b08      	ldr	r3, [pc, #32]	; (800d6c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800d6a4:	4a08      	ldr	r2, [pc, #32]	; (800d6c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800d6a6:	213f      	movs	r1, #63	; 0x3f
 800d6a8:	4808      	ldr	r0, [pc, #32]	; (800d6cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x38>)
 800d6aa:	f005 fba3 	bl	8012df4 <__assert_func>
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	68a2      	ldr	r2, [r4, #8]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	dc00      	bgt.n	800d6ba <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x26>
 800d6b8:	1a9b      	subs	r3, r3, r2
 800d6ba:	f3bf 8f5b 	dmb	ish
 800d6be:	6123      	str	r3, [r4, #16]
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	46c0      	nop			; (mov r8, r8)
 800d6c4:	08016357 	.word	0x08016357
 800d6c8:	08016476 	.word	0x08016476
 800d6cc:	0801630e 	.word	0x0801630e

0800d6d0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	0004      	movs	r4, r0
 800d6d4:	6840      	ldr	r0, [r0, #4]
 800d6d6:	6803      	ldr	r3, [r0, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4798      	blx	r3
 800d6dc:	1e05      	subs	r5, r0, #0
 800d6de:	d107      	bne.n	800d6f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x20>
 800d6e0:	7a23      	ldrb	r3, [r4, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d004      	beq.n	800d6f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x20>
 800d6e6:	6860      	ldr	r0, [r4, #4]
 800d6e8:	6803      	ldr	r3, [r0, #0]
 800d6ea:	695b      	ldr	r3, [r3, #20]
 800d6ec:	4798      	blx	r3
 800d6ee:	7225      	strb	r5, [r4, #8]
 800d6f0:	6860      	ldr	r0, [r4, #4]
 800d6f2:	6803      	ldr	r3, [r0, #0]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4798      	blx	r3
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d104      	bne.n	800d706 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x36>
 800d6fc:	6823      	ldr	r3, [r4, #0]
 800d6fe:	0020      	movs	r0, r4
 800d700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d702:	4798      	blx	r3
 800d704:	bd70      	pop	{r4, r5, r6, pc}
 800d706:	f7fd fbe1 	bl	800aecc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 800d70a:	e7fb      	b.n	800d704 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>

0800d70c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800d70c:	4b04      	ldr	r3, [pc, #16]	; (800d720 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800d70e:	6041      	str	r1, [r0, #4]
 800d710:	3308      	adds	r3, #8
 800d712:	6003      	str	r3, [r0, #0]
 800d714:	2300      	movs	r3, #0
 800d716:	6082      	str	r2, [r0, #8]
 800d718:	60c3      	str	r3, [r0, #12]
 800d71a:	6103      	str	r3, [r0, #16]
 800d71c:	4770      	bx	lr
 800d71e:	46c0      	nop			; (mov r8, r8)
 800d720:	080163d4 	.word	0x080163d4

0800d724 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800d724:	b510      	push	{r4, lr}
 800d726:	6840      	ldr	r0, [r0, #4]
 800d728:	6803      	ldr	r3, [r0, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4798      	blx	r3
 800d72e:	bd10      	pop	{r4, pc}

0800d730 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800d730:	2300      	movs	r3, #0
 800d732:	8003      	strh	r3, [r0, #0]
 800d734:	8043      	strh	r3, [r0, #2]
 800d736:	8083      	strh	r3, [r0, #4]
 800d738:	80c3      	strh	r3, [r0, #6]
 800d73a:	4770      	bx	lr

0800d73c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	0004      	movs	r4, r0
 800d740:	0015      	movs	r5, r2
 800d742:	6803      	ldr	r3, [r0, #0]
 800d744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d746:	4798      	blx	r3
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	0029      	movs	r1, r5
 800d74c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d74e:	0020      	movs	r0, r4
 800d750:	4798      	blx	r3
 800d752:	bd70      	pop	{r4, r5, r6, pc}

0800d754 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800d754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d756:	4b17      	ldr	r3, [pc, #92]	; (800d7b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>)
 800d758:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d75a:	4299      	cmp	r1, r3
 800d75c:	d028      	beq.n	800d7b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800d75e:	4b16      	ldr	r3, [pc, #88]	; (800d7b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800d766:	21b1      	movs	r1, #177	; 0xb1
 800d768:	4b14      	ldr	r3, [pc, #80]	; (800d7bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800d76a:	4a15      	ldr	r2, [pc, #84]	; (800d7c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800d76c:	4815      	ldr	r0, [pc, #84]	; (800d7c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800d76e:	f005 fb41 	bl	8012df4 <__assert_func>
 800d772:	4a15      	ldr	r2, [pc, #84]	; (800d7c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800d774:	8812      	ldrh	r2, [r2, #0]
 800d776:	428a      	cmp	r2, r1
 800d778:	d803      	bhi.n	800d782 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800d77a:	4b14      	ldr	r3, [pc, #80]	; (800d7cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800d77c:	4a10      	ldr	r2, [pc, #64]	; (800d7c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800d77e:	21b2      	movs	r1, #178	; 0xb2
 800d780:	e7f4      	b.n	800d76c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800d782:	004a      	lsls	r2, r1, #1
 800d784:	189b      	adds	r3, r3, r2
 800d786:	4812      	ldr	r0, [pc, #72]	; (800d7d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800d788:	781a      	ldrb	r2, [r3, #0]
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	0092      	lsls	r2, r2, #2
 800d78e:	5815      	ldr	r5, [r2, r0]
 800d790:	785c      	ldrb	r4, [r3, #1]
 800d792:	4b10      	ldr	r3, [pc, #64]	; (800d7d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800d794:	682a      	ldr	r2, [r5, #0]
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	69d6      	ldr	r6, [r2, #28]
 800d79a:	f7fc fd8b 	bl	800a2b4 <_ZNK8touchgfx5Texts7getTextEt>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	0724      	lsls	r4, r4, #28
 800d7a2:	0fa4      	lsrs	r4, r4, #30
 800d7a4:	0002      	movs	r2, r0
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	0021      	movs	r1, r4
 800d7aa:	0028      	movs	r0, r5
 800d7ac:	47b0      	blx	r6
 800d7ae:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e7fc      	b.n	800d7ae <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5a>
 800d7b4:	0000ffff 	.word	0x0000ffff
 800d7b8:	2000353c 	.word	0x2000353c
 800d7bc:	080164a6 	.word	0x080164a6
 800d7c0:	080165e0 	.word	0x080165e0
 800d7c4:	080164e8 	.word	0x080164e8
 800d7c8:	20003540 	.word	0x20003540
 800d7cc:	08016511 	.word	0x08016511
 800d7d0:	20003544 	.word	0x20003544
 800d7d4:	20003548 	.word	0x20003548

0800d7d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800d7d8:	b570      	push	{r4, r5, r6, lr}
 800d7da:	4a12      	ldr	r2, [pc, #72]	; (800d824 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>)
 800d7dc:	6803      	ldr	r3, [r0, #0]
 800d7de:	6812      	ldr	r2, [r2, #0]
 800d7e0:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800d7e2:	0005      	movs	r5, r0
 800d7e4:	b28c      	uxth	r4, r1
 800d7e6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d7e8:	2a00      	cmp	r2, #0
 800d7ea:	d105      	bne.n	800d7f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x20>
 800d7ec:	21b1      	movs	r1, #177	; 0xb1
 800d7ee:	4b0e      	ldr	r3, [pc, #56]	; (800d828 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800d7f0:	4a0e      	ldr	r2, [pc, #56]	; (800d82c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800d7f2:	480f      	ldr	r0, [pc, #60]	; (800d830 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800d7f4:	f005 fafe 	bl	8012df4 <__assert_func>
 800d7f8:	490e      	ldr	r1, [pc, #56]	; (800d834 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800d7fa:	8809      	ldrh	r1, [r1, #0]
 800d7fc:	4299      	cmp	r1, r3
 800d7fe:	d803      	bhi.n	800d808 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>
 800d800:	4b0d      	ldr	r3, [pc, #52]	; (800d838 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800d802:	4a0a      	ldr	r2, [pc, #40]	; (800d82c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800d804:	21b2      	movs	r1, #178	; 0xb2
 800d806:	e7f4      	b.n	800d7f2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1a>
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	5c9b      	ldrb	r3, [r3, r2]
 800d80c:	4a0b      	ldr	r2, [pc, #44]	; (800d83c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	6812      	ldr	r2, [r2, #0]
 800d812:	5898      	ldr	r0, [r3, r2]
 800d814:	6803      	ldr	r3, [r0, #0]
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	4798      	blx	r3
 800d81a:	1a21      	subs	r1, r4, r0
 800d81c:	b209      	sxth	r1, r1
 800d81e:	0028      	movs	r0, r5
 800d820:	47b0      	blx	r6
 800d822:	bd70      	pop	{r4, r5, r6, pc}
 800d824:	2000353c 	.word	0x2000353c
 800d828:	080164a6 	.word	0x080164a6
 800d82c:	080165e0 	.word	0x080165e0
 800d830:	080164e8 	.word	0x080164e8
 800d834:	20003540 	.word	0x20003540
 800d838:	08016511 	.word	0x08016511
 800d83c:	20003544 	.word	0x20003544

0800d840 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800d840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d842:	4b37      	ldr	r3, [pc, #220]	; (800d920 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800d844:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800d846:	b08f      	sub	sp, #60	; 0x3c
 800d848:	0004      	movs	r4, r0
 800d84a:	000e      	movs	r6, r1
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d064      	beq.n	800d91a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xda>
 800d850:	4b34      	ldr	r3, [pc, #208]	; (800d924 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d105      	bne.n	800d864 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x24>
 800d858:	21b1      	movs	r1, #177	; 0xb1
 800d85a:	4b33      	ldr	r3, [pc, #204]	; (800d928 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800d85c:	4a33      	ldr	r2, [pc, #204]	; (800d92c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800d85e:	4834      	ldr	r0, [pc, #208]	; (800d930 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800d860:	f005 fac8 	bl	8012df4 <__assert_func>
 800d864:	4933      	ldr	r1, [pc, #204]	; (800d934 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800d866:	8809      	ldrh	r1, [r1, #0]
 800d868:	4291      	cmp	r1, r2
 800d86a:	d803      	bhi.n	800d874 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x34>
 800d86c:	4b32      	ldr	r3, [pc, #200]	; (800d938 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800d86e:	4a2f      	ldr	r2, [pc, #188]	; (800d92c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800d870:	21b2      	movs	r1, #178	; 0xb2
 800d872:	e7f4      	b.n	800d85e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1e>
 800d874:	0052      	lsls	r2, r2, #1
 800d876:	189b      	adds	r3, r3, r2
 800d878:	4930      	ldr	r1, [pc, #192]	; (800d93c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800d87a:	781a      	ldrb	r2, [r3, #0]
 800d87c:	6809      	ldr	r1, [r1, #0]
 800d87e:	0092      	lsls	r2, r2, #2
 800d880:	5851      	ldr	r1, [r2, r1]
 800d882:	2900      	cmp	r1, #0
 800d884:	d049      	beq.n	800d91a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xda>
 800d886:	0002      	movs	r2, r0
 800d888:	2534      	movs	r5, #52	; 0x34
 800d88a:	5f40      	ldrsh	r0, [r0, r5]
 800d88c:	3236      	adds	r2, #54	; 0x36
 800d88e:	7812      	ldrb	r2, [r2, #0]
 800d890:	9004      	str	r0, [sp, #16]
 800d892:	0020      	movs	r0, r4
 800d894:	3038      	adds	r0, #56	; 0x38
 800d896:	7807      	ldrb	r7, [r0, #0]
 800d898:	3801      	subs	r0, #1
 800d89a:	7800      	ldrb	r0, [r0, #0]
 800d89c:	4694      	mov	ip, r2
 800d89e:	9005      	str	r0, [sp, #20]
 800d8a0:	0020      	movs	r0, r4
 800d8a2:	785b      	ldrb	r3, [r3, #1]
 800d8a4:	ad09      	add	r5, sp, #36	; 0x24
 800d8a6:	079a      	lsls	r2, r3, #30
 800d8a8:	071b      	lsls	r3, r3, #28
 800d8aa:	0f9b      	lsrs	r3, r3, #30
 800d8ac:	3039      	adds	r0, #57	; 0x39
 800d8ae:	7800      	ldrb	r0, [r0, #0]
 800d8b0:	716b      	strb	r3, [r5, #5]
 800d8b2:	9b04      	ldr	r3, [sp, #16]
 800d8b4:	9109      	str	r1, [sp, #36]	; 0x24
 800d8b6:	81ab      	strh	r3, [r5, #12]
 800d8b8:	9b05      	ldr	r3, [sp, #20]
 800d8ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d8bc:	73eb      	strb	r3, [r5, #15]
 800d8be:	4b20      	ldr	r3, [pc, #128]	; (800d940 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x100>)
 800d8c0:	0f92      	lsrs	r2, r2, #30
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d8c6:	712a      	strb	r2, [r5, #4]
 800d8c8:	4661      	mov	r1, ip
 800d8ca:	001a      	movs	r2, r3
 800d8cc:	73a9      	strb	r1, [r5, #14]
 800d8ce:	71af      	strb	r7, [r5, #6]
 800d8d0:	7428      	strb	r0, [r5, #16]
 800d8d2:	3276      	adds	r2, #118	; 0x76
 800d8d4:	7812      	ldrb	r2, [r2, #0]
 800d8d6:	2a00      	cmp	r2, #0
 800d8d8:	d002      	beq.n	800d8e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xa0>
 800d8da:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800d8dc:	2f00      	cmp	r7, #0
 800d8de:	d100      	bne.n	800d8e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xa2>
 800d8e0:	689f      	ldr	r7, [r3, #8]
 800d8e2:	0021      	movs	r1, r4
 800d8e4:	a807      	add	r0, sp, #28
 800d8e6:	f001 ffb2 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d8ea:	4b0e      	ldr	r3, [pc, #56]	; (800d924 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0b2      	beq.n	800d858 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x18>
 800d8f2:	4b10      	ldr	r3, [pc, #64]	; (800d934 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800d8f4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	428b      	cmp	r3, r1
 800d8fa:	d9b7      	bls.n	800d86c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2c>
 800d8fc:	4b11      	ldr	r3, [pc, #68]	; (800d944 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x104>)
 800d8fe:	6818      	ldr	r0, [r3, #0]
 800d900:	f7fc fcd8 	bl	800a2b4 <_ZNK8touchgfx5Texts7getTextEt>
 800d904:	2300      	movs	r3, #0
 800d906:	9001      	str	r0, [sp, #4]
 800d908:	9303      	str	r3, [sp, #12]
 800d90a:	9302      	str	r3, [sp, #8]
 800d90c:	9500      	str	r5, [sp, #0]
 800d90e:	0033      	movs	r3, r6
 800d910:	9907      	ldr	r1, [sp, #28]
 800d912:	9a08      	ldr	r2, [sp, #32]
 800d914:	0038      	movs	r0, r7
 800d916:	f7fc fc57 	bl	800a1c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d91a:	b00f      	add	sp, #60	; 0x3c
 800d91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d91e:	46c0      	nop			; (mov r8, r8)
 800d920:	0000ffff 	.word	0x0000ffff
 800d924:	2000353c 	.word	0x2000353c
 800d928:	080164a6 	.word	0x080164a6
 800d92c:	080165e0 	.word	0x080165e0
 800d930:	080164e8 	.word	0x080164e8
 800d934:	20003540 	.word	0x20003540
 800d938:	08016511 	.word	0x08016511
 800d93c:	20003544 	.word	0x20003544
 800d940:	200034cc 	.word	0x200034cc
 800d944:	20003548 	.word	0x20003548

0800d948 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800d948:	b40e      	push	{r1, r2, r3}
 800d94a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94c:	4a32      	ldr	r2, [pc, #200]	; (800da18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd0>)
 800d94e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d950:	b09c      	sub	sp, #112	; 0x70
 800d952:	0004      	movs	r4, r0
 800d954:	4293      	cmp	r3, r2
 800d956:	d05d      	beq.n	800da14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800d958:	aa22      	add	r2, sp, #136	; 0x88
 800d95a:	9205      	str	r2, [sp, #20]
 800d95c:	4a2f      	ldr	r2, [pc, #188]	; (800da1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>)
 800d95e:	6812      	ldr	r2, [r2, #0]
 800d960:	2a00      	cmp	r2, #0
 800d962:	d105      	bne.n	800d970 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800d964:	21b1      	movs	r1, #177	; 0xb1
 800d966:	4b2e      	ldr	r3, [pc, #184]	; (800da20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>)
 800d968:	4a2e      	ldr	r2, [pc, #184]	; (800da24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 800d96a:	482f      	ldr	r0, [pc, #188]	; (800da28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 800d96c:	f005 fa42 	bl	8012df4 <__assert_func>
 800d970:	492e      	ldr	r1, [pc, #184]	; (800da2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 800d972:	8809      	ldrh	r1, [r1, #0]
 800d974:	4299      	cmp	r1, r3
 800d976:	d803      	bhi.n	800d980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x38>
 800d978:	4b2d      	ldr	r3, [pc, #180]	; (800da30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 800d97a:	4a2a      	ldr	r2, [pc, #168]	; (800da24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 800d97c:	21b2      	movs	r1, #178	; 0xb2
 800d97e:	e7f4      	b.n	800d96a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800d980:	4f2c      	ldr	r7, [pc, #176]	; (800da34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	5c9b      	ldrb	r3, [r3, r2]
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	589e      	ldr	r6, [r3, r2]
 800d98c:	6833      	ldr	r3, [r6, #0]
 800d98e:	0030      	movs	r0, r6
 800d990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d992:	4798      	blx	r3
 800d994:	466b      	mov	r3, sp
 800d996:	9003      	str	r0, [sp, #12]
 800d998:	a806      	add	r0, sp, #24
 800d99a:	250c      	movs	r5, #12
 800d99c:	5f5d      	ldrsh	r5, [r3, r5]
 800d99e:	f002 fb63 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800d9a2:	6833      	ldr	r3, [r6, #0]
 800d9a4:	0030      	movs	r0, r6
 800d9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a8:	4798      	blx	r3
 800d9aa:	9a05      	ldr	r2, [sp, #20]
 800d9ac:	0003      	movs	r3, r0
 800d9ae:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d9b0:	a806      	add	r0, sp, #24
 800d9b2:	f002 fba2 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d9b6:	0023      	movs	r3, r4
 800d9b8:	3339      	adds	r3, #57	; 0x39
 800d9ba:	7819      	ldrb	r1, [r3, #0]
 800d9bc:	4b17      	ldr	r3, [pc, #92]	; (800da1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>)
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	2a00      	cmp	r2, #0
 800d9c2:	d0cf      	beq.n	800d964 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x1c>
 800d9c4:	4819      	ldr	r0, [pc, #100]	; (800da2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 800d9c6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800d9c8:	8800      	ldrh	r0, [r0, #0]
 800d9ca:	4298      	cmp	r0, r3
 800d9cc:	d9d4      	bls.n	800d978 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x30>
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	18d2      	adds	r2, r2, r3
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	7813      	ldrb	r3, [r2, #0]
 800d9d6:	2708      	movs	r7, #8
 800d9d8:	5fe6      	ldrsh	r6, [r4, r7]
 800d9da:	7852      	ldrb	r2, [r2, #1]
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	9600      	str	r6, [sp, #0]
 800d9e0:	0712      	lsls	r2, r2, #28
 800d9e2:	581b      	ldr	r3, [r3, r0]
 800d9e4:	0f92      	lsrs	r2, r2, #30
 800d9e6:	a806      	add	r0, sp, #24
 800d9e8:	f000 fd48 	bl	800e47c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800d9ec:	2134      	movs	r1, #52	; 0x34
 800d9ee:	5e62      	ldrsh	r2, [r4, r1]
 800d9f0:	b203      	sxth	r3, r0
 800d9f2:	18a9      	adds	r1, r5, r2
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	dd0b      	ble.n	800da10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800d9f8:	1e5d      	subs	r5, r3, #1
 800d9fa:	9b03      	ldr	r3, [sp, #12]
 800d9fc:	4355      	muls	r5, r2
 800d9fe:	4358      	muls	r0, r3
 800da00:	182d      	adds	r5, r5, r0
 800da02:	b22d      	sxth	r5, r5
 800da04:	0028      	movs	r0, r5
 800da06:	b01c      	add	sp, #112	; 0x70
 800da08:	bcf0      	pop	{r4, r5, r6, r7}
 800da0a:	bc08      	pop	{r3}
 800da0c:	b003      	add	sp, #12
 800da0e:	4718      	bx	r3
 800da10:	2b00      	cmp	r3, #0
 800da12:	dcf7      	bgt.n	800da04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbc>
 800da14:	2500      	movs	r5, #0
 800da16:	e7f5      	b.n	800da04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbc>
 800da18:	0000ffff 	.word	0x0000ffff
 800da1c:	2000353c 	.word	0x2000353c
 800da20:	080164a6 	.word	0x080164a6
 800da24:	080165e0 	.word	0x080165e0
 800da28:	080164e8 	.word	0x080164e8
 800da2c:	20003540 	.word	0x20003540
 800da30:	08016511 	.word	0x08016511
 800da34:	20003544 	.word	0x20003544

0800da38 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800da3c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800da3e:	0004      	movs	r4, r0
 800da40:	4299      	cmp	r1, r3
 800da42:	d01d      	beq.n	800da80 <_ZN8touchgfx8TextArea13getTextHeightEv+0x48>
 800da44:	6803      	ldr	r3, [r0, #0]
 800da46:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d105      	bne.n	800da5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800da50:	21b1      	movs	r1, #177	; 0xb1
 800da52:	4b0e      	ldr	r3, [pc, #56]	; (800da8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800da54:	4a0e      	ldr	r2, [pc, #56]	; (800da90 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800da56:	480f      	ldr	r0, [pc, #60]	; (800da94 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800da58:	f005 f9cc 	bl	8012df4 <__assert_func>
 800da5c:	4b0e      	ldr	r3, [pc, #56]	; (800da98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	428b      	cmp	r3, r1
 800da62:	d803      	bhi.n	800da6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800da64:	4b0d      	ldr	r3, [pc, #52]	; (800da9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800da66:	4a0a      	ldr	r2, [pc, #40]	; (800da90 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800da68:	21b2      	movs	r1, #178	; 0xb2
 800da6a:	e7f4      	b.n	800da56 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800da6c:	4b0c      	ldr	r3, [pc, #48]	; (800daa0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800da6e:	6818      	ldr	r0, [r3, #0]
 800da70:	f7fc fc20 	bl	800a2b4 <_ZNK8touchgfx5Texts7getTextEt>
 800da74:	2300      	movs	r3, #0
 800da76:	0001      	movs	r1, r0
 800da78:	001a      	movs	r2, r3
 800da7a:	0020      	movs	r0, r4
 800da7c:	47a8      	blx	r5
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
 800da80:	2000      	movs	r0, #0
 800da82:	e7fc      	b.n	800da7e <_ZN8touchgfx8TextArea13getTextHeightEv+0x46>
 800da84:	0000ffff 	.word	0x0000ffff
 800da88:	2000353c 	.word	0x2000353c
 800da8c:	080164a6 	.word	0x080164a6
 800da90:	080165e0 	.word	0x080165e0
 800da94:	080164e8 	.word	0x080164e8
 800da98:	20003540 	.word	0x20003540
 800da9c:	08016511 	.word	0x08016511
 800daa0:	20003548 	.word	0x20003548

0800daa4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	4b14      	ldr	r3, [pc, #80]	; (800daf8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x54>)
 800daa8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800daaa:	0004      	movs	r4, r0
 800daac:	429a      	cmp	r2, r3
 800daae:	d01a      	beq.n	800dae6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x42>
 800dab0:	6803      	ldr	r3, [r0, #0]
 800dab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab4:	4798      	blx	r3
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	0005      	movs	r5, r0
 800daba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dabc:	0020      	movs	r0, r4
 800dabe:	4798      	blx	r3
 800dac0:	0023      	movs	r3, r4
 800dac2:	2202      	movs	r2, #2
 800dac4:	3338      	adds	r3, #56	; 0x38
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	0006      	movs	r6, r0
 800daca:	4393      	bics	r3, r2
 800dacc:	b22d      	sxth	r5, r5
 800dace:	6822      	ldr	r2, [r4, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d109      	bne.n	800dae8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 800dad4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800dad6:	0029      	movs	r1, r5
 800dad8:	0020      	movs	r0, r4
 800dada:	4798      	blx	r3
 800dadc:	0031      	movs	r1, r6
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae2:	0020      	movs	r0, r4
 800dae4:	4798      	blx	r3
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	0001      	movs	r1, r0
 800daea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800daec:	0020      	movs	r0, r4
 800daee:	4798      	blx	r3
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	0029      	movs	r1, r5
 800daf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf6:	e7f4      	b.n	800dae2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3e>
 800daf8:	0000ffff 	.word	0x0000ffff

0800dafc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 800dafc:	888b      	ldrh	r3, [r1, #4]
 800dafe:	b510      	push	{r4, lr}
 800db00:	8583      	strh	r3, [r0, #44]	; 0x2c
 800db02:	2208      	movs	r2, #8
 800db04:	5e83      	ldrsh	r3, [r0, r2]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d105      	bne.n	800db16 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x1a>
 800db0a:	220a      	movs	r2, #10
 800db0c:	5e83      	ldrsh	r3, [r0, r2]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x1a>
 800db12:	f7ff ffc7 	bl	800daa4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800db16:	bd10      	pop	{r4, pc}

0800db18 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800db18:	2300      	movs	r3, #0
 800db1a:	8003      	strh	r3, [r0, #0]
 800db1c:	8043      	strh	r3, [r0, #2]
 800db1e:	8083      	strh	r3, [r0, #4]
 800db20:	80c3      	strh	r3, [r0, #6]
 800db22:	000b      	movs	r3, r1
 800db24:	332c      	adds	r3, #44	; 0x2c
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d103      	bne.n	800db34 <_ZNK8touchgfx3Box12getSolidRectEv+0x1c>
 800db2c:	1dcb      	adds	r3, r1, #7
 800db2e:	7fdb      	ldrb	r3, [r3, #31]
 800db30:	2bff      	cmp	r3, #255	; 0xff
 800db32:	d103      	bne.n	800db3c <_ZNK8touchgfx3Box12getSolidRectEv+0x24>
 800db34:	890b      	ldrh	r3, [r1, #8]
 800db36:	8083      	strh	r3, [r0, #4]
 800db38:	894b      	ldrh	r3, [r1, #10]
 800db3a:	80c3      	strh	r3, [r0, #6]
 800db3c:	4770      	bx	lr
	...

0800db40 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800db40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db42:	0004      	movs	r4, r0
 800db44:	2208      	movs	r2, #8
 800db46:	4668      	mov	r0, sp
 800db48:	f005 f9c8 	bl	8012edc <memcpy>
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	4669      	mov	r1, sp
 800db50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db52:	0020      	movs	r0, r4
 800db54:	4798      	blx	r3
 800db56:	4b09      	ldr	r3, [pc, #36]	; (800db7c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x3c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	001a      	movs	r2, r3
 800db5c:	3276      	adds	r2, #118	; 0x76
 800db5e:	7812      	ldrb	r2, [r2, #0]
 800db60:	2a00      	cmp	r2, #0
 800db62:	d002      	beq.n	800db6a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x2a>
 800db64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db66:	2800      	cmp	r0, #0
 800db68:	d100      	bne.n	800db6c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x2c>
 800db6a:	6898      	ldr	r0, [r3, #8]
 800db6c:	6802      	ldr	r2, [r0, #0]
 800db6e:	1de3      	adds	r3, r4, #7
 800db70:	6995      	ldr	r5, [r2, #24]
 800db72:	7fdb      	ldrb	r3, [r3, #31]
 800db74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800db76:	4669      	mov	r1, sp
 800db78:	47a8      	blx	r5
 800db7a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800db7c:	200034cc 	.word	0x200034cc

0800db80 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800db80:	2000      	movs	r0, #0
 800db82:	4770      	bx	lr

0800db84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800db84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db86:	b0b1      	sub	sp, #196	; 0xc4
 800db88:	001e      	movs	r6, r3
 800db8a:	ab3b      	add	r3, sp, #236	; 0xec
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	0015      	movs	r5, r2
 800db90:	932c      	str	r3, [sp, #176]	; 0xb0
 800db92:	ab3c      	add	r3, sp, #240	; 0xf0
 800db94:	881f      	ldrh	r7, [r3, #0]
 800db96:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800db98:	912b      	str	r1, [sp, #172]	; 0xac
 800db9a:	2208      	movs	r2, #8
 800db9c:	5e9a      	ldrsh	r2, [r3, r2]
 800db9e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800dba0:	902a      	str	r0, [sp, #168]	; 0xa8
 800dba2:	210c      	movs	r1, #12
 800dba4:	5e5b      	ldrsh	r3, [r3, r1]
 800dba6:	2100      	movs	r1, #0
 800dba8:	a82e      	add	r0, sp, #184	; 0xb8
 800dbaa:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 800dbac:	8082      	strh	r2, [r0, #4]
 800dbae:	80c3      	strh	r3, [r0, #6]
 800dbb0:	912e      	str	r1, [sp, #184]	; 0xb8
 800dbb2:	f000 fedf 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dbb6:	6833      	ldr	r3, [r6, #0]
 800dbb8:	9319      	str	r3, [sp, #100]	; 0x64
 800dbba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800dbbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	1a9b      	subs	r3, r3, r2
 800dbc2:	9318      	str	r3, [sp, #96]	; 0x60
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	5ea3      	ldrsh	r3, [r4, r2]
 800dbc8:	931d      	str	r3, [sp, #116]	; 0x74
 800dbca:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800dbcc:	2200      	movs	r2, #0
 800dbce:	5e9b      	ldrsh	r3, [r3, r2]
 800dbd0:	9324      	str	r3, [sp, #144]	; 0x90
 800dbd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dbd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbd6:	4694      	mov	ip, r2
 800dbd8:	4463      	add	r3, ip
 800dbda:	931e      	str	r3, [sp, #120]	; 0x78
 800dbdc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dbde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbe0:	1a9b      	subs	r3, r3, r2
 800dbe2:	9326      	str	r3, [sp, #152]	; 0x98
 800dbe4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dbe6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	dc00      	bgt.n	800dbee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6a>
 800dbec:	e143      	b.n	800de76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2f2>
 800dbee:	88a3      	ldrh	r3, [r4, #4]
 800dbf0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dbf2:	189b      	adds	r3, r3, r2
 800dbf4:	b21b      	sxth	r3, r3
 800dbf6:	9325      	str	r3, [sp, #148]	; 0x94
 800dbf8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800dbfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	dd00      	ble.n	800dc02 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e>
 800dc00:	e139      	b.n	800de76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2f2>
 800dc02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dc04:	429f      	cmp	r7, r3
 800dc06:	dd00      	ble.n	800dc0a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86>
 800dc08:	001f      	movs	r7, r3
 800dc0a:	69f3      	ldr	r3, [r6, #28]
 800dc0c:	0038      	movs	r0, r7
 800dc0e:	931f      	str	r3, [sp, #124]	; 0x7c
 800dc10:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800dc12:	9320      	str	r3, [sp, #128]	; 0x80
 800dc14:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800dc16:	9327      	str	r3, [sp, #156]	; 0x9c
 800dc18:	f7f3 fb9a 	bl	8001350 <__aeabi_i2f>
 800dc1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800dc1e:	1c04      	adds	r4, r0, #0
 800dc20:	f7f3 f880 	bl	8000d24 <__aeabi_fmul>
 800dc24:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800dc26:	9021      	str	r0, [sp, #132]	; 0x84
 800dc28:	1c20      	adds	r0, r4, #0
 800dc2a:	f7f3 f87b 	bl	8000d24 <__aeabi_fmul>
 800dc2e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800dc30:	9022      	str	r0, [sp, #136]	; 0x88
 800dc32:	1c20      	adds	r0, r4, #0
 800dc34:	f7f3 f876 	bl	8000d24 <__aeabi_fmul>
 800dc38:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dc3a:	9023      	str	r0, [sp, #140]	; 0x8c
 800dc3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800dc3e:	f7f2 fcff 	bl	8000640 <__aeabi_fadd>
 800dc42:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dc44:	901a      	str	r0, [sp, #104]	; 0x68
 800dc46:	9820      	ldr	r0, [sp, #128]	; 0x80
 800dc48:	f7f2 fcfa 	bl	8000640 <__aeabi_fadd>
 800dc4c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800dc4e:	901b      	str	r0, [sp, #108]	; 0x6c
 800dc50:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800dc52:	f7f2 fcf5 	bl	8000640 <__aeabi_fadd>
 800dc56:	901c      	str	r0, [sp, #112]	; 0x70
 800dc58:	20fe      	movs	r0, #254	; 0xfe
 800dc5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800dc5c:	0580      	lsls	r0, r0, #22
 800dc5e:	f7f2 fe89 	bl	8000974 <__aeabi_fdiv>
 800dc62:	1c01      	adds	r1, r0, #0
 800dc64:	1c04      	adds	r4, r0, #0
 800dc66:	9820      	ldr	r0, [sp, #128]	; 0x80
 800dc68:	f7f3 f85c 	bl	8000d24 <__aeabi_fmul>
 800dc6c:	1c21      	adds	r1, r4, #0
 800dc6e:	901f      	str	r0, [sp, #124]	; 0x7c
 800dc70:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800dc72:	f7f3 f857 	bl	8000d24 <__aeabi_fmul>
 800dc76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dc7a:	9020      	str	r0, [sp, #128]	; 0x80
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	dc00      	bgt.n	800dc82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800dc80:	e0fe      	b.n	800de80 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2fc>
 800dc82:	9826      	ldr	r0, [sp, #152]	; 0x98
 800dc84:	0039      	movs	r1, r7
 800dc86:	f7f2 fbb9 	bl	80003fc <__aeabi_idivmod>
 800dc8a:	911d      	str	r1, [sp, #116]	; 0x74
 800dc8c:	0005      	movs	r5, r0
 800dc8e:	9026      	str	r0, [sp, #152]	; 0x98
 800dc90:	f7f3 fb5e 	bl	8001350 <__aeabi_i2f>
 800dc94:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dc96:	1c04      	adds	r4, r0, #0
 800dc98:	f7f3 f844 	bl	8000d24 <__aeabi_fmul>
 800dc9c:	1c01      	adds	r1, r0, #0
 800dc9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dca0:	f7f2 fcce 	bl	8000640 <__aeabi_fadd>
 800dca4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dca6:	901a      	str	r0, [sp, #104]	; 0x68
 800dca8:	1c20      	adds	r0, r4, #0
 800dcaa:	f7f3 f83b 	bl	8000d24 <__aeabi_fmul>
 800dcae:	1c01      	adds	r1, r0, #0
 800dcb0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dcb2:	f7f2 fcc5 	bl	8000640 <__aeabi_fadd>
 800dcb6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800dcb8:	901b      	str	r0, [sp, #108]	; 0x6c
 800dcba:	1c20      	adds	r0, r4, #0
 800dcbc:	f7f3 f832 	bl	8000d24 <__aeabi_fmul>
 800dcc0:	1c01      	adds	r1, r0, #0
 800dcc2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800dcc4:	f7f2 fcbc 	bl	8000640 <__aeabi_fadd>
 800dcc8:	901c      	str	r0, [sp, #112]	; 0x70
 800dcca:	2d00      	cmp	r5, #0
 800dccc:	dd20      	ble.n	800dd10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18c>
 800dcce:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dcd0:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dcd2:	f7f3 f959 	bl	8000f88 <__aeabi_fsub>
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	1c04      	adds	r4, r0, #0
 800dcda:	f7f2 fba1 	bl	8000420 <__aeabi_fcmpeq>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d000      	beq.n	800dce4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x160>
 800dce2:	e0ca      	b.n	800de7a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2f6>
 800dce4:	20fe      	movs	r0, #254	; 0xfe
 800dce6:	1c21      	adds	r1, r4, #0
 800dce8:	0580      	lsls	r0, r0, #22
 800dcea:	f7f2 fe43 	bl	8000974 <__aeabi_fdiv>
 800dcee:	1c04      	adds	r4, r0, #0
 800dcf0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dcf2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dcf4:	f7f3 f948 	bl	8000f88 <__aeabi_fsub>
 800dcf8:	1c21      	adds	r1, r4, #0
 800dcfa:	f7f3 f813 	bl	8000d24 <__aeabi_fmul>
 800dcfe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800dd00:	901f      	str	r0, [sp, #124]	; 0x7c
 800dd02:	981c      	ldr	r0, [sp, #112]	; 0x70
 800dd04:	f7f3 f940 	bl	8000f88 <__aeabi_fsub>
 800dd08:	1c21      	adds	r1, r4, #0
 800dd0a:	f7f3 f80b 	bl	8000d24 <__aeabi_fmul>
 800dd0e:	9020      	str	r0, [sp, #128]	; 0x80
 800dd10:	437d      	muls	r5, r7
 800dd12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd14:	1b5b      	subs	r3, r3, r5
 800dd16:	9318      	str	r3, [sp, #96]	; 0x60
 800dd18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd1a:	195b      	adds	r3, r3, r5
 800dd1c:	9319      	str	r3, [sp, #100]	; 0x64
 800dd1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dd22:	189b      	adds	r3, r3, r2
 800dd24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dd26:	189b      	adds	r3, r3, r2
 800dd28:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	da05      	bge.n	800dd3a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b6>
 800dd2e:	0013      	movs	r3, r2
 800dd30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dd32:	1a9b      	subs	r3, r3, r2
 800dd34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd36:	1a9b      	subs	r3, r3, r2
 800dd38:	9318      	str	r3, [sp, #96]	; 0x60
 800dd3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	dc00      	bgt.n	800dd42 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1be>
 800dd40:	e099      	b.n	800de76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2f2>
 800dd42:	0039      	movs	r1, r7
 800dd44:	0018      	movs	r0, r3
 800dd46:	f7f2 fb59 	bl	80003fc <__aeabi_idivmod>
 800dd4a:	9018      	str	r0, [sp, #96]	; 0x60
 800dd4c:	1e0d      	subs	r5, r1, #0
 800dd4e:	d103      	bne.n	800dd58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d4>
 800dd50:	0003      	movs	r3, r0
 800dd52:	003d      	movs	r5, r7
 800dd54:	3b01      	subs	r3, #1
 800dd56:	9318      	str	r3, [sp, #96]	; 0x60
 800dd58:	20fe      	movs	r0, #254	; 0xfe
 800dd5a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dd5c:	0580      	lsls	r0, r0, #22
 800dd5e:	f7f2 fe09 	bl	8000974 <__aeabi_fdiv>
 800dd62:	1c01      	adds	r1, r0, #0
 800dd64:	1c04      	adds	r4, r0, #0
 800dd66:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dd68:	f7f2 ffdc 	bl	8000d24 <__aeabi_fmul>
 800dd6c:	1c21      	adds	r1, r4, #0
 800dd6e:	9024      	str	r0, [sp, #144]	; 0x90
 800dd70:	981c      	ldr	r0, [sp, #112]	; 0x70
 800dd72:	f7f2 ffd7 	bl	8000d24 <__aeabi_fmul>
 800dd76:	218f      	movs	r1, #143	; 0x8f
 800dd78:	9025      	str	r0, [sp, #148]	; 0x94
 800dd7a:	05c9      	lsls	r1, r1, #23
 800dd7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800dd7e:	f7f2 ffd1 	bl	8000d24 <__aeabi_fmul>
 800dd82:	f7f3 fac5 	bl	8001310 <__aeabi_f2iz>
 800dd86:	218f      	movs	r1, #143	; 0x8f
 800dd88:	9029      	str	r0, [sp, #164]	; 0xa4
 800dd8a:	05c9      	lsls	r1, r1, #23
 800dd8c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800dd8e:	f7f2 ffc9 	bl	8000d24 <__aeabi_fmul>
 800dd92:	f7f3 fabd 	bl	8001310 <__aeabi_f2iz>
 800dd96:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800dd98:	9028      	str	r0, [sp, #160]	; 0xa0
 800dd9a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800dd9c:	f7f3 f8f4 	bl	8000f88 <__aeabi_fsub>
 800dda0:	218f      	movs	r1, #143	; 0x8f
 800dda2:	05c9      	lsls	r1, r1, #23
 800dda4:	f7f2 ffbe 	bl	8000d24 <__aeabi_fmul>
 800dda8:	f7f3 fab2 	bl	8001310 <__aeabi_f2iz>
 800ddac:	0039      	movs	r1, r7
 800ddae:	f7f2 fa3f 	bl	8000230 <__divsi3>
 800ddb2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ddb4:	9027      	str	r0, [sp, #156]	; 0x9c
 800ddb6:	9825      	ldr	r0, [sp, #148]	; 0x94
 800ddb8:	f7f3 f8e6 	bl	8000f88 <__aeabi_fsub>
 800ddbc:	218f      	movs	r1, #143	; 0x8f
 800ddbe:	05c9      	lsls	r1, r1, #23
 800ddc0:	f7f2 ffb0 	bl	8000d24 <__aeabi_fmul>
 800ddc4:	f7f3 faa4 	bl	8001310 <__aeabi_f2iz>
 800ddc8:	0039      	movs	r1, r7
 800ddca:	f7f2 fa31 	bl	8000230 <__divsi3>
 800ddce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ddd0:	003b      	movs	r3, r7
 800ddd2:	2a00      	cmp	r2, #0
 800ddd4:	dc00      	bgt.n	800ddd8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x254>
 800ddd6:	002b      	movs	r3, r5
 800ddd8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ddda:	6852      	ldr	r2, [r2, #4]
 800dddc:	9219      	str	r2, [sp, #100]	; 0x64
 800ddde:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dde0:	1a9b      	subs	r3, r3, r2
 800dde2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dde4:	932a      	str	r3, [sp, #168]	; 0xa8
 800dde6:	6812      	ldr	r2, [r2, #0]
 800dde8:	922d      	str	r2, [sp, #180]	; 0xb4
 800ddea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ddec:	9216      	str	r2, [sp, #88]	; 0x58
 800ddee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ddf0:	9215      	str	r2, [sp, #84]	; 0x54
 800ddf2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ddf4:	9214      	str	r2, [sp, #80]	; 0x50
 800ddf6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ddf8:	9213      	str	r2, [sp, #76]	; 0x4c
 800ddfa:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800ddfc:	9212      	str	r2, [sp, #72]	; 0x48
 800ddfe:	aa2e      	add	r2, sp, #184	; 0xb8
 800de00:	2306      	movs	r3, #6
 800de02:	5ed1      	ldrsh	r1, [r2, r3]
 800de04:	9111      	str	r1, [sp, #68]	; 0x44
 800de06:	2304      	movs	r3, #4
 800de08:	5ed2      	ldrsh	r2, [r2, r3]
 800de0a:	6971      	ldr	r1, [r6, #20]
 800de0c:	9210      	str	r2, [sp, #64]	; 0x40
 800de0e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800de10:	2302      	movs	r3, #2
 800de12:	5ed2      	ldrsh	r2, [r2, r3]
 800de14:	1852      	adds	r2, r2, r1
 800de16:	991d      	ldr	r1, [sp, #116]	; 0x74
 800de18:	920f      	str	r2, [sp, #60]	; 0x3c
 800de1a:	468c      	mov	ip, r1
 800de1c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800de1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800de20:	4379      	muls	r1, r7
 800de22:	4462      	add	r2, ip
 800de24:	1852      	adds	r2, r2, r1
 800de26:	920e      	str	r2, [sp, #56]	; 0x38
 800de28:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800de2a:	920d      	str	r2, [sp, #52]	; 0x34
 800de2c:	940c      	str	r4, [sp, #48]	; 0x30
 800de2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800de30:	9007      	str	r0, [sp, #28]
 800de32:	920b      	str	r2, [sp, #44]	; 0x2c
 800de34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800de36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800de38:	920a      	str	r2, [sp, #40]	; 0x28
 800de3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800de3c:	9700      	str	r7, [sp, #0]
 800de3e:	9209      	str	r2, [sp, #36]	; 0x24
 800de40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800de42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800de44:	9208      	str	r2, [sp, #32]
 800de46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800de48:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de4a:	9206      	str	r2, [sp, #24]
 800de4c:	4662      	mov	r2, ip
 800de4e:	4350      	muls	r0, r2
 800de50:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800de52:	1880      	adds	r0, r0, r2
 800de54:	4662      	mov	r2, ip
 800de56:	4354      	muls	r4, r2
 800de58:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800de5a:	9005      	str	r0, [sp, #20]
 800de5c:	18a4      	adds	r4, r4, r2
 800de5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800de60:	9404      	str	r4, [sp, #16]
 800de62:	9203      	str	r2, [sp, #12]
 800de64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de66:	9819      	ldr	r0, [sp, #100]	; 0x64
 800de68:	9202      	str	r2, [sp, #8]
 800de6a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de6c:	9201      	str	r2, [sp, #4]
 800de6e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800de70:	6894      	ldr	r4, [r2, #8]
 800de72:	002a      	movs	r2, r5
 800de74:	47a0      	blx	r4
 800de76:	b031      	add	sp, #196	; 0xc4
 800de78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de7a:	24fe      	movs	r4, #254	; 0xfe
 800de7c:	05a4      	lsls	r4, r4, #22
 800de7e:	e737      	b.n	800dcf0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16c>
 800de80:	2300      	movs	r3, #0
 800de82:	9326      	str	r3, [sp, #152]	; 0x98
 800de84:	931d      	str	r3, [sp, #116]	; 0x74
 800de86:	e74a      	b.n	800dd1e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19a>

0800de88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	ad06      	add	r5, sp, #24
 800de8c:	0004      	movs	r4, r0
 800de8e:	cd01      	ldmia	r5!, {r0}
 800de90:	6061      	str	r1, [r4, #4]
 800de92:	782e      	ldrb	r6, [r5, #0]
 800de94:	2500      	movs	r5, #0
 800de96:	7223      	strb	r3, [r4, #8]
 800de98:	8025      	strh	r5, [r4, #0]
 800de9a:	7266      	strb	r6, [r4, #9]
 800de9c:	60e0      	str	r0, [r4, #12]
 800de9e:	8222      	strh	r2, [r4, #16]
 800dea0:	8265      	strh	r5, [r4, #18]
 800dea2:	82a5      	strh	r5, [r4, #20]
 800dea4:	82e5      	strh	r5, [r4, #22]
 800dea6:	8325      	strh	r5, [r4, #24]
 800dea8:	8365      	strh	r5, [r4, #26]
 800deaa:	83a5      	strh	r5, [r4, #28]
 800deac:	77a5      	strb	r5, [r4, #30]
 800deae:	6803      	ldr	r3, [r0, #0]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	4798      	blx	r3
 800deb4:	0007      	movs	r7, r0
 800deb6:	42a8      	cmp	r0, r5
 800deb8:	d020      	beq.n	800defc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800deba:	68e0      	ldr	r0, [r4, #12]
 800debc:	0039      	movs	r1, r7
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	2680      	movs	r6, #128	; 0x80
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	4798      	blx	r3
 800dec6:	7b43      	ldrb	r3, [r0, #13]
 800dec8:	7a82      	ldrb	r2, [r0, #10]
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	0076      	lsls	r6, r6, #1
 800dece:	4033      	ands	r3, r6
 800ded0:	4313      	orrs	r3, r2
 800ded2:	83a3      	strh	r3, [r4, #28]
 800ded4:	7a63      	ldrb	r3, [r4, #9]
 800ded6:	0005      	movs	r5, r0
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d10f      	bne.n	800defc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800dedc:	68e0      	ldr	r0, [r4, #12]
 800dede:	002a      	movs	r2, r5
 800dee0:	6803      	ldr	r3, [r0, #0]
 800dee2:	0039      	movs	r1, r7
 800dee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dee6:	4798      	blx	r3
 800dee8:	0002      	movs	r2, r0
 800deea:	7b68      	ldrb	r0, [r5, #13]
 800deec:	7aab      	ldrb	r3, [r5, #10]
 800deee:	0040      	lsls	r0, r0, #1
 800def0:	4030      	ands	r0, r6
 800def2:	4318      	orrs	r0, r3
 800def4:	8ba3      	ldrh	r3, [r4, #28]
 800def6:	1880      	adds	r0, r0, r2
 800def8:	18c0      	adds	r0, r0, r3
 800defa:	83a0      	strh	r0, [r4, #28]
 800defc:	0020      	movs	r0, r4
 800defe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800df00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df02:	2500      	movs	r5, #0
 800df04:	000e      	movs	r6, r1
 800df06:	002c      	movs	r4, r5
 800df08:	b089      	sub	sp, #36	; 0x24
 800df0a:	9003      	str	r0, [sp, #12]
 800df0c:	9204      	str	r2, [sp, #16]
 800df0e:	9305      	str	r3, [sp, #20]
 800df10:	9502      	str	r5, [sp, #8]
 800df12:	9501      	str	r5, [sp, #4]
 800df14:	9b04      	ldr	r3, [sp, #16]
 800df16:	429d      	cmp	r5, r3
 800df18:	da29      	bge.n	800df6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6e>
 800df1a:	2300      	movs	r3, #0
 800df1c:	9307      	str	r3, [sp, #28]
 800df1e:	4b15      	ldr	r3, [pc, #84]	; (800df74 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x74>)
 800df20:	429c      	cmp	r4, r3
 800df22:	d003      	beq.n	800df2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x2c>
 800df24:	4b14      	ldr	r3, [pc, #80]	; (800df78 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x78>)
 800df26:	429c      	cmp	r4, r3
 800df28:	d000      	beq.n	800df2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x2c>
 800df2a:	9402      	str	r4, [sp, #8]
 800df2c:	ab07      	add	r3, sp, #28
 800df2e:	0032      	movs	r2, r6
 800df30:	9905      	ldr	r1, [sp, #20]
 800df32:	9803      	ldr	r0, [sp, #12]
 800df34:	f002 fbde 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df38:	1e04      	subs	r4, r0, #0
 800df3a:	d018      	beq.n	800df6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6e>
 800df3c:	280a      	cmp	r0, #10
 800df3e:	d016      	beq.n	800df6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6e>
 800df40:	9a07      	ldr	r2, [sp, #28]
 800df42:	2a00      	cmp	r2, #0
 800df44:	d011      	beq.n	800df6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6a>
 800df46:	2380      	movs	r3, #128	; 0x80
 800df48:	7b57      	ldrb	r7, [r2, #13]
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	007f      	lsls	r7, r7, #1
 800df4e:	7a90      	ldrb	r0, [r2, #10]
 800df50:	401f      	ands	r7, r3
 800df52:	6833      	ldr	r3, [r6, #0]
 800df54:	4307      	orrs	r7, r0
 800df56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df58:	9902      	ldr	r1, [sp, #8]
 800df5a:	0030      	movs	r0, r6
 800df5c:	8894      	ldrh	r4, [r2, #4]
 800df5e:	4798      	blx	r3
 800df60:	9b01      	ldr	r3, [sp, #4]
 800df62:	19c7      	adds	r7, r0, r7
 800df64:	19df      	adds	r7, r3, r7
 800df66:	b2bb      	uxth	r3, r7
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	3501      	adds	r5, #1
 800df6c:	e7d2      	b.n	800df14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 800df6e:	9801      	ldr	r0, [sp, #4]
 800df70:	b009      	add	sp, #36	; 0x24
 800df72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df74:	0000feff 	.word	0x0000feff
 800df78:	0000200b 	.word	0x0000200b

0800df7c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800df7c:	b530      	push	{r4, r5, lr}
 800df7e:	2a02      	cmp	r2, #2
 800df80:	d011      	beq.n	800dfa6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800df82:	2a03      	cmp	r2, #3
 800df84:	d01c      	beq.n	800dfc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800df86:	2a01      	cmp	r2, #1
 800df88:	d10c      	bne.n	800dfa4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800df8a:	2304      	movs	r3, #4
 800df8c:	5ec2      	ldrsh	r2, [r0, r3]
 800df8e:	888b      	ldrh	r3, [r1, #4]
 800df90:	8801      	ldrh	r1, [r0, #0]
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	1a5b      	subs	r3, r3, r1
 800df96:	2406      	movs	r4, #6
 800df98:	5f01      	ldrsh	r1, [r0, r4]
 800df9a:	8844      	ldrh	r4, [r0, #2]
 800df9c:	8081      	strh	r1, [r0, #4]
 800df9e:	8004      	strh	r4, [r0, #0]
 800dfa0:	8043      	strh	r3, [r0, #2]
 800dfa2:	80c2      	strh	r2, [r0, #6]
 800dfa4:	bd30      	pop	{r4, r5, pc}
 800dfa6:	88cb      	ldrh	r3, [r1, #6]
 800dfa8:	88c2      	ldrh	r2, [r0, #6]
 800dfaa:	1a9b      	subs	r3, r3, r2
 800dfac:	8842      	ldrh	r2, [r0, #2]
 800dfae:	1a9b      	subs	r3, r3, r2
 800dfb0:	888a      	ldrh	r2, [r1, #4]
 800dfb2:	8881      	ldrh	r1, [r0, #4]
 800dfb4:	8043      	strh	r3, [r0, #2]
 800dfb6:	1a52      	subs	r2, r2, r1
 800dfb8:	8801      	ldrh	r1, [r0, #0]
 800dfba:	1a52      	subs	r2, r2, r1
 800dfbc:	8002      	strh	r2, [r0, #0]
 800dfbe:	e7f1      	b.n	800dfa4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800dfc0:	2306      	movs	r3, #6
 800dfc2:	5ec2      	ldrsh	r2, [r0, r3]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	5ec5      	ldrsh	r5, [r0, r3]
 800dfc8:	2304      	movs	r3, #4
 800dfca:	5ec4      	ldrsh	r4, [r0, r3]
 800dfcc:	88cb      	ldrh	r3, [r1, #6]
 800dfce:	8841      	ldrh	r1, [r0, #2]
 800dfd0:	1a9b      	subs	r3, r3, r2
 800dfd2:	1a5b      	subs	r3, r3, r1
 800dfd4:	8003      	strh	r3, [r0, #0]
 800dfd6:	8045      	strh	r5, [r0, #2]
 800dfd8:	8082      	strh	r2, [r0, #4]
 800dfda:	80c4      	strh	r4, [r0, #6]
 800dfdc:	e7e2      	b.n	800dfa4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0800dfe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800dfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe2:	b0a3      	sub	sp, #140	; 0x8c
 800dfe4:	931d      	str	r3, [sp, #116]	; 0x74
 800dfe6:	ab2b      	add	r3, sp, #172	; 0xac
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	911c      	str	r1, [sp, #112]	; 0x70
 800dfec:	930d      	str	r3, [sp, #52]	; 0x34
 800dfee:	ab2e      	add	r3, sp, #184	; 0xb8
 800dff0:	9212      	str	r2, [sp, #72]	; 0x48
 800dff2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800dff4:	781a      	ldrb	r2, [r3, #0]
 800dff6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800dff8:	9017      	str	r0, [sp, #92]	; 0x5c
 800dffa:	889b      	ldrh	r3, [r3, #4]
 800dffc:	8809      	ldrh	r1, [r1, #0]
 800dffe:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800e000:	185b      	adds	r3, r3, r1
 800e002:	b21b      	sxth	r3, r3
 800e004:	9316      	str	r3, [sp, #88]	; 0x58
 800e006:	682b      	ldr	r3, [r5, #0]
 800e008:	7a59      	ldrb	r1, [r3, #9]
 800e00a:	911a      	str	r1, [sp, #104]	; 0x68
 800e00c:	7a1b      	ldrb	r3, [r3, #8]
 800e00e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e010:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e012:	2700      	movs	r7, #0
 800e014:	5fdf      	ldrsh	r7, [r3, r7]
 800e016:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e018:	9314      	str	r3, [sp, #80]	; 0x50
 800e01a:	2a00      	cmp	r2, #0
 800e01c:	d007      	beq.n	800e02e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800e01e:	7c2b      	ldrb	r3, [r5, #16]
 800e020:	3b04      	subs	r3, #4
 800e022:	425a      	negs	r2, r3
 800e024:	4153      	adcs	r3, r2
 800e026:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e028:	3301      	adds	r3, #1
 800e02a:	189b      	adds	r3, r3, r2
 800e02c:	9314      	str	r3, [sp, #80]	; 0x50
 800e02e:	2300      	movs	r3, #0
 800e030:	001c      	movs	r4, r3
 800e032:	9310      	str	r3, [sp, #64]	; 0x40
 800e034:	930f      	str	r3, [sp, #60]	; 0x3c
 800e036:	930e      	str	r3, [sp, #56]	; 0x38
 800e038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e03a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e03c:	4293      	cmp	r3, r2
 800e03e:	db00      	blt.n	800e042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x62>
 800e040:	e07f      	b.n	800e142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 800e042:	2300      	movs	r3, #0
 800e044:	9320      	str	r3, [sp, #128]	; 0x80
 800e046:	4b96      	ldr	r3, [pc, #600]	; (800e2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>)
 800e048:	429c      	cmp	r4, r3
 800e04a:	d003      	beq.n	800e054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x74>
 800e04c:	4b95      	ldr	r3, [pc, #596]	; (800e2a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>)
 800e04e:	429c      	cmp	r4, r3
 800e050:	d000      	beq.n	800e054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x74>
 800e052:	940e      	str	r4, [sp, #56]	; 0x38
 800e054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e056:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e058:	682a      	ldr	r2, [r5, #0]
 800e05a:	428b      	cmp	r3, r1
 800e05c:	db3c      	blt.n	800e0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf8>
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	0010      	movs	r0, r2
 800e062:	695b      	ldr	r3, [r3, #20]
 800e064:	4798      	blx	r3
 800e066:	0004      	movs	r4, r0
 800e068:	6828      	ldr	r0, [r5, #0]
 800e06a:	aa12      	add	r2, sp, #72	; 0x48
 800e06c:	6803      	ldr	r3, [r0, #0]
 800e06e:	0021      	movs	r1, r4
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	001e      	movs	r6, r3
 800e074:	2337      	movs	r3, #55	; 0x37
 800e076:	189b      	adds	r3, r3, r2
 800e078:	aa21      	add	r2, sp, #132	; 0x84
 800e07a:	47b0      	blx	r6
 800e07c:	9020      	str	r0, [sp, #128]	; 0x80
 800e07e:	4b88      	ldr	r3, [pc, #544]	; (800e2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>)
 800e080:	429c      	cmp	r4, r3
 800e082:	d100      	bne.n	800e086 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xa6>
 800e084:	e0ee      	b.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e086:	4b87      	ldr	r3, [pc, #540]	; (800e2a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>)
 800e088:	429c      	cmp	r4, r3
 800e08a:	d100      	bne.n	800e08e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xae>
 800e08c:	e0ea      	b.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e08e:	2c00      	cmp	r4, #0
 800e090:	d100      	bne.n	800e094 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb4>
 800e092:	e0fd      	b.n	800e290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b0>
 800e094:	2c0a      	cmp	r4, #10
 800e096:	d05c      	beq.n	800e152 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x172>
 800e098:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e09a:	2a00      	cmp	r2, #0
 800e09c:	d029      	beq.n	800e0f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800e09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0a0:	8894      	ldrh	r4, [r2, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d034      	beq.n	800e110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x130>
 800e0a6:	2180      	movs	r1, #128	; 0x80
 800e0a8:	7b53      	ldrb	r3, [r2, #13]
 800e0aa:	0049      	lsls	r1, r1, #1
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	400b      	ands	r3, r1
 800e0b0:	7a91      	ldrb	r1, [r2, #10]
 800e0b2:	4319      	orrs	r1, r3
 800e0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0b6:	9110      	str	r1, [sp, #64]	; 0x40
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d130      	bne.n	800e11e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13e>
 800e0bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0be:	1a7f      	subs	r7, r7, r1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d14c      	bne.n	800e15e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 800e0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e0c8:	19db      	adds	r3, r3, r7
 800e0ca:	189b      	adds	r3, r3, r2
 800e0cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	5e52      	ldrsh	r2, [r2, r1]
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	da4c      	bge.n	800e170 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800e0d6:	e034      	b.n	800e142 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 800e0d8:	2337      	movs	r3, #55	; 0x37
 800e0da:	a912      	add	r1, sp, #72	; 0x48
 800e0dc:	185b      	adds	r3, r3, r1
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	ab21      	add	r3, sp, #132	; 0x84
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e0e6:	ab20      	add	r3, sp, #128	; 0x80
 800e0e8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e0ea:	f002 fb69 	bl	80107c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800e0ee:	0004      	movs	r4, r0
 800e0f0:	e7c5      	b.n	800e07e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 800e0f2:	6828      	ldr	r0, [r5, #0]
 800e0f4:	6803      	ldr	r3, [r0, #0]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	4798      	blx	r3
 800e0fa:	4b69      	ldr	r3, [pc, #420]	; (800e2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>)
 800e0fc:	4298      	cmp	r0, r3
 800e0fe:	d100      	bne.n	800e102 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x122>
 800e100:	e0b0      	b.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e102:	4b68      	ldr	r3, [pc, #416]	; (800e2a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>)
 800e104:	4298      	cmp	r0, r3
 800e106:	d100      	bne.n	800e10a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800e108:	e0ac      	b.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d101      	bne.n	800e114 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x134>
 800e110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e112:	18ff      	adds	r7, r7, r3
 800e114:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e116:	2a00      	cmp	r2, #0
 800e118:	d1c5      	bne.n	800e0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc6>
 800e11a:	9210      	str	r2, [sp, #64]	; 0x40
 800e11c:	e0a2      	b.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e120:	2b00      	cmp	r3, #0
 800e122:	d100      	bne.n	800e126 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 800e124:	e0b6      	b.n	800e294 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d118      	bne.n	800e15e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 800e12c:	6828      	ldr	r0, [r5, #0]
 800e12e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e130:	6803      	ldr	r3, [r0, #0]
 800e132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e134:	4798      	blx	r3
 800e136:	183f      	adds	r7, r7, r0
 800e138:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e13a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e13c:	1afb      	subs	r3, r7, r3
 800e13e:	4293      	cmp	r3, r2
 800e140:	dd16      	ble.n	800e170 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800e142:	2c00      	cmp	r4, #0
 800e144:	d100      	bne.n	800e148 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x168>
 800e146:	e0a3      	b.n	800e290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b0>
 800e148:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e14a:	3501      	adds	r5, #1
 800e14c:	2c0a      	cmp	r4, #10
 800e14e:	d000      	beq.n	800e152 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x172>
 800e150:	e08f      	b.n	800e272 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800e152:	240a      	movs	r4, #10
 800e154:	4260      	negs	r0, r4
 800e156:	4160      	adcs	r0, r4
 800e158:	b2c0      	uxtb	r0, r0
 800e15a:	b023      	add	sp, #140	; 0x8c
 800e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15e:	6828      	ldr	r0, [r5, #0]
 800e160:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e166:	4798      	blx	r3
 800e168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e16a:	1a3f      	subs	r7, r7, r0
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d0a9      	beq.n	800e0c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe4>
 800e170:	2080      	movs	r0, #128	; 0x80
 800e172:	2109      	movs	r1, #9
 800e174:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800e176:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e178:	0040      	lsls	r0, r0, #1
 800e17a:	2200      	movs	r2, #0
 800e17c:	5e9b      	ldrsh	r3, [r3, r2]
 800e17e:	7b72      	ldrb	r2, [r6, #13]
 800e180:	5671      	ldrsb	r1, [r6, r1]
 800e182:	0152      	lsls	r2, r2, #5
 800e184:	4010      	ands	r0, r2
 800e186:	79b2      	ldrb	r2, [r6, #6]
 800e188:	19c9      	adds	r1, r1, r7
 800e18a:	4302      	orrs	r2, r0
 800e18c:	1852      	adds	r2, r2, r1
 800e18e:	429a      	cmp	r2, r3
 800e190:	db68      	blt.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e192:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e194:	4291      	cmp	r1, r2
 800e196:	da65      	bge.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e198:	2200      	movs	r2, #0
 800e19a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e19c:	42bb      	cmp	r3, r7
 800e19e:	dd02      	ble.n	800e1a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1c6>
 800e1a0:	1bdb      	subs	r3, r3, r7
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e1a6:	6828      	ldr	r0, [r5, #0]
 800e1a8:	6803      	ldr	r3, [r0, #0]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ac:	4798      	blx	r3
 800e1ae:	2280      	movs	r2, #128	; 0x80
 800e1b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e1b2:	0052      	lsls	r2, r2, #1
 800e1b4:	9311      	str	r3, [sp, #68]	; 0x44
 800e1b6:	7b5b      	ldrb	r3, [r3, #13]
 800e1b8:	00d9      	lsls	r1, r3, #3
 800e1ba:	4011      	ands	r1, r2
 800e1bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e1be:	7a12      	ldrb	r2, [r2, #8]
 800e1c0:	430a      	orrs	r2, r1
 800e1c2:	2140      	movs	r1, #64	; 0x40
 800e1c4:	420b      	tst	r3, r1
 800e1c6:	d002      	beq.n	800e1ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ee>
 800e1c8:	4937      	ldr	r1, [pc, #220]	; (800e2a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>)
 800e1ca:	1852      	adds	r2, r2, r1
 800e1cc:	b212      	sxth	r2, r2
 800e1ce:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e1d0:	1840      	adds	r0, r0, r1
 800e1d2:	1a80      	subs	r0, r0, r2
 800e1d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e1d6:	b280      	uxth	r0, r0
 800e1d8:	2102      	movs	r1, #2
 800e1da:	5e52      	ldrsh	r2, [r2, r1]
 800e1dc:	b206      	sxth	r6, r0
 800e1de:	42b2      	cmp	r2, r6
 800e1e0:	dd44      	ble.n	800e26c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 800e1e2:	2180      	movs	r1, #128	; 0x80
 800e1e4:	011b      	lsls	r3, r3, #4
 800e1e6:	0049      	lsls	r1, r1, #1
 800e1e8:	400b      	ands	r3, r1
 800e1ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e1ec:	79c9      	ldrb	r1, [r1, #7]
 800e1ee:	430b      	orrs	r3, r1
 800e1f0:	199e      	adds	r6, r3, r6
 800e1f2:	42b2      	cmp	r2, r6
 800e1f4:	dc36      	bgt.n	800e264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x284>
 800e1f6:	0016      	movs	r6, r2
 800e1f8:	1a10      	subs	r0, r2, r0
 800e1fa:	b283      	uxth	r3, r0
 800e1fc:	9315      	str	r3, [sp, #84]	; 0x54
 800e1fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e200:	6828      	ldr	r0, [r5, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e206:	9318      	str	r3, [sp, #96]	; 0x60
 800e208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e20a:	9319      	str	r3, [sp, #100]	; 0x64
 800e20c:	6803      	ldr	r3, [r0, #0]
 800e20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e210:	4798      	blx	r3
 800e212:	79ab      	ldrb	r3, [r5, #6]
 800e214:	aa12      	add	r2, sp, #72	; 0x48
 800e216:	930b      	str	r3, [sp, #44]	; 0x2c
 800e218:	7bab      	ldrb	r3, [r5, #14]
 800e21a:	930a      	str	r3, [sp, #40]	; 0x28
 800e21c:	2337      	movs	r3, #55	; 0x37
 800e21e:	189b      	adds	r3, r3, r2
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e224:	9309      	str	r3, [sp, #36]	; 0x24
 800e226:	68ab      	ldr	r3, [r5, #8]
 800e228:	9007      	str	r0, [sp, #28]
 800e22a:	9308      	str	r3, [sp, #32]
 800e22c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e22e:	9601      	str	r6, [sp, #4]
 800e230:	9306      	str	r3, [sp, #24]
 800e232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e234:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e236:	9305      	str	r3, [sp, #20]
 800e238:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e23a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800e23c:	9304      	str	r3, [sp, #16]
 800e23e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e240:	9303      	str	r3, [sp, #12]
 800e242:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e244:	9302      	str	r3, [sp, #8]
 800e246:	19db      	adds	r3, r3, r7
 800e248:	b21b      	sxth	r3, r3
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e24e:	8852      	ldrh	r2, [r2, #2]
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	0412      	lsls	r2, r2, #16
 800e254:	431a      	orrs	r2, r3
 800e256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e258:	8899      	ldrh	r1, [r3, #4]
 800e25a:	88db      	ldrh	r3, [r3, #6]
 800e25c:	041b      	lsls	r3, r3, #16
 800e25e:	430b      	orrs	r3, r1
 800e260:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e262:	47b0      	blx	r6
 800e264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e266:	3301      	adds	r3, #1
 800e268:	930f      	str	r3, [sp, #60]	; 0x3c
 800e26a:	e6e5      	b.n	800e038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x58>
 800e26c:	2300      	movs	r3, #0
 800e26e:	9315      	str	r3, [sp, #84]	; 0x54
 800e270:	e7c5      	b.n	800e1fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x21e>
 800e272:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e274:	429d      	cmp	r5, r3
 800e276:	db00      	blt.n	800e27a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800e278:	e76c      	b.n	800e154 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 800e27a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e27c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e27e:	f7fb fed5 	bl	800a02c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e282:	1e04      	subs	r4, r0, #0
 800e284:	d004      	beq.n	800e290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b0>
 800e286:	280a      	cmp	r0, #10
 800e288:	d100      	bne.n	800e28c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ac>
 800e28a:	e762      	b.n	800e152 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x172>
 800e28c:	3501      	adds	r5, #1
 800e28e:	e7f0      	b.n	800e272 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800e290:	2400      	movs	r4, #0
 800e292:	e75f      	b.n	800e154 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 800e294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e296:	2b00      	cmp	r3, #0
 800e298:	d100      	bne.n	800e29c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 800e29a:	e74d      	b.n	800e138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x158>
 800e29c:	e768      	b.n	800e170 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	0000feff 	.word	0x0000feff
 800e2a4:	0000200b 	.word	0x0000200b
 800e2a8:	fffffe00 	.word	0xfffffe00

0800e2ac <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800e2ac:	b530      	push	{r4, r5, lr}
 800e2ae:	8ac5      	ldrh	r5, [r0, #22]
 800e2b0:	8a44      	ldrh	r4, [r0, #18]
 800e2b2:	82c3      	strh	r3, [r0, #22]
 800e2b4:	1964      	adds	r4, r4, r5
 800e2b6:	1ae4      	subs	r4, r4, r3
 800e2b8:	8244      	strh	r4, [r0, #18]
 800e2ba:	8b03      	ldrh	r3, [r0, #24]
 800e2bc:	8a84      	ldrh	r4, [r0, #20]
 800e2be:	18a2      	adds	r2, r4, r2
 800e2c0:	1864      	adds	r4, r4, r1
 800e2c2:	1a59      	subs	r1, r3, r1
 800e2c4:	8342      	strh	r2, [r0, #26]
 800e2c6:	8284      	strh	r4, [r0, #20]
 800e2c8:	8301      	strh	r1, [r0, #24]
 800e2ca:	bd30      	pop	{r4, r5, pc}

0800e2cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ce:	7a43      	ldrb	r3, [r0, #9]
 800e2d0:	b089      	sub	sp, #36	; 0x24
 800e2d2:	1eda      	subs	r2, r3, #3
 800e2d4:	0004      	movs	r4, r0
 800e2d6:	000e      	movs	r6, r1
 800e2d8:	b2d2      	uxtb	r2, r2
 800e2da:	2900      	cmp	r1, #0
 800e2dc:	d037      	beq.n	800e34e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800e2de:	9102      	str	r1, [sp, #8]
 800e2e0:	2a01      	cmp	r2, #1
 800e2e2:	d904      	bls.n	800e2ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800e2e4:	1e5a      	subs	r2, r3, #1
 800e2e6:	4251      	negs	r1, r2
 800e2e8:	414a      	adcs	r2, r1
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	9202      	str	r2, [sp, #8]
 800e2ee:	3b02      	subs	r3, #2
 800e2f0:	425a      	negs	r2, r3
 800e2f2:	4153      	adcs	r3, r2
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	9305      	str	r3, [sp, #20]
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	9304      	str	r3, [sp, #16]
 800e2fc:	9303      	str	r3, [sp, #12]
 800e2fe:	2300      	movs	r3, #0
 800e300:	8263      	strh	r3, [r4, #18]
 800e302:	82a3      	strh	r3, [r4, #20]
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	9301      	str	r3, [sp, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	8823      	ldrh	r3, [r4, #0]
 800e30c:	9207      	str	r2, [sp, #28]
 800e30e:	2b20      	cmp	r3, #32
 800e310:	d02d      	beq.n	800e36e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa2>
 800e312:	4957      	ldr	r1, [pc, #348]	; (800e470 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x1a4>)
 800e314:	185d      	adds	r5, r3, r1
 800e316:	4269      	negs	r1, r5
 800e318:	414d      	adcs	r5, r1
 800e31a:	4956      	ldr	r1, [pc, #344]	; (800e474 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x1a8>)
 800e31c:	b2ed      	uxtb	r5, r5
 800e31e:	428b      	cmp	r3, r1
 800e320:	d005      	beq.n	800e32e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 800e322:	4955      	ldr	r1, [pc, #340]	; (800e478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x1ac>)
 800e324:	2501      	movs	r5, #1
 800e326:	428b      	cmp	r3, r1
 800e328:	d001      	beq.n	800e32e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 800e32a:	0015      	movs	r5, r2
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	7a21      	ldrb	r1, [r4, #8]
 800e330:	ab07      	add	r3, sp, #28
 800e332:	68e2      	ldr	r2, [r4, #12]
 800e334:	6860      	ldr	r0, [r4, #4]
 800e336:	f002 f9dd 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e33a:	8020      	strh	r0, [r4, #0]
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d11a      	bne.n	800e376 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xaa>
 800e340:	2300      	movs	r3, #0
 800e342:	8b21      	ldrh	r1, [r4, #24]
 800e344:	000a      	movs	r2, r1
 800e346:	0020      	movs	r0, r4
 800e348:	f7ff ffb0 	bl	800e2ac <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e34c:	e065      	b.n	800e41a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14e>
 800e34e:	2101      	movs	r1, #1
 800e350:	0030      	movs	r0, r6
 800e352:	4291      	cmp	r1, r2
 800e354:	4170      	adcs	r0, r6
 800e356:	b2c2      	uxtb	r2, r0
 800e358:	9203      	str	r2, [sp, #12]
 800e35a:	0032      	movs	r2, r6
 800e35c:	3b01      	subs	r3, #1
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	4299      	cmp	r1, r3
 800e362:	4172      	adcs	r2, r6
 800e364:	b2d3      	uxtb	r3, r2
 800e366:	9304      	str	r3, [sp, #16]
 800e368:	9605      	str	r6, [sp, #20]
 800e36a:	9602      	str	r6, [sp, #8]
 800e36c:	e7c7      	b.n	800e2fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x32>
 800e36e:	2320      	movs	r3, #32
 800e370:	2501      	movs	r5, #1
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	e7db      	b.n	800e32e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 800e376:	8ae3      	ldrh	r3, [r4, #22]
 800e378:	3301      	adds	r3, #1
 800e37a:	82e3      	strh	r3, [r4, #22]
 800e37c:	280a      	cmp	r0, #10
 800e37e:	d0df      	beq.n	800e340 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800e380:	9a07      	ldr	r2, [sp, #28]
 800e382:	2a00      	cmp	r2, #0
 800e384:	d12b      	bne.n	800e3de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x112>
 800e386:	4b3b      	ldr	r3, [pc, #236]	; (800e474 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x1a8>)
 800e388:	4298      	cmp	r0, r3
 800e38a:	d002      	beq.n	800e392 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc6>
 800e38c:	4b3a      	ldr	r3, [pc, #232]	; (800e478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x1ac>)
 800e38e:	4298      	cmp	r0, r3
 800e390:	d1ba      	bne.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e392:	8820      	ldrh	r0, [r4, #0]
 800e394:	8b21      	ldrh	r1, [r4, #24]
 800e396:	2820      	cmp	r0, #32
 800e398:	d003      	beq.n	800e3a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800e39a:	4f37      	ldr	r7, [pc, #220]	; (800e478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x1ac>)
 800e39c:	2300      	movs	r3, #0
 800e39e:	42b8      	cmp	r0, r7
 800e3a0:	d103      	bne.n	800e3aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xde>
 800e3a2:	1e2b      	subs	r3, r5, #0
 800e3a4:	d101      	bne.n	800e3aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xde>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	9100      	str	r1, [sp, #0]
 800e3aa:	1852      	adds	r2, r2, r1
 800e3ac:	b297      	uxth	r7, r2
 800e3ae:	8aa2      	ldrh	r2, [r4, #20]
 800e3b0:	8327      	strh	r7, [r4, #24]
 800e3b2:	19d2      	adds	r2, r2, r7
 800e3b4:	8a20      	ldrh	r0, [r4, #16]
 800e3b6:	2e00      	cmp	r6, #0
 800e3b8:	d038      	beq.n	800e42c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x160>
 800e3ba:	9902      	ldr	r1, [sp, #8]
 800e3bc:	2900      	cmp	r1, #0
 800e3be:	d104      	bne.n	800e3ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xfe>
 800e3c0:	9905      	ldr	r1, [sp, #20]
 800e3c2:	2900      	cmp	r1, #0
 800e3c4:	d01c      	beq.n	800e400 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d01a      	beq.n	800e400 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800e3ca:	8ba3      	ldrh	r3, [r4, #28]
 800e3cc:	189b      	adds	r3, r3, r2
 800e3ce:	4298      	cmp	r0, r3
 800e3d0:	da25      	bge.n	800e41e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800e3d2:	8a63      	ldrh	r3, [r4, #18]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d022      	beq.n	800e41e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800e3d8:	4282      	cmp	r2, r0
 800e3da:	dd95      	ble.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e3dc:	e017      	b.n	800e40e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x142>
 800e3de:	2080      	movs	r0, #128	; 0x80
 800e3e0:	8893      	ldrh	r3, [r2, #4]
 800e3e2:	0040      	lsls	r0, r0, #1
 800e3e4:	8023      	strh	r3, [r4, #0]
 800e3e6:	7b57      	ldrb	r7, [r2, #13]
 800e3e8:	9901      	ldr	r1, [sp, #4]
 800e3ea:	007f      	lsls	r7, r7, #1
 800e3ec:	4007      	ands	r7, r0
 800e3ee:	7a90      	ldrb	r0, [r2, #10]
 800e3f0:	4307      	orrs	r7, r0
 800e3f2:	68e0      	ldr	r0, [r4, #12]
 800e3f4:	6803      	ldr	r3, [r0, #0]
 800e3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3f8:	4798      	blx	r3
 800e3fa:	183f      	adds	r7, r7, r0
 800e3fc:	b2ba      	uxth	r2, r7
 800e3fe:	e7c8      	b.n	800e392 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc6>
 800e400:	4282      	cmp	r2, r0
 800e402:	dc00      	bgt.n	800e406 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13a>
 800e404:	e780      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e406:	8a63      	ldrh	r3, [r4, #18]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d100      	bne.n	800e40e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x142>
 800e40c:	e77c      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e40e:	2301      	movs	r3, #1
 800e410:	8ba2      	ldrh	r2, [r4, #28]
 800e412:	77a3      	strb	r3, [r4, #30]
 800e414:	8b63      	ldrh	r3, [r4, #26]
 800e416:	189b      	adds	r3, r3, r2
 800e418:	8363      	strh	r3, [r4, #26]
 800e41a:	b009      	add	sp, #36	; 0x24
 800e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e41e:	2300      	movs	r3, #0
 800e420:	003a      	movs	r2, r7
 800e422:	0039      	movs	r1, r7
 800e424:	0020      	movs	r0, r4
 800e426:	f7ff ff41 	bl	800e2ac <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e42a:	e76d      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e42c:	4282      	cmp	r2, r0
 800e42e:	dd15      	ble.n	800e45c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x190>
 800e430:	9a03      	ldr	r2, [sp, #12]
 800e432:	2a00      	cmp	r2, #0
 800e434:	d001      	beq.n	800e43a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16e>
 800e436:	2301      	movs	r3, #1
 800e438:	e784      	b.n	800e344 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x78>
 800e43a:	9a04      	ldr	r2, [sp, #16]
 800e43c:	2a00      	cmp	r2, #0
 800e43e:	d100      	bne.n	800e442 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x176>
 800e440:	e762      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e442:	2b00      	cmp	r3, #0
 800e444:	d000      	beq.n	800e448 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17c>
 800e446:	e75f      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e448:	2d00      	cmp	r5, #0
 800e44a:	d002      	beq.n	800e452 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x186>
 800e44c:	3301      	adds	r3, #1
 800e44e:	9a00      	ldr	r2, [sp, #0]
 800e450:	e779      	b.n	800e346 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 800e452:	8a63      	ldrh	r3, [r4, #18]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d100      	bne.n	800e45a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18e>
 800e458:	e756      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e45a:	e7de      	b.n	800e41a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14e>
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d000      	beq.n	800e462 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x196>
 800e460:	e752      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e462:	2d00      	cmp	r5, #0
 800e464:	d100      	bne.n	800e468 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x19c>
 800e466:	e74f      	b.n	800e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e468:	3301      	adds	r3, #1
 800e46a:	9a00      	ldr	r2, [sp, #0]
 800e46c:	e7da      	b.n	800e424 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 800e46e:	46c0      	nop			; (mov r8, r8)
 800e470:	ffffdff5 	.word	0xffffdff5
 800e474:	0000feff 	.word	0x0000feff
 800e478:	0000200b 	.word	0x0000200b

0800e47c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800e47c:	b570      	push	{r4, r5, r6, lr}
 800e47e:	b08a      	sub	sp, #40	; 0x28
 800e480:	0014      	movs	r4, r2
 800e482:	aa0e      	add	r2, sp, #56	; 0x38
 800e484:	0005      	movs	r5, r0
 800e486:	2000      	movs	r0, #0
 800e488:	5e12      	ldrsh	r2, [r2, r0]
 800e48a:	2900      	cmp	r1, #0
 800e48c:	d012      	beq.n	800e4b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 800e48e:	ae02      	add	r6, sp, #8
 800e490:	9101      	str	r1, [sp, #4]
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	b292      	uxth	r2, r2
 800e496:	0023      	movs	r3, r4
 800e498:	0029      	movs	r1, r5
 800e49a:	0030      	movs	r0, r6
 800e49c:	f7ff fcf4 	bl	800de88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800e4a0:	2401      	movs	r4, #1
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	0030      	movs	r0, r6
 800e4a6:	f7ff ff11 	bl	800e2cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e4aa:	8833      	ldrh	r3, [r6, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00e      	beq.n	800e4ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x52>
 800e4b0:	3401      	adds	r4, #1
 800e4b2:	e7f6      	b.n	800e4a2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x26>
 800e4b4:	0028      	movs	r0, r5
 800e4b6:	f002 fa33 	bl	8010920 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e4ba:	2401      	movs	r4, #1
 800e4bc:	380a      	subs	r0, #10
 800e4be:	4243      	negs	r3, r0
 800e4c0:	4158      	adcs	r0, r3
 800e4c2:	1824      	adds	r4, r4, r0
 800e4c4:	0028      	movs	r0, r5
 800e4c6:	f002 fa2b 	bl	8010920 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d1f6      	bne.n	800e4bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x40>
 800e4ce:	b2a0      	uxth	r0, r4
 800e4d0:	b00a      	add	sp, #40	; 0x28
 800e4d2:	bd70      	pop	{r4, r5, r6, pc}

0800e4d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800e4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4d6:	b0dd      	sub	sp, #372	; 0x174
 800e4d8:	001c      	movs	r4, r3
 800e4da:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800e4dc:	910a      	str	r1, [sp, #40]	; 0x28
 800e4de:	900d      	str	r0, [sp, #52]	; 0x34
 800e4e0:	0011      	movs	r1, r2
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d100      	bne.n	800e4e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14>
 800e4e6:	e08e      	b.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d100      	bne.n	800e4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c>
 800e4ee:	e08a      	b.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e4f0:	7ba3      	ldrb	r3, [r4, #14]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d100      	bne.n	800e4f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24>
 800e4f6:	e086      	b.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e4f8:	2600      	movs	r6, #0
 800e4fa:	af0e      	add	r7, sp, #56	; 0x38
 800e4fc:	2208      	movs	r2, #8
 800e4fe:	0038      	movs	r0, r7
 800e500:	f004 fcec 	bl	8012edc <memcpy>
 800e504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e506:	ad10      	add	r5, sp, #64	; 0x40
 800e508:	2204      	movs	r2, #4
 800e50a:	5e9a      	ldrsh	r2, [r3, r2]
 800e50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e50e:	0038      	movs	r0, r7
 800e510:	2106      	movs	r1, #6
 800e512:	5e5b      	ldrsh	r3, [r3, r1]
 800e514:	80aa      	strh	r2, [r5, #4]
 800e516:	80eb      	strh	r3, [r5, #6]
 800e518:	0029      	movs	r1, r5
 800e51a:	79a2      	ldrb	r2, [r4, #6]
 800e51c:	9610      	str	r6, [sp, #64]	; 0x40
 800e51e:	f7ff fd2d 	bl	800df7c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e522:	0029      	movs	r1, r5
 800e524:	79a2      	ldrb	r2, [r4, #6]
 800e526:	0028      	movs	r0, r5
 800e528:	f7ff fd28 	bl	800df7c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e52c:	a81a      	add	r0, sp, #104	; 0x68
 800e52e:	f001 fd9b 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800e532:	6820      	ldr	r0, [r4, #0]
 800e534:	0035      	movs	r5, r6
 800e536:	6803      	ldr	r3, [r0, #0]
 800e538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53a:	4798      	blx	r3
 800e53c:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 800e53e:	0003      	movs	r3, r0
 800e540:	9962      	ldr	r1, [sp, #392]	; 0x188
 800e542:	a81a      	add	r0, sp, #104	; 0x68
 800e544:	f001 fdd9 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800e548:	7923      	ldrb	r3, [r4, #4]
 800e54a:	6820      	ldr	r0, [r4, #0]
 800e54c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e54e:	6803      	ldr	r3, [r0, #0]
 800e550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e552:	4798      	blx	r3
 800e554:	220c      	movs	r2, #12
 800e556:	5ea3      	ldrsh	r3, [r4, r2]
 800e558:	181a      	adds	r2, r3, r0
 800e55a:	9209      	str	r2, [sp, #36]	; 0x24
 800e55c:	42b2      	cmp	r2, r6
 800e55e:	dd08      	ble.n	800e572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9e>
 800e560:	2102      	movs	r1, #2
 800e562:	5e7a      	ldrsh	r2, [r7, r1]
 800e564:	4282      	cmp	r2, r0
 800e566:	db04      	blt.n	800e572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9e>
 800e568:	1898      	adds	r0, r3, r2
 800e56a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e56c:	f7f1 fe60 	bl	8000230 <__divsi3>
 800e570:	0005      	movs	r5, r0
 800e572:	a830      	add	r0, sp, #192	; 0xc0
 800e574:	f001 fd78 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800e578:	7c23      	ldrb	r3, [r4, #16]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d009      	beq.n	800e592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbe>
 800e57e:	6820      	ldr	r0, [r4, #0]
 800e580:	6803      	ldr	r3, [r0, #0]
 800e582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e584:	4798      	blx	r3
 800e586:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 800e588:	0003      	movs	r3, r0
 800e58a:	9962      	ldr	r1, [sp, #392]	; 0x188
 800e58c:	a830      	add	r0, sp, #192	; 0xc0
 800e58e:	f001 fdb4 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800e592:	7c21      	ldrb	r1, [r4, #16]
 800e594:	aa10      	add	r2, sp, #64	; 0x40
 800e596:	8892      	ldrh	r2, [r2, #4]
 800e598:	9101      	str	r1, [sp, #4]
 800e59a:	6821      	ldr	r1, [r4, #0]
 800e59c:	7963      	ldrb	r3, [r4, #5]
 800e59e:	9100      	str	r1, [sp, #0]
 800e5a0:	a812      	add	r0, sp, #72	; 0x48
 800e5a2:	a930      	add	r1, sp, #192	; 0xc0
 800e5a4:	f7ff fc70 	bl	800de88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800e5a8:	7c23      	ldrb	r3, [r4, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d02d      	beq.n	800e60a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800e5ae:	2701      	movs	r7, #1
 800e5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	930c      	str	r3, [sp, #48]	; 0x30
 800e5b6:	2d00      	cmp	r5, #0
 800e5b8:	dd3b      	ble.n	800e632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 800e5ba:	ab10      	add	r3, sp, #64	; 0x40
 800e5bc:	2206      	movs	r2, #6
 800e5be:	5e9b      	ldrsh	r3, [r3, r2]
 800e5c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5c2:	1c39      	adds	r1, r7, #0
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	dc00      	bgt.n	800e5ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	ae12      	add	r6, sp, #72	; 0x48
 800e5cc:	0030      	movs	r0, r6
 800e5ce:	b2c9      	uxtb	r1, r1
 800e5d0:	f7ff fe7c 	bl	800e2cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e5d4:	8a76      	ldrh	r6, [r6, #18]
 800e5d6:	3e01      	subs	r6, #1
 800e5d8:	4b55      	ldr	r3, [pc, #340]	; (800e730 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>)
 800e5da:	b2b6      	uxth	r6, r6
 800e5dc:	429e      	cmp	r6, r3
 800e5de:	d004      	beq.n	800e5ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x116>
 800e5e0:	7961      	ldrb	r1, [r4, #5]
 800e5e2:	a81a      	add	r0, sp, #104	; 0x68
 800e5e4:	f7fb fd22 	bl	800a02c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e5e8:	e7f5      	b.n	800e5d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x102>
 800e5ea:	466b      	mov	r3, sp
 800e5ec:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e5ee:	ab10      	add	r3, sp, #64	; 0x40
 800e5f0:	8859      	ldrh	r1, [r3, #2]
 800e5f2:	3d01      	subs	r5, #1
 800e5f4:	1851      	adds	r1, r2, r1
 800e5f6:	8059      	strh	r1, [r3, #2]
 800e5f8:	88d9      	ldrh	r1, [r3, #6]
 800e5fa:	1a8a      	subs	r2, r1, r2
 800e5fc:	80da      	strh	r2, [r3, #6]
 800e5fe:	ab12      	add	r3, sp, #72	; 0x48
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1d7      	bne.n	800e5b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe2>
 800e606:	b05d      	add	sp, #372	; 0x174
 800e608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e60a:	2d00      	cmp	r5, #0
 800e60c:	dd11      	ble.n	800e632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 800e60e:	a81a      	add	r0, sp, #104	; 0x68
 800e610:	f002 f986 	bl	8010920 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e614:	2800      	cmp	r0, #0
 800e616:	d0f6      	beq.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e618:	280a      	cmp	r0, #10
 800e61a:	d1f6      	bne.n	800e60a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800e61c:	466b      	mov	r3, sp
 800e61e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e620:	ab10      	add	r3, sp, #64	; 0x40
 800e622:	8859      	ldrh	r1, [r3, #2]
 800e624:	3d01      	subs	r5, #1
 800e626:	1851      	adds	r1, r2, r1
 800e628:	8059      	strh	r1, [r3, #2]
 800e62a:	88d9      	ldrh	r1, [r3, #6]
 800e62c:	1a8a      	subs	r2, r1, r2
 800e62e:	80da      	strh	r2, [r3, #6]
 800e630:	e7eb      	b.n	800e60a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e634:	af46      	add	r7, sp, #280	; 0x118
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	930c      	str	r3, [sp, #48]	; 0x30
 800e63a:	7c23      	ldrb	r3, [r4, #16]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d066      	beq.n	800e70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 800e640:	ab10      	add	r3, sp, #64	; 0x40
 800e642:	2206      	movs	r2, #6
 800e644:	5e9b      	ldrsh	r3, [r3, r2]
 800e646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e648:	2101      	movs	r1, #1
 800e64a:	429a      	cmp	r2, r3
 800e64c:	dc00      	bgt.n	800e650 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17c>
 800e64e:	2100      	movs	r1, #0
 800e650:	ad12      	add	r5, sp, #72	; 0x48
 800e652:	b2c9      	uxtb	r1, r1
 800e654:	0028      	movs	r0, r5
 800e656:	f7ff fe39 	bl	800e2cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d052      	beq.n	800e706 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800e660:	7c26      	ldrb	r6, [r4, #16]
 800e662:	2258      	movs	r2, #88	; 0x58
 800e664:	a91a      	add	r1, sp, #104	; 0x68
 800e666:	0038      	movs	r0, r7
 800e668:	f004 fc38 	bl	8012edc <memcpy>
 800e66c:	2e00      	cmp	r6, #0
 800e66e:	d056      	beq.n	800e71e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24a>
 800e670:	231a      	movs	r3, #26
 800e672:	5ee8      	ldrsh	r0, [r5, r3]
 800e674:	7921      	ldrb	r1, [r4, #4]
 800e676:	aa10      	add	r2, sp, #64	; 0x40
 800e678:	2901      	cmp	r1, #1
 800e67a:	d13c      	bne.n	800e6f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x222>
 800e67c:	2304      	movs	r3, #4
 800e67e:	5ed3      	ldrsh	r3, [r2, r3]
 800e680:	1a18      	subs	r0, r3, r0
 800e682:	0fc3      	lsrs	r3, r0, #31
 800e684:	181b      	adds	r3, r3, r0
 800e686:	105b      	asrs	r3, r3, #1
 800e688:	b21b      	sxth	r3, r3
 800e68a:	ad10      	add	r5, sp, #64	; 0x40
 800e68c:	8828      	ldrh	r0, [r5, #0]
 800e68e:	a912      	add	r1, sp, #72	; 0x48
 800e690:	18c3      	adds	r3, r0, r3
 800e692:	803b      	strh	r3, [r7, #0]
 800e694:	7c23      	ldrb	r3, [r4, #16]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d037      	beq.n	800e70a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 800e69a:	8a4a      	ldrh	r2, [r1, #18]
 800e69c:	7f89      	ldrb	r1, [r1, #30]
 800e69e:	2002      	movs	r0, #2
 800e6a0:	5e2b      	ldrsh	r3, [r5, r0]
 800e6a2:	9106      	str	r1, [sp, #24]
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	9205      	str	r2, [sp, #20]
 800e6a8:	aa1a      	add	r2, sp, #104	; 0x68
 800e6aa:	9204      	str	r2, [sp, #16]
 800e6ac:	aa0e      	add	r2, sp, #56	; 0x38
 800e6ae:	9201      	str	r2, [sp, #4]
 800e6b0:	9103      	str	r1, [sp, #12]
 800e6b2:	9402      	str	r4, [sp, #8]
 800e6b4:	9700      	str	r7, [sp, #0]
 800e6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e6ba:	f7ff fc91 	bl	800dfe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d1a1      	bne.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e6c2:	466b      	mov	r3, sp
 800e6c4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e6c6:	886b      	ldrh	r3, [r5, #2]
 800e6c8:	0011      	movs	r1, r2
 800e6ca:	18d3      	adds	r3, r2, r3
 800e6cc:	88ea      	ldrh	r2, [r5, #6]
 800e6ce:	b21b      	sxth	r3, r3
 800e6d0:	1a52      	subs	r2, r2, r1
 800e6d2:	b212      	sxth	r2, r2
 800e6d4:	806b      	strh	r3, [r5, #2]
 800e6d6:	80ea      	strh	r2, [r5, #6]
 800e6d8:	7c21      	ldrb	r1, [r4, #16]
 800e6da:	2900      	cmp	r1, #0
 800e6dc:	d003      	beq.n	800e6e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 800e6de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6e0:	428a      	cmp	r2, r1
 800e6e2:	da00      	bge.n	800e6e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 800e6e4:	e78f      	b.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e6e6:	a90e      	add	r1, sp, #56	; 0x38
 800e6e8:	88ca      	ldrh	r2, [r1, #6]
 800e6ea:	8849      	ldrh	r1, [r1, #2]
 800e6ec:	1852      	adds	r2, r2, r1
 800e6ee:	b212      	sxth	r2, r2
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	dda2      	ble.n	800e63a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x166>
 800e6f4:	e787      	b.n	800e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x132>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	2902      	cmp	r1, #2
 800e6fa:	d1c6      	bne.n	800e68a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b6>
 800e6fc:	7be1      	ldrb	r1, [r4, #15]
 800e6fe:	8893      	ldrh	r3, [r2, #4]
 800e700:	1a5b      	subs	r3, r3, r1
 800e702:	1a1b      	subs	r3, r3, r0
 800e704:	e7c0      	b.n	800e688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 800e706:	7be3      	ldrb	r3, [r4, #15]
 800e708:	e7bf      	b.n	800e68a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b6>
 800e70a:	4a0a      	ldr	r2, [pc, #40]	; (800e734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>)
 800e70c:	e7c6      	b.n	800e69c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c8>
 800e70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0f8      	beq.n	800e706 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800e714:	2258      	movs	r2, #88	; 0x58
 800e716:	a91a      	add	r1, sp, #104	; 0x68
 800e718:	0038      	movs	r0, r7
 800e71a:	f004 fbdf 	bl	8012edc <memcpy>
 800e71e:	2300      	movs	r3, #0
 800e720:	4a04      	ldr	r2, [pc, #16]	; (800e734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>)
 800e722:	6821      	ldr	r1, [r4, #0]
 800e724:	0038      	movs	r0, r7
 800e726:	f7ff fbeb 	bl	800df00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800e72a:	b200      	sxth	r0, r0
 800e72c:	e7a2      	b.n	800e674 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a0>
 800e72e:	46c0      	nop			; (mov r8, r8)
 800e730:	0000ffff 	.word	0x0000ffff
 800e734:	00007fff 	.word	0x00007fff

0800e738 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800e738:	b530      	push	{r4, r5, lr}
 800e73a:	2400      	movs	r4, #0
 800e73c:	5f05      	ldrsh	r5, [r0, r4]
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d00c      	beq.n	800e75c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x24>
 800e742:	18ac      	adds	r4, r5, r2
 800e744:	2b03      	cmp	r3, #3
 800e746:	d007      	beq.n	800e758 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x20>
 800e748:	186c      	adds	r4, r5, r1
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d104      	bne.n	800e758 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x20>
 800e74e:	8884      	ldrh	r4, [r0, #4]
 800e750:	1964      	adds	r4, r4, r5
 800e752:	b224      	sxth	r4, r4
 800e754:	1aa4      	subs	r4, r4, r2
 800e756:	3c01      	subs	r4, #1
 800e758:	0020      	movs	r0, r4
 800e75a:	bd30      	pop	{r4, r5, pc}
 800e75c:	8884      	ldrh	r4, [r0, #4]
 800e75e:	1964      	adds	r4, r4, r5
 800e760:	b224      	sxth	r4, r4
 800e762:	1a64      	subs	r4, r4, r1
 800e764:	e7f7      	b.n	800e756 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>

0800e766 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800e766:	b530      	push	{r4, r5, lr}
 800e768:	2502      	movs	r5, #2
 800e76a:	5f44      	ldrsh	r4, [r0, r5]
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d006      	beq.n	800e77e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800e770:	2b03      	cmp	r3, #3
 800e772:	d00a      	beq.n	800e78a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800e774:	1860      	adds	r0, r4, r1
 800e776:	2b01      	cmp	r3, #1
 800e778:	d000      	beq.n	800e77c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800e77a:	18a0      	adds	r0, r4, r2
 800e77c:	bd30      	pop	{r4, r5, pc}
 800e77e:	88c0      	ldrh	r0, [r0, #6]
 800e780:	1900      	adds	r0, r0, r4
 800e782:	b200      	sxth	r0, r0
 800e784:	1a80      	subs	r0, r0, r2
 800e786:	3801      	subs	r0, #1
 800e788:	e7f8      	b.n	800e77c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800e78a:	88c0      	ldrh	r0, [r0, #6]
 800e78c:	1900      	adds	r0, r0, r4
 800e78e:	b200      	sxth	r0, r0
 800e790:	1a40      	subs	r0, r0, r1
 800e792:	e7f8      	b.n	800e786 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0800e794 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e794:	2200      	movs	r2, #0
 800e796:	4b01      	ldr	r3, [pc, #4]	; (800e79c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	4770      	bx	lr
 800e79c:	200034d4 	.word	0x200034d4

0800e7a0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 800e7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7a2:	9d08      	ldr	r5, [sp, #32]
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e7a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e7aa:	2401      	movs	r4, #1
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	da01      	bge.n	800e7b4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl+0x14>
 800e7b0:	4240      	negs	r0, r0
 800e7b2:	3c02      	subs	r4, #2
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	da01      	bge.n	800e7bc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl+0x1c>
 800e7b8:	426d      	negs	r5, r5
 800e7ba:	4264      	negs	r4, r4
 800e7bc:	2e00      	cmp	r6, #0
 800e7be:	da01      	bge.n	800e7c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl+0x24>
 800e7c0:	4276      	negs	r6, r6
 800e7c2:	4264      	negs	r4, r4
 800e7c4:	002b      	movs	r3, r5
 800e7c6:	410b      	asrs	r3, r1
 800e7c8:	469c      	mov	ip, r3
 800e7ca:	4353      	muls	r3, r2
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	4663      	mov	r3, ip
 800e7d0:	9a00      	ldr	r2, [sp, #0]
 800e7d2:	435a      	muls	r2, r3
 800e7d4:	0013      	movs	r3, r2
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	189b      	adds	r3, r3, r2
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	2301      	movs	r3, #1
 800e7de:	408b      	lsls	r3, r1
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	401d      	ands	r5, r3
 800e7e4:	0031      	movs	r1, r6
 800e7e6:	4368      	muls	r0, r5
 800e7e8:	f7f1 fe08 	bl	80003fc <__aeabi_idivmod>
 800e7ec:	9b00      	ldr	r3, [sp, #0]
 800e7ee:	0005      	movs	r5, r0
 800e7f0:	18c8      	adds	r0, r1, r3
 800e7f2:	0031      	movs	r1, r6
 800e7f4:	f7f1 fe02 	bl	80003fc <__aeabi_idivmod>
 800e7f8:	9b01      	ldr	r3, [sp, #4]
 800e7fa:	1828      	adds	r0, r5, r0
 800e7fc:	18c0      	adds	r0, r0, r3
 800e7fe:	6039      	str	r1, [r7, #0]
 800e800:	4360      	muls	r0, r4
 800e802:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800e804 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800e804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e806:	4c24      	ldr	r4, [pc, #144]	; (800e898 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x94>)
 800e808:	b089      	sub	sp, #36	; 0x24
 800e80a:	69a2      	ldr	r2, [r4, #24]
 800e80c:	0005      	movs	r5, r0
 800e80e:	6806      	ldr	r6, [r0, #0]
 800e810:	2a00      	cmp	r2, #0
 800e812:	d104      	bne.n	800e81e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800e814:	6840      	ldr	r0, [r0, #4]
 800e816:	602e      	str	r6, [r5, #0]
 800e818:	6068      	str	r0, [r5, #4]
 800e81a:	b009      	add	sp, #36	; 0x24
 800e81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e81e:	0fd3      	lsrs	r3, r2, #31
 800e820:	68a1      	ldr	r1, [r4, #8]
 800e822:	189b      	adds	r3, r3, r2
 800e824:	af07      	add	r7, sp, #28
 800e826:	105b      	asrs	r3, r3, #1
 800e828:	9600      	str	r6, [sp, #0]
 800e82a:	9702      	str	r7, [sp, #8]
 800e82c:	9201      	str	r2, [sp, #4]
 800e82e:	18cb      	adds	r3, r1, r3
 800e830:	9307      	str	r3, [sp, #28]
 800e832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e836:	69e1      	ldr	r1, [r4, #28]
 800e838:	6820      	ldr	r0, [r4, #0]
 800e83a:	f7ff ffb1 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e83e:	9702      	str	r7, [sp, #8]
 800e840:	69a3      	ldr	r3, [r4, #24]
 800e842:	0006      	movs	r6, r0
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	686b      	ldr	r3, [r5, #4]
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e84c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e84e:	6a21      	ldr	r1, [r4, #32]
 800e850:	6860      	ldr	r0, [r4, #4]
 800e852:	f7ff ffa5 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e856:	69a2      	ldr	r2, [r4, #24]
 800e858:	6961      	ldr	r1, [r4, #20]
 800e85a:	0fd3      	lsrs	r3, r2, #31
 800e85c:	189b      	adds	r3, r3, r2
 800e85e:	105b      	asrs	r3, r3, #1
 800e860:	18cb      	adds	r3, r1, r3
 800e862:	9307      	str	r3, [sp, #28]
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	9702      	str	r7, [sp, #8]
 800e868:	9201      	str	r2, [sp, #4]
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e86e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e870:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e872:	1836      	adds	r6, r6, r0
 800e874:	68e0      	ldr	r0, [r4, #12]
 800e876:	f7ff ff93 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e87a:	9702      	str	r7, [sp, #8]
 800e87c:	69a3      	ldr	r3, [r4, #24]
 800e87e:	9005      	str	r0, [sp, #20]
 800e880:	9301      	str	r3, [sp, #4]
 800e882:	686b      	ldr	r3, [r5, #4]
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e88a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e88c:	6920      	ldr	r0, [r4, #16]
 800e88e:	f7ff ff87 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e892:	9b05      	ldr	r3, [sp, #20]
 800e894:	1818      	adds	r0, r3, r0
 800e896:	e7be      	b.n	800e816 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 800e898:	200034d8 	.word	0x200034d8

0800e89c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800e89c:	b510      	push	{r4, lr}
 800e89e:	4b07      	ldr	r3, [pc, #28]	; (800e8bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d108      	bne.n	800e8b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	5ec2      	ldrsh	r2, [r0, r3]
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800e8ac:	880c      	ldrh	r4, [r1, #0]
 800e8ae:	881b      	ldrh	r3, [r3, #0]
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	1b1b      	subs	r3, r3, r4
 800e8b4:	8003      	strh	r3, [r0, #0]
 800e8b6:	800a      	strh	r2, [r1, #0]
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	46c0      	nop			; (mov r8, r8)
 800e8bc:	200034c4 	.word	0x200034c4
 800e8c0:	200034c8 	.word	0x200034c8

0800e8c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	4b0a      	ldr	r3, [pc, #40]	; (800e8f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d10e      	bne.n	800e8ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800e8ce:	2306      	movs	r3, #6
 800e8d0:	5ec1      	ldrsh	r1, [r0, r3]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	5ec4      	ldrsh	r4, [r0, r3]
 800e8d6:	4b07      	ldr	r3, [pc, #28]	; (800e8f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800e8d8:	8842      	ldrh	r2, [r0, #2]
 800e8da:	881b      	ldrh	r3, [r3, #0]
 800e8dc:	1852      	adds	r2, r2, r1
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	8003      	strh	r3, [r0, #0]
 800e8e2:	2204      	movs	r2, #4
 800e8e4:	5e83      	ldrsh	r3, [r0, r2]
 800e8e6:	8044      	strh	r4, [r0, #2]
 800e8e8:	8081      	strh	r1, [r0, #4]
 800e8ea:	80c3      	strh	r3, [r0, #6]
 800e8ec:	bd10      	pop	{r4, pc}
 800e8ee:	46c0      	nop			; (mov r8, r8)
 800e8f0:	200034c4 	.word	0x200034c4
 800e8f4:	200034c0 	.word	0x200034c0

0800e8f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800e8f8:	b530      	push	{r4, r5, lr}
 800e8fa:	4b07      	ldr	r3, [pc, #28]	; (800e918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d108      	bne.n	800e914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800e902:	2300      	movs	r3, #0
 800e904:	5ec4      	ldrsh	r4, [r0, r3]
 800e906:	2500      	movs	r5, #0
 800e908:	5f4b      	ldrsh	r3, [r1, r5]
 800e90a:	8003      	strh	r3, [r0, #0]
 800e90c:	8893      	ldrh	r3, [r2, #4]
 800e90e:	3b01      	subs	r3, #1
 800e910:	1b1b      	subs	r3, r3, r4
 800e912:	800b      	strh	r3, [r1, #0]
 800e914:	bd30      	pop	{r4, r5, pc}
 800e916:	46c0      	nop			; (mov r8, r8)
 800e918:	200034c4 	.word	0x200034c4

0800e91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800e91c:	b513      	push	{r0, r1, r4, lr}
 800e91e:	4b07      	ldr	r3, [pc, #28]	; (800e93c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800e920:	2200      	movs	r2, #0
 800e922:	5e9a      	ldrsh	r2, [r3, r2]
 800e924:	4b06      	ldr	r3, [pc, #24]	; (800e940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800e926:	2400      	movs	r4, #0
 800e928:	5f1b      	ldrsh	r3, [r3, r4]
 800e92a:	2400      	movs	r4, #0
 800e92c:	9400      	str	r4, [sp, #0]
 800e92e:	466c      	mov	r4, sp
 800e930:	80a2      	strh	r2, [r4, #4]
 800e932:	466a      	mov	r2, sp
 800e934:	80e3      	strh	r3, [r4, #6]
 800e936:	f7ff ffdf 	bl	800e8f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800e93a:	bd13      	pop	{r0, r1, r4, pc}
 800e93c:	200034c0 	.word	0x200034c0
 800e940:	200034c2 	.word	0x200034c2

0800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800e944:	b510      	push	{r4, lr}
 800e946:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800e948:	0004      	movs	r4, r0
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	000a      	movs	r2, r1
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d10c      	bne.n	800e96c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800e952:	8803      	ldrh	r3, [r0, #0]
 800e954:	8881      	ldrh	r1, [r0, #4]
 800e956:	185b      	adds	r3, r3, r1
 800e958:	3b01      	subs	r3, #1
 800e95a:	8003      	strh	r3, [r0, #0]
 800e95c:	1c81      	adds	r1, r0, #2
 800e95e:	f7ff ffcb 	bl	800e8f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800e962:	2204      	movs	r2, #4
 800e964:	5ea3      	ldrsh	r3, [r4, r2]
 800e966:	88e2      	ldrh	r2, [r4, #6]
 800e968:	80e3      	strh	r3, [r4, #6]
 800e96a:	80a2      	strh	r2, [r4, #4]
 800e96c:	bd10      	pop	{r4, pc}
 800e96e:	46c0      	nop			; (mov r8, r8)
 800e970:	200034c4 	.word	0x200034c4

0800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800e974:	b507      	push	{r0, r1, r2, lr}
 800e976:	4b07      	ldr	r3, [pc, #28]	; (800e994 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x20>)
 800e978:	2200      	movs	r2, #0
 800e97a:	5e9a      	ldrsh	r2, [r3, r2]
 800e97c:	4b06      	ldr	r3, [pc, #24]	; (800e998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800e97e:	2100      	movs	r1, #0
 800e980:	5e5b      	ldrsh	r3, [r3, r1]
 800e982:	2100      	movs	r1, #0
 800e984:	9100      	str	r1, [sp, #0]
 800e986:	4669      	mov	r1, sp
 800e988:	808a      	strh	r2, [r1, #4]
 800e98a:	80cb      	strh	r3, [r1, #6]
 800e98c:	f7ff ffda 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e990:	bd07      	pop	{r0, r1, r2, pc}
 800e992:	46c0      	nop			; (mov r8, r8)
 800e994:	200034c0 	.word	0x200034c0
 800e998:	200034c2 	.word	0x200034c2

0800e99c <_ZN8touchgfx11Application13requestRedrawEv>:
 800e99c:	b510      	push	{r4, lr}
 800e99e:	4b07      	ldr	r3, [pc, #28]	; (800e9bc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800e9a0:	2400      	movs	r4, #0
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	5e9a      	ldrsh	r2, [r3, r2]
 800e9a6:	4b06      	ldr	r3, [pc, #24]	; (800e9c0 <_ZN8touchgfx11Application13requestRedrawEv+0x24>)
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	5e5b      	ldrsh	r3, [r3, r1]
 800e9ac:	0001      	movs	r1, r0
 800e9ae:	30fe      	adds	r0, #254	; 0xfe
 800e9b0:	31fc      	adds	r1, #252	; 0xfc
 800e9b2:	630c      	str	r4, [r1, #48]	; 0x30
 800e9b4:	8642      	strh	r2, [r0, #50]	; 0x32
 800e9b6:	8683      	strh	r3, [r0, #52]	; 0x34
 800e9b8:	bd10      	pop	{r4, pc}
 800e9ba:	46c0      	nop			; (mov r8, r8)
 800e9bc:	200034c0 	.word	0x200034c0
 800e9c0:	200034c2 	.word	0x200034c2

0800e9c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	4b04      	ldr	r3, [pc, #16]	; (800e9d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x14>)
 800e9c8:	6818      	ldr	r0, [r3, #0]
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d002      	beq.n	800e9d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>
 800e9ce:	6803      	ldr	r3, [r0, #0]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	4798      	blx	r3
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	46c0      	nop			; (mov r8, r8)
 800e9d8:	20003528 	.word	0x20003528

0800e9dc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <_ZN8touchgfx11Application4drawEv>:
 800e9e0:	b507      	push	{r0, r1, r2, lr}
 800e9e2:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <_ZN8touchgfx11Application4drawEv+0x20>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	5e9a      	ldrsh	r2, [r3, r2]
 800e9e8:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <_ZN8touchgfx11Application4drawEv+0x24>)
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	5e5b      	ldrsh	r3, [r3, r1]
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	9100      	str	r1, [sp, #0]
 800e9f2:	4669      	mov	r1, sp
 800e9f4:	80cb      	strh	r3, [r1, #6]
 800e9f6:	6803      	ldr	r3, [r0, #0]
 800e9f8:	808a      	strh	r2, [r1, #4]
 800e9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9fc:	4798      	blx	r3
 800e9fe:	bd07      	pop	{r0, r1, r2, pc}
 800ea00:	200034c0 	.word	0x200034c0
 800ea04:	200034c2 	.word	0x200034c2

0800ea08 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	4b04      	ldr	r3, [pc, #16]	; (800ea1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x14>)
 800ea0c:	6818      	ldr	r0, [r3, #0]
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d002      	beq.n	800ea18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>
 800ea12:	6803      	ldr	r3, [r0, #0]
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	4798      	blx	r3
 800ea18:	bd10      	pop	{r4, pc}
 800ea1a:	46c0      	nop			; (mov r8, r8)
 800ea1c:	20003528 	.word	0x20003528

0800ea20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4b04      	ldr	r3, [pc, #16]	; (800ea34 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x14>)
 800ea24:	6818      	ldr	r0, [r3, #0]
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d002      	beq.n	800ea30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>
 800ea2a:	6803      	ldr	r3, [r0, #0]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	4798      	blx	r3
 800ea30:	bd10      	pop	{r4, pc}
 800ea32:	46c0      	nop			; (mov r8, r8)
 800ea34:	20003528 	.word	0x20003528

0800ea38 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	4b04      	ldr	r3, [pc, #16]	; (800ea4c <_ZN8touchgfx11Application14handleKeyEventEh+0x14>)
 800ea3c:	6818      	ldr	r0, [r3, #0]
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d002      	beq.n	800ea48 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>
 800ea42:	6803      	ldr	r3, [r0, #0]
 800ea44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea46:	4798      	blx	r3
 800ea48:	bd10      	pop	{r4, pc}
 800ea4a:	46c0      	nop			; (mov r8, r8)
 800ea4c:	20003528 	.word	0x20003528

0800ea50 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ea50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea52:	2536      	movs	r5, #54	; 0x36
 800ea54:	4e38      	ldr	r6, [pc, #224]	; (800eb38 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800ea56:	0004      	movs	r4, r0
 800ea58:	6830      	ldr	r0, [r6, #0]
 800ea5a:	35ff      	adds	r5, #255	; 0xff
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d007      	beq.n	800ea70 <_ZN8touchgfx11Application15handleTickEventEv+0x20>
 800ea60:	7a03      	ldrb	r3, [r0, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d104      	bne.n	800ea70 <_ZN8touchgfx11Application15handleTickEventEv+0x20>
 800ea66:	5563      	strb	r3, [r4, r5]
 800ea68:	6803      	ldr	r3, [r0, #0]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	4798      	blx	r3
 800ea6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ea70:	5d63      	ldrb	r3, [r4, r5]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d111      	bne.n	800ea9a <_ZN8touchgfx11Application15handleTickEventEv+0x4a>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d00f      	beq.n	800ea9a <_ZN8touchgfx11Application15handleTickEventEv+0x4a>
 800ea7a:	7a03      	ldrb	r3, [r0, #8]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00c      	beq.n	800ea9a <_ZN8touchgfx11Application15handleTickEventEv+0x4a>
 800ea80:	4b2e      	ldr	r3, [pc, #184]	; (800eb3c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800ea82:	6818      	ldr	r0, [r3, #0]
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d002      	beq.n	800ea8e <_ZN8touchgfx11Application15handleTickEventEv+0x3e>
 800ea88:	6803      	ldr	r3, [r0, #0]
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	4798      	blx	r3
 800ea8e:	6830      	ldr	r0, [r6, #0]
 800ea90:	6803      	ldr	r3, [r0, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	4798      	blx	r3
 800ea96:	2301      	movs	r3, #1
 800ea98:	5563      	strb	r3, [r4, r5]
 800ea9a:	2500      	movs	r5, #0
 800ea9c:	2603      	movs	r6, #3
 800ea9e:	0020      	movs	r0, r4
 800eaa0:	3084      	adds	r0, #132	; 0x84
 800eaa2:	8807      	ldrh	r7, [r0, #0]
 800eaa4:	42af      	cmp	r7, r5
 800eaa6:	dd0e      	ble.n	800eac6 <_ZN8touchgfx11Application15handleTickEventEv+0x76>
 800eaa8:	1963      	adds	r3, r4, r5
 800eaaa:	001a      	movs	r2, r3
 800eaac:	3288      	adds	r2, #136	; 0x88
 800eaae:	7812      	ldrb	r2, [r2, #0]
 800eab0:	2a00      	cmp	r2, #0
 800eab2:	d006      	beq.n	800eac2 <_ZN8touchgfx11Application15handleTickEventEv+0x72>
 800eab4:	0032      	movs	r2, r6
 800eab6:	436a      	muls	r2, r5
 800eab8:	189b      	adds	r3, r3, r2
 800eaba:	6858      	ldr	r0, [r3, #4]
 800eabc:	6803      	ldr	r3, [r0, #0]
 800eabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eac0:	4798      	blx	r3
 800eac2:	3501      	adds	r5, #1
 800eac4:	e7eb      	b.n	800ea9e <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 800eac6:	2300      	movs	r3, #0
 800eac8:	2603      	movs	r6, #3
 800eaca:	001a      	movs	r2, r3
 800eacc:	429f      	cmp	r7, r3
 800eace:	d01b      	beq.n	800eb08 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 800ead0:	18e1      	adds	r1, r4, r3
 800ead2:	000d      	movs	r5, r1
 800ead4:	3588      	adds	r5, #136	; 0x88
 800ead6:	782d      	ldrb	r5, [r5, #0]
 800ead8:	9501      	str	r5, [sp, #4]
 800eada:	2d00      	cmp	r5, #0
 800eadc:	d011      	beq.n	800eb02 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800eade:	429a      	cmp	r2, r3
 800eae0:	d00e      	beq.n	800eb00 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800eae2:	0035      	movs	r5, r6
 800eae4:	435d      	muls	r5, r3
 800eae6:	46ac      	mov	ip, r5
 800eae8:	4461      	add	r1, ip
 800eaea:	6849      	ldr	r1, [r1, #4]
 800eaec:	468c      	mov	ip, r1
 800eaee:	4665      	mov	r5, ip
 800eaf0:	b291      	uxth	r1, r2
 800eaf2:	0089      	lsls	r1, r1, #2
 800eaf4:	1861      	adds	r1, r4, r1
 800eaf6:	604d      	str	r5, [r1, #4]
 800eaf8:	18a1      	adds	r1, r4, r2
 800eafa:	9d01      	ldr	r5, [sp, #4]
 800eafc:	3188      	adds	r1, #136	; 0x88
 800eafe:	700d      	strb	r5, [r1, #0]
 800eb00:	3201      	adds	r2, #1
 800eb02:	3301      	adds	r3, #1
 800eb04:	e7e2      	b.n	800eacc <_ZN8touchgfx11Application15handleTickEventEv+0x7c>
 800eb06:	8001      	strh	r1, [r0, #0]
 800eb08:	8803      	ldrh	r3, [r0, #0]
 800eb0a:	1e59      	subs	r1, r3, #1
 800eb0c:	b289      	uxth	r1, r1
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	dd0b      	ble.n	800eb2a <_ZN8touchgfx11Application15handleTickEventEv+0xda>
 800eb12:	4299      	cmp	r1, r3
 800eb14:	d2fb      	bcs.n	800eb0e <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 800eb16:	3301      	adds	r3, #1
 800eb18:	008d      	lsls	r5, r1, #2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	3504      	adds	r5, #4
 800eb1e:	429d      	cmp	r5, r3
 800eb20:	d0f1      	beq.n	800eb06 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800eb22:	1966      	adds	r6, r4, r5
 800eb24:	6876      	ldr	r6, [r6, #4]
 800eb26:	5166      	str	r6, [r4, r5]
 800eb28:	e7f8      	b.n	800eb1c <_ZN8touchgfx11Application15handleTickEventEv+0xcc>
 800eb2a:	4b04      	ldr	r3, [pc, #16]	; (800eb3c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800eb2c:	6818      	ldr	r0, [r3, #0]
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d09d      	beq.n	800ea6e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 800eb32:	6803      	ldr	r3, [r0, #0]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	e799      	b.n	800ea6c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800eb38:	2000352c 	.word	0x2000352c
 800eb3c:	20003528 	.word	0x20003528

0800eb40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800eb40:	b570      	push	{r4, r5, r6, lr}
 800eb42:	0005      	movs	r5, r0
 800eb44:	1e0c      	subs	r4, r1, #0
 800eb46:	d105      	bne.n	800eb54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800eb48:	4b0d      	ldr	r3, [pc, #52]	; (800eb80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800eb4a:	4a0e      	ldr	r2, [pc, #56]	; (800eb84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800eb4c:	2166      	movs	r1, #102	; 0x66
 800eb4e:	480e      	ldr	r0, [pc, #56]	; (800eb88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800eb50:	f004 f950 	bl	8012df4 <__assert_func>
 800eb54:	0003      	movs	r3, r0
 800eb56:	2200      	movs	r2, #0
 800eb58:	4e0c      	ldr	r6, [pc, #48]	; (800eb8c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x4c>)
 800eb5a:	3384      	adds	r3, #132	; 0x84
 800eb5c:	6830      	ldr	r0, [r6, #0]
 800eb5e:	801a      	strh	r2, [r3, #0]
 800eb60:	4290      	cmp	r0, r2
 800eb62:	d002      	beq.n	800eb6a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x2a>
 800eb64:	6803      	ldr	r3, [r0, #0]
 800eb66:	695b      	ldr	r3, [r3, #20]
 800eb68:	4798      	blx	r3
 800eb6a:	6034      	str	r4, [r6, #0]
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	0020      	movs	r0, r4
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	4798      	blx	r3
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	0028      	movs	r0, r5
 800eb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb7a:	4798      	blx	r3
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
 800eb7e:	46c0      	nop			; (mov r8, r8)
 800eb80:	080166c4 	.word	0x080166c4
 800eb84:	08016794 	.word	0x08016794
 800eb88:	080166ce 	.word	0x080166ce
 800eb8c:	20003528 	.word	0x20003528

0800eb90 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800eb90:	b570      	push	{r4, r5, r6, lr}
 800eb92:	888a      	ldrh	r2, [r1, #4]
 800eb94:	2300      	movs	r3, #0
 800eb96:	5ecd      	ldrsh	r5, [r1, r3]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	5ec6      	ldrsh	r6, [r0, r3]
 800eb9c:	1952      	adds	r2, r2, r5
 800eb9e:	b212      	sxth	r2, r2
 800eba0:	0004      	movs	r4, r0
 800eba2:	2000      	movs	r0, #0
 800eba4:	4296      	cmp	r6, r2
 800eba6:	da15      	bge.n	800ebd4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x44>
 800eba8:	88a3      	ldrh	r3, [r4, #4]
 800ebaa:	199b      	adds	r3, r3, r6
 800ebac:	b21b      	sxth	r3, r3
 800ebae:	429d      	cmp	r5, r3
 800ebb0:	da10      	bge.n	800ebd4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x44>
 800ebb2:	2302      	movs	r3, #2
 800ebb4:	5ecd      	ldrsh	r5, [r1, r3]
 800ebb6:	88ca      	ldrh	r2, [r1, #6]
 800ebb8:	2302      	movs	r3, #2
 800ebba:	5ee6      	ldrsh	r6, [r4, r3]
 800ebbc:	1952      	adds	r2, r2, r5
 800ebbe:	b212      	sxth	r2, r2
 800ebc0:	4296      	cmp	r6, r2
 800ebc2:	da07      	bge.n	800ebd4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x44>
 800ebc4:	88e3      	ldrh	r3, [r4, #6]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	199b      	adds	r3, r3, r6
 800ebca:	b21b      	sxth	r3, r3
 800ebcc:	429d      	cmp	r5, r3
 800ebce:	db00      	blt.n	800ebd2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x42>
 800ebd0:	1c02      	adds	r2, r0, #0
 800ebd2:	b2d0      	uxtb	r0, r2
 800ebd4:	bd70      	pop	{r4, r5, r6, pc}

0800ebd6 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800ebd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd8:	2300      	movs	r3, #0
 800ebda:	5ecf      	ldrsh	r7, [r1, r3]
 800ebdc:	2300      	movs	r3, #0
 800ebde:	5ec4      	ldrsh	r4, [r0, r3]
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	42a7      	cmp	r7, r4
 800ebe4:	db18      	blt.n	800ec18 <_ZNK8touchgfx4Rect8includesERKS0_+0x42>
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	5e8d      	ldrsh	r5, [r1, r2]
 800ebea:	2602      	movs	r6, #2
 800ebec:	5f82      	ldrsh	r2, [r0, r6]
 800ebee:	4295      	cmp	r5, r2
 800ebf0:	db12      	blt.n	800ec18 <_ZNK8touchgfx4Rect8includesERKS0_+0x42>
 800ebf2:	8886      	ldrh	r6, [r0, #4]
 800ebf4:	1936      	adds	r6, r6, r4
 800ebf6:	888c      	ldrh	r4, [r1, #4]
 800ebf8:	b236      	sxth	r6, r6
 800ebfa:	19e4      	adds	r4, r4, r7
 800ebfc:	b224      	sxth	r4, r4
 800ebfe:	42a6      	cmp	r6, r4
 800ec00:	db0a      	blt.n	800ec18 <_ZNK8touchgfx4Rect8includesERKS0_+0x42>
 800ec02:	88c3      	ldrh	r3, [r0, #6]
 800ec04:	189b      	adds	r3, r3, r2
 800ec06:	88ca      	ldrh	r2, [r1, #6]
 800ec08:	b219      	sxth	r1, r3
 800ec0a:	1952      	adds	r2, r2, r5
 800ec0c:	b212      	sxth	r2, r2
 800ec0e:	17cb      	asrs	r3, r1, #31
 800ec10:	0fd0      	lsrs	r0, r2, #31
 800ec12:	4291      	cmp	r1, r2
 800ec14:	4143      	adcs	r3, r0
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	0018      	movs	r0, r3
 800ec1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec1c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800ec1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec1e:	0004      	movs	r4, r0
 800ec20:	0008      	movs	r0, r1
 800ec22:	000d      	movs	r5, r1
 800ec24:	f7fd fd3c 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d110      	bne.n	800ec4e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>
 800ec2c:	0020      	movs	r0, r4
 800ec2e:	f7fd fd37 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec32:	2300      	movs	r3, #0
 800ec34:	5eea      	ldrsh	r2, [r5, r3]
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d00a      	beq.n	800ec50 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x34>
 800ec3a:	8022      	strh	r2, [r4, #0]
 800ec3c:	2202      	movs	r2, #2
 800ec3e:	5eab      	ldrsh	r3, [r5, r2]
 800ec40:	8063      	strh	r3, [r4, #2]
 800ec42:	2204      	movs	r2, #4
 800ec44:	5eab      	ldrsh	r3, [r5, r2]
 800ec46:	80a3      	strh	r3, [r4, #4]
 800ec48:	2206      	movs	r2, #6
 800ec4a:	5eab      	ldrsh	r3, [r5, r2]
 800ec4c:	80e3      	strh	r3, [r4, #6]
 800ec4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ec50:	2300      	movs	r3, #0
 800ec52:	5ee0      	ldrsh	r0, [r4, r3]
 800ec54:	1c01      	adds	r1, r0, #0
 800ec56:	4290      	cmp	r0, r2
 800ec58:	dd00      	ble.n	800ec5c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x40>
 800ec5a:	1c11      	adds	r1, r2, #0
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	5ee6      	ldrsh	r6, [r4, r3]
 800ec60:	2302      	movs	r3, #2
 800ec62:	5eef      	ldrsh	r7, [r5, r3]
 800ec64:	b209      	sxth	r1, r1
 800ec66:	1c33      	adds	r3, r6, #0
 800ec68:	42be      	cmp	r6, r7
 800ec6a:	dd00      	ble.n	800ec6e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
 800ec6c:	1c3b      	adds	r3, r7, #0
 800ec6e:	b21b      	sxth	r3, r3
 800ec70:	469c      	mov	ip, r3
 800ec72:	88ab      	ldrh	r3, [r5, #4]
 800ec74:	189a      	adds	r2, r3, r2
 800ec76:	88a3      	ldrh	r3, [r4, #4]
 800ec78:	1818      	adds	r0, r3, r0
 800ec7a:	466b      	mov	r3, sp
 800ec7c:	80da      	strh	r2, [r3, #6]
 800ec7e:	b213      	sxth	r3, r2
 800ec80:	b202      	sxth	r2, r0
 800ec82:	4293      	cmp	r3, r2
 800ec84:	da01      	bge.n	800ec8a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>
 800ec86:	466b      	mov	r3, sp
 800ec88:	80d8      	strh	r0, [r3, #6]
 800ec8a:	466b      	mov	r3, sp
 800ec8c:	88ea      	ldrh	r2, [r5, #6]
 800ec8e:	88db      	ldrh	r3, [r3, #6]
 800ec90:	19d7      	adds	r7, r2, r7
 800ec92:	88e2      	ldrh	r2, [r4, #6]
 800ec94:	b21b      	sxth	r3, r3
 800ec96:	1996      	adds	r6, r2, r6
 800ec98:	b230      	sxth	r0, r6
 800ec9a:	1c3a      	adds	r2, r7, #0
 800ec9c:	b23f      	sxth	r7, r7
 800ec9e:	4287      	cmp	r7, r0
 800eca0:	da00      	bge.n	800eca4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x88>
 800eca2:	1c32      	adds	r2, r6, #0
 800eca4:	4660      	mov	r0, ip
 800eca6:	1a5b      	subs	r3, r3, r1
 800eca8:	1a12      	subs	r2, r2, r0
 800ecaa:	8021      	strh	r1, [r4, #0]
 800ecac:	8060      	strh	r0, [r4, #2]
 800ecae:	80a3      	strh	r3, [r4, #4]
 800ecb0:	80e2      	strh	r2, [r4, #6]
 800ecb2:	e7cc      	b.n	800ec4e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>

0800ecb4 <_ZN8touchgfx11Application11getInstanceEv>:
 800ecb4:	4b01      	ldr	r3, [pc, #4]	; (800ecbc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800ecb6:	6818      	ldr	r0, [r3, #0]
 800ecb8:	4770      	bx	lr
 800ecba:	46c0      	nop			; (mov r8, r8)
 800ecbc:	20003538 	.word	0x20003538

0800ecc0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800ecc0:	0003      	movs	r3, r0
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	3384      	adds	r3, #132	; 0x84
 800ecc6:	801a      	strh	r2, [r3, #0]
 800ecc8:	30a8      	adds	r0, #168	; 0xa8
 800ecca:	3304      	adds	r3, #4
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	4283      	cmp	r3, r0
 800ecd2:	d1fb      	bne.n	800eccc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800ecd4:	4770      	bx	lr

0800ecd6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800ecd6:	0001      	movs	r1, r0
 800ecd8:	0003      	movs	r3, r0
 800ecda:	2200      	movs	r2, #0
 800ecdc:	3140      	adds	r1, #64	; 0x40
 800ecde:	801a      	strh	r2, [r3, #0]
 800ece0:	805a      	strh	r2, [r3, #2]
 800ece2:	809a      	strh	r2, [r3, #4]
 800ece4:	80da      	strh	r2, [r3, #6]
 800ece6:	3308      	adds	r3, #8
 800ece8:	428b      	cmp	r3, r1
 800ecea:	d1f8      	bne.n	800ecde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800ecec:	1c83      	adds	r3, r0, #2
 800ecee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <_ZN8touchgfx11ApplicationC1Ev>:
 800ecf4:	4b1d      	ldr	r3, [pc, #116]	; (800ed6c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800ecf6:	b570      	push	{r4, r5, r6, lr}
 800ecf8:	3308      	adds	r3, #8
 800ecfa:	6003      	str	r3, [r0, #0]
 800ecfc:	0003      	movs	r3, r0
 800ecfe:	2500      	movs	r5, #0
 800ed00:	0004      	movs	r4, r0
 800ed02:	3384      	adds	r3, #132	; 0x84
 800ed04:	801d      	strh	r5, [r3, #0]
 800ed06:	30a8      	adds	r0, #168	; 0xa8
 800ed08:	f7ff ffe5 	bl	800ecd6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ed0c:	0020      	movs	r0, r4
 800ed0e:	30ea      	adds	r0, #234	; 0xea
 800ed10:	f7ff ffe1 	bl	800ecd6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ed14:	2396      	movs	r3, #150	; 0x96
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	52e5      	strh	r5, [r4, r3]
 800ed1a:	0023      	movs	r3, r4
 800ed1c:	332d      	adds	r3, #45	; 0x2d
 800ed1e:	33ff      	adds	r3, #255	; 0xff
 800ed20:	805d      	strh	r5, [r3, #2]
 800ed22:	809d      	strh	r5, [r3, #4]
 800ed24:	80dd      	strh	r5, [r3, #6]
 800ed26:	239a      	movs	r3, #154	; 0x9a
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	54e5      	strb	r5, [r4, r3]
 800ed2c:	2336      	movs	r3, #54	; 0x36
 800ed2e:	33ff      	adds	r3, #255	; 0xff
 800ed30:	54e5      	strb	r5, [r4, r3]
 800ed32:	490f      	ldr	r1, [pc, #60]	; (800ed70 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800ed34:	480f      	ldr	r0, [pc, #60]	; (800ed74 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800ed36:	f003 ff3b 	bl	8012bb0 <CRC_Lock>
 800ed3a:	4b0f      	ldr	r3, [pc, #60]	; (800ed78 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800ed3c:	4e0f      	ldr	r6, [pc, #60]	; (800ed7c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800ed3e:	42a8      	cmp	r0, r5
 800ed40:	d00b      	beq.n	800ed5a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800ed42:	801d      	strh	r5, [r3, #0]
 800ed44:	2300      	movs	r3, #0
 800ed46:	4a0e      	ldr	r2, [pc, #56]	; (800ed80 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800ed48:	0020      	movs	r0, r4
 800ed4a:	6013      	str	r3, [r2, #0]
 800ed4c:	4a0d      	ldr	r2, [pc, #52]	; (800ed84 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800ed4e:	6033      	str	r3, [r6, #0]
 800ed50:	6013      	str	r3, [r2, #0]
 800ed52:	f7ff ffb5 	bl	800ecc0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800ed56:	0020      	movs	r0, r4
 800ed58:	bd70      	pop	{r4, r5, r6, pc}
 800ed5a:	2280      	movs	r2, #128	; 0x80
 800ed5c:	2002      	movs	r0, #2
 800ed5e:	00d2      	lsls	r2, r2, #3
 800ed60:	801a      	strh	r2, [r3, #0]
 800ed62:	6030      	str	r0, [r6, #0]
 800ed64:	f001 f846 	bl	800fdf4 <_ZN8touchgfx6Screen4drawEv>
 800ed68:	e7ec      	b.n	800ed44 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800ed6a:	46c0      	nop			; (mov r8, r8)
 800ed6c:	08016750 	.word	0x08016750
 800ed70:	b5e8b5cd 	.word	0xb5e8b5cd
 800ed74:	f407a5c2 	.word	0xf407a5c2
 800ed78:	20000020 	.word	0x20000020
 800ed7c:	20003528 	.word	0x20003528
 800ed80:	20003538 	.word	0x20003538
 800ed84:	2000352c 	.word	0x2000352c

0800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ed88:	2300      	movs	r3, #0
 800ed8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed8c:	8003      	strh	r3, [r0, #0]
 800ed8e:	8043      	strh	r3, [r0, #2]
 800ed90:	8083      	strh	r3, [r0, #4]
 800ed92:	80c3      	strh	r3, [r0, #6]
 800ed94:	1c8b      	adds	r3, r1, #2
 800ed96:	9301      	str	r3, [sp, #4]
 800ed98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed9a:	0004      	movs	r4, r0
 800ed9c:	000d      	movs	r5, r1
 800ed9e:	0017      	movs	r7, r2
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d912      	bls.n	800edcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x44>
 800eda6:	00d6      	lsls	r6, r2, #3
 800eda8:	198e      	adds	r6, r1, r6
 800edaa:	0031      	movs	r1, r6
 800edac:	2208      	movs	r2, #8
 800edae:	f004 f895 	bl	8012edc <memcpy>
 800edb2:	9901      	ldr	r1, [sp, #4]
 800edb4:	1cab      	adds	r3, r5, #2
 800edb6:	3901      	subs	r1, #1
 800edb8:	b289      	uxth	r1, r1
 800edba:	87d9      	strh	r1, [r3, #62]	; 0x3e
 800edbc:	42b9      	cmp	r1, r7
 800edbe:	d905      	bls.n	800edcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x44>
 800edc0:	00c9      	lsls	r1, r1, #3
 800edc2:	1869      	adds	r1, r5, r1
 800edc4:	2208      	movs	r2, #8
 800edc6:	0030      	movs	r0, r6
 800edc8:	f004 f888 	bl	8012edc <memcpy>
 800edcc:	0020      	movs	r0, r4
 800edce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800edd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800edd0:	b507      	push	{r0, r1, r2, lr}
 800edd2:	9201      	str	r2, [sp, #4]
 800edd4:	9100      	str	r1, [sp, #0]
 800edd6:	1c82      	adds	r2, r0, #2
 800edd8:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 800edda:	2b07      	cmp	r3, #7
 800eddc:	d906      	bls.n	800edec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x1c>
 800edde:	2190      	movs	r1, #144	; 0x90
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x30>)
 800ede2:	4a08      	ldr	r2, [pc, #32]	; (800ee04 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x34>)
 800ede4:	31ff      	adds	r1, #255	; 0xff
 800ede6:	4808      	ldr	r0, [pc, #32]	; (800ee08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800ede8:	f004 f804 	bl	8012df4 <__assert_func>
 800edec:	1c59      	adds	r1, r3, #1
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	87d1      	strh	r1, [r2, #62]	; 0x3e
 800edf2:	18c0      	adds	r0, r0, r3
 800edf4:	2208      	movs	r2, #8
 800edf6:	4669      	mov	r1, sp
 800edf8:	f004 f870 	bl	8012edc <memcpy>
 800edfc:	bd07      	pop	{r0, r1, r2, pc}
 800edfe:	46c0      	nop			; (mov r8, r8)
 800ee00:	080166f8 	.word	0x080166f8
 800ee04:	080167d8 	.word	0x080167d8
 800ee08:	08016727 	.word	0x08016727

0800ee0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ee0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee0e:	b08b      	sub	sp, #44	; 0x2c
 800ee10:	0005      	movs	r5, r0
 800ee12:	a802      	add	r0, sp, #8
 800ee14:	9102      	str	r1, [sp, #8]
 800ee16:	9203      	str	r2, [sp, #12]
 800ee18:	f7fd fc42 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d13d      	bne.n	800ee9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x90>
 800ee20:	002b      	movs	r3, r5
 800ee22:	33e8      	adds	r3, #232	; 0xe8
 800ee24:	881b      	ldrh	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d024      	beq.n	800ee74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68>
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	466b      	mov	r3, sp
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	ae04      	add	r6, sp, #16
 800ee34:	9301      	str	r3, [sp, #4]
 800ee36:	9b00      	ldr	r3, [sp, #0]
 800ee38:	2208      	movs	r2, #8
 800ee3a:	00d9      	lsls	r1, r3, #3
 800ee3c:	31a8      	adds	r1, #168	; 0xa8
 800ee3e:	1869      	adds	r1, r5, r1
 800ee40:	0030      	movs	r0, r6
 800ee42:	ac02      	add	r4, sp, #8
 800ee44:	f004 f84a 	bl	8012edc <memcpy>
 800ee48:	0021      	movs	r1, r4
 800ee4a:	0030      	movs	r0, r6
 800ee4c:	f7ff fec3 	bl	800ebd6 <_ZNK8touchgfx4Rect8includesERKS0_>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d123      	bne.n	800ee9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x90>
 800ee54:	0031      	movs	r1, r6
 800ee56:	0020      	movs	r0, r4
 800ee58:	f7ff febd 	bl	800ebd6 <_ZNK8touchgfx4Rect8includesERKS0_>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d01f      	beq.n	800eea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x94>
 800ee60:	0029      	movs	r1, r5
 800ee62:	9a01      	ldr	r2, [sp, #4]
 800ee64:	31a8      	adds	r1, #168	; 0xa8
 800ee66:	a808      	add	r0, sp, #32
 800ee68:	f7ff ff8e 	bl	800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ee6c:	9b00      	ldr	r3, [sp, #0]
 800ee6e:	1e5a      	subs	r2, r3, #1
 800ee70:	9200      	str	r2, [sp, #0]
 800ee72:	d2dc      	bcs.n	800ee2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x22>
 800ee74:	002c      	movs	r4, r5
 800ee76:	35e8      	adds	r5, #232	; 0xe8
 800ee78:	882b      	ldrh	r3, [r5, #0]
 800ee7a:	34a8      	adds	r4, #168	; 0xa8
 800ee7c:	2b08      	cmp	r3, #8
 800ee7e:	d108      	bne.n	800ee92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 800ee80:	0021      	movs	r1, r4
 800ee82:	a808      	add	r0, sp, #32
 800ee84:	2207      	movs	r2, #7
 800ee86:	f7ff ff7f 	bl	800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ee8a:	a908      	add	r1, sp, #32
 800ee8c:	a802      	add	r0, sp, #8
 800ee8e:	f7ff fec5 	bl	800ec1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ee92:	9902      	ldr	r1, [sp, #8]
 800ee94:	9a03      	ldr	r2, [sp, #12]
 800ee96:	0020      	movs	r0, r4
 800ee98:	f7ff ff9a 	bl	800edd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ee9c:	b00b      	add	sp, #44	; 0x2c
 800ee9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea0:	0021      	movs	r1, r4
 800eea2:	0030      	movs	r0, r6
 800eea4:	f7ff fe74 	bl	800eb90 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d00a      	beq.n	800eec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xb6>
 800eeac:	0029      	movs	r1, r5
 800eeae:	a808      	add	r0, sp, #32
 800eeb0:	9a01      	ldr	r2, [sp, #4]
 800eeb2:	31a8      	adds	r1, #168	; 0xa8
 800eeb4:	f7ff ff68 	bl	800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800eeb8:	0031      	movs	r1, r6
 800eeba:	0020      	movs	r0, r4
 800eebc:	f7ff feae 	bl	800ec1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800eec0:	e7d4      	b.n	800ee6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60>
 800eec2:	af06      	add	r7, sp, #24
 800eec4:	003b      	movs	r3, r7
 800eec6:	0022      	movs	r2, r4
 800eec8:	ca03      	ldmia	r2!, {r0, r1}
 800eeca:	c303      	stmia	r3!, {r0, r1}
 800eecc:	0031      	movs	r1, r6
 800eece:	0038      	movs	r0, r7
 800eed0:	f7ff fea4 	bl	800ec1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800eed4:	2204      	movs	r2, #4
 800eed6:	5ebb      	ldrsh	r3, [r7, r2]
 800eed8:	2106      	movs	r1, #6
 800eeda:	5e7a      	ldrsh	r2, [r7, r1]
 800eedc:	435a      	muls	r2, r3
 800eede:	230a      	movs	r3, #10
 800eee0:	435a      	muls	r2, r3
 800eee2:	2304      	movs	r3, #4
 800eee4:	5ee1      	ldrsh	r1, [r4, r3]
 800eee6:	2006      	movs	r0, #6
 800eee8:	5e23      	ldrsh	r3, [r4, r0]
 800eeea:	434b      	muls	r3, r1
 800eeec:	2104      	movs	r1, #4
 800eeee:	5e70      	ldrsh	r0, [r6, r1]
 800eef0:	2106      	movs	r1, #6
 800eef2:	5e71      	ldrsh	r1, [r6, r1]
 800eef4:	4341      	muls	r1, r0
 800eef6:	185b      	adds	r3, r3, r1
 800eef8:	210b      	movs	r1, #11
 800eefa:	434b      	muls	r3, r1
 800eefc:	429a      	cmp	r2, r3
 800eefe:	dab5      	bge.n	800ee6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60>
 800ef00:	0029      	movs	r1, r5
 800ef02:	9a01      	ldr	r2, [sp, #4]
 800ef04:	31a8      	adds	r1, #168	; 0xa8
 800ef06:	a808      	add	r0, sp, #32
 800ef08:	f7ff ff3e 	bl	800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ef0c:	cf0c      	ldmia	r7!, {r2, r3}
 800ef0e:	c40c      	stmia	r4!, {r2, r3}
 800ef10:	e7ac      	b.n	800ee6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60>
	...

0800ef14 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800ef14:	b530      	push	{r4, r5, lr}
 800ef16:	4b22      	ldr	r3, [pc, #136]	; (800efa0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x8c>)
 800ef18:	000c      	movs	r4, r1
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	5e9a      	ldrsh	r2, [r3, r2]
 800ef1e:	4b21      	ldr	r3, [pc, #132]	; (800efa4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x90>)
 800ef20:	b085      	sub	sp, #20
 800ef22:	2100      	movs	r1, #0
 800ef24:	5e5b      	ldrsh	r3, [r3, r1]
 800ef26:	2100      	movs	r1, #0
 800ef28:	9100      	str	r1, [sp, #0]
 800ef2a:	4669      	mov	r1, sp
 800ef2c:	0005      	movs	r5, r0
 800ef2e:	80cb      	strh	r3, [r1, #6]
 800ef30:	808a      	strh	r2, [r1, #4]
 800ef32:	a802      	add	r0, sp, #8
 800ef34:	2208      	movs	r2, #8
 800ef36:	0021      	movs	r1, r4
 800ef38:	f003 ffd0 	bl	8012edc <memcpy>
 800ef3c:	4669      	mov	r1, sp
 800ef3e:	a802      	add	r0, sp, #8
 800ef40:	f7fd fb5e 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800ef44:	2208      	movs	r2, #8
 800ef46:	a902      	add	r1, sp, #8
 800ef48:	0020      	movs	r0, r4
 800ef4a:	f003 ffc7 	bl	8012edc <memcpy>
 800ef4e:	4b16      	ldr	r3, [pc, #88]	; (800efa8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x94>)
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d00f      	beq.n	800ef76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x62>
 800ef56:	239a      	movs	r3, #154	; 0x9a
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	5ceb      	ldrb	r3, [r5, r3]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00c      	beq.n	800ef7a <_ZN8touchgfx11Application4drawERNS_4RectE+0x66>
 800ef60:	8861      	ldrh	r1, [r4, #2]
 800ef62:	8823      	ldrh	r3, [r4, #0]
 800ef64:	0409      	lsls	r1, r1, #16
 800ef66:	88e2      	ldrh	r2, [r4, #6]
 800ef68:	4319      	orrs	r1, r3
 800ef6a:	88a3      	ldrh	r3, [r4, #4]
 800ef6c:	0412      	lsls	r2, r2, #16
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	0028      	movs	r0, r5
 800ef72:	f7ff ff4b 	bl	800ee0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ef76:	b005      	add	sp, #20
 800ef78:	bd30      	pop	{r4, r5, pc}
 800ef7a:	6803      	ldr	r3, [r0, #0]
 800ef7c:	0021      	movs	r1, r4
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	4798      	blx	r3
 800ef82:	4b0a      	ldr	r3, [pc, #40]	; (800efac <_ZN8touchgfx11Application4drawERNS_4RectE+0x98>)
 800ef84:	6818      	ldr	r0, [r3, #0]
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d003      	beq.n	800ef92 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7e>
 800ef8a:	6803      	ldr	r3, [r0, #0]
 800ef8c:	0021      	movs	r1, r4
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	4798      	blx	r3
 800ef92:	4b07      	ldr	r3, [pc, #28]	; (800efb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x9c>)
 800ef94:	0021      	movs	r1, r4
 800ef96:	6818      	ldr	r0, [r3, #0]
 800ef98:	6803      	ldr	r3, [r0, #0]
 800ef9a:	695b      	ldr	r3, [r3, #20]
 800ef9c:	4798      	blx	r3
 800ef9e:	e7ea      	b.n	800ef76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x62>
 800efa0:	200034c0 	.word	0x200034c0
 800efa4:	200034c2 	.word	0x200034c2
 800efa8:	20003528 	.word	0x20003528
 800efac:	20003524 	.word	0x20003524
 800efb0:	200034cc 	.word	0x200034cc

0800efb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800efb4:	239a      	movs	r3, #154	; 0x9a
 800efb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efb8:	0006      	movs	r6, r0
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	b09f      	sub	sp, #124	; 0x7c
 800efbe:	0007      	movs	r7, r0
 800efc0:	54c1      	strb	r1, [r0, r3]
 800efc2:	36e8      	adds	r6, #232	; 0xe8
 800efc4:	2900      	cmp	r1, #0
 800efc6:	d003      	beq.n	800efd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1c>
 800efc8:	2300      	movs	r3, #0
 800efca:	8033      	strh	r3, [r6, #0]
 800efcc:	b01f      	add	sp, #124	; 0x7c
 800efce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd0:	0005      	movs	r5, r0
 800efd2:	352d      	adds	r5, #45	; 0x2d
 800efd4:	35ff      	adds	r5, #255	; 0xff
 800efd6:	0028      	movs	r0, r5
 800efd8:	f7fd fb62 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800efdc:	1e04      	subs	r4, r0, #0
 800efde:	d10a      	bne.n	800eff6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x42>
 800efe0:	2396      	movs	r3, #150	; 0x96
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	58f9      	ldr	r1, [r7, r3]
 800efe6:	686a      	ldr	r2, [r5, #4]
 800efe8:	0038      	movs	r0, r7
 800efea:	f7ff ff0f 	bl	800ee0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800efee:	003b      	movs	r3, r7
 800eff0:	33fc      	adds	r3, #252	; 0xfc
 800eff2:	631c      	str	r4, [r3, #48]	; 0x30
 800eff4:	635c      	str	r4, [r3, #52]	; 0x34
 800eff6:	4bc0      	ldr	r3, [pc, #768]	; (800f2f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x344>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d031      	beq.n	800f062 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xae>
 800effe:	4cbf      	ldr	r4, [pc, #764]	; (800f2fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x348>)
 800f000:	0020      	movs	r0, r4
 800f002:	f7fd fb4d 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f006:	1e05      	subs	r5, r0, #0
 800f008:	d12b      	bne.n	800f062 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xae>
 800f00a:	0020      	movs	r0, r4
 800f00c:	f7ff fc5a 	bl	800e8c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800f010:	8861      	ldrh	r1, [r4, #2]
 800f012:	8823      	ldrh	r3, [r4, #0]
 800f014:	88e2      	ldrh	r2, [r4, #6]
 800f016:	0409      	lsls	r1, r1, #16
 800f018:	4319      	orrs	r1, r3
 800f01a:	88a3      	ldrh	r3, [r4, #4]
 800f01c:	0412      	lsls	r2, r2, #16
 800f01e:	431a      	orrs	r2, r3
 800f020:	0038      	movs	r0, r7
 800f022:	f7ff fef3 	bl	800ee0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f026:	8025      	strh	r5, [r4, #0]
 800f028:	8065      	strh	r5, [r4, #2]
 800f02a:	80a5      	strh	r5, [r4, #4]
 800f02c:	80e5      	strh	r5, [r4, #6]
 800f02e:	a80d      	add	r0, sp, #52	; 0x34
 800f030:	f7ff fe51 	bl	800ecd6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f034:	4bb2      	ldr	r3, [pc, #712]	; (800f300 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 800f036:	881c      	ldrh	r4, [r3, #0]
 800f038:	0025      	movs	r5, r4
 800f03a:	8833      	ldrh	r3, [r6, #0]
 800f03c:	42ab      	cmp	r3, r5
 800f03e:	d914      	bls.n	800f06a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb6>
 800f040:	00eb      	lsls	r3, r5, #3
 800f042:	18fb      	adds	r3, r7, r3
 800f044:	33a8      	adds	r3, #168	; 0xa8
 800f046:	8859      	ldrh	r1, [r3, #2]
 800f048:	881a      	ldrh	r2, [r3, #0]
 800f04a:	0409      	lsls	r1, r1, #16
 800f04c:	4311      	orrs	r1, r2
 800f04e:	88da      	ldrh	r2, [r3, #6]
 800f050:	8898      	ldrh	r0, [r3, #4]
 800f052:	0412      	lsls	r2, r2, #16
 800f054:	4302      	orrs	r2, r0
 800f056:	3501      	adds	r5, #1
 800f058:	a80d      	add	r0, sp, #52	; 0x34
 800f05a:	f7ff feb9 	bl	800edd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f05e:	b2ad      	uxth	r5, r5
 800f060:	e7eb      	b.n	800f03a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x86>
 800f062:	8833      	ldrh	r3, [r6, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1e2      	bne.n	800f02e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 800f068:	e7b0      	b.n	800efcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18>
 800f06a:	0025      	movs	r5, r4
 800f06c:	003b      	movs	r3, r7
 800f06e:	33fe      	adds	r3, #254	; 0xfe
 800f070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f072:	42ab      	cmp	r3, r5
 800f074:	d910      	bls.n	800f098 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xe4>
 800f076:	00eb      	lsls	r3, r5, #3
 800f078:	18fb      	adds	r3, r7, r3
 800f07a:	33ea      	adds	r3, #234	; 0xea
 800f07c:	8859      	ldrh	r1, [r3, #2]
 800f07e:	881a      	ldrh	r2, [r3, #0]
 800f080:	0409      	lsls	r1, r1, #16
 800f082:	4311      	orrs	r1, r2
 800f084:	88da      	ldrh	r2, [r3, #6]
 800f086:	8898      	ldrh	r0, [r3, #4]
 800f088:	0412      	lsls	r2, r2, #16
 800f08a:	4302      	orrs	r2, r0
 800f08c:	3501      	adds	r5, #1
 800f08e:	0038      	movs	r0, r7
 800f090:	f7ff febc 	bl	800ee0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f094:	b2ad      	uxth	r5, r5
 800f096:	e7e9      	b.n	800f06c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 800f098:	4b9a      	ldr	r3, [pc, #616]	; (800f304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3348      	adds	r3, #72	; 0x48
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d000      	beq.n	800f0a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf2>
 800f0a4:	e08f      	b.n	800f1c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x212>
 800f0a6:	00e3      	lsls	r3, r4, #3
 800f0a8:	0021      	movs	r1, r4
 800f0aa:	2400      	movs	r4, #0
 800f0ac:	33aa      	adds	r3, #170	; 0xaa
 800f0ae:	8830      	ldrh	r0, [r6, #0]
 800f0b0:	18fb      	adds	r3, r7, r3
 800f0b2:	4288      	cmp	r0, r1
 800f0b4:	dd09      	ble.n	800f0ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 800f0b6:	881a      	ldrh	r2, [r3, #0]
 800f0b8:	889d      	ldrh	r5, [r3, #4]
 800f0ba:	1952      	adds	r2, r2, r5
 800f0bc:	b212      	sxth	r2, r2
 800f0be:	4294      	cmp	r4, r2
 800f0c0:	da00      	bge.n	800f0c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 800f0c2:	0014      	movs	r4, r2
 800f0c4:	3101      	adds	r1, #1
 800f0c6:	3308      	adds	r3, #8
 800f0c8:	e7f3      	b.n	800f0b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xfe>
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	4b8e      	ldr	r3, [pc, #568]	; (800f308 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x354>)
 800f0ce:	9203      	str	r2, [sp, #12]
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	2b0f      	cmp	r3, #15
 800f0d4:	d901      	bls.n	800f0da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x126>
 800f0d6:	08db      	lsrs	r3, r3, #3
 800f0d8:	9303      	str	r3, [sp, #12]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f0de:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e0:	4b88      	ldr	r3, [pc, #544]	; (800f304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>)
 800f0e2:	ad09      	add	r5, sp, #36	; 0x24
 800f0e4:	6818      	ldr	r0, [r3, #0]
 800f0e6:	88e9      	ldrh	r1, [r5, #6]
 800f0e8:	886b      	ldrh	r3, [r5, #2]
 800f0ea:	6802      	ldr	r2, [r0, #0]
 800f0ec:	185b      	adds	r3, r3, r1
 800f0ee:	b21b      	sxth	r3, r3
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	dd48      	ble.n	800f186 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 800f0f4:	3208      	adds	r2, #8
 800f0f6:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800f0f8:	4798      	blx	r3
 800f0fa:	88ea      	ldrh	r2, [r5, #6]
 800f0fc:	886b      	ldrh	r3, [r5, #2]
 800f0fe:	189b      	adds	r3, r3, r2
 800f100:	9a03      	ldr	r2, [sp, #12]
 800f102:	b21b      	sxth	r3, r3
 800f104:	189a      	adds	r2, r3, r2
 800f106:	4290      	cmp	r0, r2
 800f108:	da07      	bge.n	800f11a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x166>
 800f10a:	4284      	cmp	r4, r0
 800f10c:	dd05      	ble.n	800f11a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x166>
 800f10e:	4298      	cmp	r0, r3
 800f110:	da2d      	bge.n	800f16e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 800f112:	2b00      	cmp	r3, #0
 800f114:	dd2b      	ble.n	800f16e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 800f116:	0022      	movs	r2, r4
 800f118:	e002      	b.n	800f120 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 800f11a:	0022      	movs	r2, r4
 800f11c:	4298      	cmp	r0, r3
 800f11e:	da2e      	bge.n	800f17e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ca>
 800f120:	497a      	ldr	r1, [pc, #488]	; (800f30c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>)
 800f122:	806b      	strh	r3, [r5, #2]
 800f124:	2000      	movs	r0, #0
 800f126:	5e09      	ldrsh	r1, [r1, r0]
 800f128:	2000      	movs	r0, #0
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	80eb      	strh	r3, [r5, #6]
 800f12e:	4b74      	ldr	r3, [pc, #464]	; (800f300 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 800f130:	8028      	strh	r0, [r5, #0]
 800f132:	80a9      	strh	r1, [r5, #4]
 800f134:	881d      	ldrh	r5, [r3, #0]
 800f136:	8833      	ldrh	r3, [r6, #0]
 800f138:	42ab      	cmp	r3, r5
 800f13a:	d9d1      	bls.n	800f0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x12c>
 800f13c:	0039      	movs	r1, r7
 800f13e:	00eb      	lsls	r3, r5, #3
 800f140:	31a8      	adds	r1, #168	; 0xa8
 800f142:	18c9      	adds	r1, r1, r3
 800f144:	2208      	movs	r2, #8
 800f146:	a80b      	add	r0, sp, #44	; 0x2c
 800f148:	f003 fec8 	bl	8012edc <memcpy>
 800f14c:	a80b      	add	r0, sp, #44	; 0x2c
 800f14e:	a909      	add	r1, sp, #36	; 0x24
 800f150:	f7fd fa56 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800f154:	a80b      	add	r0, sp, #44	; 0x2c
 800f156:	f7fd faa3 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d104      	bne.n	800f168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	a90b      	add	r1, sp, #44	; 0x2c
 800f162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f164:	0038      	movs	r0, r7
 800f166:	4798      	blx	r3
 800f168:	3501      	adds	r5, #1
 800f16a:	b2ad      	uxth	r5, r5
 800f16c:	e7e3      	b.n	800f136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x182>
 800f16e:	4b65      	ldr	r3, [pc, #404]	; (800f304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>)
 800f170:	2101      	movs	r1, #1
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	6803      	ldr	r3, [r0, #0]
 800f176:	3304      	adds	r3, #4
 800f178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f17a:	4798      	blx	r3
 800f17c:	e7b0      	b.n	800f0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x12c>
 800f17e:	4284      	cmp	r4, r0
 800f180:	ddce      	ble.n	800f120 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 800f182:	0002      	movs	r2, r0
 800f184:	e7cc      	b.n	800f120 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 800f186:	69d3      	ldr	r3, [r2, #28]
 800f188:	4798      	blx	r3
 800f18a:	4b61      	ldr	r3, [pc, #388]	; (800f310 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x35c>)
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d100      	bne.n	800f194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>
 800f192:	e71b      	b.n	800efcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18>
 800f194:	003b      	movs	r3, r7
 800f196:	2200      	movs	r2, #0
 800f198:	33fe      	adds	r3, #254	; 0xfe
 800f19a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f19c:	4b58      	ldr	r3, [pc, #352]	; (800f300 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 800f19e:	881c      	ldrh	r4, [r3, #0]
 800f1a0:	231e      	movs	r3, #30
 800f1a2:	aa06      	add	r2, sp, #24
 800f1a4:	189b      	adds	r3, r3, r2
 800f1a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	d800      	bhi.n	800f1ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 800f1ac:	e70e      	b.n	800efcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18>
 800f1ae:	0038      	movs	r0, r7
 800f1b0:	00e3      	lsls	r3, r4, #3
 800f1b2:	aa1e      	add	r2, sp, #120	; 0x78
 800f1b4:	18d3      	adds	r3, r2, r3
 800f1b6:	3b44      	subs	r3, #68	; 0x44
 800f1b8:	cb06      	ldmia	r3!, {r1, r2}
 800f1ba:	30ea      	adds	r0, #234	; 0xea
 800f1bc:	3401      	adds	r4, #1
 800f1be:	f7ff fe07 	bl	800edd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f1c2:	b2a4      	uxth	r4, r4
 800f1c4:	e7ec      	b.n	800f1a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d000      	beq.n	800f1cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x218>
 800f1ca:	e155      	b.n	800f478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4c4>
 800f1cc:	4b51      	ldr	r3, [pc, #324]	; (800f314 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x360>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d000      	beq.n	800f1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x222>
 800f1d4:	e112      	b.n	800f3fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x448>
 800f1d6:	003b      	movs	r3, r7
 800f1d8:	33e8      	adds	r3, #232	; 0xe8
 800f1da:	881b      	ldrh	r3, [r3, #0]
 800f1dc:	9304      	str	r3, [sp, #16]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0d3      	beq.n	800f18a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 800f1e2:	003b      	movs	r3, r7
 800f1e4:	33a8      	adds	r3, #168	; 0xa8
 800f1e6:	2600      	movs	r6, #0
 800f1e8:	5f9e      	ldrsh	r6, [r3, r6]
 800f1ea:	4b45      	ldr	r3, [pc, #276]	; (800f300 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	881a      	ldrh	r2, [r3, #0]
 800f1f0:	3201      	adds	r2, #1
 800f1f2:	b292      	uxth	r2, r2
 800f1f4:	0013      	movs	r3, r2
 800f1f6:	3315      	adds	r3, #21
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	18fb      	adds	r3, r7, r3
 800f1fc:	9103      	str	r1, [sp, #12]
 800f1fe:	9803      	ldr	r0, [sp, #12]
 800f200:	b291      	uxth	r1, r2
 800f202:	00c4      	lsls	r4, r0, #3
 800f204:	9804      	ldr	r0, [sp, #16]
 800f206:	4288      	cmp	r0, r1
 800f208:	d92d      	bls.n	800f266 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 800f20a:	193c      	adds	r4, r7, r4
 800f20c:	0020      	movs	r0, r4
 800f20e:	0021      	movs	r1, r4
 800f210:	30a8      	adds	r0, #168	; 0xa8
 800f212:	31ac      	adds	r1, #172	; 0xac
 800f214:	8809      	ldrh	r1, [r1, #0]
 800f216:	8800      	ldrh	r0, [r0, #0]
 800f218:	4694      	mov	ip, r2
 800f21a:	1840      	adds	r0, r0, r1
 800f21c:	2100      	movs	r1, #0
 800f21e:	5e5d      	ldrsh	r5, [r3, r1]
 800f220:	8899      	ldrh	r1, [r3, #4]
 800f222:	b200      	sxth	r0, r0
 800f224:	1949      	adds	r1, r1, r5
 800f226:	b209      	sxth	r1, r1
 800f228:	4288      	cmp	r0, r1
 800f22a:	da07      	bge.n	800f23c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x288>
 800f22c:	002e      	movs	r6, r5
 800f22e:	4285      	cmp	r5, r0
 800f230:	da00      	bge.n	800f234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x280>
 800f232:	0006      	movs	r6, r0
 800f234:	3201      	adds	r2, #1
 800f236:	3308      	adds	r3, #8
 800f238:	4661      	mov	r1, ip
 800f23a:	e7df      	b.n	800f1fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 800f23c:	4288      	cmp	r0, r1
 800f23e:	d10c      	bne.n	800f25a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a6>
 800f240:	34ae      	adds	r4, #174	; 0xae
 800f242:	2100      	movs	r1, #0
 800f244:	5e60      	ldrsh	r0, [r4, r1]
 800f246:	2406      	movs	r4, #6
 800f248:	5f19      	ldrsh	r1, [r3, r4]
 800f24a:	4288      	cmp	r0, r1
 800f24c:	db01      	blt.n	800f252 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29e>
 800f24e:	9903      	ldr	r1, [sp, #12]
 800f250:	468c      	mov	ip, r1
 800f252:	42ae      	cmp	r6, r5
 800f254:	daee      	bge.n	800f234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x280>
 800f256:	002e      	movs	r6, r5
 800f258:	e7ec      	b.n	800f234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x280>
 800f25a:	428e      	cmp	r6, r1
 800f25c:	da00      	bge.n	800f260 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 800f25e:	000e      	movs	r6, r1
 800f260:	9903      	ldr	r1, [sp, #12]
 800f262:	468c      	mov	ip, r1
 800f264:	e7e6      	b.n	800f234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x280>
 800f266:	0039      	movs	r1, r7
 800f268:	ad09      	add	r5, sp, #36	; 0x24
 800f26a:	31a8      	adds	r1, #168	; 0xa8
 800f26c:	2208      	movs	r2, #8
 800f26e:	1909      	adds	r1, r1, r4
 800f270:	0028      	movs	r0, r5
 800f272:	f003 fe33 	bl	8012edc <memcpy>
 800f276:	2304      	movs	r3, #4
 800f278:	5eea      	ldrsh	r2, [r5, r3]
 800f27a:	2a13      	cmp	r2, #19
 800f27c:	dc01      	bgt.n	800f282 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ce>
 800f27e:	2300      	movs	r3, #0
 800f280:	5eee      	ldrsh	r6, [r5, r3]
 800f282:	882b      	ldrh	r3, [r5, #0]
 800f284:	0028      	movs	r0, r5
 800f286:	189b      	adds	r3, r3, r2
 800f288:	1b9b      	subs	r3, r3, r6
 800f28a:	80ab      	strh	r3, [r5, #4]
 800f28c:	802e      	strh	r6, [r5, #0]
 800f28e:	f7ff fb71 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f292:	0028      	movs	r0, r5
 800f294:	f7fd fa04 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f298:	2800      	cmp	r0, #0
 800f29a:	d19c      	bne.n	800f1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x222>
 800f29c:	4b19      	ldr	r3, [pc, #100]	; (800f304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>)
 800f29e:	8829      	ldrh	r1, [r5, #0]
 800f2a0:	6818      	ldr	r0, [r3, #0]
 800f2a2:	88ab      	ldrh	r3, [r5, #4]
 800f2a4:	6806      	ldr	r6, [r0, #0]
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	886a      	ldrh	r2, [r5, #2]
 800f2aa:	88ed      	ldrh	r5, [r5, #6]
 800f2ac:	b22b      	sxth	r3, r5
 800f2ae:	2b14      	cmp	r3, #20
 800f2b0:	dd00      	ble.n	800f2b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>
 800f2b2:	2514      	movs	r5, #20
 800f2b4:	b2ad      	uxth	r5, r5
 800f2b6:	9500      	str	r5, [sp, #0]
 800f2b8:	6fb5      	ldr	r5, [r6, #120]	; 0x78
 800f2ba:	9b04      	ldr	r3, [sp, #16]
 800f2bc:	47a8      	blx	r5
 800f2be:	0006      	movs	r6, r0
 800f2c0:	ad09      	add	r5, sp, #36	; 0x24
 800f2c2:	80e8      	strh	r0, [r5, #6]
 800f2c4:	0028      	movs	r0, r5
 800f2c6:	f7ff fafd 	bl	800e8c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	193c      	adds	r4, r7, r4
 800f2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d0:	34ac      	adds	r4, #172	; 0xac
 800f2d2:	0029      	movs	r1, r5
 800f2d4:	0038      	movs	r0, r7
 800f2d6:	4798      	blx	r3
 800f2d8:	8823      	ldrh	r3, [r4, #0]
 800f2da:	1b9e      	subs	r6, r3, r6
 800f2dc:	b236      	sxth	r6, r6
 800f2de:	8026      	strh	r6, [r4, #0]
 800f2e0:	2e00      	cmp	r6, #0
 800f2e2:	d000      	beq.n	800f2e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x332>
 800f2e4:	e777      	b.n	800f1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x222>
 800f2e6:	466b      	mov	r3, sp
 800f2e8:	0039      	movs	r1, r7
 800f2ea:	899a      	ldrh	r2, [r3, #12]
 800f2ec:	31a8      	adds	r1, #168	; 0xa8
 800f2ee:	a80b      	add	r0, sp, #44	; 0x2c
 800f2f0:	f7ff fd4a 	bl	800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f2f4:	e76f      	b.n	800f1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x222>
 800f2f6:	46c0      	nop			; (mov r8, r8)
 800f2f8:	20003524 	.word	0x20003524
 800f2fc:	20003530 	.word	0x20003530
 800f300:	20000020 	.word	0x20000020
 800f304:	200034cc 	.word	0x200034cc
 800f308:	200034c2 	.word	0x200034c2
 800f30c:	200034c0 	.word	0x200034c0
 800f310:	200034ca 	.word	0x200034ca
 800f314:	200034c4 	.word	0x200034c4
 800f318:	428e      	cmp	r6, r1
 800f31a:	d113      	bne.n	800f344 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x390>
 800f31c:	35ac      	adds	r5, #172	; 0xac
 800f31e:	2200      	movs	r2, #0
 800f320:	5eae      	ldrsh	r6, [r5, r2]
 800f322:	001d      	movs	r5, r3
 800f324:	35ac      	adds	r5, #172	; 0xac
 800f326:	2200      	movs	r2, #0
 800f328:	5ead      	ldrsh	r5, [r5, r2]
 800f32a:	42ae      	cmp	r6, r5
 800f32c:	db01      	blt.n	800f332 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x37e>
 800f32e:	9a03      	ldr	r2, [sp, #12]
 800f330:	4694      	mov	ip, r2
 800f332:	33ae      	adds	r3, #174	; 0xae
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	1859      	adds	r1, r3, r1
 800f338:	b209      	sxth	r1, r1
 800f33a:	428c      	cmp	r4, r1
 800f33c:	dc00      	bgt.n	800f340 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38c>
 800f33e:	e097      	b.n	800f470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4bc>
 800f340:	000c      	movs	r4, r1
 800f342:	e095      	b.n	800f470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4bc>
 800f344:	428c      	cmp	r4, r1
 800f346:	dd00      	ble.n	800f34a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 800f348:	000c      	movs	r4, r1
 800f34a:	9b03      	ldr	r3, [sp, #12]
 800f34c:	469c      	mov	ip, r3
 800f34e:	e08f      	b.n	800f470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4bc>
 800f350:	9b04      	ldr	r3, [sp, #16]
 800f352:	1958      	adds	r0, r3, r5
 800f354:	197d      	adds	r5, r7, r5
 800f356:	002b      	movs	r3, r5
 800f358:	33ae      	adds	r3, #174	; 0xae
 800f35a:	2600      	movs	r6, #0
 800f35c:	5f9e      	ldrsh	r6, [r3, r6]
 800f35e:	2e13      	cmp	r6, #19
 800f360:	dc04      	bgt.n	800f36c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800f362:	002b      	movs	r3, r5
 800f364:	33aa      	adds	r3, #170	; 0xaa
 800f366:	881c      	ldrh	r4, [r3, #0]
 800f368:	19a4      	adds	r4, r4, r6
 800f36a:	b224      	sxth	r4, r4
 800f36c:	f7fd f998 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f370:	2800      	cmp	r0, #0
 800f372:	d151      	bne.n	800f418 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x464>
 800f374:	002b      	movs	r3, r5
 800f376:	33a8      	adds	r3, #168	; 0xa8
 800f378:	2100      	movs	r1, #0
 800f37a:	5e5b      	ldrsh	r3, [r3, r1]
 800f37c:	aa09      	add	r2, sp, #36	; 0x24
 800f37e:	469c      	mov	ip, r3
 800f380:	8013      	strh	r3, [r2, #0]
 800f382:	002b      	movs	r3, r5
 800f384:	33aa      	adds	r3, #170	; 0xaa
 800f386:	2100      	movs	r1, #0
 800f388:	5e59      	ldrsh	r1, [r3, r1]
 800f38a:	002b      	movs	r3, r5
 800f38c:	33ac      	adds	r3, #172	; 0xac
 800f38e:	80d0      	strh	r0, [r2, #6]
 800f390:	2000      	movs	r0, #0
 800f392:	5e1b      	ldrsh	r3, [r3, r0]
 800f394:	8051      	strh	r1, [r2, #2]
 800f396:	9305      	str	r3, [sp, #20]
 800f398:	8093      	strh	r3, [r2, #4]
 800f39a:	1a64      	subs	r4, r4, r1
 800f39c:	2c14      	cmp	r4, #20
 800f39e:	dd00      	ble.n	800f3a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ee>
 800f3a0:	2414      	movs	r4, #20
 800f3a2:	b28a      	uxth	r2, r1
 800f3a4:	b2b6      	uxth	r6, r6
 800f3a6:	1990      	adds	r0, r2, r6
 800f3a8:	b200      	sxth	r0, r0
 800f3aa:	1a41      	subs	r1, r0, r1
 800f3ac:	b2a0      	uxth	r0, r4
 800f3ae:	4288      	cmp	r0, r1
 800f3b0:	da00      	bge.n	800f3b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x400>
 800f3b2:	0006      	movs	r6, r0
 800f3b4:	493d      	ldr	r1, [pc, #244]	; (800f4ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4f8>)
 800f3b6:	466b      	mov	r3, sp
 800f3b8:	6808      	ldr	r0, [r1, #0]
 800f3ba:	4661      	mov	r1, ip
 800f3bc:	6804      	ldr	r4, [r0, #0]
 800f3be:	8a9b      	ldrh	r3, [r3, #20]
 800f3c0:	9600      	str	r6, [sp, #0]
 800f3c2:	b289      	uxth	r1, r1
 800f3c4:	6fa4      	ldr	r4, [r4, #120]	; 0x78
 800f3c6:	47a0      	blx	r4
 800f3c8:	ac09      	add	r4, sp, #36	; 0x24
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	80e0      	strh	r0, [r4, #6]
 800f3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d0:	0021      	movs	r1, r4
 800f3d2:	0038      	movs	r0, r7
 800f3d4:	4798      	blx	r3
 800f3d6:	002b      	movs	r3, r5
 800f3d8:	33aa      	adds	r3, #170	; 0xaa
 800f3da:	88e1      	ldrh	r1, [r4, #6]
 800f3dc:	881a      	ldrh	r2, [r3, #0]
 800f3de:	35ae      	adds	r5, #174	; 0xae
 800f3e0:	188a      	adds	r2, r1, r2
 800f3e2:	801a      	strh	r2, [r3, #0]
 800f3e4:	882b      	ldrh	r3, [r5, #0]
 800f3e6:	1a5b      	subs	r3, r3, r1
 800f3e8:	b21b      	sxth	r3, r3
 800f3ea:	802b      	strh	r3, [r5, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d105      	bne.n	800f3fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x448>
 800f3f0:	466b      	mov	r3, sp
 800f3f2:	9904      	ldr	r1, [sp, #16]
 800f3f4:	899a      	ldrh	r2, [r3, #12]
 800f3f6:	a80b      	add	r0, sp, #44	; 0x2c
 800f3f8:	f7ff fcc6 	bl	800ed88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f3fc:	003b      	movs	r3, r7
 800f3fe:	33e8      	adds	r3, #232	; 0xe8
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	9305      	str	r3, [sp, #20]
 800f404:	4b2a      	ldr	r3, [pc, #168]	; (800f4b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4fc>)
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	3301      	adds	r3, #1
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	9306      	str	r3, [sp, #24]
 800f40e:	00db      	lsls	r3, r3, #3
 800f410:	9307      	str	r3, [sp, #28]
 800f412:	003b      	movs	r3, r7
 800f414:	33a8      	adds	r3, #168	; 0xa8
 800f416:	9304      	str	r3, [sp, #16]
 800f418:	9b05      	ldr	r3, [sp, #20]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d100      	bne.n	800f420 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x46c>
 800f41e:	e6b4      	b.n	800f18a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 800f420:	2000      	movs	r0, #0
 800f422:	9b04      	ldr	r3, [sp, #16]
 800f424:	885c      	ldrh	r4, [r3, #2]
 800f426:	88db      	ldrh	r3, [r3, #6]
 800f428:	9003      	str	r0, [sp, #12]
 800f42a:	18e4      	adds	r4, r4, r3
 800f42c:	b224      	sxth	r4, r4
 800f42e:	9b06      	ldr	r3, [sp, #24]
 800f430:	9903      	ldr	r1, [sp, #12]
 800f432:	181a      	adds	r2, r3, r0
 800f434:	00cd      	lsls	r5, r1, #3
 800f436:	9905      	ldr	r1, [sp, #20]
 800f438:	b293      	uxth	r3, r2
 800f43a:	4299      	cmp	r1, r3
 800f43c:	d800      	bhi.n	800f440 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x48c>
 800f43e:	e787      	b.n	800f350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x39c>
 800f440:	197d      	adds	r5, r7, r5
 800f442:	002b      	movs	r3, r5
 800f444:	9907      	ldr	r1, [sp, #28]
 800f446:	33aa      	adds	r3, #170	; 0xaa
 800f448:	2600      	movs	r6, #0
 800f44a:	5f9e      	ldrsh	r6, [r3, r6]
 800f44c:	00c3      	lsls	r3, r0, #3
 800f44e:	185b      	adds	r3, r3, r1
 800f450:	18fb      	adds	r3, r7, r3
 800f452:	0019      	movs	r1, r3
 800f454:	31aa      	adds	r1, #170	; 0xaa
 800f456:	4694      	mov	ip, r2
 800f458:	2200      	movs	r2, #0
 800f45a:	5e89      	ldrsh	r1, [r1, r2]
 800f45c:	428e      	cmp	r6, r1
 800f45e:	dc00      	bgt.n	800f462 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4ae>
 800f460:	e75a      	b.n	800f318 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x364>
 800f462:	33ae      	adds	r3, #174	; 0xae
 800f464:	881c      	ldrh	r4, [r3, #0]
 800f466:	1864      	adds	r4, r4, r1
 800f468:	b224      	sxth	r4, r4
 800f46a:	42b4      	cmp	r4, r6
 800f46c:	dd00      	ble.n	800f470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4bc>
 800f46e:	0034      	movs	r4, r6
 800f470:	4663      	mov	r3, ip
 800f472:	3001      	adds	r0, #1
 800f474:	9303      	str	r3, [sp, #12]
 800f476:	e7da      	b.n	800f42e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x47a>
 800f478:	8833      	ldrh	r3, [r6, #0]
 800f47a:	42a3      	cmp	r3, r4
 800f47c:	d800      	bhi.n	800f480 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4cc>
 800f47e:	e684      	b.n	800f18a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 800f480:	0039      	movs	r1, r7
 800f482:	00e3      	lsls	r3, r4, #3
 800f484:	31a8      	adds	r1, #168	; 0xa8
 800f486:	18c9      	adds	r1, r1, r3
 800f488:	2208      	movs	r2, #8
 800f48a:	a80b      	add	r0, sp, #44	; 0x2c
 800f48c:	f003 fd26 	bl	8012edc <memcpy>
 800f490:	a80b      	add	r0, sp, #44	; 0x2c
 800f492:	f7fd f905 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f496:	2800      	cmp	r0, #0
 800f498:	d104      	bne.n	800f4a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4f0>
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	a90b      	add	r1, sp, #44	; 0x2c
 800f49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a0:	0038      	movs	r0, r7
 800f4a2:	4798      	blx	r3
 800f4a4:	3401      	adds	r4, #1
 800f4a6:	b2a4      	uxth	r4, r4
 800f4a8:	e7e6      	b.n	800f478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4c4>
 800f4aa:	46c0      	nop			; (mov r8, r8)
 800f4ac:	200034cc 	.word	0x200034cc
 800f4b0:	20000020 	.word	0x20000020

0800f4b4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800f4b8:	801a      	strh	r2, [r3, #0]
 800f4ba:	805a      	strh	r2, [r3, #2]
 800f4bc:	809a      	strh	r2, [r3, #4]
 800f4be:	80da      	strh	r2, [r3, #6]
 800f4c0:	4770      	bx	lr
 800f4c2:	46c0      	nop			; (mov r8, r8)
 800f4c4:	20003530 	.word	0x20003530

0800f4c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800f4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ca:	0007      	movs	r7, r0
 800f4cc:	0014      	movs	r4, r2
 800f4ce:	001d      	movs	r5, r3
 800f4d0:	2600      	movs	r6, #0
 800f4d2:	b09d      	sub	sp, #116	; 0x74
 800f4d4:	a806      	add	r0, sp, #24
 800f4d6:	9103      	str	r1, [sp, #12]
 800f4d8:	f000 fdc6 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	0038      	movs	r0, r7
 800f4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4e2:	4798      	blx	r3
 800f4e4:	002a      	movs	r2, r5
 800f4e6:	0021      	movs	r1, r4
 800f4e8:	0035      	movs	r5, r6
 800f4ea:	0034      	movs	r4, r6
 800f4ec:	0003      	movs	r3, r0
 800f4ee:	a806      	add	r0, sp, #24
 800f4f0:	f000 fe03 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f4f4:	9601      	str	r6, [sp, #4]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9305      	str	r3, [sp, #20]
 800f4fa:	4b1a      	ldr	r3, [pc, #104]	; (800f564 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x9c>)
 800f4fc:	429c      	cmp	r4, r3
 800f4fe:	d003      	beq.n	800f508 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800f500:	4b19      	ldr	r3, [pc, #100]	; (800f568 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0xa0>)
 800f502:	429c      	cmp	r4, r3
 800f504:	d000      	beq.n	800f508 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800f506:	0026      	movs	r6, r4
 800f508:	ab05      	add	r3, sp, #20
 800f50a:	003a      	movs	r2, r7
 800f50c:	9903      	ldr	r1, [sp, #12]
 800f50e:	a806      	add	r0, sp, #24
 800f510:	f001 f8f0 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f514:	1e04      	subs	r4, r0, #0
 800f516:	d001      	beq.n	800f51c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>
 800f518:	280a      	cmp	r0, #10
 800f51a:	d10d      	bne.n	800f538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 800f51c:	9a01      	ldr	r2, [sp, #4]
 800f51e:	1c2b      	adds	r3, r5, #0
 800f520:	4295      	cmp	r5, r2
 800f522:	d201      	bcs.n	800f528 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x60>
 800f524:	466b      	mov	r3, sp
 800f526:	889b      	ldrh	r3, [r3, #4]
 800f528:	2500      	movs	r5, #0
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	2c00      	cmp	r4, #0
 800f530:	d1e1      	bne.n	800f4f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x2e>
 800f532:	9801      	ldr	r0, [sp, #4]
 800f534:	b01d      	add	sp, #116	; 0x74
 800f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f538:	9a05      	ldr	r2, [sp, #20]
 800f53a:	2a00      	cmp	r2, #0
 800f53c:	d0db      	beq.n	800f4f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x2e>
 800f53e:	2380      	movs	r3, #128	; 0x80
 800f540:	7b50      	ldrb	r0, [r2, #13]
 800f542:	005b      	lsls	r3, r3, #1
 800f544:	0040      	lsls	r0, r0, #1
 800f546:	4018      	ands	r0, r3
 800f548:	7a93      	ldrb	r3, [r2, #10]
 800f54a:	8894      	ldrh	r4, [r2, #4]
 800f54c:	4303      	orrs	r3, r0
 800f54e:	9302      	str	r3, [sp, #8]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	0031      	movs	r1, r6
 800f554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f556:	0038      	movs	r0, r7
 800f558:	4798      	blx	r3
 800f55a:	9b02      	ldr	r3, [sp, #8]
 800f55c:	18c0      	adds	r0, r0, r3
 800f55e:	182d      	adds	r5, r5, r0
 800f560:	b2ad      	uxth	r5, r5
 800f562:	e7e4      	b.n	800f52e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800f564:	0000feff 	.word	0x0000feff
 800f568:	0000200b 	.word	0x0000200b

0800f56c <_ZNK8touchgfx4Font12getCharWidthEt>:
 800f56c:	b510      	push	{r4, lr}
 800f56e:	6803      	ldr	r3, [r0, #0]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	4798      	blx	r3
 800f574:	1e03      	subs	r3, r0, #0
 800f576:	d006      	beq.n	800f586 <_ZNK8touchgfx4Font12getCharWidthEt+0x1a>
 800f578:	2280      	movs	r2, #128	; 0x80
 800f57a:	7b43      	ldrb	r3, [r0, #13]
 800f57c:	0052      	lsls	r2, r2, #1
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	7a80      	ldrb	r0, [r0, #10]
 800f582:	4013      	ands	r3, r2
 800f584:	4303      	orrs	r3, r0
 800f586:	0018      	movs	r0, r3
 800f588:	bd10      	pop	{r4, pc}
	...

0800f58c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800f58c:	b40e      	push	{r1, r2, r3}
 800f58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f590:	0005      	movs	r5, r0
 800f592:	b098      	sub	sp, #96	; 0x60
 800f594:	ab1d      	add	r3, sp, #116	; 0x74
 800f596:	cb10      	ldmia	r3!, {r4}
 800f598:	a802      	add	r0, sp, #8
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	f000 fd64 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	0028      	movs	r0, r5
 800f5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5a6:	4798      	blx	r3
 800f5a8:	0021      	movs	r1, r4
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	0003      	movs	r3, r0
 800f5ae:	9a00      	ldr	r2, [sp, #0]
 800f5b0:	a802      	add	r0, sp, #8
 800f5b2:	f000 fda2 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f5b6:	2680      	movs	r6, #128	; 0x80
 800f5b8:	ab01      	add	r3, sp, #4
 800f5ba:	002a      	movs	r2, r5
 800f5bc:	0021      	movs	r1, r4
 800f5be:	a802      	add	r0, sp, #8
 800f5c0:	9401      	str	r4, [sp, #4]
 800f5c2:	2740      	movs	r7, #64	; 0x40
 800f5c4:	f001 f896 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f5c8:	0076      	lsls	r6, r6, #1
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d021      	beq.n	800f612 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800f5ce:	280a      	cmp	r0, #10
 800f5d0:	d018      	beq.n	800f604 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x78>
 800f5d2:	9a01      	ldr	r2, [sp, #4]
 800f5d4:	2a00      	cmp	r2, #0
 800f5d6:	d015      	beq.n	800f604 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x78>
 800f5d8:	88ab      	ldrh	r3, [r5, #4]
 800f5da:	7b50      	ldrb	r0, [r2, #13]
 800f5dc:	469c      	mov	ip, r3
 800f5de:	7a11      	ldrb	r1, [r2, #8]
 800f5e0:	00c3      	lsls	r3, r0, #3
 800f5e2:	4033      	ands	r3, r6
 800f5e4:	4319      	orrs	r1, r3
 800f5e6:	4238      	tst	r0, r7
 800f5e8:	d002      	beq.n	800f5f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x64>
 800f5ea:	4b0d      	ldr	r3, [pc, #52]	; (800f620 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>)
 800f5ec:	18c9      	adds	r1, r1, r3
 800f5ee:	b209      	sxth	r1, r1
 800f5f0:	0100      	lsls	r0, r0, #4
 800f5f2:	79d3      	ldrb	r3, [r2, #7]
 800f5f4:	4030      	ands	r0, r6
 800f5f6:	4303      	orrs	r3, r0
 800f5f8:	4463      	add	r3, ip
 800f5fa:	1a5b      	subs	r3, r3, r1
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	42a3      	cmp	r3, r4
 800f600:	dd00      	ble.n	800f604 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x78>
 800f602:	b21c      	sxth	r4, r3
 800f604:	ab01      	add	r3, sp, #4
 800f606:	002a      	movs	r2, r5
 800f608:	2100      	movs	r1, #0
 800f60a:	a802      	add	r0, sp, #8
 800f60c:	f001 f872 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f610:	e7db      	b.n	800f5ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x3e>
 800f612:	b2a0      	uxth	r0, r4
 800f614:	b018      	add	sp, #96	; 0x60
 800f616:	bcf0      	pop	{r4, r5, r6, r7}
 800f618:	bc08      	pop	{r3}
 800f61a:	b003      	add	sp, #12
 800f61c:	4718      	bx	r3
 800f61e:	46c0      	nop			; (mov r8, r8)
 800f620:	fffffe00 	.word	0xfffffe00

0800f624 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800f624:	b40e      	push	{r1, r2, r3}
 800f626:	b530      	push	{r4, r5, lr}
 800f628:	0004      	movs	r4, r0
 800f62a:	b098      	sub	sp, #96	; 0x60
 800f62c:	ab1b      	add	r3, sp, #108	; 0x6c
 800f62e:	cb20      	ldmia	r3!, {r5}
 800f630:	a802      	add	r0, sp, #8
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	f000 fd18 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	0020      	movs	r0, r4
 800f63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63e:	4798      	blx	r3
 800f640:	9a01      	ldr	r2, [sp, #4]
 800f642:	0003      	movs	r3, r0
 800f644:	0029      	movs	r1, r5
 800f646:	a802      	add	r0, sp, #8
 800f648:	f000 fd57 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f64c:	a802      	add	r0, sp, #8
 800f64e:	f001 f967 	bl	8010920 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f652:	2401      	movs	r4, #1
 800f654:	b2a3      	uxth	r3, r4
 800f656:	2800      	cmp	r0, #0
 800f658:	d007      	beq.n	800f66a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 800f65a:	280a      	cmp	r0, #10
 800f65c:	d101      	bne.n	800f662 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800f65e:	3301      	adds	r3, #1
 800f660:	b21c      	sxth	r4, r3
 800f662:	a802      	add	r0, sp, #8
 800f664:	f001 f95c 	bl	8010920 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f668:	e7f4      	b.n	800f654 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x30>
 800f66a:	0018      	movs	r0, r3
 800f66c:	b018      	add	sp, #96	; 0x60
 800f66e:	bc30      	pop	{r4, r5}
 800f670:	bc08      	pop	{r3}
 800f672:	b003      	add	sp, #12
 800f674:	4718      	bx	r3
	...

0800f678 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800f678:	b40e      	push	{r1, r2, r3}
 800f67a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f67c:	0004      	movs	r4, r0
 800f67e:	b098      	sub	sp, #96	; 0x60
 800f680:	ab1d      	add	r3, sp, #116	; 0x74
 800f682:	cb20      	ldmia	r3!, {r5}
 800f684:	a802      	add	r0, sp, #8
 800f686:	9300      	str	r3, [sp, #0]
 800f688:	f000 fcee 	bl	8010068 <_ZN8touchgfx12TextProviderC1Ev>
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	0020      	movs	r0, r4
 800f690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f692:	4798      	blx	r3
 800f694:	0029      	movs	r1, r5
 800f696:	0003      	movs	r3, r0
 800f698:	9a00      	ldr	r2, [sp, #0]
 800f69a:	a802      	add	r0, sp, #8
 800f69c:	f000 fd2d 	bl	80100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	ab01      	add	r3, sp, #4
 800f6a4:	0022      	movs	r2, r4
 800f6a6:	a802      	add	r0, sp, #8
 800f6a8:	2680      	movs	r6, #128	; 0x80
 800f6aa:	9101      	str	r1, [sp, #4]
 800f6ac:	25ff      	movs	r5, #255	; 0xff
 800f6ae:	f001 f821 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f6b2:	2740      	movs	r7, #64	; 0x40
 800f6b4:	0076      	lsls	r6, r6, #1
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d01d      	beq.n	800f6f6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x7e>
 800f6ba:	280a      	cmp	r0, #10
 800f6bc:	d014      	beq.n	800f6e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x70>
 800f6be:	9b01      	ldr	r3, [sp, #4]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d011      	beq.n	800f6e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x70>
 800f6c4:	7b58      	ldrb	r0, [r3, #13]
 800f6c6:	7a1b      	ldrb	r3, [r3, #8]
 800f6c8:	00c1      	lsls	r1, r0, #3
 800f6ca:	4031      	ands	r1, r6
 800f6cc:	7922      	ldrb	r2, [r4, #4]
 800f6ce:	430b      	orrs	r3, r1
 800f6d0:	4238      	tst	r0, r7
 800f6d2:	d002      	beq.n	800f6da <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x62>
 800f6d4:	490b      	ldr	r1, [pc, #44]	; (800f704 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x8c>)
 800f6d6:	185b      	adds	r3, r3, r1
 800f6d8:	b21b      	sxth	r3, r3
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	1c1a      	adds	r2, r3, #0
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	42ab      	cmp	r3, r5
 800f6e2:	d900      	bls.n	800f6e6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6e>
 800f6e4:	1c2a      	adds	r2, r5, #0
 800f6e6:	b2d5      	uxtb	r5, r2
 800f6e8:	ab01      	add	r3, sp, #4
 800f6ea:	0022      	movs	r2, r4
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	a802      	add	r0, sp, #8
 800f6f0:	f001 f800 	bl	80106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f6f4:	e7df      	b.n	800f6b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 800f6f6:	0028      	movs	r0, r5
 800f6f8:	b018      	add	sp, #96	; 0x60
 800f6fa:	bcf0      	pop	{r4, r5, r6, r7}
 800f6fc:	bc08      	pop	{r3}
 800f6fe:	b003      	add	sp, #12
 800f700:	4718      	bx	r3
 800f702:	46c0      	nop			; (mov r8, r8)
 800f704:	fffffe00 	.word	0xfffffe00

0800f708 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800f708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f70a:	4669      	mov	r1, sp
 800f70c:	000a      	movs	r2, r1
 800f70e:	1d03      	adds	r3, r0, #4
 800f710:	cb30      	ldmia	r3!, {r4, r5}
 800f712:	c230      	stmia	r2!, {r4, r5}
 800f714:	2300      	movs	r3, #0
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	6803      	ldr	r3, [r0, #0]
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	4798      	blx	r3
 800f71e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800f720 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800f720:	b570      	push	{r4, r5, r6, lr}
 800f722:	000c      	movs	r4, r1
 800f724:	0005      	movs	r5, r0
 800f726:	680b      	ldr	r3, [r1, #0]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	4798      	blx	r3
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	0029      	movs	r1, r5
 800f730:	0020      	movs	r0, r4
 800f732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f734:	4798      	blx	r3
 800f736:	0028      	movs	r0, r5
 800f738:	bd70      	pop	{r4, r5, r6, pc}

0800f73a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800f73a:	b510      	push	{r4, lr}
 800f73c:	880b      	ldrh	r3, [r1, #0]
 800f73e:	8882      	ldrh	r2, [r0, #4]
 800f740:	189b      	adds	r3, r3, r2
 800f742:	800b      	strh	r3, [r1, #0]
 800f744:	88c2      	ldrh	r2, [r0, #6]
 800f746:	884b      	ldrh	r3, [r1, #2]
 800f748:	189b      	adds	r3, r3, r2
 800f74a:	804b      	strh	r3, [r1, #2]
 800f74c:	6940      	ldr	r0, [r0, #20]
 800f74e:	2800      	cmp	r0, #0
 800f750:	d002      	beq.n	800f758 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x1e>
 800f752:	6803      	ldr	r3, [r0, #0]
 800f754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f756:	4798      	blx	r3
 800f758:	bd10      	pop	{r4, pc}

0800f75a <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800f75a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75c:	0004      	movs	r4, r0
 800f75e:	0008      	movs	r0, r1
 800f760:	0003      	movs	r3, r0
 800f762:	b085      	sub	sp, #20
 800f764:	0011      	movs	r1, r2
 800f766:	4313      	orrs	r3, r2
 800f768:	d01f      	beq.n	800f7aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 800f76a:	466e      	mov	r6, sp
 800f76c:	0032      	movs	r2, r6
 800f76e:	1d23      	adds	r3, r4, #4
 800f770:	cba0      	ldmia	r3!, {r5, r7}
 800f772:	c2a0      	stmia	r2!, {r5, r7}
 800f774:	88e2      	ldrh	r2, [r4, #6]
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	1852      	adds	r2, r2, r1
 800f77a:	88a1      	ldrh	r1, [r4, #4]
 800f77c:	b212      	sxth	r2, r2
 800f77e:	1809      	adds	r1, r1, r0
 800f780:	b209      	sxth	r1, r1
 800f782:	0020      	movs	r0, r4
 800f784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f786:	ad02      	add	r5, sp, #8
 800f788:	4798      	blx	r3
 800f78a:	002a      	movs	r2, r5
 800f78c:	1d23      	adds	r3, r4, #4
 800f78e:	cb03      	ldmia	r3!, {r0, r1}
 800f790:	c203      	stmia	r2!, {r0, r1}
 800f792:	6960      	ldr	r0, [r4, #20]
 800f794:	2800      	cmp	r0, #0
 800f796:	d00a      	beq.n	800f7ae <_ZN8touchgfx8Drawable12moveRelativeEss+0x54>
 800f798:	6803      	ldr	r3, [r0, #0]
 800f79a:	0031      	movs	r1, r6
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	4798      	blx	r3
 800f7a0:	6960      	ldr	r0, [r4, #20]
 800f7a2:	6803      	ldr	r3, [r0, #0]
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	0029      	movs	r1, r5
 800f7a8:	4798      	blx	r3
 800f7aa:	b005      	add	sp, #20
 800f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ae:	f7ff fa81 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800f7b2:	6803      	ldr	r3, [r0, #0]
 800f7b4:	0031      	movs	r1, r6
 800f7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7b8:	4798      	blx	r3
 800f7ba:	f7ff fa7b 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800f7be:	6803      	ldr	r3, [r0, #0]
 800f7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7c2:	e7f0      	b.n	800f7a6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>

0800f7c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800f7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7c6:	000c      	movs	r4, r1
 800f7c8:	0005      	movs	r5, r0
 800f7ca:	8882      	ldrh	r2, [r0, #4]
 800f7cc:	880b      	ldrh	r3, [r1, #0]
 800f7ce:	189b      	adds	r3, r3, r2
 800f7d0:	800b      	strh	r3, [r1, #0]
 800f7d2:	88c2      	ldrh	r2, [r0, #6]
 800f7d4:	884b      	ldrh	r3, [r1, #2]
 800f7d6:	189b      	adds	r3, r3, r2
 800f7d8:	804b      	strh	r3, [r1, #2]
 800f7da:	2208      	movs	r2, #8
 800f7dc:	1d01      	adds	r1, r0, #4
 800f7de:	4668      	mov	r0, sp
 800f7e0:	f003 fb7c 	bl	8012edc <memcpy>
 800f7e4:	0021      	movs	r1, r4
 800f7e6:	4668      	mov	r0, sp
 800f7e8:	f7fc ff0a 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800f7ec:	2208      	movs	r2, #8
 800f7ee:	4669      	mov	r1, sp
 800f7f0:	0020      	movs	r0, r4
 800f7f2:	f003 fb73 	bl	8012edc <memcpy>
 800f7f6:	6968      	ldr	r0, [r5, #20]
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d004      	beq.n	800f806 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 800f7fc:	6803      	ldr	r3, [r0, #0]
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	0021      	movs	r1, r4
 800f802:	4798      	blx	r3
 800f804:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800f806:	f7ff fa55 	bl	800ecb4 <_ZN8touchgfx11Application11getInstanceEv>
 800f80a:	6803      	ldr	r3, [r0, #0]
 800f80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80e:	e7f7      	b.n	800f800 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3c>

0800f810 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	000c      	movs	r4, r1
 800f814:	8882      	ldrh	r2, [r0, #4]
 800f816:	880b      	ldrh	r3, [r1, #0]
 800f818:	0005      	movs	r5, r0
 800f81a:	189b      	adds	r3, r3, r2
 800f81c:	800b      	strh	r3, [r1, #0]
 800f81e:	88c2      	ldrh	r2, [r0, #6]
 800f820:	884b      	ldrh	r3, [r1, #2]
 800f822:	189b      	adds	r3, r3, r2
 800f824:	804b      	strh	r3, [r1, #2]
 800f826:	1d01      	adds	r1, r0, #4
 800f828:	0020      	movs	r0, r4
 800f82a:	f7fc fee9 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800f82e:	2204      	movs	r2, #4
 800f830:	5ea3      	ldrsh	r3, [r4, r2]
 800f832:	2b00      	cmp	r3, #0
 800f834:	dd0a      	ble.n	800f84c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3c>
 800f836:	2206      	movs	r2, #6
 800f838:	5ea3      	ldrsh	r3, [r4, r2]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	dd06      	ble.n	800f84c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3c>
 800f83e:	6968      	ldr	r0, [r5, #20]
 800f840:	2800      	cmp	r0, #0
 800f842:	d003      	beq.n	800f84c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3c>
 800f844:	6803      	ldr	r3, [r0, #0]
 800f846:	0021      	movs	r1, r4
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	4798      	blx	r3
 800f84c:	bd70      	pop	{r4, r5, r6, pc}

0800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800f84e:	b510      	push	{r4, lr}
 800f850:	0004      	movs	r4, r0
 800f852:	0008      	movs	r0, r1
 800f854:	2308      	movs	r3, #8
 800f856:	5ec9      	ldrsh	r1, [r1, r3]
 800f858:	230a      	movs	r3, #10
 800f85a:	5ec2      	ldrsh	r2, [r0, r3]
 800f85c:	2300      	movs	r3, #0
 800f85e:	8023      	strh	r3, [r4, #0]
 800f860:	8063      	strh	r3, [r4, #2]
 800f862:	6803      	ldr	r3, [r0, #0]
 800f864:	80a1      	strh	r1, [r4, #4]
 800f866:	80e2      	strh	r2, [r4, #6]
 800f868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86a:	0021      	movs	r1, r4
 800f86c:	4798      	blx	r3
 800f86e:	0020      	movs	r0, r4
 800f870:	bd10      	pop	{r4, pc}
	...

0800f874 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800f874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f876:	ac08      	add	r4, sp, #32
 800f878:	7825      	ldrb	r5, [r4, #0]
 800f87a:	af0b      	add	r7, sp, #44	; 0x2c
 800f87c:	783f      	ldrb	r7, [r7, #0]
 800f87e:	7185      	strb	r5, [r0, #6]
 800f880:	257f      	movs	r5, #127	; 0x7f
 800f882:	9700      	str	r7, [sp, #0]
 800f884:	af0c      	add	r7, sp, #48	; 0x30
 800f886:	783f      	ldrb	r7, [r7, #0]
 800f888:	ac09      	add	r4, sp, #36	; 0x24
 800f88a:	9701      	str	r7, [sp, #4]
 800f88c:	af0d      	add	r7, sp, #52	; 0x34
 800f88e:	883f      	ldrh	r7, [r7, #0]
 800f890:	7826      	ldrb	r6, [r4, #0]
 800f892:	46bc      	mov	ip, r7
 800f894:	8083      	strh	r3, [r0, #4]
 800f896:	79c3      	ldrb	r3, [r0, #7]
 800f898:	ac0a      	add	r4, sp, #40	; 0x28
 800f89a:	402e      	ands	r6, r5
 800f89c:	43ab      	bics	r3, r5
 800f89e:	7824      	ldrb	r4, [r4, #0]
 800f8a0:	4333      	orrs	r3, r6
 800f8a2:	402b      	ands	r3, r5
 800f8a4:	01e4      	lsls	r4, r4, #7
 800f8a6:	431c      	orrs	r4, r3
 800f8a8:	9b00      	ldr	r3, [sp, #0]
 800f8aa:	af0e      	add	r7, sp, #56	; 0x38
 800f8ac:	7203      	strb	r3, [r0, #8]
 800f8ae:	9b01      	ldr	r3, [sp, #4]
 800f8b0:	883f      	ldrh	r7, [r7, #0]
 800f8b2:	7243      	strb	r3, [r0, #9]
 800f8b4:	4663      	mov	r3, ip
 800f8b6:	8143      	strh	r3, [r0, #10]
 800f8b8:	4b03      	ldr	r3, [pc, #12]	; (800f8c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x54>)
 800f8ba:	8187      	strh	r7, [r0, #12]
 800f8bc:	3308      	adds	r3, #8
 800f8be:	71c4      	strb	r4, [r0, #7]
 800f8c0:	6003      	str	r3, [r0, #0]
 800f8c2:	6101      	str	r1, [r0, #16]
 800f8c4:	8282      	strh	r2, [r0, #20]
 800f8c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f8c8:	080168a8 	.word	0x080168a8

0800f8cc <_ZNK8touchgfx9ConstFont4findEt>:
 800f8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ce:	8a82      	ldrh	r2, [r0, #20]
 800f8d0:	6905      	ldr	r5, [r0, #16]
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	88ab      	ldrh	r3, [r5, #4]
 800f8d6:	3a01      	subs	r2, #1
 800f8d8:	1acb      	subs	r3, r1, r3
 800f8da:	4283      	cmp	r3, r0
 800f8dc:	db33      	blt.n	800f946 <_ZNK8touchgfx9ConstFont4findEt+0x7a>
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	dd0c      	ble.n	800f8fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800f8e2:	230e      	movs	r3, #14
 800f8e4:	4353      	muls	r3, r2
 800f8e6:	18eb      	adds	r3, r5, r3
 800f8e8:	889b      	ldrh	r3, [r3, #4]
 800f8ea:	1a5b      	subs	r3, r3, r1
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	db29      	blt.n	800f946 <_ZNK8touchgfx9ConstFont4findEt+0x7a>
 800f8f2:	4283      	cmp	r3, r0
 800f8f4:	da02      	bge.n	800f8fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800f8f6:	0fd3      	lsrs	r3, r2, #31
 800f8f8:	189b      	adds	r3, r3, r2
 800f8fa:	105b      	asrs	r3, r3, #1
 800f8fc:	2400      	movs	r4, #0
 800f8fe:	260e      	movs	r6, #14
 800f900:	4294      	cmp	r4, r2
 800f902:	dc1f      	bgt.n	800f944 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f904:	0030      	movs	r0, r6
 800f906:	4358      	muls	r0, r3
 800f908:	1828      	adds	r0, r5, r0
 800f90a:	8887      	ldrh	r7, [r0, #4]
 800f90c:	42b9      	cmp	r1, r7
 800f90e:	d01a      	beq.n	800f946 <_ZNK8touchgfx9ConstFont4findEt+0x7a>
 800f910:	d20d      	bcs.n	800f92e <_ZNK8touchgfx9ConstFont4findEt+0x62>
 800f912:	1e5a      	subs	r2, r3, #1
 800f914:	4294      	cmp	r4, r2
 800f916:	dc15      	bgt.n	800f944 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f918:	380e      	subs	r0, #14
 800f91a:	8883      	ldrh	r3, [r0, #4]
 800f91c:	1a5b      	subs	r3, r3, r1
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	429a      	cmp	r2, r3
 800f922:	db0f      	blt.n	800f944 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f924:	429c      	cmp	r4, r3
 800f926:	ddeb      	ble.n	800f900 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f928:	1913      	adds	r3, r2, r4
 800f92a:	105b      	asrs	r3, r3, #1
 800f92c:	e7e8      	b.n	800f900 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f92e:	1c5c      	adds	r4, r3, #1
 800f930:	42a2      	cmp	r2, r4
 800f932:	db07      	blt.n	800f944 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f934:	8a43      	ldrh	r3, [r0, #18]
 800f936:	1acb      	subs	r3, r1, r3
 800f938:	191b      	adds	r3, r3, r4
 800f93a:	429c      	cmp	r4, r3
 800f93c:	dc02      	bgt.n	800f944 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f93e:	429a      	cmp	r2, r3
 800f940:	dade      	bge.n	800f900 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f942:	e7f1      	b.n	800f928 <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 800f944:	2000      	movs	r0, #0
 800f946:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f948 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800f948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f94a:	0004      	movs	r4, r0
 800f94c:	0017      	movs	r7, r2
 800f94e:	001e      	movs	r6, r3
 800f950:	2900      	cmp	r1, #0
 800f952:	d102      	bne.n	800f95a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 800f954:	2500      	movs	r5, #0
 800f956:	0028      	movs	r0, r5
 800f958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f95a:	290a      	cmp	r1, #10
 800f95c:	d0fa      	beq.n	800f954 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 800f95e:	4b10      	ldr	r3, [pc, #64]	; (800f9a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x58>)
 800f960:	4299      	cmp	r1, r3
 800f962:	d0f7      	beq.n	800f954 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 800f964:	4b0f      	ldr	r3, [pc, #60]	; (800f9a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x5c>)
 800f966:	4299      	cmp	r1, r3
 800f968:	d0f4      	beq.n	800f954 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 800f96a:	f7ff ffaf 	bl	800f8cc <_ZNK8touchgfx9ConstFont4findEt>
 800f96e:	1e05      	subs	r5, r0, #0
 800f970:	d109      	bne.n	800f986 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x3e>
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	0020      	movs	r0, r4
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	4798      	blx	r3
 800f97a:	0001      	movs	r1, r0
 800f97c:	0020      	movs	r0, r4
 800f97e:	f7ff ffa5 	bl	800f8cc <_ZNK8touchgfx9ConstFont4findEt>
 800f982:	1e05      	subs	r5, r0, #0
 800f984:	d0e6      	beq.n	800f954 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	0029      	movs	r1, r5
 800f98a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f98c:	0020      	movs	r0, r4
 800f98e:	4798      	blx	r3
 800f990:	6038      	str	r0, [r7, #0]
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	0020      	movs	r0, r4
 800f996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f998:	4798      	blx	r3
 800f99a:	7030      	strb	r0, [r6, #0]
 800f99c:	e7db      	b.n	800f956 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xe>
 800f99e:	46c0      	nop			; (mov r8, r8)
 800f9a0:	0000feff 	.word	0x0000feff
 800f9a4:	0000200b 	.word	0x0000200b

0800f9a8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	4770      	bx	lr

0800f9ac <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 800f9ac:	2001      	movs	r0, #1
 800f9ae:	4770      	bx	lr

0800f9b0 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 800f9b0:	2002      	movs	r0, #2
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZN8touchgfx12GestureEventD1Ev>:
 800f9b4:	4770      	bx	lr

0800f9b6 <_ZN8touchgfx9DragEventD1Ev>:
 800f9b6:	4770      	bx	lr

0800f9b8 <_ZN8touchgfx10ClickEventD1Ev>:
 800f9b8:	4770      	bx	lr

0800f9ba <_ZN8touchgfx10ClickEventD0Ev>:
 800f9ba:	b510      	push	{r4, lr}
 800f9bc:	0004      	movs	r4, r0
 800f9be:	210c      	movs	r1, #12
 800f9c0:	f003 f9eb 	bl	8012d9a <_ZdlPvj>
 800f9c4:	0020      	movs	r0, r4
 800f9c6:	bd10      	pop	{r4, pc}

0800f9c8 <_ZN8touchgfx9DragEventD0Ev>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	0004      	movs	r4, r0
 800f9cc:	2110      	movs	r1, #16
 800f9ce:	f003 f9e4 	bl	8012d9a <_ZdlPvj>
 800f9d2:	0020      	movs	r0, r4
 800f9d4:	bd10      	pop	{r4, pc}

0800f9d6 <_ZN8touchgfx12GestureEventD0Ev>:
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	0004      	movs	r4, r0
 800f9da:	210c      	movs	r1, #12
 800f9dc:	f003 f9dd 	bl	8012d9a <_ZdlPvj>
 800f9e0:	0020      	movs	r0, r4
 800f9e2:	bd10      	pop	{r4, pc}

0800f9e4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800f9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9e6:	000d      	movs	r5, r1
 800f9e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	0004      	movs	r4, r0
 800f9ee:	2900      	cmp	r1, #0
 800f9f0:	d01b      	beq.n	800fa2a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x46>
 800f9f2:	ae01      	add	r6, sp, #4
 800f9f4:	0030      	movs	r0, r6
 800f9f6:	f7ff ff2a 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f9fa:	2306      	movs	r3, #6
 800f9fc:	5ee8      	ldrsh	r0, [r5, r3]
 800f9fe:	892a      	ldrh	r2, [r5, #8]
 800fa00:	8833      	ldrh	r3, [r6, #0]
 800fa02:	8871      	ldrh	r1, [r6, #2]
 800fa04:	1ad2      	subs	r2, r2, r3
 800fa06:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800fa08:	792f      	ldrb	r7, [r5, #4]
 800fa0a:	18d2      	adds	r2, r2, r3
 800fa0c:	896b      	ldrh	r3, [r5, #10]
 800fa0e:	4d08      	ldr	r5, [pc, #32]	; (800fa30 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4c>)
 800fa10:	1a5b      	subs	r3, r3, r1
 800fa12:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800fa14:	9503      	str	r5, [sp, #12]
 800fa16:	185b      	adds	r3, r3, r1
 800fa18:	a903      	add	r1, sp, #12
 800fa1a:	80c8      	strh	r0, [r1, #6]
 800fa1c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fa1e:	710f      	strb	r7, [r1, #4]
 800fa20:	810a      	strh	r2, [r1, #8]
 800fa22:	814b      	strh	r3, [r1, #10]
 800fa24:	6803      	ldr	r3, [r0, #0]
 800fa26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa28:	4798      	blx	r3
 800fa2a:	b007      	add	sp, #28
 800fa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa2e:	46c0      	nop			; (mov r8, r8)
 800fa30:	0801692c 	.word	0x0801692c

0800fa34 <_ZNK8touchgfx4Rect9intersectEss>:
 800fa34:	b530      	push	{r4, r5, lr}
 800fa36:	2300      	movs	r3, #0
 800fa38:	5ec5      	ldrsh	r5, [r0, r3]
 800fa3a:	2400      	movs	r4, #0
 800fa3c:	428d      	cmp	r5, r1
 800fa3e:	dc10      	bgt.n	800fa62 <_ZNK8touchgfx4Rect9intersectEss+0x2e>
 800fa40:	8883      	ldrh	r3, [r0, #4]
 800fa42:	195b      	adds	r3, r3, r5
 800fa44:	b21b      	sxth	r3, r3
 800fa46:	4299      	cmp	r1, r3
 800fa48:	da0b      	bge.n	800fa62 <_ZNK8touchgfx4Rect9intersectEss+0x2e>
 800fa4a:	2302      	movs	r3, #2
 800fa4c:	5ec1      	ldrsh	r1, [r0, r3]
 800fa4e:	4291      	cmp	r1, r2
 800fa50:	dc07      	bgt.n	800fa62 <_ZNK8touchgfx4Rect9intersectEss+0x2e>
 800fa52:	88c3      	ldrh	r3, [r0, #6]
 800fa54:	185b      	adds	r3, r3, r1
 800fa56:	b21b      	sxth	r3, r3
 800fa58:	2101      	movs	r1, #1
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	db00      	blt.n	800fa60 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800fa5e:	1c21      	adds	r1, r4, #0
 800fa60:	b2cc      	uxtb	r4, r1
 800fa62:	0020      	movs	r0, r4
 800fa64:	bd30      	pop	{r4, r5, pc}
	...

0800fa68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800fa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa6a:	000c      	movs	r4, r1
 800fa6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800fa6e:	b08b      	sub	sp, #44	; 0x2c
 800fa70:	0005      	movs	r5, r0
 800fa72:	2900      	cmp	r1, #0
 800fa74:	d04d      	beq.n	800fb12 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xaa>
 800fa76:	a802      	add	r0, sp, #8
 800fa78:	f7ff fee9 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fa7c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 800fa7e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 800fa80:	8922      	ldrh	r2, [r4, #8]
 800fa82:	88e1      	ldrh	r1, [r4, #6]
 800fa84:	18ba      	adds	r2, r7, r2
 800fa86:	1871      	adds	r1, r6, r1
 800fa88:	b212      	sxth	r2, r2
 800fa8a:	b209      	sxth	r1, r1
 800fa8c:	a802      	add	r0, sp, #8
 800fa8e:	f7ff ffd1 	bl	800fa34 <_ZNK8touchgfx4Rect9intersectEss>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d016      	beq.n	800fac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x5c>
 800fa96:	89a2      	ldrh	r2, [r4, #12]
 800fa98:	8961      	ldrh	r1, [r4, #10]
 800fa9a:	18ba      	adds	r2, r7, r2
 800fa9c:	1871      	adds	r1, r6, r1
 800fa9e:	b212      	sxth	r2, r2
 800faa0:	b209      	sxth	r1, r1
 800faa2:	a802      	add	r0, sp, #8
 800faa4:	f7ff ffc6 	bl	800fa34 <_ZNK8touchgfx4Rect9intersectEss>
 800faa8:	1e03      	subs	r3, r0, #0
 800faaa:	d10b      	bne.n	800fac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x5c>
 800faac:	4a1a      	ldr	r2, [pc, #104]	; (800fb18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb0>)
 800faae:	a906      	add	r1, sp, #24
 800fab0:	9206      	str	r2, [sp, #24]
 800fab2:	2202      	movs	r2, #2
 800fab4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800fab6:	710a      	strb	r2, [r1, #4]
 800fab8:	80cb      	strh	r3, [r1, #6]
 800faba:	810b      	strh	r3, [r1, #8]
 800fabc:	814b      	strh	r3, [r1, #10]
 800fabe:	6803      	ldr	r3, [r0, #0]
 800fac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fac2:	4798      	blx	r3
 800fac4:	ae04      	add	r6, sp, #16
 800fac6:	0030      	movs	r0, r6
 800fac8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800faca:	f7ff fec0 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800face:	7923      	ldrb	r3, [r4, #4]
 800fad0:	8837      	ldrh	r7, [r6, #0]
 800fad2:	469c      	mov	ip, r3
 800fad4:	8876      	ldrh	r6, [r6, #2]
 800fad6:	8923      	ldrh	r3, [r4, #8]
 800fad8:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 800fada:	1b9b      	subs	r3, r3, r6
 800fadc:	18cb      	adds	r3, r1, r3
 800fade:	88e2      	ldrh	r2, [r4, #6]
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	8963      	ldrh	r3, [r4, #10]
 800fae4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800fae6:	1bdb      	subs	r3, r3, r7
 800fae8:	1bd2      	subs	r2, r2, r7
 800faea:	1882      	adds	r2, r0, r2
 800faec:	18c0      	adds	r0, r0, r3
 800faee:	89a3      	ldrh	r3, [r4, #12]
 800faf0:	ac06      	add	r4, sp, #24
 800faf2:	1b9e      	subs	r6, r3, r6
 800faf4:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb4>)
 800faf6:	8160      	strh	r0, [r4, #10]
 800faf8:	9306      	str	r3, [sp, #24]
 800fafa:	4663      	mov	r3, ip
 800fafc:	7123      	strb	r3, [r4, #4]
 800fafe:	9b01      	ldr	r3, [sp, #4]
 800fb00:	1989      	adds	r1, r1, r6
 800fb02:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800fb04:	81a1      	strh	r1, [r4, #12]
 800fb06:	80e2      	strh	r2, [r4, #6]
 800fb08:	8123      	strh	r3, [r4, #8]
 800fb0a:	6803      	ldr	r3, [r0, #0]
 800fb0c:	0021      	movs	r1, r4
 800fb0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb10:	4798      	blx	r3
 800fb12:	b00b      	add	sp, #44	; 0x2c
 800fb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb16:	46c0      	nop			; (mov r8, r8)
 800fb18:	08016904 	.word	0x08016904
 800fb1c:	08016918 	.word	0x08016918

0800fb20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800fb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fb24:	b0a5      	sub	sp, #148	; 0x94
 800fb26:	9303      	str	r3, [sp, #12]
 800fb28:	9a03      	ldr	r2, [sp, #12]
 800fb2a:	0004      	movs	r4, r0
 800fb2c:	000d      	movs	r5, r1
 800fb2e:	790b      	ldrb	r3, [r1, #4]
 800fb30:	2a00      	cmp	r2, #0
 800fb32:	d00e      	beq.n	800fb52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x32>
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d000      	beq.n	800fb3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1a>
 800fb38:	e0ad      	b.n	800fc96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x176>
 800fb3a:	b025      	add	sp, #148	; 0x94
 800fb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb3e:	2308      	movs	r3, #8
 800fb40:	5eea      	ldrsh	r2, [r5, r3]
 800fb42:	2306      	movs	r3, #6
 800fb44:	5ee9      	ldrsh	r1, [r5, r3]
 800fb46:	0023      	movs	r3, r4
 800fb48:	1d20      	adds	r0, r4, #4
 800fb4a:	3330      	adds	r3, #48	; 0x30
 800fb4c:	f7fc fca0 	bl	800c490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fb50:	e0a1      	b.n	800fc96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x176>
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1f1      	bne.n	800fb3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1a>
 800fb56:	4b63      	ldr	r3, [pc, #396]	; (800fce4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3349      	adds	r3, #73	; 0x49
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	9302      	str	r3, [sp, #8]
 800fb60:	9b03      	ldr	r3, [sp, #12]
 800fb62:	6363      	str	r3, [r4, #52]	; 0x34
 800fb64:	9b02      	ldr	r3, [sp, #8]
 800fb66:	2b03      	cmp	r3, #3
 800fb68:	dde9      	ble.n	800fb3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1e>
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	9304      	str	r3, [sp, #16]
 800fb6e:	9b02      	ldr	r3, [sp, #8]
 800fb70:	2b0c      	cmp	r3, #12
 800fb72:	dc04      	bgt.n	800fb7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x5e>
 800fb74:	1e58      	subs	r0, r3, #1
 800fb76:	2103      	movs	r1, #3
 800fb78:	f7f0 fb5a 	bl	8000230 <__divsi3>
 800fb7c:	9004      	str	r0, [sp, #16]
 800fb7e:	4b5a      	ldr	r3, [pc, #360]	; (800fce8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 800fb80:	a812      	add	r0, sp, #72	; 0x48
 800fb82:	2100      	movs	r1, #0
 800fb84:	5e59      	ldrsh	r1, [r3, r1]
 800fb86:	4b59      	ldr	r3, [pc, #356]	; (800fcec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	5e9a      	ldrsh	r2, [r3, r2]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	930e      	str	r3, [sp, #56]	; 0x38
 800fb90:	ab0e      	add	r3, sp, #56	; 0x38
 800fb92:	8099      	strh	r1, [r3, #4]
 800fb94:	80da      	strh	r2, [r3, #6]
 800fb96:	4956      	ldr	r1, [pc, #344]	; (800fcf0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 800fb98:	2248      	movs	r2, #72	; 0x48
 800fb9a:	f003 f99f 	bl	8012edc <memcpy>
 800fb9e:	9b02      	ldr	r3, [sp, #8]
 800fba0:	9305      	str	r3, [sp, #20]
 800fba2:	2301      	movs	r3, #1
 800fba4:	425b      	negs	r3, r3
 800fba6:	9309      	str	r3, [sp, #36]	; 0x24
 800fba8:	3302      	adds	r3, #2
 800fbaa:	9301      	str	r3, [sp, #4]
 800fbac:	9904      	ldr	r1, [sp, #16]
 800fbae:	9805      	ldr	r0, [sp, #20]
 800fbb0:	f7f0 fb3e 	bl	8000230 <__divsi3>
 800fbb4:	9b01      	ldr	r3, [sp, #4]
 800fbb6:	aa11      	add	r2, sp, #68	; 0x44
 800fbb8:	00db      	lsls	r3, r3, #3
 800fbba:	189f      	adds	r7, r3, r2
 800fbbc:	2309      	movs	r3, #9
 800fbbe:	9a01      	ldr	r2, [sp, #4]
 800fbc0:	900a      	str	r0, [sp, #40]	; 0x28
 800fbc2:	1a9b      	subs	r3, r3, r2
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	4393      	bics	r3, r2
 800fbc8:	9a01      	ldr	r2, [sp, #4]
 800fbca:	189b      	adds	r3, r3, r2
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	aa15      	add	r2, sp, #84	; 0x54
 800fbd0:	189b      	adds	r3, r3, r2
 800fbd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	930d      	str	r3, [sp, #52]	; 0x34
 800fbd8:	466b      	mov	r3, sp
 800fbda:	1f3a      	subs	r2, r7, #4
 800fbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbde:	6812      	ldr	r2, [r2, #0]
 800fbe0:	88ee      	ldrh	r6, [r5, #6]
 800fbe2:	435a      	muls	r2, r3
 800fbe4:	b292      	uxth	r2, r2
 800fbe6:	9206      	str	r2, [sp, #24]
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	a80e      	add	r0, sp, #56	; 0x38
 800fbec:	4353      	muls	r3, r2
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	9307      	str	r3, [sp, #28]
 800fbf2:	9b06      	ldr	r3, [sp, #24]
 800fbf4:	9a07      	ldr	r2, [sp, #28]
 800fbf6:	199e      	adds	r6, r3, r6
 800fbf8:	892b      	ldrh	r3, [r5, #8]
 800fbfa:	b236      	sxth	r6, r6
 800fbfc:	18d3      	adds	r3, r2, r3
 800fbfe:	b21b      	sxth	r3, r3
 800fc00:	001a      	movs	r2, r3
 800fc02:	0031      	movs	r1, r6
 800fc04:	9308      	str	r3, [sp, #32]
 800fc06:	f7ff ff15 	bl	800fa34 <_ZNK8touchgfx4Rect9intersectEss>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d033      	beq.n	800fc76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 800fc0e:	0031      	movs	r1, r6
 800fc10:	1d20      	adds	r0, r4, #4
 800fc12:	ab0d      	add	r3, sp, #52	; 0x34
 800fc14:	9a08      	ldr	r2, [sp, #32]
 800fc16:	f7fc fc3b 	bl	800c490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fc1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fc1c:	2900      	cmp	r1, #0
 800fc1e:	d02a      	beq.n	800fc76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 800fc20:	9b03      	ldr	r3, [sp, #12]
 800fc22:	4299      	cmp	r1, r3
 800fc24:	d027      	beq.n	800fc76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 800fc26:	ae10      	add	r6, sp, #64	; 0x40
 800fc28:	0030      	movs	r0, r6
 800fc2a:	f7ff fe10 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fc2e:	2304      	movs	r3, #4
 800fc30:	5ef1      	ldrsh	r1, [r6, r3]
 800fc32:	2306      	movs	r3, #6
 800fc34:	5eea      	ldrsh	r2, [r5, r3]
 800fc36:	0fcb      	lsrs	r3, r1, #31
 800fc38:	185b      	adds	r3, r3, r1
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	5e31      	ldrsh	r1, [r6, r0]
 800fc3e:	105b      	asrs	r3, r3, #1
 800fc40:	185b      	adds	r3, r3, r1
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	2206      	movs	r2, #6
 800fc46:	5eb0      	ldrsh	r0, [r6, r2]
 800fc48:	2208      	movs	r2, #8
 800fc4a:	5ea9      	ldrsh	r1, [r5, r2]
 800fc4c:	0fc2      	lsrs	r2, r0, #31
 800fc4e:	1812      	adds	r2, r2, r0
 800fc50:	2002      	movs	r0, #2
 800fc52:	5e30      	ldrsh	r0, [r6, r0]
 800fc54:	1052      	asrs	r2, r2, #1
 800fc56:	1812      	adds	r2, r2, r0
 800fc58:	1a8a      	subs	r2, r1, r2
 800fc5a:	4352      	muls	r2, r2
 800fc5c:	435b      	muls	r3, r3
 800fc5e:	189b      	adds	r3, r3, r2
 800fc60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d207      	bcs.n	800fc76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 800fc66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc68:	9309      	str	r3, [sp, #36]	; 0x24
 800fc6a:	9203      	str	r2, [sp, #12]
 800fc6c:	6322      	str	r2, [r4, #48]	; 0x30
 800fc6e:	9a06      	ldr	r2, [sp, #24]
 800fc70:	86a2      	strh	r2, [r4, #52]	; 0x34
 800fc72:	9a07      	ldr	r2, [sp, #28]
 800fc74:	86e2      	strh	r2, [r4, #54]	; 0x36
 800fc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc78:	3710      	adds	r7, #16
 800fc7a:	42bb      	cmp	r3, r7
 800fc7c:	d1aa      	bne.n	800fbd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb4>
 800fc7e:	9a02      	ldr	r2, [sp, #8]
 800fc80:	9b01      	ldr	r3, [sp, #4]
 800fc82:	4694      	mov	ip, r2
 800fc84:	3301      	adds	r3, #1
 800fc86:	9301      	str	r3, [sp, #4]
 800fc88:	9b05      	ldr	r3, [sp, #20]
 800fc8a:	9a01      	ldr	r2, [sp, #4]
 800fc8c:	4463      	add	r3, ip
 800fc8e:	9305      	str	r3, [sp, #20]
 800fc90:	9b04      	ldr	r3, [sp, #16]
 800fc92:	4293      	cmp	r3, r2
 800fc94:	da8a      	bge.n	800fbac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x8c>
 800fc96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	d100      	bne.n	800fc9e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x17e>
 800fc9c:	e74d      	b.n	800fb3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1a>
 800fc9e:	ae10      	add	r6, sp, #64	; 0x40
 800fca0:	0030      	movs	r0, r6
 800fca2:	f7ff fdd4 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fca6:	8871      	ldrh	r1, [r6, #2]
 800fca8:	8833      	ldrh	r3, [r6, #0]
 800fcaa:	4e12      	ldr	r6, [pc, #72]	; (800fcf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 800fcac:	88ea      	ldrh	r2, [r5, #6]
 800fcae:	9612      	str	r6, [sp, #72]	; 0x48
 800fcb0:	2600      	movs	r6, #0
 800fcb2:	1ad2      	subs	r2, r2, r3
 800fcb4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800fcb6:	7928      	ldrb	r0, [r5, #4]
 800fcb8:	18d2      	adds	r2, r2, r3
 800fcba:	892b      	ldrh	r3, [r5, #8]
 800fcbc:	1a5b      	subs	r3, r3, r1
 800fcbe:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800fcc0:	185b      	adds	r3, r3, r1
 800fcc2:	a912      	add	r1, sp, #72	; 0x48
 800fcc4:	7108      	strb	r0, [r1, #4]
 800fcc6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fcc8:	80ca      	strh	r2, [r1, #6]
 800fcca:	810b      	strh	r3, [r1, #8]
 800fccc:	814e      	strh	r6, [r1, #10]
 800fcce:	6803      	ldr	r3, [r0, #0]
 800fcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd2:	4798      	blx	r3
 800fcd4:	792b      	ldrb	r3, [r5, #4]
 800fcd6:	42b3      	cmp	r3, r6
 800fcd8:	d100      	bne.n	800fcdc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>
 800fcda:	e72e      	b.n	800fb3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1a>
 800fcdc:	6326      	str	r6, [r4, #48]	; 0x30
 800fcde:	6366      	str	r6, [r4, #52]	; 0x34
 800fce0:	e72b      	b.n	800fb3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1a>
 800fce2:	46c0      	nop			; (mov r8, r8)
 800fce4:	200034cc 	.word	0x200034cc
 800fce8:	200034c0 	.word	0x200034c0
 800fcec:	200034c2 	.word	0x200034c2
 800fcf0:	0801451c 	.word	0x0801451c
 800fcf4:	08016904 	.word	0x08016904

0800fcf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800fcf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcfa:	0005      	movs	r5, r0
 800fcfc:	220c      	movs	r2, #12
 800fcfe:	5e83      	ldrsh	r3, [r0, r2]
 800fd00:	350c      	adds	r5, #12
 800fd02:	3301      	adds	r3, #1
 800fd04:	d10f      	bne.n	800fd26 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x2e>
 800fd06:	466c      	mov	r4, sp
 800fd08:	2308      	movs	r3, #8
 800fd0a:	5ec2      	ldrsh	r2, [r0, r3]
 800fd0c:	210a      	movs	r1, #10
 800fd0e:	5e43      	ldrsh	r3, [r0, r1]
 800fd10:	2100      	movs	r1, #0
 800fd12:	80e3      	strh	r3, [r4, #6]
 800fd14:	6803      	ldr	r3, [r0, #0]
 800fd16:	9100      	str	r1, [sp, #0]
 800fd18:	80a2      	strh	r2, [r4, #4]
 800fd1a:	6a1b      	ldr	r3, [r3, #32]
 800fd1c:	0021      	movs	r1, r4
 800fd1e:	4798      	blx	r3
 800fd20:	002b      	movs	r3, r5
 800fd22:	cc06      	ldmia	r4!, {r1, r2}
 800fd24:	c306      	stmia	r3!, {r1, r2}
 800fd26:	0028      	movs	r0, r5
 800fd28:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800fd2a <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800fd2a:	b513      	push	{r0, r1, r4, lr}
 800fd2c:	2220      	movs	r2, #32
 800fd2e:	5e83      	ldrsh	r3, [r0, r2]
 800fd30:	0004      	movs	r4, r0
 800fd32:	3301      	adds	r3, #1
 800fd34:	d109      	bne.n	800fd4a <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800fd36:	0001      	movs	r1, r0
 800fd38:	4668      	mov	r0, sp
 800fd3a:	f7ff fd88 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd3e:	466b      	mov	r3, sp
 800fd40:	881b      	ldrh	r3, [r3, #0]
 800fd42:	8423      	strh	r3, [r4, #32]
 800fd44:	466b      	mov	r3, sp
 800fd46:	885b      	ldrh	r3, [r3, #2]
 800fd48:	8463      	strh	r3, [r4, #34]	; 0x22
 800fd4a:	2320      	movs	r3, #32
 800fd4c:	5ee0      	ldrsh	r0, [r4, r3]
 800fd4e:	bd16      	pop	{r1, r2, r4, pc}

0800fd50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800fd50:	b513      	push	{r0, r1, r4, lr}
 800fd52:	2222      	movs	r2, #34	; 0x22
 800fd54:	5e83      	ldrsh	r3, [r0, r2]
 800fd56:	0004      	movs	r4, r0
 800fd58:	3301      	adds	r3, #1
 800fd5a:	d109      	bne.n	800fd70 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800fd5c:	0001      	movs	r1, r0
 800fd5e:	4668      	mov	r0, sp
 800fd60:	f7ff fd75 	bl	800f84e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd64:	466b      	mov	r3, sp
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	8423      	strh	r3, [r4, #32]
 800fd6a:	466b      	mov	r3, sp
 800fd6c:	885b      	ldrh	r3, [r3, #2]
 800fd6e:	8463      	strh	r3, [r4, #34]	; 0x22
 800fd70:	2322      	movs	r3, #34	; 0x22
 800fd72:	5ee0      	ldrsh	r0, [r4, r3]
 800fd74:	bd16      	pop	{r1, r2, r4, pc}
	...

0800fd78 <_ZN8touchgfx6ScreenC1Ev>:
 800fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7a:	0005      	movs	r5, r0
 800fd7c:	4b19      	ldr	r3, [pc, #100]	; (800fde4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800fd7e:	2100      	movs	r1, #0
 800fd80:	3308      	adds	r3, #8
 800fd82:	c508      	stmia	r5!, {r3}
 800fd84:	0003      	movs	r3, r0
 800fd86:	0002      	movs	r2, r0
 800fd88:	3328      	adds	r3, #40	; 0x28
 800fd8a:	8101      	strh	r1, [r0, #8]
 800fd8c:	8141      	strh	r1, [r0, #10]
 800fd8e:	8181      	strh	r1, [r0, #12]
 800fd90:	81c1      	strh	r1, [r0, #14]
 800fd92:	8201      	strh	r1, [r0, #16]
 800fd94:	8241      	strh	r1, [r0, #18]
 800fd96:	8281      	strh	r1, [r0, #20]
 800fd98:	82c1      	strh	r1, [r0, #22]
 800fd9a:	6181      	str	r1, [r0, #24]
 800fd9c:	61c1      	str	r1, [r0, #28]
 800fd9e:	6201      	str	r1, [r0, #32]
 800fda0:	7019      	strb	r1, [r3, #0]
 800fda2:	2301      	movs	r3, #1
 800fda4:	3229      	adds	r2, #41	; 0x29
 800fda6:	7013      	strb	r3, [r2, #0]
 800fda8:	4a0f      	ldr	r2, [pc, #60]	; (800fde8 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 800fdaa:	0004      	movs	r4, r0
 800fdac:	6042      	str	r2, [r0, #4]
 800fdae:	0002      	movs	r2, r0
 800fdb0:	3238      	adds	r2, #56	; 0x38
 800fdb2:	62c1      	str	r1, [r0, #44]	; 0x2c
 800fdb4:	6301      	str	r1, [r0, #48]	; 0x30
 800fdb6:	6341      	str	r1, [r0, #52]	; 0x34
 800fdb8:	7013      	strb	r3, [r2, #0]
 800fdba:	4b0c      	ldr	r3, [pc, #48]	; (800fdec <_ZN8touchgfx6ScreenC1Ev+0x74>)
 800fdbc:	000a      	movs	r2, r1
 800fdbe:	2700      	movs	r7, #0
 800fdc0:	5fdf      	ldrsh	r7, [r3, r7]
 800fdc2:	4b0b      	ldr	r3, [pc, #44]	; (800fdf0 <_ZN8touchgfx6ScreenC1Ev+0x78>)
 800fdc4:	0028      	movs	r0, r5
 800fdc6:	2600      	movs	r6, #0
 800fdc8:	5f9e      	ldrsh	r6, [r3, r6]
 800fdca:	f7f9 fb35 	bl	8009438 <_ZN8touchgfx8Drawable5setXYEss>
 800fdce:	0039      	movs	r1, r7
 800fdd0:	0028      	movs	r0, r5
 800fdd2:	f7f9 fb55 	bl	8009480 <_ZN8touchgfx8Drawable8setWidthEs>
 800fdd6:	0028      	movs	r0, r5
 800fdd8:	0031      	movs	r1, r6
 800fdda:	f7f9 fb60 	bl	800949e <_ZN8touchgfx8Drawable9setHeightEs>
 800fdde:	0020      	movs	r0, r4
 800fde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	08016938 	.word	0x08016938
 800fde8:	08015c9c 	.word	0x08015c9c
 800fdec:	200034c0 	.word	0x200034c0
 800fdf0:	200034c2 	.word	0x200034c2

0800fdf4 <_ZN8touchgfx6Screen4drawEv>:
 800fdf4:	b507      	push	{r0, r1, r2, lr}
 800fdf6:	4b07      	ldr	r3, [pc, #28]	; (800fe14 <_ZN8touchgfx6Screen4drawEv+0x20>)
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	5e9a      	ldrsh	r2, [r3, r2]
 800fdfc:	4b06      	ldr	r3, [pc, #24]	; (800fe18 <_ZN8touchgfx6Screen4drawEv+0x24>)
 800fdfe:	2100      	movs	r1, #0
 800fe00:	5e5b      	ldrsh	r3, [r3, r1]
 800fe02:	2100      	movs	r1, #0
 800fe04:	9100      	str	r1, [sp, #0]
 800fe06:	4669      	mov	r1, sp
 800fe08:	80cb      	strh	r3, [r1, #6]
 800fe0a:	6803      	ldr	r3, [r0, #0]
 800fe0c:	808a      	strh	r2, [r1, #4]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	4798      	blx	r3
 800fe12:	bd07      	pop	{r0, r1, r2, pc}
 800fe14:	200034c0 	.word	0x200034c0
 800fe18:	200034c2 	.word	0x200034c2

0800fe1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800fe1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe1e:	b08d      	sub	sp, #52	; 0x34
 800fe20:	9002      	str	r0, [sp, #8]
 800fe22:	0014      	movs	r4, r2
 800fe24:	2204      	movs	r2, #4
 800fe26:	5e8b      	ldrsh	r3, [r1, r2]
 800fe28:	000f      	movs	r7, r1
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	dd0e      	ble.n	800fe4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 800fe2e:	2206      	movs	r2, #6
 800fe30:	5e8b      	ldrsh	r3, [r1, r2]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	dd0a      	ble.n	800fe4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 800fe36:	0020      	movs	r0, r4
 800fe38:	f7ff ff5e 	bl	800fcf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800fe3c:	0039      	movs	r1, r7
 800fe3e:	f7fe fea7 	bl	800eb90 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800fe42:	69e3      	ldr	r3, [r4, #28]
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d103      	bne.n	800fe50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 800fe48:	1e1c      	subs	r4, r3, #0
 800fe4a:	d1f4      	bne.n	800fe36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a>
 800fe4c:	b00d      	add	sp, #52	; 0x34
 800fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d056      	beq.n	800ff02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe6>
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	0021      	movs	r1, r4
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	a806      	add	r0, sp, #24
 800fe5c:	4798      	blx	r3
 800fe5e:	0020      	movs	r0, r4
 800fe60:	f7ff ff63 	bl	800fd2a <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800fe64:	ab06      	add	r3, sp, #24
 800fe66:	881d      	ldrh	r5, [r3, #0]
 800fe68:	ae08      	add	r6, sp, #32
 800fe6a:	182d      	adds	r5, r5, r0
 800fe6c:	0020      	movs	r0, r4
 800fe6e:	f7ff ff6f 	bl	800fd50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800fe72:	ab06      	add	r3, sp, #24
 800fe74:	885b      	ldrh	r3, [r3, #2]
 800fe76:	b22d      	sxth	r5, r5
 800fe78:	1818      	adds	r0, r3, r0
 800fe7a:	ab06      	add	r3, sp, #24
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	5e9a      	ldrsh	r2, [r3, r2]
 800fe80:	ab06      	add	r3, sp, #24
 800fe82:	2106      	movs	r1, #6
 800fe84:	5e5b      	ldrsh	r3, [r3, r1]
 800fe86:	80b2      	strh	r2, [r6, #4]
 800fe88:	80f3      	strh	r3, [r6, #6]
 800fe8a:	8035      	strh	r5, [r6, #0]
 800fe8c:	8070      	strh	r0, [r6, #2]
 800fe8e:	0039      	movs	r1, r7
 800fe90:	0030      	movs	r0, r6
 800fe92:	f7fc fbb5 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800fe96:	0020      	movs	r0, r4
 800fe98:	f7ff ff2e 	bl	800fcf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800fe9c:	ad0a      	add	r5, sp, #40	; 0x28
 800fe9e:	2208      	movs	r2, #8
 800fea0:	0031      	movs	r1, r6
 800fea2:	9001      	str	r0, [sp, #4]
 800fea4:	0028      	movs	r0, r5
 800fea6:	f003 f819 	bl	8012edc <memcpy>
 800feaa:	9901      	ldr	r1, [sp, #4]
 800feac:	0028      	movs	r0, r5
 800feae:	f7fc fba7 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800feb2:	2200      	movs	r2, #0
 800feb4:	5eab      	ldrsh	r3, [r5, r2]
 800feb6:	9303      	str	r3, [sp, #12]
 800feb8:	2202      	movs	r2, #2
 800feba:	5eab      	ldrsh	r3, [r5, r2]
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	2204      	movs	r2, #4
 800fec0:	5eab      	ldrsh	r3, [r5, r2]
 800fec2:	9304      	str	r3, [sp, #16]
 800fec4:	2306      	movs	r3, #6
 800fec6:	5eee      	ldrsh	r6, [r5, r3]
 800fec8:	2300      	movs	r3, #0
 800feca:	5efa      	ldrsh	r2, [r7, r3]
 800fecc:	9b03      	ldr	r3, [sp, #12]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d10d      	bne.n	800feee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd2>
 800fed2:	2102      	movs	r1, #2
 800fed4:	5e7b      	ldrsh	r3, [r7, r1]
 800fed6:	9901      	ldr	r1, [sp, #4]
 800fed8:	428b      	cmp	r3, r1
 800feda:	d108      	bne.n	800feee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd2>
 800fedc:	2104      	movs	r1, #4
 800fede:	5e7b      	ldrsh	r3, [r7, r1]
 800fee0:	9904      	ldr	r1, [sp, #16]
 800fee2:	428b      	cmp	r3, r1
 800fee4:	d103      	bne.n	800feee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd2>
 800fee6:	2106      	movs	r1, #6
 800fee8:	5e7b      	ldrsh	r3, [r7, r1]
 800feea:	42b3      	cmp	r3, r6
 800feec:	d009      	beq.n	800ff02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe6>
 800feee:	9b04      	ldr	r3, [sp, #16]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>
 800fef4:	2e00      	cmp	r6, #0
 800fef6:	d12e      	bne.n	800ff56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x13a>
 800fef8:	0039      	movs	r1, r7
 800fefa:	69e2      	ldr	r2, [r4, #28]
 800fefc:	9802      	ldr	r0, [sp, #8]
 800fefe:	f7ff ff8d 	bl	800fe1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ff02:	0020      	movs	r0, r4
 800ff04:	f7ff fef8 	bl	800fcf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800ff08:	0006      	movs	r6, r0
 800ff0a:	ad08      	add	r5, sp, #32
 800ff0c:	2208      	movs	r2, #8
 800ff0e:	0039      	movs	r1, r7
 800ff10:	0028      	movs	r0, r5
 800ff12:	f002 ffe3 	bl	8012edc <memcpy>
 800ff16:	0031      	movs	r1, r6
 800ff18:	0028      	movs	r0, r5
 800ff1a:	f7fc fb71 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 800ff1e:	2204      	movs	r2, #4
 800ff20:	5eab      	ldrsh	r3, [r5, r2]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	dc00      	bgt.n	800ff28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10c>
 800ff26:	e791      	b.n	800fe4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 800ff28:	2206      	movs	r2, #6
 800ff2a:	5eab      	ldrsh	r3, [r5, r2]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dc00      	bgt.n	800ff32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x116>
 800ff30:	e78c      	b.n	800fe4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 800ff32:	0020      	movs	r0, r4
 800ff34:	f7ff fef9 	bl	800fd2a <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800ff38:	882b      	ldrh	r3, [r5, #0]
 800ff3a:	1a18      	subs	r0, r3, r0
 800ff3c:	8028      	strh	r0, [r5, #0]
 800ff3e:	0020      	movs	r0, r4
 800ff40:	f7ff ff06 	bl	800fd50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800ff44:	886b      	ldrh	r3, [r5, #2]
 800ff46:	0029      	movs	r1, r5
 800ff48:	1a18      	subs	r0, r3, r0
 800ff4a:	8068      	strh	r0, [r5, #2]
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	0020      	movs	r0, r4
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	4798      	blx	r3
 800ff54:	e77a      	b.n	800fe4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 800ff56:	2102      	movs	r1, #2
 800ff58:	5e7b      	ldrsh	r3, [r7, r1]
 800ff5a:	4669      	mov	r1, sp
 800ff5c:	8889      	ldrh	r1, [r1, #4]
 800ff5e:	9105      	str	r1, [sp, #20]
 800ff60:	9901      	ldr	r1, [sp, #4]
 800ff62:	428b      	cmp	r3, r1
 800ff64:	da0c      	bge.n	800ff80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800ff66:	2104      	movs	r1, #4
 800ff68:	5e78      	ldrsh	r0, [r7, r1]
 800ff6a:	a908      	add	r1, sp, #32
 800ff6c:	800a      	strh	r2, [r1, #0]
 800ff6e:	9a05      	ldr	r2, [sp, #20]
 800ff70:	804b      	strh	r3, [r1, #2]
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	8088      	strh	r0, [r1, #4]
 800ff76:	80cb      	strh	r3, [r1, #6]
 800ff78:	69e2      	ldr	r2, [r4, #28]
 800ff7a:	9802      	ldr	r0, [sp, #8]
 800ff7c:	f7ff ff4e 	bl	800fe1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ff80:	2200      	movs	r2, #0
 800ff82:	5ebb      	ldrsh	r3, [r7, r2]
 800ff84:	466a      	mov	r2, sp
 800ff86:	8995      	ldrh	r5, [r2, #12]
 800ff88:	9a03      	ldr	r2, [sp, #12]
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	da0a      	bge.n	800ffa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x188>
 800ff8e:	a908      	add	r1, sp, #32
 800ff90:	9a01      	ldr	r2, [sp, #4]
 800ff92:	800b      	strh	r3, [r1, #0]
 800ff94:	1aeb      	subs	r3, r5, r3
 800ff96:	804a      	strh	r2, [r1, #2]
 800ff98:	808b      	strh	r3, [r1, #4]
 800ff9a:	80ce      	strh	r6, [r1, #6]
 800ff9c:	69e2      	ldr	r2, [r4, #28]
 800ff9e:	9802      	ldr	r0, [sp, #8]
 800ffa0:	f7ff ff3c 	bl	800fe1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ffa4:	883a      	ldrh	r2, [r7, #0]
 800ffa6:	88bb      	ldrh	r3, [r7, #4]
 800ffa8:	189b      	adds	r3, r3, r2
 800ffaa:	9a04      	ldr	r2, [sp, #16]
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	18ad      	adds	r5, r5, r2
 800ffb0:	b2ad      	uxth	r5, r5
 800ffb2:	b22a      	sxth	r2, r5
 800ffb4:	b219      	sxth	r1, r3
 800ffb6:	4291      	cmp	r1, r2
 800ffb8:	dd0a      	ble.n	800ffd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1b4>
 800ffba:	a908      	add	r1, sp, #32
 800ffbc:	800a      	strh	r2, [r1, #0]
 800ffbe:	9a01      	ldr	r2, [sp, #4]
 800ffc0:	1b5d      	subs	r5, r3, r5
 800ffc2:	804a      	strh	r2, [r1, #2]
 800ffc4:	808d      	strh	r5, [r1, #4]
 800ffc6:	80ce      	strh	r6, [r1, #6]
 800ffc8:	69e2      	ldr	r2, [r4, #28]
 800ffca:	9802      	ldr	r0, [sp, #8]
 800ffcc:	f7ff ff26 	bl	800fe1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ffd0:	88fa      	ldrh	r2, [r7, #6]
 800ffd2:	887b      	ldrh	r3, [r7, #2]
 800ffd4:	189b      	adds	r3, r3, r2
 800ffd6:	9a05      	ldr	r2, [sp, #20]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	1992      	adds	r2, r2, r6
 800ffdc:	b292      	uxth	r2, r2
 800ffde:	b210      	sxth	r0, r2
 800ffe0:	b219      	sxth	r1, r3
 800ffe2:	4288      	cmp	r0, r1
 800ffe4:	da8d      	bge.n	800ff02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe6>
 800ffe6:	2104      	movs	r1, #4
 800ffe8:	5e7d      	ldrsh	r5, [r7, r1]
 800ffea:	2100      	movs	r1, #0
 800ffec:	5e7e      	ldrsh	r6, [r7, r1]
 800ffee:	1a9b      	subs	r3, r3, r2
 800fff0:	a908      	add	r1, sp, #32
 800fff2:	800e      	strh	r6, [r1, #0]
 800fff4:	8048      	strh	r0, [r1, #2]
 800fff6:	808d      	strh	r5, [r1, #4]
 800fff8:	80cb      	strh	r3, [r1, #6]
 800fffa:	69e2      	ldr	r2, [r4, #28]
 800fffc:	e77e      	b.n	800fefc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe0>

0800fffe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800fffe:	2300      	movs	r3, #0
 8010000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010002:	0004      	movs	r4, r0
 8010004:	aa01      	add	r2, sp, #4
 8010006:	3004      	adds	r0, #4
 8010008:	000d      	movs	r5, r1
 801000a:	9301      	str	r3, [sp, #4]
 801000c:	f7fc fbe5 	bl	800c7da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010010:	9a01      	ldr	r2, [sp, #4]
 8010012:	2a00      	cmp	r2, #0
 8010014:	d003      	beq.n	801001e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8010016:	0029      	movs	r1, r5
 8010018:	0020      	movs	r0, r4
 801001a:	f7ff feff 	bl	800fe1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801001e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08010020 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010022:	000d      	movs	r5, r1
 8010024:	0001      	movs	r1, r0
 8010026:	0004      	movs	r4, r0
 8010028:	3108      	adds	r1, #8
 801002a:	2208      	movs	r2, #8
 801002c:	4668      	mov	r0, sp
 801002e:	f002 ff55 	bl	8012edc <memcpy>
 8010032:	0029      	movs	r1, r5
 8010034:	4668      	mov	r0, sp
 8010036:	f7fc fae3 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 801003a:	0023      	movs	r3, r4
 801003c:	3338      	adds	r3, #56	; 0x38
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d004      	beq.n	801004e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8010044:	4669      	mov	r1, sp
 8010046:	0020      	movs	r0, r4
 8010048:	f7ff ffd9 	bl	800fffe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801004c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 801004e:	1d20      	adds	r0, r4, #4
 8010050:	4669      	mov	r1, sp
 8010052:	f7fc fb88 	bl	800c766 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010056:	e7f9      	b.n	801004c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>

08010058 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010058:	0003      	movs	r3, r0
 801005a:	0008      	movs	r0, r1
 801005c:	b510      	push	{r4, lr}
 801005e:	1d19      	adds	r1, r3, #4
 8010060:	6803      	ldr	r3, [r0, #0]
 8010062:	699b      	ldr	r3, [r3, #24]
 8010064:	4798      	blx	r3
 8010066:	bd10      	pop	{r4, pc}

08010068 <_ZN8touchgfx12TextProviderC1Ev>:
 8010068:	0002      	movs	r2, r0
 801006a:	2300      	movs	r3, #0
 801006c:	2101      	movs	r1, #1
 801006e:	b510      	push	{r4, lr}
 8010070:	0004      	movs	r4, r0
 8010072:	3232      	adds	r2, #50	; 0x32
 8010074:	6003      	str	r3, [r0, #0]
 8010076:	6043      	str	r3, [r0, #4]
 8010078:	60c3      	str	r3, [r0, #12]
 801007a:	7403      	strb	r3, [r0, #16]
 801007c:	82c3      	strh	r3, [r0, #22]
 801007e:	8303      	strh	r3, [r0, #24]
 8010080:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8010082:	8603      	strh	r3, [r0, #48]	; 0x30
 8010084:	86c3      	strh	r3, [r0, #54]	; 0x36
 8010086:	8703      	strh	r3, [r0, #56]	; 0x38
 8010088:	63c3      	str	r3, [r0, #60]	; 0x3c
 801008a:	321c      	adds	r2, #28
 801008c:	8013      	strh	r3, [r2, #0]
 801008e:	8053      	strh	r3, [r2, #2]
 8010090:	8093      	strh	r3, [r2, #4]
 8010092:	7191      	strb	r1, [r2, #6]
 8010094:	71d3      	strb	r3, [r2, #7]
 8010096:	f7fa f88b 	bl	800a1b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801009a:	0020      	movs	r0, r4
 801009c:	bd10      	pop	{r4, pc}

0801009e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801009e:	b530      	push	{r4, r5, lr}
 80100a0:	2500      	movs	r5, #0
 80100a2:	2401      	movs	r4, #1
 80100a4:	6843      	ldr	r3, [r0, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d103      	bne.n	80100b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x14>
 80100aa:	6803      	ldr	r3, [r0, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d022      	beq.n	80100f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x58>
 80100b0:	6043      	str	r3, [r0, #4]
 80100b2:	7c03      	ldrb	r3, [r0, #16]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00a      	beq.n	80100ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x30>
 80100b8:	68c3      	ldr	r3, [r0, #12]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d006      	beq.n	80100cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 80100be:	881a      	ldrh	r2, [r3, #0]
 80100c0:	2a00      	cmp	r2, #0
 80100c2:	d003      	beq.n	80100cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 80100c4:	1c9a      	adds	r2, r3, #2
 80100c6:	60c2      	str	r2, [r0, #12]
 80100c8:	8818      	ldrh	r0, [r3, #0]
 80100ca:	bd30      	pop	{r4, r5, pc}
 80100cc:	7405      	strb	r5, [r0, #16]
 80100ce:	6843      	ldr	r3, [r0, #4]
 80100d0:	8819      	ldrh	r1, [r3, #0]
 80100d2:	2900      	cmp	r1, #0
 80100d4:	d00f      	beq.n	80100f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x58>
 80100d6:	1c9a      	adds	r2, r3, #2
 80100d8:	6042      	str	r2, [r0, #4]
 80100da:	2902      	cmp	r1, #2
 80100dc:	d1f4      	bne.n	80100c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2a>
 80100de:	6883      	ldr	r3, [r0, #8]
 80100e0:	1d1a      	adds	r2, r3, #4
 80100e2:	6082      	str	r2, [r0, #8]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	60c3      	str	r3, [r0, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d0db      	beq.n	80100a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d0d8      	beq.n	80100a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80100f2:	7404      	strb	r4, [r0, #16]
 80100f4:	e7d6      	b.n	80100a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80100f6:	2000      	movs	r0, #0
 80100f8:	e7e7      	b.n	80100ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2c>

080100fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80100fa:	63c3      	str	r3, [r0, #60]	; 0x3c
 80100fc:	2300      	movs	r3, #0
 80100fe:	b510      	push	{r4, lr}
 8010100:	6082      	str	r2, [r0, #8]
 8010102:	6001      	str	r1, [r0, #0]
 8010104:	6043      	str	r3, [r0, #4]
 8010106:	60c3      	str	r3, [r0, #12]
 8010108:	7403      	strb	r3, [r0, #16]
 801010a:	8603      	strh	r3, [r0, #48]	; 0x30
 801010c:	8303      	strh	r3, [r0, #24]
 801010e:	8703      	strh	r3, [r0, #56]	; 0x38
 8010110:	f7fa f84e 	bl	800a1b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010114:	bd10      	pop	{r4, pc}

08010116 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010116:	b570      	push	{r4, r5, r6, lr}
 8010118:	0005      	movs	r5, r0
 801011a:	2900      	cmp	r1, #0
 801011c:	d010      	beq.n	8010140 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x2a>
 801011e:	0004      	movs	r4, r0
 8010120:	3440      	adds	r4, #64	; 0x40
 8010122:	220e      	movs	r2, #14
 8010124:	0020      	movs	r0, r4
 8010126:	f002 fed9 	bl	8012edc <memcpy>
 801012a:	2280      	movs	r2, #128	; 0x80
 801012c:	0021      	movs	r1, r4
 801012e:	7b63      	ldrb	r3, [r4, #13]
 8010130:	0052      	lsls	r2, r2, #1
 8010132:	015b      	lsls	r3, r3, #5
 8010134:	401a      	ands	r2, r3
 8010136:	79a3      	ldrb	r3, [r4, #6]
 8010138:	3549      	adds	r5, #73	; 0x49
 801013a:	4313      	orrs	r3, r2
 801013c:	425b      	negs	r3, r3
 801013e:	702b      	strb	r3, [r5, #0]
 8010140:	0008      	movs	r0, r1
 8010142:	bd70      	pop	{r4, r5, r6, pc}

08010144 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010144:	b570      	push	{r4, r5, r6, lr}
 8010146:	000c      	movs	r4, r1
 8010148:	6811      	ldr	r1, [r2, #0]
 801014a:	0010      	movs	r0, r2
 801014c:	68cd      	ldr	r5, [r1, #12]
 801014e:	0019      	movs	r1, r3
 8010150:	47a8      	blx	r5
 8010152:	2800      	cmp	r0, #0
 8010154:	d100      	bne.n	8010158 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt+0x14>
 8010156:	0020      	movs	r0, r4
 8010158:	bd70      	pop	{r4, r5, r6, pc}
	...

0801015c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801015c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801015e:	0005      	movs	r5, r0
 8010160:	0014      	movs	r4, r2
 8010162:	0008      	movs	r0, r1
 8010164:	2a00      	cmp	r2, #0
 8010166:	d107      	bne.n	8010178 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c>
 8010168:	002b      	movs	r3, r5
 801016a:	3552      	adds	r5, #82	; 0x52
 801016c:	334e      	adds	r3, #78	; 0x4e
 801016e:	801a      	strh	r2, [r3, #0]
 8010170:	805a      	strh	r2, [r3, #2]
 8010172:	802a      	strh	r2, [r5, #0]
 8010174:	0020      	movs	r0, r4
 8010176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010178:	2780      	movs	r7, #128	; 0x80
 801017a:	7b51      	ldrb	r1, [r2, #13]
 801017c:	8893      	ldrh	r3, [r2, #4]
 801017e:	79e6      	ldrb	r6, [r4, #7]
 8010180:	010a      	lsls	r2, r1, #4
 8010182:	007f      	lsls	r7, r7, #1
 8010184:	403a      	ands	r2, r7
 8010186:	4332      	orrs	r2, r6
 8010188:	b296      	uxth	r6, r2
 801018a:	9600      	str	r6, [sp, #0]
 801018c:	4e6e      	ldr	r6, [pc, #440]	; (8010348 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>)
 801018e:	199e      	adds	r6, r3, r6
 8010190:	b2b6      	uxth	r6, r6
 8010192:	2e1d      	cmp	r6, #29
 8010194:	d866      	bhi.n	8010264 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8010196:	10d2      	asrs	r2, r2, #3
 8010198:	9201      	str	r2, [sp, #4]
 801019a:	2201      	movs	r2, #1
 801019c:	40b2      	lsls	r2, r6
 801019e:	4e6b      	ldr	r6, [pc, #428]	; (801034c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>)
 80101a0:	4232      	tst	r2, r6
 80101a2:	d11e      	bne.n	80101e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x86>
 80101a4:	26e0      	movs	r6, #224	; 0xe0
 80101a6:	00b6      	lsls	r6, r6, #2
 80101a8:	4232      	tst	r2, r6
 80101aa:	d05b      	beq.n	8010264 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 80101ac:	002e      	movs	r6, r5
 80101ae:	3640      	adds	r6, #64	; 0x40
 80101b0:	0021      	movs	r1, r4
 80101b2:	220e      	movs	r2, #14
 80101b4:	0030      	movs	r0, r6
 80101b6:	f002 fe91 	bl	8012edc <memcpy>
 80101ba:	466b      	mov	r3, sp
 80101bc:	3550      	adds	r5, #80	; 0x50
 80101be:	882a      	ldrh	r2, [r5, #0]
 80101c0:	8899      	ldrh	r1, [r3, #4]
 80101c2:	7b70      	ldrb	r0, [r6, #13]
 80101c4:	1a53      	subs	r3, r2, r1
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	7233      	strb	r3, [r6, #8]
 80101ca:	0034      	movs	r4, r6
 80101cc:	2660      	movs	r6, #96	; 0x60
 80101ce:	10db      	asrs	r3, r3, #3
 80101d0:	43b0      	bics	r0, r6
 80101d2:	4033      	ands	r3, r6
 80101d4:	4303      	orrs	r3, r0
 80101d6:	7363      	strb	r3, [r4, #13]
 80101d8:	9b00      	ldr	r3, [sp, #0]
 80101da:	1ad2      	subs	r2, r2, r3
 80101dc:	1a52      	subs	r2, r2, r1
 80101de:	802a      	strh	r2, [r5, #0]
 80101e0:	e7c8      	b.n	8010174 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80101e2:	002b      	movs	r3, r5
 80101e4:	331a      	adds	r3, #26
 80101e6:	8ada      	ldrh	r2, [r3, #22]
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d105      	bne.n	80101f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 80101ec:	4b58      	ldr	r3, [pc, #352]	; (8010350 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>)
 80101ee:	4a59      	ldr	r2, [pc, #356]	; (8010354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f8>)
 80101f0:	21c0      	movs	r1, #192	; 0xc0
 80101f2:	4859      	ldr	r0, [pc, #356]	; (8010358 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1fc>)
 80101f4:	f002 fdfe 	bl	8012df4 <__assert_func>
 80101f8:	4958      	ldr	r1, [pc, #352]	; (801035c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x200>)
 80101fa:	002e      	movs	r6, r5
 80101fc:	468c      	mov	ip, r1
 80101fe:	8a9a      	ldrh	r2, [r3, #20]
 8010200:	364e      	adds	r6, #78	; 0x4e
 8010202:	0052      	lsls	r2, r2, #1
 8010204:	5ad1      	ldrh	r1, [r2, r3]
 8010206:	4561      	cmp	r1, ip
 8010208:	d10d      	bne.n	8010226 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xca>
 801020a:	6803      	ldr	r3, [r0, #0]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	4798      	blx	r3
 8010210:	7b42      	ldrb	r2, [r0, #13]
 8010212:	00d3      	lsls	r3, r2, #3
 8010214:	403b      	ands	r3, r7
 8010216:	7a07      	ldrb	r7, [r0, #8]
 8010218:	431f      	orrs	r7, r3
 801021a:	0653      	lsls	r3, r2, #25
 801021c:	d502      	bpl.n	8010224 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xc8>
 801021e:	4b50      	ldr	r3, [pc, #320]	; (8010360 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x204>)
 8010220:	18ff      	adds	r7, r7, r3
 8010222:	b23f      	sxth	r7, r7
 8010224:	8037      	strh	r7, [r6, #0]
 8010226:	8837      	ldrh	r7, [r6, #0]
 8010228:	9b00      	ldr	r3, [sp, #0]
 801022a:	0021      	movs	r1, r4
 801022c:	19df      	adds	r7, r3, r7
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	220e      	movs	r2, #14
 8010232:	18ff      	adds	r7, r7, r3
 8010234:	b2bf      	uxth	r7, r7
 8010236:	8037      	strh	r7, [r6, #0]
 8010238:	002e      	movs	r6, r5
 801023a:	3640      	adds	r6, #64	; 0x40
 801023c:	0030      	movs	r0, r6
 801023e:	f002 fe4d 	bl	8012edc <memcpy>
 8010242:	2260      	movs	r2, #96	; 0x60
 8010244:	7b73      	ldrb	r3, [r6, #13]
 8010246:	7237      	strb	r7, [r6, #8]
 8010248:	10ff      	asrs	r7, r7, #3
 801024a:	4393      	bics	r3, r2
 801024c:	4017      	ands	r7, r2
 801024e:	002a      	movs	r2, r5
 8010250:	431f      	orrs	r7, r3
 8010252:	7377      	strb	r7, [r6, #13]
 8010254:	3249      	adds	r2, #73	; 0x49
 8010256:	3552      	adds	r5, #82	; 0x52
 8010258:	8829      	ldrh	r1, [r5, #0]
 801025a:	7813      	ldrb	r3, [r2, #0]
 801025c:	0034      	movs	r4, r6
 801025e:	1a5b      	subs	r3, r3, r1
 8010260:	7013      	strb	r3, [r2, #0]
 8010262:	e787      	b.n	8010174 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8010264:	2604      	movs	r6, #4
 8010266:	001f      	movs	r7, r3
 8010268:	43b7      	bics	r7, r6
 801026a:	002e      	movs	r6, r5
 801026c:	4a3d      	ldr	r2, [pc, #244]	; (8010364 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x208>)
 801026e:	364e      	adds	r6, #78	; 0x4e
 8010270:	4297      	cmp	r7, r2
 8010272:	d002      	beq.n	801027a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x11e>
 8010274:	4a3c      	ldr	r2, [pc, #240]	; (8010368 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d12f      	bne.n	80102da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 801027a:	3b01      	subs	r3, #1
 801027c:	0002      	movs	r2, r0
 801027e:	b29b      	uxth	r3, r3
 8010280:	0021      	movs	r1, r4
 8010282:	0028      	movs	r0, r5
 8010284:	f7ff ff5e 	bl	8010144 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010288:	2280      	movs	r2, #128	; 0x80
 801028a:	7b47      	ldrb	r7, [r0, #13]
 801028c:	0052      	lsls	r2, r2, #1
 801028e:	00f9      	lsls	r1, r7, #3
 8010290:	7a03      	ldrb	r3, [r0, #8]
 8010292:	4011      	ands	r1, r2
 8010294:	430b      	orrs	r3, r1
 8010296:	0679      	lsls	r1, r7, #25
 8010298:	d502      	bpl.n	80102a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801029a:	4931      	ldr	r1, [pc, #196]	; (8010360 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x204>)
 801029c:	185b      	adds	r3, r3, r1
 801029e:	b21b      	sxth	r3, r3
 80102a0:	8033      	strh	r3, [r6, #0]
 80102a2:	7b63      	ldrb	r3, [r4, #13]
 80102a4:	005b      	lsls	r3, r3, #1
 80102a6:	401a      	ands	r2, r3
 80102a8:	7aa3      	ldrb	r3, [r4, #10]
 80102aa:	4313      	orrs	r3, r2
 80102ac:	109a      	asrs	r2, r3, #2
 80102ae:	115b      	asrs	r3, r3, #5
 80102b0:	18d3      	adds	r3, r2, r3
 80102b2:	002a      	movs	r2, r5
 80102b4:	3252      	adds	r2, #82	; 0x52
 80102b6:	8013      	strh	r3, [r2, #0]
 80102b8:	2280      	movs	r2, #128	; 0x80
 80102ba:	7b61      	ldrb	r1, [r4, #13]
 80102bc:	0052      	lsls	r2, r2, #1
 80102be:	00cb      	lsls	r3, r1, #3
 80102c0:	401a      	ands	r2, r3
 80102c2:	7a23      	ldrb	r3, [r4, #8]
 80102c4:	4313      	orrs	r3, r2
 80102c6:	064a      	lsls	r2, r1, #25
 80102c8:	d502      	bpl.n	80102d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x174>
 80102ca:	4a25      	ldr	r2, [pc, #148]	; (8010360 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x204>)
 80102cc:	189b      	adds	r3, r3, r2
 80102ce:	b21b      	sxth	r3, r3
 80102d0:	9a00      	ldr	r2, [sp, #0]
 80102d2:	3550      	adds	r5, #80	; 0x50
 80102d4:	1a9b      	subs	r3, r3, r2
 80102d6:	802b      	strh	r3, [r5, #0]
 80102d8:	e74c      	b.n	8010174 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80102da:	2780      	movs	r7, #128	; 0x80
 80102dc:	00ca      	lsls	r2, r1, #3
 80102de:	007f      	lsls	r7, r7, #1
 80102e0:	4017      	ands	r7, r2
 80102e2:	7a22      	ldrb	r2, [r4, #8]
 80102e4:	433a      	orrs	r2, r7
 80102e6:	0649      	lsls	r1, r1, #25
 80102e8:	d502      	bpl.n	80102f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 80102ea:	491d      	ldr	r1, [pc, #116]	; (8010360 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x204>)
 80102ec:	1852      	adds	r2, r2, r1
 80102ee:	b212      	sxth	r2, r2
 80102f0:	8032      	strh	r2, [r6, #0]
 80102f2:	002f      	movs	r7, r5
 80102f4:	2210      	movs	r2, #16
 80102f6:	001e      	movs	r6, r3
 80102f8:	491c      	ldr	r1, [pc, #112]	; (801036c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 80102fa:	4396      	bics	r6, r2
 80102fc:	3752      	adds	r7, #82	; 0x52
 80102fe:	4a1c      	ldr	r2, [pc, #112]	; (8010370 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8010300:	428e      	cmp	r6, r1
 8010302:	d001      	beq.n	8010308 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ac>
 8010304:	4293      	cmp	r3, r2
 8010306:	d11b      	bne.n	8010340 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e4>
 8010308:	2180      	movs	r1, #128	; 0x80
 801030a:	7b66      	ldrb	r6, [r4, #13]
 801030c:	0049      	lsls	r1, r1, #1
 801030e:	0076      	lsls	r6, r6, #1
 8010310:	400e      	ands	r6, r1
 8010312:	7aa1      	ldrb	r1, [r4, #10]
 8010314:	430e      	orrs	r6, r1
 8010316:	4293      	cmp	r3, r2
 8010318:	d010      	beq.n	801033c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e0>
 801031a:	3b01      	subs	r3, #1
 801031c:	b29b      	uxth	r3, r3
 801031e:	0002      	movs	r2, r0
 8010320:	0021      	movs	r1, r4
 8010322:	0028      	movs	r0, r5
 8010324:	f7ff ff0e 	bl	8010144 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010328:	2280      	movs	r2, #128	; 0x80
 801032a:	7b43      	ldrb	r3, [r0, #13]
 801032c:	0052      	lsls	r2, r2, #1
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	4013      	ands	r3, r2
 8010332:	7a82      	ldrb	r2, [r0, #10]
 8010334:	4313      	orrs	r3, r2
 8010336:	1af6      	subs	r6, r6, r3
 8010338:	803e      	strh	r6, [r7, #0]
 801033a:	e7bd      	b.n	80102b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 801033c:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x218>)
 801033e:	e7ee      	b.n	801031e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c2>
 8010340:	2300      	movs	r3, #0
 8010342:	803b      	strh	r3, [r7, #0]
 8010344:	e7b8      	b.n	80102b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 8010346:	46c0      	nop			; (mov r8, r8)
 8010348:	fffff1cf 	.word	0xfffff1cf
 801034c:	3fc00079 	.word	0x3fc00079
 8010350:	0801696c 	.word	0x0801696c
 8010354:	08016bde 	.word	0x08016bde
 8010358:	08016975 	.word	0x08016975
 801035c:	00000e33 	.word	0x00000e33
 8010360:	fffffe00 	.word	0xfffffe00
 8010364:	00000e1b 	.word	0x00000e1b
 8010368:	00000e1d 	.word	0x00000e1d
 801036c:	00000e09 	.word	0x00000e09
 8010370:	00000e13 	.word	0x00000e13
 8010374:	00000e0c 	.word	0x00000e0c

08010378 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8010378:	0003      	movs	r3, r0
 801037a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801037c:	0006      	movs	r6, r0
 801037e:	b085      	sub	sp, #20
 8010380:	3350      	adds	r3, #80	; 0x50
 8010382:	0005      	movs	r5, r0
 8010384:	0014      	movs	r4, r2
 8010386:	364e      	adds	r6, #78	; 0x4e
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	2a00      	cmp	r2, #0
 801038c:	d106      	bne.n	801039c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x24>
 801038e:	4bb4      	ldr	r3, [pc, #720]	; (8010660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2e8>)
 8010390:	9a00      	ldr	r2, [sp, #0]
 8010392:	8033      	strh	r3, [r6, #0]
 8010394:	3552      	adds	r5, #82	; 0x52
 8010396:	8013      	strh	r3, [r2, #0]
 8010398:	802b      	strh	r3, [r5, #0]
 801039a:	e049      	b.n	8010430 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb8>
 801039c:	2080      	movs	r0, #128	; 0x80
 801039e:	8893      	ldrh	r3, [r2, #4]
 80103a0:	7b52      	ldrb	r2, [r2, #13]
 80103a2:	0040      	lsls	r0, r0, #1
 80103a4:	0111      	lsls	r1, r2, #4
 80103a6:	4008      	ands	r0, r1
 80103a8:	79e1      	ldrb	r1, [r4, #7]
 80103aa:	4301      	orrs	r1, r0
 80103ac:	b288      	uxth	r0, r1
 80103ae:	9001      	str	r0, [sp, #4]
 80103b0:	2001      	movs	r0, #1
 80103b2:	9003      	str	r0, [sp, #12]
 80103b4:	2904      	cmp	r1, #4
 80103b6:	dd01      	ble.n	80103bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x44>
 80103b8:	0889      	lsrs	r1, r1, #2
 80103ba:	9103      	str	r1, [sp, #12]
 80103bc:	21dd      	movs	r1, #221	; 0xdd
 80103be:	00c9      	lsls	r1, r1, #3
 80103c0:	428b      	cmp	r3, r1
 80103c2:	d900      	bls.n	80103c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x4e>
 80103c4:	e0a1      	b.n	801050a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80103c6:	49a7      	ldr	r1, [pc, #668]	; (8010664 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ec>)
 80103c8:	428b      	cmp	r3, r1
 80103ca:	d212      	bcs.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 80103cc:	49a6      	ldr	r1, [pc, #664]	; (8010668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2f0>)
 80103ce:	428b      	cmp	r3, r1
 80103d0:	d85b      	bhi.n	801048a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x112>
 80103d2:	49a6      	ldr	r1, [pc, #664]	; (801066c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2f4>)
 80103d4:	428b      	cmp	r3, r1
 80103d6:	d20c      	bcs.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 80103d8:	49a5      	ldr	r1, [pc, #660]	; (8010670 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2f8>)
 80103da:	428b      	cmp	r3, r1
 80103dc:	d84e      	bhi.n	801047c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x104>
 80103de:	49a5      	ldr	r1, [pc, #660]	; (8010674 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>)
 80103e0:	428b      	cmp	r3, r1
 80103e2:	d206      	bcs.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 80103e4:	49a4      	ldr	r1, [pc, #656]	; (8010678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>)
 80103e6:	428b      	cmp	r3, r1
 80103e8:	d02b      	beq.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 80103ea:	d824      	bhi.n	8010436 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80103ec:	390a      	subs	r1, #10
 80103ee:	428b      	cmp	r3, r1
 80103f0:	d365      	bcc.n	80104be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x146>
 80103f2:	2100      	movs	r1, #0
 80103f4:	5e73      	ldrsh	r3, [r6, r1]
 80103f6:	9302      	str	r3, [sp, #8]
 80103f8:	0019      	movs	r1, r3
 80103fa:	4b99      	ldr	r3, [pc, #612]	; (8010660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2e8>)
 80103fc:	4299      	cmp	r1, r3
 80103fe:	d000      	beq.n	8010402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x8a>
 8010400:	e0ba      	b.n	8010578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	2100      	movs	r1, #0
 8010406:	5e5b      	ldrsh	r3, [r3, r1]
 8010408:	9902      	ldr	r1, [sp, #8]
 801040a:	428b      	cmp	r3, r1
 801040c:	d000      	beq.n	8010410 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x98>
 801040e:	e0b3      	b.n	8010578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8010410:	2180      	movs	r1, #128	; 0x80
 8010412:	00d3      	lsls	r3, r2, #3
 8010414:	0049      	lsls	r1, r1, #1
 8010416:	4019      	ands	r1, r3
 8010418:	7a23      	ldrb	r3, [r4, #8]
 801041a:	430b      	orrs	r3, r1
 801041c:	0652      	lsls	r2, r2, #25
 801041e:	d502      	bpl.n	8010426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8010420:	4a96      	ldr	r2, [pc, #600]	; (801067c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>)
 8010422:	189b      	adds	r3, r3, r2
 8010424:	b21b      	sxth	r3, r3
 8010426:	9a01      	ldr	r2, [sp, #4]
 8010428:	8033      	strh	r3, [r6, #0]
 801042a:	1a9b      	subs	r3, r3, r2
 801042c:	9a00      	ldr	r2, [sp, #0]
 801042e:	8013      	strh	r3, [r2, #0]
 8010430:	0020      	movs	r0, r4
 8010432:	b005      	add	sp, #20
 8010434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010436:	4992      	ldr	r1, [pc, #584]	; (8010680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x308>)
 8010438:	428b      	cmp	r3, r1
 801043a:	d340      	bcc.n	80104be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x146>
 801043c:	4991      	ldr	r1, [pc, #580]	; (8010684 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x30c>)
 801043e:	428b      	cmp	r3, r1
 8010440:	d9d7      	bls.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 8010442:	9b00      	ldr	r3, [sp, #0]
 8010444:	4f86      	ldr	r7, [pc, #536]	; (8010660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2e8>)
 8010446:	2100      	movs	r1, #0
 8010448:	5e5b      	ldrsh	r3, [r3, r1]
 801044a:	9302      	str	r3, [sp, #8]
 801044c:	2100      	movs	r1, #0
 801044e:	5e73      	ldrsh	r3, [r6, r1]
 8010450:	42bb      	cmp	r3, r7
 8010452:	d000      	beq.n	8010456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xde>
 8010454:	e0d0      	b.n	80105f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x280>
 8010456:	9902      	ldr	r1, [sp, #8]
 8010458:	4299      	cmp	r1, r3
 801045a:	d000      	beq.n	801045e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xe6>
 801045c:	e0cc      	b.n	80105f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x280>
 801045e:	2180      	movs	r1, #128	; 0x80
 8010460:	00d3      	lsls	r3, r2, #3
 8010462:	0049      	lsls	r1, r1, #1
 8010464:	4019      	ands	r1, r3
 8010466:	7a23      	ldrb	r3, [r4, #8]
 8010468:	430b      	orrs	r3, r1
 801046a:	0652      	lsls	r2, r2, #25
 801046c:	d502      	bpl.n	8010474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfc>
 801046e:	4a83      	ldr	r2, [pc, #524]	; (801067c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>)
 8010470:	189b      	adds	r3, r3, r2
 8010472:	b21b      	sxth	r3, r3
 8010474:	9a01      	ldr	r2, [sp, #4]
 8010476:	3550      	adds	r5, #80	; 0x50
 8010478:	1a9b      	subs	r3, r3, r2
 801047a:	e78d      	b.n	8010398 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x20>
 801047c:	4982      	ldr	r1, [pc, #520]	; (8010688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x310>)
 801047e:	428b      	cmp	r3, r1
 8010480:	d8df      	bhi.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010482:	4982      	ldr	r1, [pc, #520]	; (801068c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x314>)
 8010484:	428b      	cmp	r3, r1
 8010486:	d3dc      	bcc.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010488:	e7b3      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 801048a:	4981      	ldr	r1, [pc, #516]	; (8010690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x318>)
 801048c:	428b      	cmp	r3, r1
 801048e:	d0b0      	beq.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 8010490:	d80b      	bhi.n	80104aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x132>
 8010492:	4980      	ldr	r1, [pc, #512]	; (8010694 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x31c>)
 8010494:	428b      	cmp	r3, r1
 8010496:	d801      	bhi.n	801049c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x124>
 8010498:	497f      	ldr	r1, [pc, #508]	; (8010698 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>)
 801049a:	e7f3      	b.n	8010484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x10c>
 801049c:	497f      	ldr	r1, [pc, #508]	; (801069c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>)
 801049e:	428b      	cmp	r3, r1
 80104a0:	d0cf      	beq.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 80104a2:	3111      	adds	r1, #17
 80104a4:	428b      	cmp	r3, r1
 80104a6:	d10a      	bne.n	80104be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x146>
 80104a8:	e7a3      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 80104aa:	497d      	ldr	r1, [pc, #500]	; (80106a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x328>)
 80104ac:	428b      	cmp	r3, r1
 80104ae:	d827      	bhi.n	8010500 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x188>
 80104b0:	497c      	ldr	r1, [pc, #496]	; (80106a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x32c>)
 80104b2:	428b      	cmp	r3, r1
 80104b4:	d29d      	bcs.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 80104b6:	497c      	ldr	r1, [pc, #496]	; (80106a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x330>)
 80104b8:	185b      	adds	r3, r3, r1
 80104ba:	2b05      	cmp	r3, #5
 80104bc:	d999      	bls.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 80104be:	2180      	movs	r1, #128	; 0x80
 80104c0:	00d3      	lsls	r3, r2, #3
 80104c2:	0049      	lsls	r1, r1, #1
 80104c4:	4019      	ands	r1, r3
 80104c6:	7a23      	ldrb	r3, [r4, #8]
 80104c8:	430b      	orrs	r3, r1
 80104ca:	0652      	lsls	r2, r2, #25
 80104cc:	d502      	bpl.n	80104d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x15c>
 80104ce:	4a6b      	ldr	r2, [pc, #428]	; (801067c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>)
 80104d0:	189b      	adds	r3, r3, r2
 80104d2:	b21b      	sxth	r3, r3
 80104d4:	9a01      	ldr	r2, [sp, #4]
 80104d6:	8033      	strh	r3, [r6, #0]
 80104d8:	1a9b      	subs	r3, r3, r2
 80104da:	9a00      	ldr	r2, [sp, #0]
 80104dc:	2105      	movs	r1, #5
 80104de:	8013      	strh	r3, [r2, #0]
 80104e0:	2380      	movs	r3, #128	; 0x80
 80104e2:	7b60      	ldrb	r0, [r4, #13]
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	0140      	lsls	r0, r0, #5
 80104e8:	4003      	ands	r3, r0
 80104ea:	79a0      	ldrb	r0, [r4, #6]
 80104ec:	3552      	adds	r5, #82	; 0x52
 80104ee:	4318      	orrs	r0, r3
 80104f0:	0040      	lsls	r0, r0, #1
 80104f2:	f7ef fe9d 	bl	8000230 <__divsi3>
 80104f6:	2309      	movs	r3, #9
 80104f8:	56e3      	ldrsb	r3, [r4, r3]
 80104fa:	1818      	adds	r0, r3, r0
 80104fc:	8028      	strh	r0, [r5, #0]
 80104fe:	e797      	b.n	8010430 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb8>
 8010500:	496a      	ldr	r1, [pc, #424]	; (80106ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x334>)
 8010502:	428b      	cmp	r3, r1
 8010504:	d09d      	beq.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010506:	496a      	ldr	r1, [pc, #424]	; (80106b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x338>)
 8010508:	e7cc      	b.n	80104a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12c>
 801050a:	496a      	ldr	r1, [pc, #424]	; (80106b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x33c>)
 801050c:	428b      	cmp	r3, r1
 801050e:	d820      	bhi.n	8010552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1da>
 8010510:	4969      	ldr	r1, [pc, #420]	; (80106b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x340>)
 8010512:	428b      	cmp	r3, r1
 8010514:	d295      	bcs.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010516:	4969      	ldr	r1, [pc, #420]	; (80106bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x344>)
 8010518:	428b      	cmp	r3, r1
 801051a:	d810      	bhi.n	801053e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801051c:	4968      	ldr	r1, [pc, #416]	; (80106c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x348>)
 801051e:	428b      	cmp	r3, r1
 8010520:	d300      	bcc.n	8010524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ac>
 8010522:	e766      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 8010524:	4967      	ldr	r1, [pc, #412]	; (80106c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x34c>)
 8010526:	428b      	cmp	r3, r1
 8010528:	d807      	bhi.n	801053a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c2>
 801052a:	4967      	ldr	r1, [pc, #412]	; (80106c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x350>)
 801052c:	428b      	cmp	r3, r1
 801052e:	d300      	bcc.n	8010532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ba>
 8010530:	e75f      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 8010532:	4966      	ldr	r1, [pc, #408]	; (80106cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x354>)
 8010534:	428b      	cmp	r3, r1
 8010536:	d084      	beq.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010538:	e7c1      	b.n	80104be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x146>
 801053a:	4965      	ldr	r1, [pc, #404]	; (80106d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x358>)
 801053c:	e7fa      	b.n	8010534 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1bc>
 801053e:	4965      	ldr	r1, [pc, #404]	; (80106d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x35c>)
 8010540:	428b      	cmp	r3, r1
 8010542:	d801      	bhi.n	8010548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8010544:	4964      	ldr	r1, [pc, #400]	; (80106d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x360>)
 8010546:	e79d      	b.n	8010484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x10c>
 8010548:	4964      	ldr	r1, [pc, #400]	; (80106dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x364>)
 801054a:	428b      	cmp	r3, r1
 801054c:	d000      	beq.n	8010550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d8>
 801054e:	e750      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 8010550:	e777      	b.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010552:	4963      	ldr	r1, [pc, #396]	; (80106e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x368>)
 8010554:	428b      	cmp	r3, r1
 8010556:	d100      	bne.n	801055a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8010558:	e773      	b.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 801055a:	d801      	bhi.n	8010560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801055c:	4961      	ldr	r1, [pc, #388]	; (80106e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x36c>)
 801055e:	e7f4      	b.n	801054a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d2>
 8010560:	4961      	ldr	r1, [pc, #388]	; (80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x370>)
 8010562:	428b      	cmp	r3, r1
 8010564:	d804      	bhi.n	8010570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f8>
 8010566:	4961      	ldr	r1, [pc, #388]	; (80106ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x374>)
 8010568:	428b      	cmp	r3, r1
 801056a:	d200      	bcs.n	801056e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f6>
 801056c:	e741      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 801056e:	e768      	b.n	8010442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xca>
 8010570:	495f      	ldr	r1, [pc, #380]	; (80106f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x378>)
 8010572:	428b      	cmp	r3, r1
 8010574:	d8a3      	bhi.n	80104be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x146>
 8010576:	e73c      	b.n	80103f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x7a>
 8010578:	002f      	movs	r7, r5
 801057a:	3740      	adds	r7, #64	; 0x40
 801057c:	0021      	movs	r1, r4
 801057e:	220e      	movs	r2, #14
 8010580:	0038      	movs	r0, r7
 8010582:	f002 fcab 	bl	8012edc <memcpy>
 8010586:	002b      	movs	r3, r5
 8010588:	3352      	adds	r3, #82	; 0x52
 801058a:	2100      	movs	r1, #0
 801058c:	5e59      	ldrsh	r1, [r3, r1]
 801058e:	4b34      	ldr	r3, [pc, #208]	; (8010660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2e8>)
 8010590:	4299      	cmp	r1, r3
 8010592:	d00b      	beq.n	80105ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x234>
 8010594:	2280      	movs	r2, #128	; 0x80
 8010596:	7b63      	ldrb	r3, [r4, #13]
 8010598:	0052      	lsls	r2, r2, #1
 801059a:	015b      	lsls	r3, r3, #5
 801059c:	401a      	ands	r2, r3
 801059e:	79a3      	ldrb	r3, [r4, #6]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	002a      	movs	r2, r5
 80105a4:	085b      	lsrs	r3, r3, #1
 80105a6:	1acb      	subs	r3, r1, r3
 80105a8:	3249      	adds	r2, #73	; 0x49
 80105aa:	7013      	strb	r3, [r2, #0]
 80105ac:	9b02      	ldr	r3, [sp, #8]
 80105ae:	001a      	movs	r2, r3
 80105b0:	4b2b      	ldr	r3, [pc, #172]	; (8010660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2e8>)
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d00c      	beq.n	80105d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x258>
 80105b6:	0013      	movs	r3, r2
 80105b8:	9a01      	ldr	r2, [sp, #4]
 80105ba:	2160      	movs	r1, #96	; 0x60
 80105bc:	4694      	mov	ip, r2
 80105be:	4463      	add	r3, ip
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	7b7a      	ldrb	r2, [r7, #13]
 80105c4:	723b      	strb	r3, [r7, #8]
 80105c6:	10db      	asrs	r3, r3, #3
 80105c8:	438a      	bics	r2, r1
 80105ca:	400b      	ands	r3, r1
 80105cc:	4313      	orrs	r3, r2
 80105ce:	737b      	strb	r3, [r7, #13]
 80105d0:	2280      	movs	r2, #128	; 0x80
 80105d2:	7b79      	ldrb	r1, [r7, #13]
 80105d4:	0052      	lsls	r2, r2, #1
 80105d6:	00cb      	lsls	r3, r1, #3
 80105d8:	401a      	ands	r2, r3
 80105da:	7a3b      	ldrb	r3, [r7, #8]
 80105dc:	4313      	orrs	r3, r2
 80105de:	064a      	lsls	r2, r1, #25
 80105e0:	d502      	bpl.n	80105e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x270>
 80105e2:	4a26      	ldr	r2, [pc, #152]	; (801067c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>)
 80105e4:	189b      	adds	r3, r3, r2
 80105e6:	b21b      	sxth	r3, r3
 80105e8:	8033      	strh	r3, [r6, #0]
 80105ea:	002c      	movs	r4, r5
 80105ec:	9a01      	ldr	r2, [sp, #4]
 80105ee:	3440      	adds	r4, #64	; 0x40
 80105f0:	1a9b      	subs	r3, r3, r2
 80105f2:	9a00      	ldr	r2, [sp, #0]
 80105f4:	8013      	strh	r3, [r2, #0]
 80105f6:	e71b      	b.n	8010430 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb8>
 80105f8:	002e      	movs	r6, r5
 80105fa:	3640      	adds	r6, #64	; 0x40
 80105fc:	0021      	movs	r1, r4
 80105fe:	220e      	movs	r2, #14
 8010600:	0030      	movs	r0, r6
 8010602:	f002 fc6b 	bl	8012edc <memcpy>
 8010606:	002b      	movs	r3, r5
 8010608:	3352      	adds	r3, #82	; 0x52
 801060a:	2100      	movs	r1, #0
 801060c:	5e59      	ldrsh	r1, [r3, r1]
 801060e:	42b9      	cmp	r1, r7
 8010610:	d00b      	beq.n	801062a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8010612:	2280      	movs	r2, #128	; 0x80
 8010614:	7b63      	ldrb	r3, [r4, #13]
 8010616:	0052      	lsls	r2, r2, #1
 8010618:	015b      	lsls	r3, r3, #5
 801061a:	401a      	ands	r2, r3
 801061c:	79a3      	ldrb	r3, [r4, #6]
 801061e:	4313      	orrs	r3, r2
 8010620:	002a      	movs	r2, r5
 8010622:	085b      	lsrs	r3, r3, #1
 8010624:	1acb      	subs	r3, r1, r3
 8010626:	3249      	adds	r2, #73	; 0x49
 8010628:	7013      	strb	r3, [r2, #0]
 801062a:	9b02      	ldr	r3, [sp, #8]
 801062c:	42bb      	cmp	r3, r7
 801062e:	d00a      	beq.n	8010646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ce>
 8010630:	9a03      	ldr	r2, [sp, #12]
 8010632:	7b71      	ldrb	r1, [r6, #13]
 8010634:	1a9b      	subs	r3, r3, r2
 8010636:	2260      	movs	r2, #96	; 0x60
 8010638:	b29b      	uxth	r3, r3
 801063a:	7233      	strb	r3, [r6, #8]
 801063c:	10db      	asrs	r3, r3, #3
 801063e:	4013      	ands	r3, r2
 8010640:	4391      	bics	r1, r2
 8010642:	430b      	orrs	r3, r1
 8010644:	7373      	strb	r3, [r6, #13]
 8010646:	2280      	movs	r2, #128	; 0x80
 8010648:	7b71      	ldrb	r1, [r6, #13]
 801064a:	0052      	lsls	r2, r2, #1
 801064c:	00cb      	lsls	r3, r1, #3
 801064e:	401a      	ands	r2, r3
 8010650:	7a33      	ldrb	r3, [r6, #8]
 8010652:	4313      	orrs	r3, r2
 8010654:	064a      	lsls	r2, r1, #25
 8010656:	d5c8      	bpl.n	80105ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x272>
 8010658:	4a08      	ldr	r2, [pc, #32]	; (801067c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>)
 801065a:	189b      	adds	r3, r3, r2
 801065c:	b21b      	sxth	r3, r3
 801065e:	e7c4      	b.n	80105ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x272>
 8010660:	ffff8000 	.word	0xffff8000
 8010664:	000006e7 	.word	0x000006e7
 8010668:	0000065b 	.word	0x0000065b
 801066c:	00000657 	.word	0x00000657
 8010670:	0000064f 	.word	0x0000064f
 8010674:	0000064e 	.word	0x0000064e
 8010678:	0000061a 	.word	0x0000061a
 801067c:	fffffe00 	.word	0xfffffe00
 8010680:	0000064b 	.word	0x0000064b
 8010684:	0000064c 	.word	0x0000064c
 8010688:	00000654 	.word	0x00000654
 801068c:	00000651 	.word	0x00000651
 8010690:	00000674 	.word	0x00000674
 8010694:	0000065e 	.word	0x0000065e
 8010698:	0000065d 	.word	0x0000065d
 801069c:	0000065f 	.word	0x0000065f
 80106a0:	000006e2 	.word	0x000006e2
 80106a4:	000006df 	.word	0x000006df
 80106a8:	fffff92a 	.word	0xfffff92a
 80106ac:	000006e3 	.word	0x000006e3
 80106b0:	000006e4 	.word	0x000006e4
 80106b4:	000008ef 	.word	0x000008ef
 80106b8:	000008ed 	.word	0x000008ed
 80106bc:	000008e5 	.word	0x000008e5
 80106c0:	000008e4 	.word	0x000008e4
 80106c4:	000006ec 	.word	0x000006ec
 80106c8:	000006eb 	.word	0x000006eb
 80106cc:	000006ea 	.word	0x000006ea
 80106d0:	000006ed 	.word	0x000006ed
 80106d4:	000008e8 	.word	0x000008e8
 80106d8:	000008e7 	.word	0x000008e7
 80106dc:	000008e9 	.word	0x000008e9
 80106e0:	000008f6 	.word	0x000008f6
 80106e4:	000008f2 	.word	0x000008f2
 80106e8:	000008fa 	.word	0x000008fa
 80106ec:	000008f9 	.word	0x000008f9
 80106f0:	000008fe 	.word	0x000008fe

080106f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80106f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106f6:	001d      	movs	r5, r3
 80106f8:	0003      	movs	r3, r0
 80106fa:	331a      	adds	r3, #26
 80106fc:	0017      	movs	r7, r2
 80106fe:	8ada      	ldrh	r2, [r3, #22]
 8010700:	0006      	movs	r6, r0
 8010702:	2a00      	cmp	r2, #0
 8010704:	d105      	bne.n	8010712 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8010706:	4b27      	ldr	r3, [pc, #156]	; (80107a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xb0>)
 8010708:	4a27      	ldr	r2, [pc, #156]	; (80107a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xb4>)
 801070a:	21c0      	movs	r1, #192	; 0xc0
 801070c:	4827      	ldr	r0, [pc, #156]	; (80107ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xb8>)
 801070e:	f002 fb71 	bl	8012df4 <__assert_func>
 8010712:	8a9a      	ldrh	r2, [r3, #20]
 8010714:	0052      	lsls	r2, r2, #1
 8010716:	5ad3      	ldrh	r3, [r2, r3]
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	f7f9 fc87 	bl	800a02c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801071e:	1e04      	subs	r4, r0, #0
 8010720:	d102      	bne.n	8010728 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8010722:	6028      	str	r0, [r5, #0]
 8010724:	0020      	movs	r0, r4
 8010726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	0001      	movs	r1, r0
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	0038      	movs	r0, r7
 8010730:	4798      	blx	r3
 8010732:	9b00      	ldr	r3, [sp, #0]
 8010734:	0002      	movs	r2, r0
 8010736:	6028      	str	r0, [r5, #0]
 8010738:	481d      	ldr	r0, [pc, #116]	; (80107b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xbc>)
 801073a:	491e      	ldr	r1, [pc, #120]	; (80107b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xc0>)
 801073c:	181b      	adds	r3, r3, r0
 801073e:	0030      	movs	r0, r6
 8010740:	b29b      	uxth	r3, r3
 8010742:	3055      	adds	r0, #85	; 0x55
 8010744:	9001      	str	r0, [sp, #4]
 8010746:	428b      	cmp	r3, r1
 8010748:	d815      	bhi.n	8010776 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801074a:	9b00      	ldr	r3, [sp, #0]
 801074c:	0039      	movs	r1, r7
 801074e:	0030      	movs	r0, r6
 8010750:	f7ff fe12 	bl	8010378 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010754:	6028      	str	r0, [r5, #0]
 8010756:	6829      	ldr	r1, [r5, #0]
 8010758:	1e0b      	subs	r3, r1, #0
 801075a:	d009      	beq.n	8010770 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x7c>
 801075c:	2280      	movs	r2, #128	; 0x80
 801075e:	7b4b      	ldrb	r3, [r1, #13]
 8010760:	0052      	lsls	r2, r2, #1
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	401a      	ands	r2, r3
 8010766:	7a8b      	ldrb	r3, [r1, #10]
 8010768:	4313      	orrs	r3, r2
 801076a:	425a      	negs	r2, r3
 801076c:	4153      	adcs	r3, r2
 801076e:	b2db      	uxtb	r3, r3
 8010770:	9a01      	ldr	r2, [sp, #4]
 8010772:	7013      	strb	r3, [r2, #0]
 8010774:	e7d6      	b.n	8010724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8010776:	4b10      	ldr	r3, [pc, #64]	; (80107b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xc4>)
 8010778:	18e3      	adds	r3, r4, r3
 801077a:	b29b      	uxth	r3, r3
 801077c:	2b7f      	cmp	r3, #127	; 0x7f
 801077e:	d804      	bhi.n	801078a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x96>
 8010780:	0039      	movs	r1, r7
 8010782:	0030      	movs	r0, r6
 8010784:	f7ff fcea 	bl	801015c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8010788:	e7e4      	b.n	8010754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x60>
 801078a:	9b01      	ldr	r3, [sp, #4]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d0e1      	beq.n	8010756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x62>
 8010792:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xc8>)
 8010794:	429c      	cmp	r4, r3
 8010796:	d1de      	bne.n	8010756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x62>
 8010798:	0011      	movs	r1, r2
 801079a:	0030      	movs	r0, r6
 801079c:	f7ff fcbb 	bl	8010116 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80107a0:	e7d8      	b.n	8010754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x60>
 80107a2:	46c0      	nop			; (mov r8, r8)
 80107a4:	0801696c 	.word	0x0801696c
 80107a8:	08016bde 	.word	0x08016bde
 80107ac:	08016975 	.word	0x08016975
 80107b0:	fffffa00 	.word	0xfffffa00
 80107b4:	000002ff 	.word	0x000002ff
 80107b8:	fffff200 	.word	0xfffff200
 80107bc:	00000902 	.word	0x00000902

080107c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80107c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107c2:	001c      	movs	r4, r3
 80107c4:	0003      	movs	r3, r0
 80107c6:	9200      	str	r2, [sp, #0]
 80107c8:	331a      	adds	r3, #26
 80107ca:	8ada      	ldrh	r2, [r3, #22]
 80107cc:	0005      	movs	r5, r0
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	d105      	bne.n	80107de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80107d2:	4b28      	ldr	r3, [pc, #160]	; (8010874 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb4>)
 80107d4:	4a28      	ldr	r2, [pc, #160]	; (8010878 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb8>)
 80107d6:	21c0      	movs	r1, #192	; 0xc0
 80107d8:	4828      	ldr	r0, [pc, #160]	; (801087c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xbc>)
 80107da:	f002 fb0b 	bl	8012df4 <__assert_func>
 80107de:	8a9a      	ldrh	r2, [r3, #20]
 80107e0:	0052      	lsls	r2, r2, #1
 80107e2:	5ad3      	ldrh	r3, [r2, r3]
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	f7f9 fc21 	bl	800a02c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80107ea:	1e07      	subs	r7, r0, #0
 80107ec:	d102      	bne.n	80107f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 80107ee:	6020      	str	r0, [r4, #0]
 80107f0:	0038      	movs	r0, r7
 80107f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107f4:	9b00      	ldr	r3, [sp, #0]
 80107f6:	0001      	movs	r1, r0
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	9a08      	ldr	r2, [sp, #32]
 80107fc:	689b      	ldr	r3, [r3, #8]
 80107fe:	9800      	ldr	r0, [sp, #0]
 8010800:	001e      	movs	r6, r3
 8010802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010804:	47b0      	blx	r6
 8010806:	9b01      	ldr	r3, [sp, #4]
 8010808:	0002      	movs	r2, r0
 801080a:	6020      	str	r0, [r4, #0]
 801080c:	481c      	ldr	r0, [pc, #112]	; (8010880 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xc0>)
 801080e:	491d      	ldr	r1, [pc, #116]	; (8010884 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xc4>)
 8010810:	181b      	adds	r3, r3, r0
 8010812:	0028      	movs	r0, r5
 8010814:	b29b      	uxth	r3, r3
 8010816:	3055      	adds	r0, #85	; 0x55
 8010818:	0006      	movs	r6, r0
 801081a:	428b      	cmp	r3, r1
 801081c:	d814      	bhi.n	8010848 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801081e:	9b01      	ldr	r3, [sp, #4]
 8010820:	9900      	ldr	r1, [sp, #0]
 8010822:	0028      	movs	r0, r5
 8010824:	f7ff fda8 	bl	8010378 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010828:	6020      	str	r0, [r4, #0]
 801082a:	6821      	ldr	r1, [r4, #0]
 801082c:	1e0b      	subs	r3, r1, #0
 801082e:	d009      	beq.n	8010844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x84>
 8010830:	2280      	movs	r2, #128	; 0x80
 8010832:	7b4b      	ldrb	r3, [r1, #13]
 8010834:	0052      	lsls	r2, r2, #1
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	401a      	ands	r2, r3
 801083a:	7a8b      	ldrb	r3, [r1, #10]
 801083c:	4313      	orrs	r3, r2
 801083e:	425a      	negs	r2, r3
 8010840:	4153      	adcs	r3, r2
 8010842:	b2db      	uxtb	r3, r3
 8010844:	7033      	strb	r3, [r6, #0]
 8010846:	e7d3      	b.n	80107f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x30>
 8010848:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xc8>)
 801084a:	18fb      	adds	r3, r7, r3
 801084c:	b29b      	uxth	r3, r3
 801084e:	2b7f      	cmp	r3, #127	; 0x7f
 8010850:	d804      	bhi.n	801085c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x9c>
 8010852:	9900      	ldr	r1, [sp, #0]
 8010854:	0028      	movs	r0, r5
 8010856:	f7ff fc81 	bl	801015c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801085a:	e7e5      	b.n	8010828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x68>
 801085c:	7803      	ldrb	r3, [r0, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d0e3      	beq.n	801082a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8010862:	4b0a      	ldr	r3, [pc, #40]	; (801088c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xcc>)
 8010864:	429f      	cmp	r7, r3
 8010866:	d1e0      	bne.n	801082a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8010868:	0011      	movs	r1, r2
 801086a:	0028      	movs	r0, r5
 801086c:	f7ff fc53 	bl	8010116 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8010870:	e7da      	b.n	8010828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x68>
 8010872:	46c0      	nop			; (mov r8, r8)
 8010874:	0801696c 	.word	0x0801696c
 8010878:	08016bde 	.word	0x08016bde
 801087c:	08016975 	.word	0x08016975
 8010880:	fffffa00 	.word	0xfffffa00
 8010884:	000002ff 	.word	0x000002ff
 8010888:	fffff200 	.word	0xfffff200
 801088c:	00000902 	.word	0x00000902

08010890 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8010890:	b570      	push	{r4, r5, r6, lr}
 8010892:	0002      	movs	r2, r0
 8010894:	0004      	movs	r4, r0
 8010896:	0005      	movs	r5, r0
 8010898:	3232      	adds	r2, #50	; 0x32
 801089a:	341a      	adds	r4, #26
 801089c:	88d6      	ldrh	r6, [r2, #6]
 801089e:	8ae3      	ldrh	r3, [r4, #22]
 80108a0:	2e00      	cmp	r6, #0
 80108a2:	d11a      	bne.n	80108da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80108a4:	8ae3      	ldrh	r3, [r4, #22]
 80108a6:	2b0a      	cmp	r3, #10
 80108a8:	d033      	beq.n	8010912 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80108aa:	0028      	movs	r0, r5
 80108ac:	f7ff fbf7 	bl	801009e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80108b0:	8ae3      	ldrh	r3, [r4, #22]
 80108b2:	2b09      	cmp	r3, #9
 80108b4:	d906      	bls.n	80108c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x34>
 80108b6:	2182      	movs	r1, #130	; 0x82
 80108b8:	4b16      	ldr	r3, [pc, #88]	; (8010914 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80108ba:	4a17      	ldr	r2, [pc, #92]	; (8010918 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80108bc:	0049      	lsls	r1, r1, #1
 80108be:	4817      	ldr	r0, [pc, #92]	; (801091c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80108c0:	f002 fa98 	bl	8012df4 <__assert_func>
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	82e2      	strh	r2, [r4, #22]
 80108c8:	8aa2      	ldrh	r2, [r4, #20]
 80108ca:	189b      	adds	r3, r3, r2
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	2b09      	cmp	r3, #9
 80108d0:	d900      	bls.n	80108d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80108d2:	3b0a      	subs	r3, #10
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	52e0      	strh	r0, [r4, r3]
 80108d8:	e7e4      	b.n	80108a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x14>
 80108da:	2b0a      	cmp	r3, #10
 80108dc:	d019      	beq.n	8010912 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80108de:	8891      	ldrh	r1, [r2, #4]
 80108e0:	3e01      	subs	r6, #1
 80108e2:	0048      	lsls	r0, r1, #1
 80108e4:	5a80      	ldrh	r0, [r0, r2]
 80108e6:	80d6      	strh	r6, [r2, #6]
 80108e8:	1c4e      	adds	r6, r1, #1
 80108ea:	b2b6      	uxth	r6, r6
 80108ec:	2e01      	cmp	r6, #1
 80108ee:	d80d      	bhi.n	801090c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7c>
 80108f0:	8096      	strh	r6, [r2, #4]
 80108f2:	2b09      	cmp	r3, #9
 80108f4:	d8df      	bhi.n	80108b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x26>
 80108f6:	1c59      	adds	r1, r3, #1
 80108f8:	82e1      	strh	r1, [r4, #22]
 80108fa:	8aa1      	ldrh	r1, [r4, #20]
 80108fc:	185b      	adds	r3, r3, r1
 80108fe:	b29b      	uxth	r3, r3
 8010900:	2b09      	cmp	r3, #9
 8010902:	d900      	bls.n	8010906 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x76>
 8010904:	3b0a      	subs	r3, #10
 8010906:	005b      	lsls	r3, r3, #1
 8010908:	52e0      	strh	r0, [r4, r3]
 801090a:	e7c7      	b.n	801089c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801090c:	3901      	subs	r1, #1
 801090e:	8091      	strh	r1, [r2, #4]
 8010910:	e7ef      	b.n	80108f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x62>
 8010912:	bd70      	pop	{r4, r5, r6, pc}
 8010914:	080169a1 	.word	0x080169a1
 8010918:	08016d34 	.word	0x08016d34
 801091c:	08016975 	.word	0x08016975

08010920 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8010920:	0003      	movs	r3, r0
 8010922:	b570      	push	{r4, r5, r6, lr}
 8010924:	331a      	adds	r3, #26
 8010926:	8ad9      	ldrh	r1, [r3, #22]
 8010928:	0005      	movs	r5, r0
 801092a:	2900      	cmp	r1, #0
 801092c:	d105      	bne.n	801093a <_ZN8touchgfx12TextProvider11getNextCharEv+0x1a>
 801092e:	4b14      	ldr	r3, [pc, #80]	; (8010980 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8010930:	4a14      	ldr	r2, [pc, #80]	; (8010984 <_ZN8touchgfx12TextProvider11getNextCharEv+0x64>)
 8010932:	31d5      	adds	r1, #213	; 0xd5
 8010934:	4814      	ldr	r0, [pc, #80]	; (8010988 <_ZN8touchgfx12TextProvider11getNextCharEv+0x68>)
 8010936:	f002 fa5d 	bl	8012df4 <__assert_func>
 801093a:	8a9a      	ldrh	r2, [r3, #20]
 801093c:	3901      	subs	r1, #1
 801093e:	0050      	lsls	r0, r2, #1
 8010940:	5ac4      	ldrh	r4, [r0, r3]
 8010942:	82d9      	strh	r1, [r3, #22]
 8010944:	1c51      	adds	r1, r2, #1
 8010946:	b289      	uxth	r1, r1
 8010948:	2909      	cmp	r1, #9
 801094a:	d816      	bhi.n	801097a <_ZN8touchgfx12TextProvider11getNextCharEv+0x5a>
 801094c:	8299      	strh	r1, [r3, #20]
 801094e:	0028      	movs	r0, r5
 8010950:	3512      	adds	r5, #18
 8010952:	f7ff ff9d 	bl	8010890 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8010956:	88eb      	ldrh	r3, [r5, #6]
 8010958:	2b01      	cmp	r3, #1
 801095a:	d801      	bhi.n	8010960 <_ZN8touchgfx12TextProvider11getNextCharEv+0x40>
 801095c:	3301      	adds	r3, #1
 801095e:	80eb      	strh	r3, [r5, #6]
 8010960:	88ab      	ldrh	r3, [r5, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <_ZN8touchgfx12TextProvider11getNextCharEv+0x4a>
 8010966:	3302      	adds	r3, #2
 8010968:	80ab      	strh	r3, [r5, #4]
 801096a:	88ab      	ldrh	r3, [r5, #4]
 801096c:	0020      	movs	r0, r4
 801096e:	3b01      	subs	r3, #1
 8010970:	b29b      	uxth	r3, r3
 8010972:	80ab      	strh	r3, [r5, #4]
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	52ec      	strh	r4, [r5, r3]
 8010978:	bd70      	pop	{r4, r5, r6, pc}
 801097a:	3a09      	subs	r2, #9
 801097c:	829a      	strh	r2, [r3, #20]
 801097e:	e7e6      	b.n	801094e <_ZN8touchgfx12TextProvider11getNextCharEv+0x2e>
 8010980:	0801696c 	.word	0x0801696c
 8010984:	08016c89 	.word	0x08016c89
 8010988:	08016975 	.word	0x08016975

0801098c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801098c:	b570      	push	{r4, r5, r6, lr}
 801098e:	0004      	movs	r4, r0
 8010990:	341a      	adds	r4, #26
 8010992:	8ae5      	ldrh	r5, [r4, #22]
 8010994:	428a      	cmp	r2, r1
 8010996:	d90e      	bls.n	80109b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8010998:	4c1e      	ldr	r4, [pc, #120]	; (8010a14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801099a:	2d00      	cmp	r5, #0
 801099c:	d105      	bne.n	80109aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x1e>
 801099e:	21e1      	movs	r1, #225	; 0xe1
 80109a0:	4b1d      	ldr	r3, [pc, #116]	; (8010a18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80109a2:	4a1e      	ldr	r2, [pc, #120]	; (8010a1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80109a4:	0020      	movs	r0, r4
 80109a6:	f002 fa25 	bl	8012df4 <__assert_func>
 80109aa:	3d01      	subs	r5, #1
 80109ac:	8605      	strh	r5, [r0, #48]	; 0x30
 80109ae:	4b1c      	ldr	r3, [pc, #112]	; (8010a20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80109b0:	4a1c      	ldr	r2, [pc, #112]	; (8010a24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80109b2:	21c5      	movs	r1, #197	; 0xc5
 80109b4:	e7f6      	b.n	80109a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x18>
 80109b6:	428d      	cmp	r5, r1
 80109b8:	d204      	bcs.n	80109c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x38>
 80109ba:	21cb      	movs	r1, #203	; 0xcb
 80109bc:	4b1a      	ldr	r3, [pc, #104]	; (8010a28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80109be:	4a1b      	ldr	r2, [pc, #108]	; (8010a2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa0>)
 80109c0:	4814      	ldr	r0, [pc, #80]	; (8010a14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80109c2:	e7f0      	b.n	80109a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x1a>
 80109c4:	1a6d      	subs	r5, r5, r1
 80109c6:	82e5      	strh	r5, [r4, #22]
 80109c8:	8aa5      	ldrh	r5, [r4, #20]
 80109ca:	1949      	adds	r1, r1, r5
 80109cc:	b289      	uxth	r1, r1
 80109ce:	2909      	cmp	r1, #9
 80109d0:	d80e      	bhi.n	80109f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80109d2:	260a      	movs	r6, #10
 80109d4:	82a1      	strh	r1, [r4, #20]
 80109d6:	2a00      	cmp	r2, #0
 80109d8:	d019      	beq.n	8010a0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 80109da:	3a01      	subs	r2, #1
 80109dc:	b292      	uxth	r2, r2
 80109de:	0051      	lsls	r1, r2, #1
 80109e0:	5acd      	ldrh	r5, [r1, r3]
 80109e2:	8ae1      	ldrh	r1, [r4, #22]
 80109e4:	2909      	cmp	r1, #9
 80109e6:	d905      	bls.n	80109f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 80109e8:	4b11      	ldr	r3, [pc, #68]	; (8010a30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa4>)
 80109ea:	4a12      	ldr	r2, [pc, #72]	; (8010a34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>)
 80109ec:	21e6      	movs	r1, #230	; 0xe6
 80109ee:	e7e7      	b.n	80109c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x34>
 80109f0:	390a      	subs	r1, #10
 80109f2:	e7ee      	b.n	80109d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x46>
 80109f4:	3101      	adds	r1, #1
 80109f6:	82e1      	strh	r1, [r4, #22]
 80109f8:	8aa1      	ldrh	r1, [r4, #20]
 80109fa:	2900      	cmp	r1, #0
 80109fc:	d100      	bne.n	8010a00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80109fe:	82a6      	strh	r6, [r4, #20]
 8010a00:	8aa1      	ldrh	r1, [r4, #20]
 8010a02:	3901      	subs	r1, #1
 8010a04:	b289      	uxth	r1, r1
 8010a06:	82a1      	strh	r1, [r4, #20]
 8010a08:	0049      	lsls	r1, r1, #1
 8010a0a:	5265      	strh	r5, [r4, r1]
 8010a0c:	e7e3      	b.n	80109d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x4a>
 8010a0e:	f7ff ff3f 	bl	8010890 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8010a12:	bd70      	pop	{r4, r5, r6, pc}
 8010a14:	08016975 	.word	0x08016975
 8010a18:	0801696c 	.word	0x0801696c
 8010a1c:	08016a62 	.word	0x08016a62
 8010a20:	080169ad 	.word	0x080169ad
 8010a24:	08016b0c 	.word	0x08016b0c
 8010a28:	080169bb 	.word	0x080169bb
 8010a2c:	08016de3 	.word	0x08016de3
 8010a30:	080169c7 	.word	0x080169c7
 8010a34:	080169da 	.word	0x080169da

08010a38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8010a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3a:	ac06      	add	r4, sp, #24
 8010a3c:	8825      	ldrh	r5, [r4, #0]
 8010a3e:	4c1e      	ldr	r4, [pc, #120]	; (8010ab8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8010a40:	0006      	movs	r6, r0
 8010a42:	46a4      	mov	ip, r4
 8010a44:	3a01      	subs	r2, #1
 8010a46:	b292      	uxth	r2, r2
 8010a48:	3612      	adds	r6, #18
 8010a4a:	4562      	cmp	r2, ip
 8010a4c:	d018      	beq.n	8010a80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x48>
 8010a4e:	88f4      	ldrh	r4, [r6, #6]
 8010a50:	880f      	ldrh	r7, [r1, #0]
 8010a52:	4294      	cmp	r4, r2
 8010a54:	d805      	bhi.n	8010a62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2a>
 8010a56:	4b19      	ldr	r3, [pc, #100]	; (8010abc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8010a58:	4a19      	ldr	r2, [pc, #100]	; (8010ac0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8010a5a:	21c5      	movs	r1, #197	; 0xc5
 8010a5c:	4819      	ldr	r0, [pc, #100]	; (8010ac4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8010a5e:	f002 f9c9 	bl	8012df4 <__assert_func>
 8010a62:	88b4      	ldrh	r4, [r6, #4]
 8010a64:	1914      	adds	r4, r2, r4
 8010a66:	b2a4      	uxth	r4, r4
 8010a68:	2c01      	cmp	r4, #1
 8010a6a:	d900      	bls.n	8010a6e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x36>
 8010a6c:	3c02      	subs	r4, #2
 8010a6e:	0064      	lsls	r4, r4, #1
 8010a70:	5b34      	ldrh	r4, [r6, r4]
 8010a72:	3a01      	subs	r2, #1
 8010a74:	3102      	adds	r1, #2
 8010a76:	b292      	uxth	r2, r2
 8010a78:	42bc      	cmp	r4, r7
 8010a7a:	d0e6      	beq.n	8010a4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x12>
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a80:	2400      	movs	r4, #0
 8010a82:	195b      	adds	r3, r3, r5
 8010a84:	301a      	adds	r0, #26
 8010a86:	b2a2      	uxth	r2, r4
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	da13      	bge.n	8010ab4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7c>
 8010a8c:	8ac6      	ldrh	r6, [r0, #22]
 8010a8e:	0065      	lsls	r5, r4, #1
 8010a90:	5b4d      	ldrh	r5, [r1, r5]
 8010a92:	4296      	cmp	r6, r2
 8010a94:	d802      	bhi.n	8010a9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x64>
 8010a96:	4b09      	ldr	r3, [pc, #36]	; (8010abc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8010a98:	4a0b      	ldr	r2, [pc, #44]	; (8010ac8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x90>)
 8010a9a:	e7de      	b.n	8010a5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x22>
 8010a9c:	8a86      	ldrh	r6, [r0, #20]
 8010a9e:	1992      	adds	r2, r2, r6
 8010aa0:	b292      	uxth	r2, r2
 8010aa2:	2a09      	cmp	r2, #9
 8010aa4:	d900      	bls.n	8010aa8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>
 8010aa6:	3a0a      	subs	r2, #10
 8010aa8:	0052      	lsls	r2, r2, #1
 8010aaa:	5a82      	ldrh	r2, [r0, r2]
 8010aac:	3401      	adds	r4, #1
 8010aae:	42aa      	cmp	r2, r5
 8010ab0:	d0e9      	beq.n	8010a86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4e>
 8010ab2:	e7e3      	b.n	8010a7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	e7e2      	b.n	8010a7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x46>
 8010ab8:	0000ffff 	.word	0x0000ffff
 8010abc:	080169ad 	.word	0x080169ad
 8010ac0:	08016e67 	.word	0x08016e67
 8010ac4:	08016975 	.word	0x08016975
 8010ac8:	08016b0c 	.word	0x08016b0c

08010acc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8010acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ace:	b087      	sub	sp, #28
 8010ad0:	9004      	str	r0, [sp, #16]
 8010ad2:	9205      	str	r2, [sp, #20]
 8010ad4:	880a      	ldrh	r2, [r1, #0]
 8010ad6:	1c8f      	adds	r7, r1, #2
 8010ad8:	0b14      	lsrs	r4, r2, #12
 8010ada:	0063      	lsls	r3, r4, #1
 8010adc:	5bdb      	ldrh	r3, [r3, r7]
 8010ade:	9905      	ldr	r1, [sp, #20]
 8010ae0:	428b      	cmp	r3, r1
 8010ae2:	d127      	bne.n	8010b34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x68>
 8010ae4:	230f      	movs	r3, #15
 8010ae6:	210f      	movs	r1, #15
 8010ae8:	1215      	asrs	r5, r2, #8
 8010aea:	401d      	ands	r5, r3
 8010aec:	1113      	asrs	r3, r2, #4
 8010aee:	4019      	ands	r1, r3
 8010af0:	230f      	movs	r3, #15
 8010af2:	4013      	ands	r3, r2
 8010af4:	9102      	str	r1, [sp, #8]
 8010af6:	9303      	str	r3, [sp, #12]
 8010af8:	9100      	str	r1, [sp, #0]
 8010afa:	002b      	movs	r3, r5
 8010afc:	0022      	movs	r2, r4
 8010afe:	0039      	movs	r1, r7
 8010b00:	9804      	ldr	r0, [sp, #16]
 8010b02:	f7ff ff99 	bl	8010a38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8010b06:	1e06      	subs	r6, r0, #0
 8010b08:	d00c      	beq.n	8010b24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x58>
 8010b0a:	9a02      	ldr	r2, [sp, #8]
 8010b0c:	1963      	adds	r3, r4, r5
 8010b0e:	189b      	adds	r3, r3, r2
 8010b10:	005b      	lsls	r3, r3, #1
 8010b12:	18fb      	adds	r3, r7, r3
 8010b14:	9a03      	ldr	r2, [sp, #12]
 8010b16:	0029      	movs	r1, r5
 8010b18:	9804      	ldr	r0, [sp, #16]
 8010b1a:	f7ff ff37 	bl	801098c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8010b1e:	0030      	movs	r0, r6
 8010b20:	b007      	add	sp, #28
 8010b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b24:	9b03      	ldr	r3, [sp, #12]
 8010b26:	1919      	adds	r1, r3, r4
 8010b28:	9b02      	ldr	r3, [sp, #8]
 8010b2a:	1949      	adds	r1, r1, r5
 8010b2c:	18c9      	adds	r1, r1, r3
 8010b2e:	0049      	lsls	r1, r1, #1
 8010b30:	1879      	adds	r1, r7, r1
 8010b32:	e7cf      	b.n	8010ad4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8010b34:	2600      	movs	r6, #0
 8010b36:	e7f2      	b.n	8010b1e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x52>

08010b38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	8814      	ldrh	r4, [r2, #0]
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	429c      	cmp	r4, r3
 8010b40:	d815      	bhi.n	8010b6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>
 8010b42:	1e4c      	subs	r4, r1, #1
 8010b44:	00a4      	lsls	r4, r4, #2
 8010b46:	5aa4      	ldrh	r4, [r4, r2]
 8010b48:	429c      	cmp	r4, r3
 8010b4a:	d310      	bcc.n	8010b6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>
 8010b4c:	4288      	cmp	r0, r1
 8010b4e:	d20f      	bcs.n	8010b70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010b50:	1844      	adds	r4, r0, r1
 8010b52:	1064      	asrs	r4, r4, #1
 8010b54:	00a5      	lsls	r5, r4, #2
 8010b56:	5b56      	ldrh	r6, [r2, r5]
 8010b58:	42b3      	cmp	r3, r6
 8010b5a:	d902      	bls.n	8010b62 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2a>
 8010b5c:	3401      	adds	r4, #1
 8010b5e:	b2a0      	uxth	r0, r4
 8010b60:	e7f4      	b.n	8010b4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010b62:	42b3      	cmp	r3, r6
 8010b64:	d201      	bcs.n	8010b6a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8010b66:	b2a1      	uxth	r1, r4
 8010b68:	e7f0      	b.n	8010b4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010b6a:	1952      	adds	r2, r2, r5
 8010b6c:	8850      	ldrh	r0, [r2, #2]
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	2000      	movs	r0, #0
 8010b72:	e7fc      	b.n	8010b6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08010b74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8010b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b76:	0004      	movs	r4, r0
 8010b78:	260b      	movs	r6, #11
 8010b7a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8010b7c:	886b      	ldrh	r3, [r5, #2]
 8010b7e:	085b      	lsrs	r3, r3, #1
 8010b80:	9301      	str	r3, [sp, #4]
 8010b82:	3e01      	subs	r6, #1
 8010b84:	2e00      	cmp	r6, #0
 8010b86:	d01d      	beq.n	8010bc4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>
 8010b88:	0023      	movs	r3, r4
 8010b8a:	331a      	adds	r3, #26
 8010b8c:	8ada      	ldrh	r2, [r3, #22]
 8010b8e:	2a00      	cmp	r2, #0
 8010b90:	d105      	bne.n	8010b9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x2a>
 8010b92:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8010b94:	4a0d      	ldr	r2, [pc, #52]	; (8010bcc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8010b96:	21c0      	movs	r1, #192	; 0xc0
 8010b98:	480d      	ldr	r0, [pc, #52]	; (8010bd0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x5c>)
 8010b9a:	f002 f92b 	bl	8012df4 <__assert_func>
 8010b9e:	8a9a      	ldrh	r2, [r3, #20]
 8010ba0:	9901      	ldr	r1, [sp, #4]
 8010ba2:	0052      	lsls	r2, r2, #1
 8010ba4:	5ad7      	ldrh	r7, [r2, r3]
 8010ba6:	0020      	movs	r0, r4
 8010ba8:	003b      	movs	r3, r7
 8010baa:	002a      	movs	r2, r5
 8010bac:	f7ff ffc4 	bl	8010b38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	d007      	beq.n	8010bc4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>
 8010bb4:	0040      	lsls	r0, r0, #1
 8010bb6:	1829      	adds	r1, r5, r0
 8010bb8:	003a      	movs	r2, r7
 8010bba:	0020      	movs	r0, r4
 8010bbc:	f7ff ff86 	bl	8010acc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d1de      	bne.n	8010b82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8010bc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010bc6:	46c0      	nop			; (mov r8, r8)
 8010bc8:	0801696c 	.word	0x0801696c
 8010bcc:	08016bde 	.word	0x08016bde
 8010bd0:	08016975 	.word	0x08016975

08010bd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8010bd4:	4b01      	ldr	r3, [pc, #4]	; (8010bdc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8010bd6:	6018      	str	r0, [r3, #0]
 8010bd8:	4770      	bx	lr
 8010bda:	46c0      	nop			; (mov r8, r8)
 8010bdc:	2000354c 	.word	0x2000354c

08010be0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010be0:	4b08      	ldr	r3, [pc, #32]	; (8010c04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8010be2:	8819      	ldrh	r1, [r3, #0]
 8010be4:	2300      	movs	r3, #0
 8010be6:	4281      	cmp	r1, r0
 8010be8:	d809      	bhi.n	8010bfe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1e>
 8010bea:	4b07      	ldr	r3, [pc, #28]	; (8010c08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8010bec:	881a      	ldrh	r2, [r3, #0]
 8010bee:	2300      	movs	r3, #0
 8010bf0:	1852      	adds	r2, r2, r1
 8010bf2:	4290      	cmp	r0, r2
 8010bf4:	da03      	bge.n	8010bfe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1e>
 8010bf6:	4b05      	ldr	r3, [pc, #20]	; (8010c0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x2c>)
 8010bf8:	0080      	lsls	r0, r0, #2
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	58c3      	ldr	r3, [r0, r3]
 8010bfe:	0018      	movs	r0, r3
 8010c00:	4770      	bx	lr
 8010c02:	46c0      	nop			; (mov r8, r8)
 8010c04:	2000356c 	.word	0x2000356c
 8010c08:	20003570 	.word	0x20003570
 8010c0c:	20003550 	.word	0x20003550

08010c10 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c12:	4e26      	ldr	r6, [pc, #152]	; (8010cac <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8010c14:	6830      	ldr	r0, [r6, #0]
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d046      	beq.n	8010ca8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>
 8010c1a:	4b25      	ldr	r3, [pc, #148]	; (8010cb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010c1c:	4a25      	ldr	r2, [pc, #148]	; (8010cb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	4f25      	ldr	r7, [pc, #148]	; (8010cb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8010c22:	469c      	mov	ip, r3
 8010c24:	4b25      	ldr	r3, [pc, #148]	; (8010cbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010c26:	4665      	mov	r5, ip
 8010c28:	8819      	ldrh	r1, [r3, #0]
 8010c2a:	4461      	add	r1, ip
 8010c2c:	1c4b      	adds	r3, r1, #1
 8010c2e:	4013      	ands	r3, r2
 8010c30:	008c      	lsls	r4, r1, #2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4a22      	ldr	r2, [pc, #136]	; (8010cc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010c36:	9301      	str	r3, [sp, #4]
 8010c38:	1903      	adds	r3, r0, r4
 8010c3a:	6013      	str	r3, [r2, #0]
 8010c3c:	9b01      	ldr	r3, [sp, #4]
 8010c3e:	18e2      	adds	r2, r4, r3
 8010c40:	1883      	adds	r3, r0, r2
 8010c42:	603b      	str	r3, [r7, #0]
 8010c44:	230e      	movs	r3, #14
 8010c46:	436b      	muls	r3, r5
 8010c48:	2503      	movs	r5, #3
 8010c4a:	3303      	adds	r3, #3
 8010c4c:	43ab      	bics	r3, r5
 8010c4e:	18d2      	adds	r2, r2, r3
 8010c50:	1880      	adds	r0, r0, r2
 8010c52:	4a1c      	ldr	r2, [pc, #112]	; (8010cc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010c54:	6010      	str	r0, [r2, #0]
 8010c56:	2200      	movs	r2, #0
 8010c58:	481b      	ldr	r0, [pc, #108]	; (8010cc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010c5a:	8002      	strh	r2, [r0, #0]
 8010c5c:	481b      	ldr	r0, [pc, #108]	; (8010ccc <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8010c5e:	6800      	ldr	r0, [r0, #0]
 8010c60:	1b04      	subs	r4, r0, r4
 8010c62:	9801      	ldr	r0, [sp, #4]
 8010c64:	1a24      	subs	r4, r4, r0
 8010c66:	481a      	ldr	r0, [pc, #104]	; (8010cd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8010c68:	1ae3      	subs	r3, r4, r3
 8010c6a:	6003      	str	r3, [r0, #0]
 8010c6c:	2001      	movs	r0, #1
 8010c6e:	0014      	movs	r4, r2
 8010c70:	4b18      	ldr	r3, [pc, #96]	; (8010cd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8010c72:	4240      	negs	r0, r0
 8010c74:	801a      	strh	r2, [r3, #0]
 8010c76:	428a      	cmp	r2, r1
 8010c78:	d10d      	bne.n	8010c96 <_ZN8touchgfx6Bitmap10clearCacheEv+0x86>
 8010c7a:	4a0d      	ldr	r2, [pc, #52]	; (8010cb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010c7c:	2020      	movs	r0, #32
 8010c7e:	8811      	ldrh	r1, [r2, #0]
 8010c80:	220e      	movs	r2, #14
 8010c82:	434a      	muls	r2, r1
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	18d2      	adds	r2, r2, r3
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d00d      	beq.n	8010ca8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>
 8010c8c:	7b19      	ldrb	r1, [r3, #12]
 8010c8e:	4381      	bics	r1, r0
 8010c90:	7319      	strb	r1, [r3, #12]
 8010c92:	330e      	adds	r3, #14
 8010c94:	e7f8      	b.n	8010c88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x78>
 8010c96:	6835      	ldr	r5, [r6, #0]
 8010c98:	0093      	lsls	r3, r2, #2
 8010c9a:	515c      	str	r4, [r3, r5]
 8010c9c:	4d08      	ldr	r5, [pc, #32]	; (8010cc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010c9e:	0053      	lsls	r3, r2, #1
 8010ca0:	682d      	ldr	r5, [r5, #0]
 8010ca2:	3201      	adds	r2, #1
 8010ca4:	5358      	strh	r0, [r3, r5]
 8010ca6:	e7e6      	b.n	8010c76 <_ZN8touchgfx6Bitmap10clearCacheEv+0x66>
 8010ca8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010caa:	46c0      	nop			; (mov r8, r8)
 8010cac:	20003550 	.word	0x20003550
 8010cb0:	20003570 	.word	0x20003570
 8010cb4:	0000fffe 	.word	0x0000fffe
 8010cb8:	20003554 	.word	0x20003554
 8010cbc:	2000356c 	.word	0x2000356c
 8010cc0:	20003564 	.word	0x20003564
 8010cc4:	2000355c 	.word	0x2000355c
 8010cc8:	2000356e 	.word	0x2000356e
 8010ccc:	20003558 	.word	0x20003558
 8010cd0:	20003568 	.word	0x20003568
 8010cd4:	20003560 	.word	0x20003560

08010cd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8010cd8:	b510      	push	{r4, lr}
 8010cda:	4b10      	ldr	r3, [pc, #64]	; (8010d1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d11a      	bne.n	8010d18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	d018      	beq.n	8010d18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010ce6:	4b0e      	ldr	r3, [pc, #56]	; (8010d20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8010ce8:	801a      	strh	r2, [r3, #0]
 8010cea:	b293      	uxth	r3, r2
 8010cec:	4a0d      	ldr	r2, [pc, #52]	; (8010d24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8010cee:	8814      	ldrh	r4, [r2, #0]
 8010cf0:	2206      	movs	r2, #6
 8010cf2:	18e4      	adds	r4, r4, r3
 8010cf4:	4362      	muls	r2, r4
 8010cf6:	240e      	movs	r4, #14
 8010cf8:	4363      	muls	r3, r4
 8010cfa:	18d2      	adds	r2, r2, r3
 8010cfc:	428a      	cmp	r2, r1
 8010cfe:	d305      	bcc.n	8010d0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x34>
 8010d00:	4b09      	ldr	r3, [pc, #36]	; (8010d28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8010d02:	4a0a      	ldr	r2, [pc, #40]	; (8010d2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8010d04:	2137      	movs	r1, #55	; 0x37
 8010d06:	480a      	ldr	r0, [pc, #40]	; (8010d30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8010d08:	f002 f874 	bl	8012df4 <__assert_func>
 8010d0c:	4b09      	ldr	r3, [pc, #36]	; (8010d34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8010d0e:	6019      	str	r1, [r3, #0]
 8010d10:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8010d12:	6018      	str	r0, [r3, #0]
 8010d14:	f7ff ff7c 	bl	8010c10 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010d18:	bd10      	pop	{r4, pc}
 8010d1a:	46c0      	nop			; (mov r8, r8)
 8010d1c:	2000355c 	.word	0x2000355c
 8010d20:	20003570 	.word	0x20003570
 8010d24:	2000356c 	.word	0x2000356c
 8010d28:	08016f95 	.word	0x08016f95
 8010d2c:	0801702a 	.word	0x0801702a
 8010d30:	08016f70 	.word	0x08016f70
 8010d34:	20003558 	.word	0x20003558
 8010d38:	20003550 	.word	0x20003550

08010d3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	0004      	movs	r4, r0
 8010d40:	0010      	movs	r0, r2
 8010d42:	4a06      	ldr	r2, [pc, #24]	; (8010d5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010d44:	6815      	ldr	r5, [r2, #0]
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	d106      	bne.n	8010d58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010d4a:	6014      	str	r4, [r2, #0]
 8010d4c:	4a04      	ldr	r2, [pc, #16]	; (8010d60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010d4e:	8011      	strh	r1, [r2, #0]
 8010d50:	9a04      	ldr	r2, [sp, #16]
 8010d52:	0019      	movs	r1, r3
 8010d54:	f7ff ffc0 	bl	8010cd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010d58:	bd70      	pop	{r4, r5, r6, pc}
 8010d5a:	46c0      	nop			; (mov r8, r8)
 8010d5c:	20003574 	.word	0x20003574
 8010d60:	2000356c 	.word	0x2000356c

08010d64 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8010d64:	b510      	push	{r4, lr}
 8010d66:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010d68:	6819      	ldr	r1, [r3, #0]
 8010d6a:	2900      	cmp	r1, #0
 8010d6c:	d106      	bne.n	8010d7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x18>
 8010d6e:	21be      	movs	r1, #190	; 0xbe
 8010d70:	4b12      	ldr	r3, [pc, #72]	; (8010dbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010d72:	4a13      	ldr	r2, [pc, #76]	; (8010dc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010d74:	0089      	lsls	r1, r1, #2
 8010d76:	4813      	ldr	r0, [pc, #76]	; (8010dc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8010d78:	f002 f83c 	bl	8012df4 <__assert_func>
 8010d7c:	4a12      	ldr	r2, [pc, #72]	; (8010dc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8010d7e:	8803      	ldrh	r3, [r0, #0]
 8010d80:	8812      	ldrh	r2, [r2, #0]
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d204      	bcs.n	8010d90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2c>
 8010d86:	2214      	movs	r2, #20
 8010d88:	4353      	muls	r3, r2
 8010d8a:	18c9      	adds	r1, r1, r3
 8010d8c:	8908      	ldrh	r0, [r1, #8]
 8010d8e:	bd10      	pop	{r4, pc}
 8010d90:	490e      	ldr	r1, [pc, #56]	; (8010dcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8010d92:	8809      	ldrh	r1, [r1, #0]
 8010d94:	1889      	adds	r1, r1, r2
 8010d96:	428b      	cmp	r3, r1
 8010d98:	da07      	bge.n	8010daa <_ZNK8touchgfx6Bitmap8getWidthEv+0x46>
 8010d9a:	1a9b      	subs	r3, r3, r2
 8010d9c:	4a0c      	ldr	r2, [pc, #48]	; (8010dd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8010d9e:	6811      	ldr	r1, [r2, #0]
 8010da0:	220e      	movs	r2, #14
 8010da2:	4353      	muls	r3, r2
 8010da4:	18cb      	adds	r3, r1, r3
 8010da6:	8918      	ldrh	r0, [r3, #8]
 8010da8:	e7f1      	b.n	8010d8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8010daa:	4a0a      	ldr	r2, [pc, #40]	; (8010dd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8010dac:	2000      	movs	r0, #0
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d1ed      	bne.n	8010d8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8010db2:	4b09      	ldr	r3, [pc, #36]	; (8010dd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 8010db4:	8818      	ldrh	r0, [r3, #0]
 8010db6:	e7ea      	b.n	8010d8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8010db8:	20003574 	.word	0x20003574
 8010dbc:	08016fee 	.word	0x08016fee
 8010dc0:	080170d7 	.word	0x080170d7
 8010dc4:	08016f70 	.word	0x08016f70
 8010dc8:	2000356c 	.word	0x2000356c
 8010dcc:	20003570 	.word	0x20003570
 8010dd0:	20003554 	.word	0x20003554
 8010dd4:	0000fffe 	.word	0x0000fffe
 8010dd8:	200034c0 	.word	0x200034c0

08010ddc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	4b14      	ldr	r3, [pc, #80]	; (8010e30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8010de0:	6819      	ldr	r1, [r3, #0]
 8010de2:	2900      	cmp	r1, #0
 8010de4:	d106      	bne.n	8010df4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x18>
 8010de6:	21c3      	movs	r1, #195	; 0xc3
 8010de8:	4b12      	ldr	r3, [pc, #72]	; (8010e34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8010dea:	4a13      	ldr	r2, [pc, #76]	; (8010e38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8010dec:	0089      	lsls	r1, r1, #2
 8010dee:	4813      	ldr	r0, [pc, #76]	; (8010e3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8010df0:	f002 f800 	bl	8012df4 <__assert_func>
 8010df4:	4a12      	ldr	r2, [pc, #72]	; (8010e40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8010df6:	8803      	ldrh	r3, [r0, #0]
 8010df8:	8812      	ldrh	r2, [r2, #0]
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d204      	bcs.n	8010e08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2c>
 8010dfe:	2214      	movs	r2, #20
 8010e00:	4353      	muls	r3, r2
 8010e02:	18c9      	adds	r1, r1, r3
 8010e04:	8948      	ldrh	r0, [r1, #10]
 8010e06:	bd10      	pop	{r4, pc}
 8010e08:	490e      	ldr	r1, [pc, #56]	; (8010e44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8010e0a:	8809      	ldrh	r1, [r1, #0]
 8010e0c:	1889      	adds	r1, r1, r2
 8010e0e:	428b      	cmp	r3, r1
 8010e10:	da07      	bge.n	8010e22 <_ZNK8touchgfx6Bitmap9getHeightEv+0x46>
 8010e12:	1a9b      	subs	r3, r3, r2
 8010e14:	4a0c      	ldr	r2, [pc, #48]	; (8010e48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8010e16:	6811      	ldr	r1, [r2, #0]
 8010e18:	220e      	movs	r2, #14
 8010e1a:	4353      	muls	r3, r2
 8010e1c:	18cb      	adds	r3, r1, r3
 8010e1e:	8958      	ldrh	r0, [r3, #10]
 8010e20:	e7f1      	b.n	8010e06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8010e22:	4a0a      	ldr	r2, [pc, #40]	; (8010e4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8010e24:	2000      	movs	r0, #0
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d1ed      	bne.n	8010e06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8010e2a:	4b09      	ldr	r3, [pc, #36]	; (8010e50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8010e2c:	8818      	ldrh	r0, [r3, #0]
 8010e2e:	e7ea      	b.n	8010e06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8010e30:	20003574 	.word	0x20003574
 8010e34:	08016fee 	.word	0x08016fee
 8010e38:	08017103 	.word	0x08017103
 8010e3c:	08016f70 	.word	0x08016f70
 8010e40:	2000356c 	.word	0x2000356c
 8010e44:	20003570 	.word	0x20003570
 8010e48:	20003554 	.word	0x20003554
 8010e4c:	0000fffe 	.word	0x0000fffe
 8010e50:	200034c2 	.word	0x200034c2

08010e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8010e54:	b570      	push	{r4, r5, r6, lr}
 8010e56:	4b23      	ldr	r3, [pc, #140]	; (8010ee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8010e58:	0004      	movs	r4, r0
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d106      	bne.n	8010e6e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x1a>
 8010e60:	21c8      	movs	r1, #200	; 0xc8
 8010e62:	4b21      	ldr	r3, [pc, #132]	; (8010ee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8010e64:	4a21      	ldr	r2, [pc, #132]	; (8010eec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8010e66:	0089      	lsls	r1, r1, #2
 8010e68:	4821      	ldr	r0, [pc, #132]	; (8010ef0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010e6a:	f001 ffc3 	bl	8012df4 <__assert_func>
 8010e6e:	4a21      	ldr	r2, [pc, #132]	; (8010ef4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8010e70:	8809      	ldrh	r1, [r1, #0]
 8010e72:	8812      	ldrh	r2, [r2, #0]
 8010e74:	4291      	cmp	r1, r2
 8010e76:	d211      	bcs.n	8010e9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x48>
 8010e78:	2214      	movs	r2, #20
 8010e7a:	4351      	muls	r1, r2
 8010e7c:	1859      	adds	r1, r3, r1
 8010e7e:	8a0a      	ldrh	r2, [r1, #16]
 8010e80:	230c      	movs	r3, #12
 8010e82:	5ecd      	ldrsh	r5, [r1, r3]
 8010e84:	230e      	movs	r3, #14
 8010e86:	5ec8      	ldrsh	r0, [r1, r3]
 8010e88:	8a4b      	ldrh	r3, [r1, #18]
 8010e8a:	04d2      	lsls	r2, r2, #19
 8010e8c:	0cd2      	lsrs	r2, r2, #19
 8010e8e:	04db      	lsls	r3, r3, #19
 8010e90:	0cdb      	lsrs	r3, r3, #19
 8010e92:	8025      	strh	r5, [r4, #0]
 8010e94:	8060      	strh	r0, [r4, #2]
 8010e96:	80a2      	strh	r2, [r4, #4]
 8010e98:	80e3      	strh	r3, [r4, #6]
 8010e9a:	e00d      	b.n	8010eb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8010e9c:	4b16      	ldr	r3, [pc, #88]	; (8010ef8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	189b      	adds	r3, r3, r2
 8010ea2:	4299      	cmp	r1, r3
 8010ea4:	da0a      	bge.n	8010ebc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x68>
 8010ea6:	4b15      	ldr	r3, [pc, #84]	; (8010efc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8010ea8:	1a8a      	subs	r2, r1, r2
 8010eaa:	6819      	ldr	r1, [r3, #0]
 8010eac:	230e      	movs	r3, #14
 8010eae:	435a      	muls	r2, r3
 8010eb0:	1889      	adds	r1, r1, r2
 8010eb2:	2208      	movs	r2, #8
 8010eb4:	f002 f812 	bl	8012edc <memcpy>
 8010eb8:	0020      	movs	r0, r4
 8010eba:	bd70      	pop	{r4, r5, r6, pc}
 8010ebc:	4b10      	ldr	r3, [pc, #64]	; (8010f00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8010ebe:	4299      	cmp	r1, r3
 8010ec0:	d10b      	bne.n	8010eda <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x86>
 8010ec2:	4b10      	ldr	r3, [pc, #64]	; (8010f04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	5e59      	ldrsh	r1, [r3, r1]
 8010ec8:	4b0f      	ldr	r3, [pc, #60]	; (8010f08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb4>)
 8010eca:	8081      	strh	r1, [r0, #4]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	5e9a      	ldrsh	r2, [r3, r2]
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	80c2      	strh	r2, [r0, #6]
 8010ed4:	8003      	strh	r3, [r0, #0]
 8010ed6:	8043      	strh	r3, [r0, #2]
 8010ed8:	e7ee      	b.n	8010eb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8010eda:	2300      	movs	r3, #0
 8010edc:	8003      	strh	r3, [r0, #0]
 8010ede:	8043      	strh	r3, [r0, #2]
 8010ee0:	8083      	strh	r3, [r0, #4]
 8010ee2:	e7d9      	b.n	8010e98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8010ee4:	20003574 	.word	0x20003574
 8010ee8:	08016fee 	.word	0x08016fee
 8010eec:	08017070 	.word	0x08017070
 8010ef0:	08016f70 	.word	0x08016f70
 8010ef4:	2000356c 	.word	0x2000356c
 8010ef8:	20003570 	.word	0x20003570
 8010efc:	20003554 	.word	0x20003554
 8010f00:	0000fffe 	.word	0x0000fffe
 8010f04:	200034c0 	.word	0x200034c0
 8010f08:	200034c2 	.word	0x200034c2

08010f0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8010f0c:	4b18      	ldr	r3, [pc, #96]	; (8010f70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8010f0e:	0002      	movs	r2, r0
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	1e18      	subs	r0, r3, #0
 8010f14:	d016      	beq.n	8010f44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x38>
 8010f16:	4917      	ldr	r1, [pc, #92]	; (8010f74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8010f18:	8812      	ldrh	r2, [r2, #0]
 8010f1a:	8809      	ldrh	r1, [r1, #0]
 8010f1c:	428a      	cmp	r2, r1
 8010f1e:	d212      	bcs.n	8010f46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x3a>
 8010f20:	2114      	movs	r1, #20
 8010f22:	434a      	muls	r2, r1
 8010f24:	189b      	adds	r3, r3, r2
 8010f26:	8a1a      	ldrh	r2, [r3, #16]
 8010f28:	8919      	ldrh	r1, [r3, #8]
 8010f2a:	04d2      	lsls	r2, r2, #19
 8010f2c:	0cd2      	lsrs	r2, r2, #19
 8010f2e:	2001      	movs	r0, #1
 8010f30:	428a      	cmp	r2, r1
 8010f32:	db07      	blt.n	8010f44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x38>
 8010f34:	8a5a      	ldrh	r2, [r3, #18]
 8010f36:	04d2      	lsls	r2, r2, #19
 8010f38:	0cd2      	lsrs	r2, r2, #19
 8010f3a:	895b      	ldrh	r3, [r3, #10]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	db00      	blt.n	8010f42 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x36>
 8010f40:	2000      	movs	r0, #0
 8010f42:	b2c0      	uxtb	r0, r0
 8010f44:	4770      	bx	lr
 8010f46:	4b0c      	ldr	r3, [pc, #48]	; (8010f78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8010f48:	2000      	movs	r0, #0
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	185b      	adds	r3, r3, r1
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	daf8      	bge.n	8010f44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x38>
 8010f52:	230e      	movs	r3, #14
 8010f54:	1a52      	subs	r2, r2, r1
 8010f56:	435a      	muls	r2, r3
 8010f58:	4b08      	ldr	r3, [pc, #32]	; (8010f7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	189b      	adds	r3, r3, r2
 8010f60:	2204      	movs	r2, #4
 8010f62:	5e99      	ldrsh	r1, [r3, r2]
 8010f64:	891a      	ldrh	r2, [r3, #8]
 8010f66:	4291      	cmp	r1, r2
 8010f68:	dbec      	blt.n	8010f44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x38>
 8010f6a:	2106      	movs	r1, #6
 8010f6c:	5e5a      	ldrsh	r2, [r3, r1]
 8010f6e:	e7e4      	b.n	8010f3a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x2e>
 8010f70:	20003574 	.word	0x20003574
 8010f74:	2000356c 	.word	0x2000356c
 8010f78:	20003570 	.word	0x20003570
 8010f7c:	20003554 	.word	0x20003554

08010f80 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010f80:	b510      	push	{r4, lr}
 8010f82:	4b11      	ldr	r3, [pc, #68]	; (8010fc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 8010f84:	6819      	ldr	r1, [r3, #0]
 8010f86:	2900      	cmp	r1, #0
 8010f88:	d106      	bne.n	8010f98 <_ZNK8touchgfx6Bitmap7getDataEv+0x18>
 8010f8a:	21d1      	movs	r1, #209	; 0xd1
 8010f8c:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010f8e:	4a10      	ldr	r2, [pc, #64]	; (8010fd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010f90:	0089      	lsls	r1, r1, #2
 8010f92:	4810      	ldr	r0, [pc, #64]	; (8010fd4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010f94:	f001 ff2e 	bl	8012df4 <__assert_func>
 8010f98:	8803      	ldrh	r3, [r0, #0]
 8010f9a:	4a0f      	ldr	r2, [pc, #60]	; (8010fd8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d005      	beq.n	8010fae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010fa2:	4a0e      	ldr	r2, [pc, #56]	; (8010fdc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d103      	bne.n	8010fb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8010fa8:	4b0d      	ldr	r3, [pc, #52]	; (8010fe0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8010fae:	bd10      	pop	{r4, pc}
 8010fb0:	4a0c      	ldr	r2, [pc, #48]	; (8010fe4 <_ZNK8touchgfx6Bitmap7getDataEv+0x64>)
 8010fb2:	6812      	ldr	r2, [r2, #0]
 8010fb4:	2a00      	cmp	r2, #0
 8010fb6:	d003      	beq.n	8010fc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x40>
 8010fb8:	0098      	lsls	r0, r3, #2
 8010fba:	5880      	ldr	r0, [r0, r2]
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	d1f6      	bne.n	8010fae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010fc0:	2214      	movs	r2, #20
 8010fc2:	4353      	muls	r3, r2
 8010fc4:	5858      	ldr	r0, [r3, r1]
 8010fc6:	e7f2      	b.n	8010fae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010fc8:	20003574 	.word	0x20003574
 8010fcc:	08016fee 	.word	0x08016fee
 8010fd0:	080170a6 	.word	0x080170a6
 8010fd4:	08016f70 	.word	0x08016f70
 8010fd8:	0000ffff 	.word	0x0000ffff
 8010fdc:	0000fffe 	.word	0x0000fffe
 8010fe0:	200034cc 	.word	0x200034cc
 8010fe4:	20003550 	.word	0x20003550

08010fe8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010fe8:	b530      	push	{r4, r5, lr}
 8010fea:	4a24      	ldr	r2, [pc, #144]	; (801107c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8010fec:	8803      	ldrh	r3, [r0, #0]
 8010fee:	2000      	movs	r0, #0
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d824      	bhi.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8010ff4:	4a22      	ldr	r2, [pc, #136]	; (8011080 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010ff6:	8812      	ldrh	r2, [r2, #0]
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d221      	bcs.n	8011040 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x58>
 8010ffc:	2214      	movs	r2, #20
 8010ffe:	4921      	ldr	r1, [pc, #132]	; (8011084 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8011000:	435a      	muls	r2, r3
 8011002:	680d      	ldr	r5, [r1, #0]
 8011004:	18ad      	adds	r5, r5, r2
 8011006:	6868      	ldr	r0, [r5, #4]
 8011008:	2800      	cmp	r0, #0
 801100a:	d018      	beq.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801100c:	4a1e      	ldr	r2, [pc, #120]	; (8011088 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801100e:	6811      	ldr	r1, [r2, #0]
 8011010:	2900      	cmp	r1, #0
 8011012:	d014      	beq.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	585a      	ldr	r2, [r3, r1]
 8011018:	2a00      	cmp	r2, #0
 801101a:	d010      	beq.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801101c:	896b      	ldrh	r3, [r5, #10]
 801101e:	892c      	ldrh	r4, [r5, #8]
 8011020:	7ce9      	ldrb	r1, [r5, #19]
 8011022:	435c      	muls	r4, r3
 8011024:	7c6b      	ldrb	r3, [r5, #17]
 8011026:	0949      	lsrs	r1, r1, #5
 8011028:	095b      	lsrs	r3, r3, #5
 801102a:	00db      	lsls	r3, r3, #3
 801102c:	430b      	orrs	r3, r1
 801102e:	0060      	lsls	r0, r4, #1
 8011030:	2b0b      	cmp	r3, #11
 8011032:	d100      	bne.n	8011036 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011034:	0020      	movs	r0, r4
 8011036:	2303      	movs	r3, #3
 8011038:	3003      	adds	r0, #3
 801103a:	4398      	bics	r0, r3
 801103c:	1810      	adds	r0, r2, r0
 801103e:	bd30      	pop	{r4, r5, pc}
 8011040:	4912      	ldr	r1, [pc, #72]	; (801108c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8011042:	2000      	movs	r0, #0
 8011044:	8809      	ldrh	r1, [r1, #0]
 8011046:	1889      	adds	r1, r1, r2
 8011048:	428b      	cmp	r3, r1
 801104a:	daf8      	bge.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801104c:	210e      	movs	r1, #14
 801104e:	1a9a      	subs	r2, r3, r2
 8011050:	4351      	muls	r1, r2
 8011052:	4a0f      	ldr	r2, [pc, #60]	; (8011090 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8011054:	301f      	adds	r0, #31
 8011056:	6812      	ldr	r2, [r2, #0]
 8011058:	1852      	adds	r2, r2, r1
 801105a:	7b11      	ldrb	r1, [r2, #12]
 801105c:	4001      	ands	r1, r0
 801105e:	2000      	movs	r0, #0
 8011060:	290b      	cmp	r1, #11
 8011062:	d1ec      	bne.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8011064:	8911      	ldrh	r1, [r2, #8]
 8011066:	8950      	ldrh	r0, [r2, #10]
 8011068:	4a07      	ldr	r2, [pc, #28]	; (8011088 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801106a:	4348      	muls	r0, r1
 801106c:	2103      	movs	r1, #3
 801106e:	6812      	ldr	r2, [r2, #0]
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	3003      	adds	r0, #3
 8011074:	589b      	ldr	r3, [r3, r2]
 8011076:	4388      	bics	r0, r1
 8011078:	1818      	adds	r0, r3, r0
 801107a:	e7e0      	b.n	801103e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801107c:	0000fffd 	.word	0x0000fffd
 8011080:	2000356c 	.word	0x2000356c
 8011084:	20003574 	.word	0x20003574
 8011088:	20003550 	.word	0x20003550
 801108c:	20003570 	.word	0x20003570
 8011090:	20003554 	.word	0x20003554

08011094 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8011094:	b510      	push	{r4, lr}
 8011096:	4b1a      	ldr	r3, [pc, #104]	; (8011100 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8011098:	6819      	ldr	r1, [r3, #0]
 801109a:	8803      	ldrh	r3, [r0, #0]
 801109c:	2900      	cmp	r1, #0
 801109e:	d01c      	beq.n	80110da <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80110a0:	4a18      	ldr	r2, [pc, #96]	; (8011104 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 80110a2:	8812      	ldrh	r2, [r2, #0]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d909      	bls.n	80110bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 80110a8:	2214      	movs	r2, #20
 80110aa:	4353      	muls	r3, r2
 80110ac:	18cb      	adds	r3, r1, r3
 80110ae:	7c58      	ldrb	r0, [r3, #17]
 80110b0:	7cdb      	ldrb	r3, [r3, #19]
 80110b2:	0940      	lsrs	r0, r0, #5
 80110b4:	00c0      	lsls	r0, r0, #3
 80110b6:	095b      	lsrs	r3, r3, #5
 80110b8:	4318      	orrs	r0, r3
 80110ba:	bd10      	pop	{r4, pc}
 80110bc:	4912      	ldr	r1, [pc, #72]	; (8011108 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 80110be:	8809      	ldrh	r1, [r1, #0]
 80110c0:	1889      	adds	r1, r1, r2
 80110c2:	428b      	cmp	r3, r1
 80110c4:	da09      	bge.n	80110da <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80110c6:	1a9b      	subs	r3, r3, r2
 80110c8:	4a10      	ldr	r2, [pc, #64]	; (801110c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 80110ca:	6811      	ldr	r1, [r2, #0]
 80110cc:	220e      	movs	r2, #14
 80110ce:	4353      	muls	r3, r2
 80110d0:	18cb      	adds	r3, r1, r3
 80110d2:	7b18      	ldrb	r0, [r3, #12]
 80110d4:	06c0      	lsls	r0, r0, #27
 80110d6:	0ec0      	lsrs	r0, r0, #27
 80110d8:	e7ef      	b.n	80110ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80110da:	4a0d      	ldr	r2, [pc, #52]	; (8011110 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 80110dc:	2000      	movs	r0, #0
 80110de:	4293      	cmp	r3, r2
 80110e0:	d1eb      	bne.n	80110ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80110e2:	4b0c      	ldr	r3, [pc, #48]	; (8011114 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	001a      	movs	r2, r3
 80110e8:	3276      	adds	r2, #118	; 0x76
 80110ea:	7812      	ldrb	r2, [r2, #0]
 80110ec:	4282      	cmp	r2, r0
 80110ee:	d002      	beq.n	80110f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 80110f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d100      	bne.n	80110f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>
 80110f6:	6898      	ldr	r0, [r3, #8]
 80110f8:	6803      	ldr	r3, [r0, #0]
 80110fa:	6a1b      	ldr	r3, [r3, #32]
 80110fc:	4798      	blx	r3
 80110fe:	e7dc      	b.n	80110ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8011100:	20003574 	.word	0x20003574
 8011104:	2000356c 	.word	0x2000356c
 8011108:	20003570 	.word	0x20003570
 801110c:	20003554 	.word	0x20003554
 8011110:	0000fffe 	.word	0x0000fffe
 8011114:	200034cc 	.word	0x200034cc

08011118 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8011118:	2010      	movs	r0, #16
 801111a:	4770      	bx	lr

0801111c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801111c:	2000      	movs	r0, #0
 801111e:	4770      	bx	lr

08011120 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8011120:	20fc      	movs	r0, #252	; 0xfc
 8011122:	00d2      	lsls	r2, r2, #3
 8011124:	00c0      	lsls	r0, r0, #3
 8011126:	4010      	ands	r0, r2
 8011128:	22f8      	movs	r2, #248	; 0xf8
 801112a:	08db      	lsrs	r3, r3, #3
 801112c:	0212      	lsls	r2, r2, #8
 801112e:	0209      	lsls	r1, r1, #8
 8011130:	4318      	orrs	r0, r3
 8011132:	4011      	ands	r1, r2
 8011134:	4308      	orrs	r0, r1
 8011136:	4770      	bx	lr

08011138 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8011138:	0a08      	lsrs	r0, r1, #8
 801113a:	21f8      	movs	r1, #248	; 0xf8
 801113c:	4008      	ands	r0, r1
 801113e:	4770      	bx	lr

08011140 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8011140:	08c8      	lsrs	r0, r1, #3
 8011142:	21fc      	movs	r1, #252	; 0xfc
 8011144:	4008      	ands	r0, r1
 8011146:	4770      	bx	lr

08011148 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8011148:	00c9      	lsls	r1, r1, #3
 801114a:	b2c8      	uxtb	r0, r1
 801114c:	4770      	bx	lr

0801114e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801114e:	b500      	push	{lr}
 8011150:	2bff      	cmp	r3, #255	; 0xff
 8011152:	d055      	beq.n	8011200 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8011154:	2a0b      	cmp	r2, #11
 8011156:	d04f      	beq.n	80111f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 8011158:	d80e      	bhi.n	8011178 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801115a:	2a03      	cmp	r2, #3
 801115c:	d044      	beq.n	80111e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801115e:	d804      	bhi.n	801116a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8011160:	2a01      	cmp	r2, #1
 8011162:	d043      	beq.n	80111ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8011164:	d944      	bls.n	80111f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8011166:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011168:	e02c      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801116a:	2a09      	cmp	r2, #9
 801116c:	d044      	beq.n	80111f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801116e:	d841      	bhi.n	80111f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8011170:	2a08      	cmp	r2, #8
 8011172:	d03f      	beq.n	80111f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8011174:	2300      	movs	r3, #0
 8011176:	e025      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011178:	2a2f      	cmp	r2, #47	; 0x2f
 801117a:	d027      	beq.n	80111cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801117c:	d80e      	bhi.n	801119c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801117e:	2a2d      	cmp	r2, #45	; 0x2d
 8011180:	d015      	beq.n	80111ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8011182:	d82a      	bhi.n	80111da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8011184:	2a2c      	cmp	r2, #44	; 0x2c
 8011186:	d1f5      	bne.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8011188:	684b      	ldr	r3, [r1, #4]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2b01      	cmp	r3, #1
 801118e:	d01b      	beq.n	80111c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8011190:	2b00      	cmp	r3, #0
 8011192:	d027      	beq.n	80111e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8011194:	2b02      	cmp	r3, #2
 8011196:	d1ed      	bne.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8011198:	6883      	ldr	r3, [r0, #8]
 801119a:	e013      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801119c:	2a31      	cmp	r2, #49	; 0x31
 801119e:	d004      	beq.n	80111aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80111a0:	d32c      	bcc.n	80111fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80111a2:	2a32      	cmp	r2, #50	; 0x32
 80111a4:	d02a      	beq.n	80111fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80111a6:	2a33      	cmp	r2, #51	; 0x33
 80111a8:	d1e4      	bne.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80111aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80111ac:	e00a      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111ae:	684b      	ldr	r3, [r1, #4]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d005      	beq.n	80111c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74>
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00d      	beq.n	80111d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	d1da      	bne.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80111be:	6903      	ldr	r3, [r0, #16]
 80111c0:	e000      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111c2:	6a03      	ldr	r3, [r0, #32]
 80111c4:	0018      	movs	r0, r3
 80111c6:	bd00      	pop	{pc}
 80111c8:	6983      	ldr	r3, [r0, #24]
 80111ca:	e7fb      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111cc:	684b      	ldr	r3, [r1, #4]
 80111ce:	781a      	ldrb	r2, [r3, #0]
 80111d0:	2300      	movs	r3, #0
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d1f6      	bne.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80111d8:	e7f4      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111da:	684b      	ldr	r3, [r1, #4]
 80111dc:	781a      	ldrb	r2, [r3, #0]
 80111de:	2300      	movs	r3, #0
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d1ef      	bne.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80111e6:	e7ed      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80111ea:	e7eb      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80111ee:	e7e9      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80111f2:	e7e7      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80111f6:	e7e5      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111f8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80111fa:	e7e3      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80111fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80111fe:	e7e1      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011200:	2a0b      	cmp	r2, #11
 8011202:	d050      	beq.n	80112a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x158>
 8011204:	d80e      	bhi.n	8011224 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd6>
 8011206:	2a03      	cmp	r2, #3
 8011208:	d047      	beq.n	801129a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>
 801120a:	d804      	bhi.n	8011216 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801120c:	2a01      	cmp	r2, #1
 801120e:	d046      	beq.n	801129e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x150>
 8011210:	d947      	bls.n	80112a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x154>
 8011212:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011214:	e7d6      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011216:	2a09      	cmp	r2, #9
 8011218:	d045      	beq.n	80112a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x158>
 801121a:	d801      	bhi.n	8011220 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801121c:	2a08      	cmp	r2, #8
 801121e:	d1a9      	bne.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8011220:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011222:	e7cf      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011224:	2a2f      	cmp	r2, #47	; 0x2f
 8011226:	d029      	beq.n	801127c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8011228:	d80f      	bhi.n	801124a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801122a:	2a2d      	cmp	r2, #45	; 0x2d
 801122c:	d017      	beq.n	801125e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801122e:	d82c      	bhi.n	801128a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13c>
 8011230:	2a2c      	cmp	r2, #44	; 0x2c
 8011232:	d19f      	bne.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8011234:	684b      	ldr	r3, [r1, #4]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d01d      	beq.n	8011278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801123c:	2b00      	cmp	r3, #0
 801123e:	d02a      	beq.n	8011296 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>
 8011240:	2b02      	cmp	r3, #2
 8011242:	d000      	beq.n	8011246 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8011244:	e796      	b.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8011246:	68c3      	ldr	r3, [r0, #12]
 8011248:	e7bc      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801124a:	2a31      	cmp	r2, #49	; 0x31
 801124c:	d005      	beq.n	801125a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801124e:	d32c      	bcc.n	80112aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 8011250:	2a32      	cmp	r2, #50	; 0x32
 8011252:	d02a      	beq.n	80112aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 8011254:	2a33      	cmp	r2, #51	; 0x33
 8011256:	d000      	beq.n	801125a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8011258:	e78c      	b.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801125a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801125c:	e7b2      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801125e:	684b      	ldr	r3, [r1, #4]
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	2b01      	cmp	r3, #1
 8011264:	d006      	beq.n	8011274 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00d      	beq.n	8011286 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x138>
 801126a:	2b02      	cmp	r3, #2
 801126c:	d000      	beq.n	8011270 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801126e:	e781      	b.n	8011174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8011270:	6943      	ldr	r3, [r0, #20]
 8011272:	e7a7      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011274:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011276:	e7a5      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011278:	69c3      	ldr	r3, [r0, #28]
 801127a:	e7a3      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801127c:	684b      	ldr	r3, [r1, #4]
 801127e:	781a      	ldrb	r2, [r3, #0]
 8011280:	2300      	movs	r3, #0
 8011282:	429a      	cmp	r2, r3
 8011284:	d19e      	bne.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011286:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011288:	e79c      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801128a:	684b      	ldr	r3, [r1, #4]
 801128c:	781a      	ldrb	r2, [r3, #0]
 801128e:	2300      	movs	r3, #0
 8011290:	429a      	cmp	r2, r3
 8011292:	d000      	beq.n	8011296 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>
 8011294:	e796      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011296:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011298:	e794      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801129a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801129c:	e792      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801129e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80112a0:	e790      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80112a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80112a4:	e78e      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80112a6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80112a8:	e78c      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80112aa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80112ac:	e78a      	b.n	80111c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
	...

080112b0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80112b0:	b510      	push	{r4, lr}
 80112b2:	4b06      	ldr	r3, [pc, #24]	; (80112cc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80112b4:	8818      	ldrh	r0, [r3, #0]
 80112b6:	2800      	cmp	r0, #0
 80112b8:	d105      	bne.n	80112c6 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x16>
 80112ba:	4b05      	ldr	r3, [pc, #20]	; (80112d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80112bc:	4a05      	ldr	r2, [pc, #20]	; (80112d4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80112be:	2154      	movs	r1, #84	; 0x54
 80112c0:	4805      	ldr	r0, [pc, #20]	; (80112d8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80112c2:	f001 fd97 	bl	8012df4 <__assert_func>
 80112c6:	0040      	lsls	r0, r0, #1
 80112c8:	b280      	uxth	r0, r0
 80112ca:	bd10      	pop	{r4, pc}
 80112cc:	200034c6 	.word	0x200034c6
 80112d0:	080174bd 	.word	0x080174bd
 80112d4:	080177a1 	.word	0x080177a1
 80112d8:	080174ff 	.word	0x080174ff

080112dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80112dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112de:	b095      	sub	sp, #84	; 0x54
 80112e0:	001f      	movs	r7, r3
 80112e2:	ab1a      	add	r3, sp, #104	; 0x68
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	9109      	str	r1, [sp, #36]	; 0x24
 80112e8:	9308      	str	r3, [sp, #32]
 80112ea:	ab1b      	add	r3, sp, #108	; 0x6c
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	0016      	movs	r6, r2
 80112f0:	9307      	str	r3, [sp, #28]
 80112f2:	9b08      	ldr	r3, [sp, #32]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d077      	beq.n	80113e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 80112f8:	ad10      	add	r5, sp, #64	; 0x40
 80112fa:	ac12      	add	r4, sp, #72	; 0x48
 80112fc:	0031      	movs	r1, r6
 80112fe:	2208      	movs	r2, #8
 8011300:	0028      	movs	r0, r5
 8011302:	f001 fdeb 	bl	8012edc <memcpy>
 8011306:	2208      	movs	r2, #8
 8011308:	0039      	movs	r1, r7
 801130a:	0020      	movs	r0, r4
 801130c:	f001 fde6 	bl	8012edc <memcpy>
 8011310:	0028      	movs	r0, r5
 8011312:	f7fd fb2f 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011316:	0031      	movs	r1, r6
 8011318:	0020      	movs	r0, r4
 801131a:	f7fd fb13 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801131e:	2104      	movs	r1, #4
 8011320:	5e6e      	ldrsh	r6, [r5, r1]
 8011322:	2300      	movs	r3, #0
 8011324:	5ee2      	ldrsh	r2, [r4, r3]
 8011326:	2102      	movs	r1, #2
 8011328:	5e63      	ldrsh	r3, [r4, r1]
 801132a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801132c:	435e      	muls	r6, r3
 801132e:	18b6      	adds	r6, r6, r2
 8011330:	0076      	lsls	r6, r6, #1
 8011332:	198e      	adds	r6, r1, r6
 8011334:	8829      	ldrh	r1, [r5, #0]
 8011336:	188a      	adds	r2, r1, r2
 8011338:	8022      	strh	r2, [r4, #0]
 801133a:	886a      	ldrh	r2, [r5, #2]
 801133c:	4d68      	ldr	r5, [pc, #416]	; (80114e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x204>)
 801133e:	18d3      	adds	r3, r2, r3
 8011340:	8063      	strh	r3, [r4, #2]
 8011342:	6828      	ldr	r0, [r5, #0]
 8011344:	2304      	movs	r3, #4
 8011346:	5ee7      	ldrsh	r7, [r4, r3]
 8011348:	2206      	movs	r2, #6
 801134a:	5ea3      	ldrsh	r3, [r4, r2]
 801134c:	930a      	str	r3, [sp, #40]	; 0x28
 801134e:	6803      	ldr	r3, [r0, #0]
 8011350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011352:	4798      	blx	r3
 8011354:	9b08      	ldr	r3, [sp, #32]
 8011356:	2bff      	cmp	r3, #255	; 0xff
 8011358:	d02e      	beq.n	80113b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xdc>
 801135a:	0743      	lsls	r3, r0, #29
 801135c:	d431      	bmi.n	80113c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801135e:	6828      	ldr	r0, [r5, #0]
 8011360:	6803      	ldr	r3, [r0, #0]
 8011362:	6a1b      	ldr	r3, [r3, #32]
 8011364:	4798      	blx	r3
 8011366:	4b5f      	ldr	r3, [pc, #380]	; (80114e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x208>)
 8011368:	881a      	ldrh	r2, [r3, #0]
 801136a:	2102      	movs	r1, #2
 801136c:	5e63      	ldrsh	r3, [r4, r1]
 801136e:	4353      	muls	r3, r2
 8011370:	2100      	movs	r1, #0
 8011372:	5e62      	ldrsh	r2, [r4, r1]
 8011374:	189b      	adds	r3, r3, r2
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	18c3      	adds	r3, r0, r3
 801137a:	9307      	str	r3, [sp, #28]
 801137c:	9b08      	ldr	r3, [sp, #32]
 801137e:	2bff      	cmp	r3, #255	; 0xff
 8011380:	d134      	bne.n	80113ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 8011382:	2400      	movs	r4, #0
 8011384:	007f      	lsls	r7, r7, #1
 8011386:	4b56      	ldr	r3, [pc, #344]	; (80114e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x204>)
 8011388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801138a:	6818      	ldr	r0, [r3, #0]
 801138c:	6803      	ldr	r3, [r0, #0]
 801138e:	4294      	cmp	r4, r2
 8011390:	db00      	blt.n	8011394 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb8>
 8011392:	e09f      	b.n	80114d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 8011394:	0032      	movs	r2, r6
 8011396:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8011398:	9907      	ldr	r1, [sp, #28]
 801139a:	003b      	movs	r3, r7
 801139c:	47a8      	blx	r5
 801139e:	4b51      	ldr	r3, [pc, #324]	; (80114e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x208>)
 80113a0:	9a07      	ldr	r2, [sp, #28]
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	3401      	adds	r4, #1
 80113a6:	005b      	lsls	r3, r3, #1
 80113a8:	18d3      	adds	r3, r2, r3
 80113aa:	9307      	str	r3, [sp, #28]
 80113ac:	ab10      	add	r3, sp, #64	; 0x40
 80113ae:	2204      	movs	r2, #4
 80113b0:	5e9b      	ldrsh	r3, [r3, r2]
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	18f6      	adds	r6, r6, r3
 80113b6:	e7e6      	b.n	8011386 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80113b8:	9b07      	ldr	r3, [sp, #28]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d1cf      	bne.n	801135e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 80113be:	07c3      	lsls	r3, r0, #31
 80113c0:	d5cd      	bpl.n	801135e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 80113c2:	6828      	ldr	r0, [r5, #0]
 80113c4:	8863      	ldrh	r3, [r4, #2]
 80113c6:	8822      	ldrh	r2, [r4, #0]
 80113c8:	9c07      	ldr	r4, [sp, #28]
 80113ca:	6801      	ldr	r1, [r0, #0]
 80113cc:	9404      	str	r4, [sp, #16]
 80113ce:	9c08      	ldr	r4, [sp, #32]
 80113d0:	b2bf      	uxth	r7, r7
 80113d2:	9403      	str	r4, [sp, #12]
 80113d4:	ac10      	add	r4, sp, #64	; 0x40
 80113d6:	88a4      	ldrh	r4, [r4, #4]
 80113d8:	9402      	str	r4, [sp, #8]
 80113da:	466c      	mov	r4, sp
 80113dc:	8d24      	ldrh	r4, [r4, #40]	; 0x28
 80113de:	9700      	str	r7, [sp, #0]
 80113e0:	9401      	str	r4, [sp, #4]
 80113e2:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80113e4:	0031      	movs	r1, r6
 80113e6:	47a0      	blx	r4
 80113e8:	b015      	add	sp, #84	; 0x54
 80113ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ec:	23ff      	movs	r3, #255	; 0xff
 80113ee:	9a08      	ldr	r2, [sp, #32]
 80113f0:	1a9b      	subs	r3, r3, r2
 80113f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80113f4:	1c3b      	adds	r3, r7, #0
 80113f6:	2f00      	cmp	r7, #0
 80113f8:	da00      	bge.n	80113fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x120>
 80113fa:	2300      	movs	r3, #0
 80113fc:	b21b      	sxth	r3, r3
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	930e      	str	r3, [sp, #56]	; 0x38
 8011402:	2300      	movs	r3, #0
 8011404:	930c      	str	r3, [sp, #48]	; 0x30
 8011406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801140a:	4293      	cmp	r3, r2
 801140c:	da62      	bge.n	80114d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 801140e:	9b07      	ldr	r3, [sp, #28]
 8011410:	9309      	str	r3, [sp, #36]	; 0x24
 8011412:	2300      	movs	r3, #0
 8011414:	469c      	mov	ip, r3
 8011416:	45bc      	cmp	ip, r7
 8011418:	da48      	bge.n	80114ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>
 801141a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801141c:	4669      	mov	r1, sp
 801141e:	8818      	ldrh	r0, [r3, #0]
 8011420:	4663      	mov	r3, ip
 8011422:	466a      	mov	r2, sp
 8011424:	2407      	movs	r4, #7
 8011426:	005b      	lsls	r3, r3, #1
 8011428:	5af3      	ldrh	r3, [r6, r3]
 801142a:	8f8d      	ldrh	r5, [r1, #60]	; 0x3c
 801142c:	8c12      	ldrh	r2, [r2, #32]
 801142e:	1219      	asrs	r1, r3, #8
 8011430:	43a1      	bics	r1, r4
 8011432:	920b      	str	r2, [sp, #44]	; 0x2c
 8011434:	4351      	muls	r1, r2
 8011436:	1202      	asrs	r2, r0, #8
 8011438:	43a2      	bics	r2, r4
 801143a:	436a      	muls	r2, r5
 801143c:	1889      	adds	r1, r1, r2
 801143e:	b28a      	uxth	r2, r1
 8011440:	920d      	str	r2, [sp, #52]	; 0x34
 8011442:	3c04      	subs	r4, #4
 8011444:	10da      	asrs	r2, r3, #3
 8011446:	43a2      	bics	r2, r4
 8011448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801144a:	b2d2      	uxtb	r2, r2
 801144c:	434a      	muls	r2, r1
 801144e:	2103      	movs	r1, #3
 8011450:	408b      	lsls	r3, r1
 8011452:	10c4      	asrs	r4, r0, #3
 8011454:	438c      	bics	r4, r1
 8011456:	00c0      	lsls	r0, r0, #3
 8011458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801145a:	b2db      	uxtb	r3, r3
 801145c:	b2c0      	uxtb	r0, r0
 801145e:	434b      	muls	r3, r1
 8011460:	4368      	muls	r0, r5
 8011462:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011464:	181b      	adds	r3, r3, r0
 8011466:	1c48      	adds	r0, r1, #1
 8011468:	1209      	asrs	r1, r1, #8
 801146a:	1841      	adds	r1, r0, r1
 801146c:	20ff      	movs	r0, #255	; 0xff
 801146e:	b2e4      	uxtb	r4, r4
 8011470:	436c      	muls	r4, r5
 8011472:	0200      	lsls	r0, r0, #8
 8011474:	4001      	ands	r1, r0
 8011476:	201f      	movs	r0, #31
 8011478:	b29b      	uxth	r3, r3
 801147a:	1912      	adds	r2, r2, r4
 801147c:	1c5c      	adds	r4, r3, #1
 801147e:	121b      	asrs	r3, r3, #8
 8011480:	18e3      	adds	r3, r4, r3
 8011482:	24fc      	movs	r4, #252	; 0xfc
 8011484:	0ac9      	lsrs	r1, r1, #11
 8011486:	12db      	asrs	r3, r3, #11
 8011488:	b292      	uxth	r2, r2
 801148a:	4003      	ands	r3, r0
 801148c:	02c9      	lsls	r1, r1, #11
 801148e:	4319      	orrs	r1, r3
 8011490:	1c53      	adds	r3, r2, #1
 8011492:	1212      	asrs	r2, r2, #8
 8011494:	189a      	adds	r2, r3, r2
 8011496:	0952      	lsrs	r2, r2, #5
 8011498:	00e4      	lsls	r4, r4, #3
 801149a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801149c:	4022      	ands	r2, r4
 801149e:	4311      	orrs	r1, r2
 80114a0:	8019      	strh	r1, [r3, #0]
 80114a2:	3302      	adds	r3, #2
 80114a4:	9309      	str	r3, [sp, #36]	; 0x24
 80114a6:	2301      	movs	r3, #1
 80114a8:	449c      	add	ip, r3
 80114aa:	e7b4      	b.n	8011416 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 80114ac:	4b0d      	ldr	r3, [pc, #52]	; (80114e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x208>)
 80114ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114b0:	881b      	ldrh	r3, [r3, #0]
 80114b2:	1bdb      	subs	r3, r3, r7
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	189b      	adds	r3, r3, r2
 80114b8:	9a07      	ldr	r2, [sp, #28]
 80114ba:	18d3      	adds	r3, r2, r3
 80114bc:	9307      	str	r3, [sp, #28]
 80114be:	ab10      	add	r3, sp, #64	; 0x40
 80114c0:	2204      	movs	r2, #4
 80114c2:	5e9b      	ldrsh	r3, [r3, r2]
 80114c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114c6:	1bdb      	subs	r3, r3, r7
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	189b      	adds	r3, r3, r2
 80114cc:	18f6      	adds	r6, r6, r3
 80114ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114d0:	3301      	adds	r3, #1
 80114d2:	e797      	b.n	8011404 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80114d4:	4b02      	ldr	r3, [pc, #8]	; (80114e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x204>)
 80114d6:	6818      	ldr	r0, [r3, #0]
 80114d8:	6803      	ldr	r3, [r0, #0]
 80114da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114dc:	4798      	blx	r3
 80114de:	e783      	b.n	80113e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 80114e0:	200034cc 	.word	0x200034cc
 80114e4:	200034c6 	.word	0x200034c6

080114e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ea:	b08f      	sub	sp, #60	; 0x3c
 80114ec:	000e      	movs	r6, r1
 80114ee:	9204      	str	r2, [sp, #16]
 80114f0:	1e1c      	subs	r4, r3, #0
 80114f2:	d052      	beq.n	801159a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 80114f4:	0008      	movs	r0, r1
 80114f6:	f7fb f8d3 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d14d      	bne.n	801159a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 80114fe:	2708      	movs	r7, #8
 8011500:	ad0c      	add	r5, sp, #48	; 0x30
 8011502:	0031      	movs	r1, r6
 8011504:	003a      	movs	r2, r7
 8011506:	0028      	movs	r0, r5
 8011508:	f001 fce8 	bl	8012edc <memcpy>
 801150c:	0028      	movs	r0, r5
 801150e:	f7fd fa31 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011512:	4e5f      	ldr	r6, [pc, #380]	; (8011690 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a8>)
 8011514:	6830      	ldr	r0, [r6, #0]
 8011516:	6803      	ldr	r3, [r0, #0]
 8011518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801151a:	4798      	blx	r3
 801151c:	2cff      	cmp	r4, #255	; 0xff
 801151e:	d02e      	beq.n	801157e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x96>
 8011520:	4238      	tst	r0, r7
 8011522:	d12e      	bne.n	8011582 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 8011524:	2304      	movs	r3, #4
 8011526:	5eee      	ldrsh	r6, [r5, r3]
 8011528:	2206      	movs	r2, #6
 801152a:	5eab      	ldrsh	r3, [r5, r2]
 801152c:	9305      	str	r3, [sp, #20]
 801152e:	4b58      	ldr	r3, [pc, #352]	; (8011690 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a8>)
 8011530:	6818      	ldr	r0, [r3, #0]
 8011532:	6803      	ldr	r3, [r0, #0]
 8011534:	6a1b      	ldr	r3, [r3, #32]
 8011536:	4798      	blx	r3
 8011538:	4f56      	ldr	r7, [pc, #344]	; (8011694 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ac>)
 801153a:	2302      	movs	r3, #2
 801153c:	5eea      	ldrsh	r2, [r5, r3]
 801153e:	883b      	ldrh	r3, [r7, #0]
 8011540:	4353      	muls	r3, r2
 8011542:	2100      	movs	r1, #0
 8011544:	5e6a      	ldrsh	r2, [r5, r1]
 8011546:	189b      	adds	r3, r3, r2
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	18c0      	adds	r0, r0, r3
 801154c:	0073      	lsls	r3, r6, #1
 801154e:	9306      	str	r3, [sp, #24]
 8011550:	b232      	sxth	r2, r6
 8011552:	2cff      	cmp	r4, #255	; 0xff
 8011554:	d123      	bne.n	801159e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 8011556:	1c33      	adds	r3, r6, #0
 8011558:	2a00      	cmp	r2, #0
 801155a:	da00      	bge.n	801155e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x76>
 801155c:	2300      	movs	r3, #0
 801155e:	2100      	movs	r1, #0
 8011560:	b21b      	sxth	r3, r3
 8011562:	005b      	lsls	r3, r3, #1
 8011564:	9a05      	ldr	r2, [sp, #20]
 8011566:	4291      	cmp	r1, r2
 8011568:	db00      	blt.n	801156c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x84>
 801156a:	e08a      	b.n	8011682 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x19a>
 801156c:	2200      	movs	r2, #0
 801156e:	42b2      	cmp	r2, r6
 8011570:	db00      	blt.n	8011574 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>
 8011572:	e07e      	b.n	8011672 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18a>
 8011574:	9d04      	ldr	r5, [sp, #16]
 8011576:	0054      	lsls	r4, r2, #1
 8011578:	5305      	strh	r5, [r0, r4]
 801157a:	3201      	adds	r2, #1
 801157c:	e7f7      	b.n	801156e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x86>
 801157e:	0783      	lsls	r3, r0, #30
 8011580:	d5d0      	bpl.n	8011524 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8011582:	6830      	ldr	r0, [r6, #0]
 8011584:	886b      	ldrh	r3, [r5, #2]
 8011586:	6801      	ldr	r1, [r0, #0]
 8011588:	882a      	ldrh	r2, [r5, #0]
 801158a:	9402      	str	r4, [sp, #8]
 801158c:	88ec      	ldrh	r4, [r5, #6]
 801158e:	9401      	str	r4, [sp, #4]
 8011590:	88ac      	ldrh	r4, [r5, #4]
 8011592:	9400      	str	r4, [sp, #0]
 8011594:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8011596:	9904      	ldr	r1, [sp, #16]
 8011598:	47a0      	blx	r4
 801159a:	b00f      	add	sp, #60	; 0x3c
 801159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801159e:	23ff      	movs	r3, #255	; 0xff
 80115a0:	21f8      	movs	r1, #248	; 0xf8
 80115a2:	1b1b      	subs	r3, r3, r4
 80115a4:	930a      	str	r3, [sp, #40]	; 0x28
 80115a6:	9b04      	ldr	r3, [sp, #16]
 80115a8:	b2a4      	uxth	r4, r4
 80115aa:	0a1b      	lsrs	r3, r3, #8
 80115ac:	400b      	ands	r3, r1
 80115ae:	4363      	muls	r3, r4
 80115b0:	9307      	str	r3, [sp, #28]
 80115b2:	9b04      	ldr	r3, [sp, #16]
 80115b4:	3104      	adds	r1, #4
 80115b6:	08db      	lsrs	r3, r3, #3
 80115b8:	400b      	ands	r3, r1
 80115ba:	4363      	muls	r3, r4
 80115bc:	9308      	str	r3, [sp, #32]
 80115be:	9b04      	ldr	r3, [sp, #16]
 80115c0:	00db      	lsls	r3, r3, #3
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	4363      	muls	r3, r4
 80115c6:	9309      	str	r3, [sp, #36]	; 0x24
 80115c8:	1c33      	adds	r3, r6, #0
 80115ca:	2a00      	cmp	r2, #0
 80115cc:	da00      	bge.n	80115d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe8>
 80115ce:	2300      	movs	r3, #0
 80115d0:	b21b      	sxth	r3, r3
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80115d6:	2300      	movs	r3, #0
 80115d8:	9304      	str	r3, [sp, #16]
 80115da:	9a04      	ldr	r2, [sp, #16]
 80115dc:	9b05      	ldr	r3, [sp, #20]
 80115de:	429a      	cmp	r2, r3
 80115e0:	da4f      	bge.n	8011682 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x19a>
 80115e2:	0004      	movs	r4, r0
 80115e4:	2700      	movs	r7, #0
 80115e6:	42b7      	cmp	r7, r6
 80115e8:	da38      	bge.n	801165c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>
 80115ea:	466b      	mov	r3, sp
 80115ec:	2507      	movs	r5, #7
 80115ee:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80115f0:	8822      	ldrh	r2, [r4, #0]
 80115f2:	468c      	mov	ip, r1
 80115f4:	1213      	asrs	r3, r2, #8
 80115f6:	43ab      	bics	r3, r5
 80115f8:	434b      	muls	r3, r1
 80115fa:	9907      	ldr	r1, [sp, #28]
 80115fc:	3d04      	subs	r5, #4
 80115fe:	18cb      	adds	r3, r1, r3
 8011600:	10d1      	asrs	r1, r2, #3
 8011602:	43a9      	bics	r1, r5
 8011604:	4665      	mov	r5, ip
 8011606:	b2c9      	uxtb	r1, r1
 8011608:	4369      	muls	r1, r5
 801160a:	9d08      	ldr	r5, [sp, #32]
 801160c:	00d2      	lsls	r2, r2, #3
 801160e:	1869      	adds	r1, r5, r1
 8011610:	4665      	mov	r5, ip
 8011612:	b2d2      	uxtb	r2, r2
 8011614:	436a      	muls	r2, r5
 8011616:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011618:	b29b      	uxth	r3, r3
 801161a:	18aa      	adds	r2, r5, r2
 801161c:	1c5d      	adds	r5, r3, #1
 801161e:	46ac      	mov	ip, r5
 8011620:	25ff      	movs	r5, #255	; 0xff
 8011622:	121b      	asrs	r3, r3, #8
 8011624:	4463      	add	r3, ip
 8011626:	022d      	lsls	r5, r5, #8
 8011628:	402b      	ands	r3, r5
 801162a:	0adb      	lsrs	r3, r3, #11
 801162c:	b292      	uxth	r2, r2
 801162e:	02db      	lsls	r3, r3, #11
 8011630:	469c      	mov	ip, r3
 8011632:	1c53      	adds	r3, r2, #1
 8011634:	1212      	asrs	r2, r2, #8
 8011636:	189b      	adds	r3, r3, r2
 8011638:	221f      	movs	r2, #31
 801163a:	12db      	asrs	r3, r3, #11
 801163c:	4013      	ands	r3, r2
 801163e:	4662      	mov	r2, ip
 8011640:	b289      	uxth	r1, r1
 8011642:	4313      	orrs	r3, r2
 8011644:	120a      	asrs	r2, r1, #8
 8011646:	3101      	adds	r1, #1
 8011648:	1851      	adds	r1, r2, r1
 801164a:	22fc      	movs	r2, #252	; 0xfc
 801164c:	0949      	lsrs	r1, r1, #5
 801164e:	00d2      	lsls	r2, r2, #3
 8011650:	4011      	ands	r1, r2
 8011652:	4319      	orrs	r1, r3
 8011654:	8021      	strh	r1, [r4, #0]
 8011656:	3701      	adds	r7, #1
 8011658:	3402      	adds	r4, #2
 801165a:	e7c4      	b.n	80115e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xfe>
 801165c:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ac>)
 801165e:	9a06      	ldr	r2, [sp, #24]
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	1a9b      	subs	r3, r3, r2
 8011666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011668:	189b      	adds	r3, r3, r2
 801166a:	18c0      	adds	r0, r0, r3
 801166c:	9b04      	ldr	r3, [sp, #16]
 801166e:	3301      	adds	r3, #1
 8011670:	e7b2      	b.n	80115d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8011672:	883a      	ldrh	r2, [r7, #0]
 8011674:	9c06      	ldr	r4, [sp, #24]
 8011676:	0052      	lsls	r2, r2, #1
 8011678:	1b12      	subs	r2, r2, r4
 801167a:	18d2      	adds	r2, r2, r3
 801167c:	1880      	adds	r0, r0, r2
 801167e:	3101      	adds	r1, #1
 8011680:	e770      	b.n	8011564 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x7c>
 8011682:	4b03      	ldr	r3, [pc, #12]	; (8011690 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a8>)
 8011684:	6818      	ldr	r0, [r3, #0]
 8011686:	6803      	ldr	r3, [r0, #0]
 8011688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801168a:	4798      	blx	r3
 801168c:	e785      	b.n	801159a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801168e:	46c0      	nop			; (mov r8, r8)
 8011690:	200034cc 	.word	0x200034cc
 8011694:	200034c6 	.word	0x200034c6

08011698 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8011698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169a:	0015      	movs	r5, r2
 801169c:	4a99      	ldr	r2, [pc, #612]	; (8011904 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801169e:	b093      	sub	sp, #76	; 0x4c
 80116a0:	6812      	ldr	r2, [r2, #0]
 80116a2:	0006      	movs	r6, r0
 80116a4:	9203      	str	r2, [sp, #12]
 80116a6:	3248      	adds	r2, #72	; 0x48
 80116a8:	7812      	ldrb	r2, [r2, #0]
 80116aa:	9104      	str	r1, [sp, #16]
 80116ac:	2a02      	cmp	r2, #2
 80116ae:	d105      	bne.n	80116bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x24>
 80116b0:	4b95      	ldr	r3, [pc, #596]	; (8011908 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80116b2:	4a96      	ldr	r2, [pc, #600]	; (801190c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80116b4:	4996      	ldr	r1, [pc, #600]	; (8011910 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80116b6:	4897      	ldr	r0, [pc, #604]	; (8011914 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80116b8:	f001 fb9c 	bl	8012df4 <__assert_func>
 80116bc:	ac09      	add	r4, sp, #36	; 0x24
 80116be:	0020      	movs	r0, r4
 80116c0:	8023      	strh	r3, [r4, #0]
 80116c2:	f7ff fce7 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80116c6:	6833      	ldr	r3, [r6, #0]
 80116c8:	0007      	movs	r7, r0
 80116ca:	6a1b      	ldr	r3, [r3, #32]
 80116cc:	0030      	movs	r0, r6
 80116ce:	4798      	blx	r3
 80116d0:	4287      	cmp	r7, r0
 80116d2:	d004      	beq.n	80116de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46>
 80116d4:	21b0      	movs	r1, #176	; 0xb0
 80116d6:	4b90      	ldr	r3, [pc, #576]	; (8011918 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80116d8:	4a8c      	ldr	r2, [pc, #560]	; (801190c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80116da:	0089      	lsls	r1, r1, #2
 80116dc:	e7eb      	b.n	80116b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e>
 80116de:	0020      	movs	r0, r4
 80116e0:	f7ff fc4e 	bl	8010f80 <_ZNK8touchgfx6Bitmap7getDataEv>
 80116e4:	9003      	str	r0, [sp, #12]
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d103      	bne.n	80116f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5a>
 80116ea:	4b8c      	ldr	r3, [pc, #560]	; (801191c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80116ec:	4a87      	ldr	r2, [pc, #540]	; (801190c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80116ee:	498c      	ldr	r1, [pc, #560]	; (8011920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80116f0:	e7e1      	b.n	80116b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e>
 80116f2:	af0c      	add	r7, sp, #48	; 0x30
 80116f4:	0029      	movs	r1, r5
 80116f6:	2208      	movs	r2, #8
 80116f8:	a80a      	add	r0, sp, #40	; 0x28
 80116fa:	f001 fbef 	bl	8012edc <memcpy>
 80116fe:	2208      	movs	r2, #8
 8011700:	9904      	ldr	r1, [sp, #16]
 8011702:	0038      	movs	r0, r7
 8011704:	f001 fbea 	bl	8012edc <memcpy>
 8011708:	2200      	movs	r2, #0
 801170a:	5eab      	ldrsh	r3, [r5, r2]
 801170c:	0020      	movs	r0, r4
 801170e:	9304      	str	r3, [sp, #16]
 8011710:	2202      	movs	r2, #2
 8011712:	5eab      	ldrsh	r3, [r5, r2]
 8011714:	9305      	str	r3, [sp, #20]
 8011716:	f7ff fb25 	bl	8010d64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801171a:	0005      	movs	r5, r0
 801171c:	0020      	movs	r0, r4
 801171e:	f7ff fb5d 	bl	8010ddc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011722:	9b04      	ldr	r3, [sp, #16]
 8011724:	ac0e      	add	r4, sp, #56	; 0x38
 8011726:	8023      	strh	r3, [r4, #0]
 8011728:	9b05      	ldr	r3, [sp, #20]
 801172a:	80e0      	strh	r0, [r4, #6]
 801172c:	a80a      	add	r0, sp, #40	; 0x28
 801172e:	8063      	strh	r3, [r4, #2]
 8011730:	80a5      	strh	r5, [r4, #4]
 8011732:	f7fd f91f 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011736:	0038      	movs	r0, r7
 8011738:	f7fd f91c 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801173c:	0020      	movs	r0, r4
 801173e:	f7fd f919 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011742:	4b78      	ldr	r3, [pc, #480]	; (8011924 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8011744:	0038      	movs	r0, r7
 8011746:	2200      	movs	r2, #0
 8011748:	5e9a      	ldrsh	r2, [r3, r2]
 801174a:	4b77      	ldr	r3, [pc, #476]	; (8011928 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801174c:	2100      	movs	r1, #0
 801174e:	5e5b      	ldrsh	r3, [r3, r1]
 8011750:	2100      	movs	r1, #0
 8011752:	9110      	str	r1, [sp, #64]	; 0x40
 8011754:	a910      	add	r1, sp, #64	; 0x40
 8011756:	808a      	strh	r2, [r1, #4]
 8011758:	80cb      	strh	r3, [r1, #6]
 801175a:	f7fa ff51 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 801175e:	0038      	movs	r0, r7
 8011760:	f7fa ff9e 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011764:	2800      	cmp	r0, #0
 8011766:	d000      	beq.n	801176a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xd2>
 8011768:	e0bf      	b.n	80118ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x252>
 801176a:	2300      	movs	r3, #0
 801176c:	5efa      	ldrsh	r2, [r7, r3]
 801176e:	ab06      	add	r3, sp, #24
 8011770:	2510      	movs	r5, #16
 8011772:	5f5d      	ldrsh	r5, [r3, r5]
 8011774:	42aa      	cmp	r2, r5
 8011776:	db35      	blt.n	80117e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x14c>
 8011778:	2102      	movs	r1, #2
 801177a:	5e7b      	ldrsh	r3, [r7, r1]
 801177c:	a906      	add	r1, sp, #24
 801177e:	2012      	movs	r0, #18
 8011780:	5e08      	ldrsh	r0, [r1, r0]
 8011782:	4283      	cmp	r3, r0
 8011784:	db2e      	blt.n	80117e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x14c>
 8011786:	88b9      	ldrh	r1, [r7, #4]
 8011788:	188a      	adds	r2, r1, r2
 801178a:	a906      	add	r1, sp, #24
 801178c:	8a89      	ldrh	r1, [r1, #20]
 801178e:	b212      	sxth	r2, r2
 8011790:	1949      	adds	r1, r1, r5
 8011792:	b209      	sxth	r1, r1
 8011794:	428a      	cmp	r2, r1
 8011796:	dc25      	bgt.n	80117e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x14c>
 8011798:	88fa      	ldrh	r2, [r7, #6]
 801179a:	18d2      	adds	r2, r2, r3
 801179c:	ab06      	add	r3, sp, #24
 801179e:	8adb      	ldrh	r3, [r3, #22]
 80117a0:	b212      	sxth	r2, r2
 80117a2:	181b      	adds	r3, r3, r0
 80117a4:	b21b      	sxth	r3, r3
 80117a6:	429a      	cmp	r2, r3
 80117a8:	dc1c      	bgt.n	80117e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x14c>
 80117aa:	6833      	ldr	r3, [r6, #0]
 80117ac:	0030      	movs	r0, r6
 80117ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b0:	4798      	blx	r3
 80117b2:	4b54      	ldr	r3, [pc, #336]	; (8011904 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80117b4:	9005      	str	r0, [sp, #20]
 80117b6:	6818      	ldr	r0, [r3, #0]
 80117b8:	6803      	ldr	r3, [r0, #0]
 80117ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117bc:	4798      	blx	r3
 80117be:	9004      	str	r0, [sp, #16]
 80117c0:	2204      	movs	r2, #4
 80117c2:	5ea3      	ldrsh	r3, [r4, r2]
 80117c4:	469c      	mov	ip, r3
 80117c6:	2300      	movs	r3, #0
 80117c8:	5ee1      	ldrsh	r1, [r4, r3]
 80117ca:	883b      	ldrh	r3, [r7, #0]
 80117cc:	1a5b      	subs	r3, r3, r1
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	b21a      	sxth	r2, r3
 80117d2:	2a00      	cmp	r2, #0
 80117d4:	dc0a      	bgt.n	80117ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x154>
 80117d6:	9d03      	ldr	r5, [sp, #12]
 80117d8:	d00e      	beq.n	80117f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 80117da:	88ba      	ldrh	r2, [r7, #4]
 80117dc:	8039      	strh	r1, [r7, #0]
 80117de:	189b      	adds	r3, r3, r2
 80117e0:	80bb      	strh	r3, [r7, #4]
 80117e2:	e009      	b.n	80117f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 80117e4:	4b51      	ldr	r3, [pc, #324]	; (801192c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 80117e6:	4a49      	ldr	r2, [pc, #292]	; (801190c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80117e8:	21b4      	movs	r1, #180	; 0xb4
 80117ea:	e776      	b.n	80116da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x42>
 80117ec:	0055      	lsls	r5, r2, #1
 80117ee:	9a03      	ldr	r2, [sp, #12]
 80117f0:	1955      	adds	r5, r2, r5
 80117f2:	4662      	mov	r2, ip
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	80a3      	strh	r3, [r4, #4]
 80117f8:	aa0e      	add	r2, sp, #56	; 0x38
 80117fa:	2302      	movs	r3, #2
 80117fc:	5ed4      	ldrsh	r4, [r2, r3]
 80117fe:	887b      	ldrh	r3, [r7, #2]
 8011800:	1b1b      	subs	r3, r3, r4
 8011802:	b29b      	uxth	r3, r3
 8011804:	b219      	sxth	r1, r3
 8011806:	2900      	cmp	r1, #0
 8011808:	dd53      	ble.n	80118b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x21a>
 801180a:	4664      	mov	r4, ip
 801180c:	4361      	muls	r1, r4
 801180e:	0049      	lsls	r1, r1, #1
 8011810:	186d      	adds	r5, r5, r1
 8011812:	88d1      	ldrh	r1, [r2, #6]
 8011814:	1acb      	subs	r3, r1, r3
 8011816:	80d3      	strh	r3, [r2, #6]
 8011818:	2304      	movs	r3, #4
 801181a:	5ed1      	ldrsh	r1, [r2, r3]
 801181c:	2900      	cmp	r1, #0
 801181e:	dd64      	ble.n	80118ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x252>
 8011820:	2306      	movs	r3, #6
 8011822:	5ed7      	ldrsh	r7, [r2, r3]
 8011824:	2f00      	cmp	r7, #0
 8011826:	dd60      	ble.n	80118ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x252>
 8011828:	aa0c      	add	r2, sp, #48	; 0x30
 801182a:	2002      	movs	r0, #2
 801182c:	5e14      	ldrsh	r4, [r2, r0]
 801182e:	2000      	movs	r0, #0
 8011830:	5e13      	ldrsh	r3, [r2, r0]
 8011832:	9406      	str	r4, [sp, #24]
 8011834:	9806      	ldr	r0, [sp, #24]
 8011836:	9e05      	ldr	r6, [sp, #20]
 8011838:	005c      	lsls	r4, r3, #1
 801183a:	4346      	muls	r6, r0
 801183c:	9804      	ldr	r0, [sp, #16]
 801183e:	19a4      	adds	r4, r4, r6
 8011840:	1900      	adds	r0, r0, r4
 8011842:	9004      	str	r0, [sp, #16]
 8011844:	4837      	ldr	r0, [pc, #220]	; (8011924 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8011846:	8806      	ldrh	r6, [r0, #0]
 8011848:	8890      	ldrh	r0, [r2, #4]
 801184a:	1c02      	adds	r2, r0, #0
 801184c:	b200      	sxth	r0, r0
 801184e:	4288      	cmp	r0, r1
 8011850:	dd00      	ble.n	8011854 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1bc>
 8011852:	1c0a      	adds	r2, r1, #0
 8011854:	b212      	sxth	r2, r2
 8011856:	1af3      	subs	r3, r6, r3
 8011858:	429a      	cmp	r2, r3
 801185a:	dd00      	ble.n	801185e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c6>
 801185c:	001a      	movs	r2, r3
 801185e:	ab0c      	add	r3, sp, #48	; 0x30
 8011860:	88d9      	ldrh	r1, [r3, #6]
 8011862:	1c0c      	adds	r4, r1, #0
 8011864:	b209      	sxth	r1, r1
 8011866:	42b9      	cmp	r1, r7
 8011868:	dd00      	ble.n	801186c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 801186a:	1c3c      	adds	r4, r7, #0
 801186c:	4b2e      	ldr	r3, [pc, #184]	; (8011928 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801186e:	9906      	ldr	r1, [sp, #24]
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	b224      	sxth	r4, r4
 8011874:	1a5b      	subs	r3, r3, r1
 8011876:	429c      	cmp	r4, r3
 8011878:	dd00      	ble.n	801187c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e4>
 801187a:	001c      	movs	r4, r3
 801187c:	4296      	cmp	r6, r2
 801187e:	d01f      	beq.n	80118c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8011880:	0053      	lsls	r3, r2, #1
 8011882:	9307      	str	r3, [sp, #28]
 8011884:	4663      	mov	r3, ip
 8011886:	2600      	movs	r6, #0
 8011888:	005b      	lsls	r3, r3, #1
 801188a:	9306      	str	r3, [sp, #24]
 801188c:	42b4      	cmp	r4, r6
 801188e:	dd2c      	ble.n	80118ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x252>
 8011890:	4b1c      	ldr	r3, [pc, #112]	; (8011904 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8011892:	9a04      	ldr	r2, [sp, #16]
 8011894:	6818      	ldr	r0, [r3, #0]
 8011896:	0029      	movs	r1, r5
 8011898:	6803      	ldr	r3, [r0, #0]
 801189a:	3601      	adds	r6, #1
 801189c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 801189e:	9b07      	ldr	r3, [sp, #28]
 80118a0:	47b8      	blx	r7
 80118a2:	9a05      	ldr	r2, [sp, #20]
 80118a4:	9b04      	ldr	r3, [sp, #16]
 80118a6:	4694      	mov	ip, r2
 80118a8:	4463      	add	r3, ip
 80118aa:	9304      	str	r3, [sp, #16]
 80118ac:	9b06      	ldr	r3, [sp, #24]
 80118ae:	18ed      	adds	r5, r5, r3
 80118b0:	e7ec      	b.n	801188c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 80118b2:	2900      	cmp	r1, #0
 80118b4:	d0b0      	beq.n	8011818 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x180>
 80118b6:	88f9      	ldrh	r1, [r7, #6]
 80118b8:	807c      	strh	r4, [r7, #2]
 80118ba:	185b      	adds	r3, r3, r1
 80118bc:	80fb      	strh	r3, [r7, #6]
 80118be:	e7ab      	b.n	8011818 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x180>
 80118c0:	4566      	cmp	r6, ip
 80118c2:	d1dd      	bne.n	8011880 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e8>
 80118c4:	4f0f      	ldr	r7, [pc, #60]	; (8011904 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80118c6:	6838      	ldr	r0, [r7, #0]
 80118c8:	6803      	ldr	r3, [r0, #0]
 80118ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118cc:	4798      	blx	r3
 80118ce:	07c3      	lsls	r3, r0, #31
 80118d0:	d50e      	bpl.n	80118f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 80118d2:	aa0c      	add	r2, sp, #48	; 0x30
 80118d4:	6838      	ldr	r0, [r7, #0]
 80118d6:	80d4      	strh	r4, [r2, #6]
 80118d8:	8096      	strh	r6, [r2, #4]
 80118da:	6803      	ldr	r3, [r0, #0]
 80118dc:	9600      	str	r6, [sp, #0]
 80118de:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80118e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80118e2:	002b      	movs	r3, r5
 80118e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118e6:	47a0      	blx	r4
 80118e8:	9003      	str	r0, [sp, #12]
 80118ea:	9803      	ldr	r0, [sp, #12]
 80118ec:	b013      	add	sp, #76	; 0x4c
 80118ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118f0:	6838      	ldr	r0, [r7, #0]
 80118f2:	9b05      	ldr	r3, [sp, #20]
 80118f4:	6802      	ldr	r2, [r0, #0]
 80118f6:	4363      	muls	r3, r4
 80118f8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80118fa:	0029      	movs	r1, r5
 80118fc:	9a04      	ldr	r2, [sp, #16]
 80118fe:	47b0      	blx	r6
 8011900:	e7f3      	b.n	80118ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x252>
 8011902:	46c0      	nop			; (mov r8, r8)
 8011904:	200034cc 	.word	0x200034cc
 8011908:	080172c2 	.word	0x080172c2
 801190c:	080177dc 	.word	0x080177dc
 8011910:	000002be 	.word	0x000002be
 8011914:	08017374 	.word	0x08017374
 8011918:	080173a6 	.word	0x080173a6
 801191c:	080173fb 	.word	0x080173fb
 8011920:	000002c2 	.word	0x000002c2
 8011924:	200034c6 	.word	0x200034c6
 8011928:	200034c8 	.word	0x200034c8
 801192c:	08017439 	.word	0x08017439

08011930 <_ZN8touchgfx8LCD16bppC1Ev>:
 8011930:	2300      	movs	r3, #0
 8011932:	4a10      	ldr	r2, [pc, #64]	; (8011974 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8011934:	6043      	str	r3, [r0, #4]
 8011936:	3208      	adds	r2, #8
 8011938:	6002      	str	r2, [r0, #0]
 801193a:	6083      	str	r3, [r0, #8]
 801193c:	60c3      	str	r3, [r0, #12]
 801193e:	6103      	str	r3, [r0, #16]
 8011940:	6143      	str	r3, [r0, #20]
 8011942:	6183      	str	r3, [r0, #24]
 8011944:	61c3      	str	r3, [r0, #28]
 8011946:	6203      	str	r3, [r0, #32]
 8011948:	6243      	str	r3, [r0, #36]	; 0x24
 801194a:	6283      	str	r3, [r0, #40]	; 0x28
 801194c:	62c3      	str	r3, [r0, #44]	; 0x2c
 801194e:	6303      	str	r3, [r0, #48]	; 0x30
 8011950:	6343      	str	r3, [r0, #52]	; 0x34
 8011952:	6383      	str	r3, [r0, #56]	; 0x38
 8011954:	63c3      	str	r3, [r0, #60]	; 0x3c
 8011956:	6403      	str	r3, [r0, #64]	; 0x40
 8011958:	6443      	str	r3, [r0, #68]	; 0x44
 801195a:	6483      	str	r3, [r0, #72]	; 0x48
 801195c:	64c3      	str	r3, [r0, #76]	; 0x4c
 801195e:	6503      	str	r3, [r0, #80]	; 0x50
 8011960:	6543      	str	r3, [r0, #84]	; 0x54
 8011962:	6583      	str	r3, [r0, #88]	; 0x58
 8011964:	65c3      	str	r3, [r0, #92]	; 0x5c
 8011966:	6603      	str	r3, [r0, #96]	; 0x60
 8011968:	6643      	str	r3, [r0, #100]	; 0x64
 801196a:	6683      	str	r3, [r0, #104]	; 0x68
 801196c:	66c3      	str	r3, [r0, #108]	; 0x6c
 801196e:	6703      	str	r3, [r0, #112]	; 0x70
 8011970:	6743      	str	r3, [r0, #116]	; 0x74
 8011972:	4770      	bx	lr
 8011974:	08017534 	.word	0x08017534

08011978 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8011978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801197a:	0017      	movs	r7, r2
 801197c:	000e      	movs	r6, r1
 801197e:	b091      	sub	sp, #68	; 0x44
 8011980:	ad0c      	add	r5, sp, #48	; 0x30
 8011982:	ac0e      	add	r4, sp, #56	; 0x38
 8011984:	9004      	str	r0, [sp, #16]
 8011986:	2208      	movs	r2, #8
 8011988:	0028      	movs	r0, r5
 801198a:	9305      	str	r3, [sp, #20]
 801198c:	f001 faa6 	bl	8012edc <memcpy>
 8011990:	2208      	movs	r2, #8
 8011992:	0039      	movs	r1, r7
 8011994:	0020      	movs	r0, r4
 8011996:	f001 faa1 	bl	8012edc <memcpy>
 801199a:	0028      	movs	r0, r5
 801199c:	f7fc ffea 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80119a0:	0031      	movs	r1, r6
 80119a2:	0020      	movs	r0, r4
 80119a4:	f7fc ffce 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80119a8:	2302      	movs	r3, #2
 80119aa:	5ee2      	ldrsh	r2, [r4, r3]
 80119ac:	2300      	movs	r3, #0
 80119ae:	5ee1      	ldrsh	r1, [r4, r3]
 80119b0:	2004      	movs	r0, #4
 80119b2:	5e2b      	ldrsh	r3, [r5, r0]
 80119b4:	9804      	ldr	r0, [sp, #16]
 80119b6:	4353      	muls	r3, r2
 80119b8:	185b      	adds	r3, r3, r1
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	18c3      	adds	r3, r0, r3
 80119be:	9304      	str	r3, [sp, #16]
 80119c0:	882b      	ldrh	r3, [r5, #0]
 80119c2:	4f63      	ldr	r7, [pc, #396]	; (8011b50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1d8>)
 80119c4:	1859      	adds	r1, r3, r1
 80119c6:	8021      	strh	r1, [r4, #0]
 80119c8:	886b      	ldrh	r3, [r5, #2]
 80119ca:	6838      	ldr	r0, [r7, #0]
 80119cc:	189a      	adds	r2, r3, r2
 80119ce:	8062      	strh	r2, [r4, #2]
 80119d0:	2304      	movs	r3, #4
 80119d2:	5ee6      	ldrsh	r6, [r4, r3]
 80119d4:	2206      	movs	r2, #6
 80119d6:	5ea3      	ldrsh	r3, [r4, r2]
 80119d8:	9309      	str	r3, [sp, #36]	; 0x24
 80119da:	6803      	ldr	r3, [r0, #0]
 80119dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119de:	4798      	blx	r3
 80119e0:	9b05      	ldr	r3, [sp, #20]
 80119e2:	2bff      	cmp	r3, #255	; 0xff
 80119e4:	d113      	bne.n	8011a0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80119e6:	0683      	lsls	r3, r0, #26
 80119e8:	d513      	bpl.n	8011a12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9a>
 80119ea:	6838      	ldr	r0, [r7, #0]
 80119ec:	8863      	ldrh	r3, [r4, #2]
 80119ee:	8822      	ldrh	r2, [r4, #0]
 80119f0:	9c05      	ldr	r4, [sp, #20]
 80119f2:	6801      	ldr	r1, [r0, #0]
 80119f4:	9403      	str	r4, [sp, #12]
 80119f6:	88ac      	ldrh	r4, [r5, #4]
 80119f8:	b2b6      	uxth	r6, r6
 80119fa:	9402      	str	r4, [sp, #8]
 80119fc:	466c      	mov	r4, sp
 80119fe:	8ca4      	ldrh	r4, [r4, #36]	; 0x24
 8011a00:	9600      	str	r6, [sp, #0]
 8011a02:	9401      	str	r4, [sp, #4]
 8011a04:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8011a06:	9904      	ldr	r1, [sp, #16]
 8011a08:	47a0      	blx	r4
 8011a0a:	b011      	add	sp, #68	; 0x44
 8011a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0e:	0643      	lsls	r3, r0, #25
 8011a10:	d4eb      	bmi.n	80119ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x72>
 8011a12:	6838      	ldr	r0, [r7, #0]
 8011a14:	6803      	ldr	r3, [r0, #0]
 8011a16:	6a1b      	ldr	r3, [r3, #32]
 8011a18:	4798      	blx	r3
 8011a1a:	4b4e      	ldr	r3, [pc, #312]	; (8011b54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1dc>)
 8011a1c:	881a      	ldrh	r2, [r3, #0]
 8011a1e:	2102      	movs	r1, #2
 8011a20:	5e63      	ldrsh	r3, [r4, r1]
 8011a22:	4353      	muls	r3, r2
 8011a24:	2100      	movs	r1, #0
 8011a26:	5e62      	ldrsh	r2, [r4, r1]
 8011a28:	189b      	adds	r3, r3, r2
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	18c3      	adds	r3, r0, r3
 8011a2e:	469c      	mov	ip, r3
 8011a30:	1c33      	adds	r3, r6, #0
 8011a32:	2e00      	cmp	r6, #0
 8011a34:	da00      	bge.n	8011a38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xc0>
 8011a36:	2300      	movs	r3, #0
 8011a38:	b21b      	sxth	r3, r3
 8011a3a:	009a      	lsls	r2, r3, #2
 8011a3c:	005b      	lsls	r3, r3, #1
 8011a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8011a40:	2300      	movs	r3, #0
 8011a42:	920b      	str	r2, [sp, #44]	; 0x2c
 8011a44:	9307      	str	r3, [sp, #28]
 8011a46:	9b07      	ldr	r3, [sp, #28]
 8011a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	da7a      	bge.n	8011b44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1cc>
 8011a4e:	2500      	movs	r5, #0
 8011a50:	42b5      	cmp	r5, r6
 8011a52:	da63      	bge.n	8011b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a4>
 8011a54:	9a04      	ldr	r2, [sp, #16]
 8011a56:	00ab      	lsls	r3, r5, #2
 8011a58:	58d2      	ldr	r2, [r2, r3]
 8011a5a:	0e11      	lsrs	r1, r2, #24
 8011a5c:	d015      	beq.n	8011a8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8011a5e:	006b      	lsls	r3, r5, #1
 8011a60:	0a17      	lsrs	r7, r2, #8
 8011a62:	9306      	str	r3, [sp, #24]
 8011a64:	29ff      	cmp	r1, #255	; 0xff
 8011a66:	d112      	bne.n	8011a8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8011a68:	9b05      	ldr	r3, [sp, #20]
 8011a6a:	2bff      	cmp	r3, #255	; 0xff
 8011a6c:	d10f      	bne.n	8011a8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8011a6e:	23fc      	movs	r3, #252	; 0xfc
 8011a70:	0951      	lsrs	r1, r2, #5
 8011a72:	00db      	lsls	r3, r3, #3
 8011a74:	4019      	ands	r1, r3
 8011a76:	0cd3      	lsrs	r3, r2, #19
 8011a78:	02db      	lsls	r3, r3, #11
 8011a7a:	430b      	orrs	r3, r1
 8011a7c:	211f      	movs	r1, #31
 8011a7e:	08d2      	lsrs	r2, r2, #3
 8011a80:	400a      	ands	r2, r1
 8011a82:	4313      	orrs	r3, r2
 8011a84:	4662      	mov	r2, ip
 8011a86:	0069      	lsls	r1, r5, #1
 8011a88:	5253      	strh	r3, [r2, r1]
 8011a8a:	3501      	adds	r5, #1
 8011a8c:	e7e0      	b.n	8011a50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd8>
 8011a8e:	4663      	mov	r3, ip
 8011a90:	0068      	lsls	r0, r5, #1
 8011a92:	5a1b      	ldrh	r3, [r3, r0]
 8011a94:	9805      	ldr	r0, [sp, #20]
 8011a96:	9308      	str	r3, [sp, #32]
 8011a98:	4341      	muls	r1, r0
 8011a9a:	1c4c      	adds	r4, r1, #1
 8011a9c:	1209      	asrs	r1, r1, #8
 8011a9e:	1864      	adds	r4, r4, r1
 8011aa0:	1224      	asrs	r4, r4, #8
 8011aa2:	b2a1      	uxth	r1, r4
 8011aa4:	9106      	str	r1, [sp, #24]
 8011aa6:	2107      	movs	r1, #7
 8011aa8:	43e4      	mvns	r4, r4
 8011aaa:	1218      	asrs	r0, r3, #8
 8011aac:	4388      	bics	r0, r1
 8011aae:	9b06      	ldr	r3, [sp, #24]
 8011ab0:	0c11      	lsrs	r1, r2, #16
 8011ab2:	b2e4      	uxtb	r4, r4
 8011ab4:	b2c9      	uxtb	r1, r1
 8011ab6:	4359      	muls	r1, r3
 8011ab8:	4360      	muls	r0, r4
 8011aba:	9b08      	ldr	r3, [sp, #32]
 8011abc:	1840      	adds	r0, r0, r1
 8011abe:	10d9      	asrs	r1, r3, #3
 8011ac0:	2303      	movs	r3, #3
 8011ac2:	4399      	bics	r1, r3
 8011ac4:	9b06      	ldr	r3, [sp, #24]
 8011ac6:	b2ff      	uxtb	r7, r7
 8011ac8:	435f      	muls	r7, r3
 8011aca:	9b08      	ldr	r3, [sp, #32]
 8011acc:	b2c9      	uxtb	r1, r1
 8011ace:	00db      	lsls	r3, r3, #3
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	4361      	muls	r1, r4
 8011ad4:	4363      	muls	r3, r4
 8011ad6:	9c06      	ldr	r4, [sp, #24]
 8011ad8:	b2d2      	uxtb	r2, r2
 8011ada:	4362      	muls	r2, r4
 8011adc:	b280      	uxth	r0, r0
 8011ade:	189b      	adds	r3, r3, r2
 8011ae0:	1c42      	adds	r2, r0, #1
 8011ae2:	1200      	asrs	r0, r0, #8
 8011ae4:	1810      	adds	r0, r2, r0
 8011ae6:	22ff      	movs	r2, #255	; 0xff
 8011ae8:	0212      	lsls	r2, r2, #8
 8011aea:	4010      	ands	r0, r2
 8011aec:	221f      	movs	r2, #31
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	19c9      	adds	r1, r1, r7
 8011af2:	121f      	asrs	r7, r3, #8
 8011af4:	3301      	adds	r3, #1
 8011af6:	18fb      	adds	r3, r7, r3
 8011af8:	0ac0      	lsrs	r0, r0, #11
 8011afa:	12db      	asrs	r3, r3, #11
 8011afc:	27fc      	movs	r7, #252	; 0xfc
 8011afe:	4013      	ands	r3, r2
 8011b00:	b289      	uxth	r1, r1
 8011b02:	02c0      	lsls	r0, r0, #11
 8011b04:	4318      	orrs	r0, r3
 8011b06:	1c4b      	adds	r3, r1, #1
 8011b08:	1209      	asrs	r1, r1, #8
 8011b0a:	1859      	adds	r1, r3, r1
 8011b0c:	4663      	mov	r3, ip
 8011b0e:	0949      	lsrs	r1, r1, #5
 8011b10:	00ff      	lsls	r7, r7, #3
 8011b12:	4039      	ands	r1, r7
 8011b14:	4308      	orrs	r0, r1
 8011b16:	006a      	lsls	r2, r5, #1
 8011b18:	5298      	strh	r0, [r3, r2]
 8011b1a:	e7b6      	b.n	8011a8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8011b1c:	4b0d      	ldr	r3, [pc, #52]	; (8011b54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1dc>)
 8011b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	1b9b      	subs	r3, r3, r6
 8011b24:	005b      	lsls	r3, r3, #1
 8011b26:	189b      	adds	r3, r3, r2
 8011b28:	449c      	add	ip, r3
 8011b2a:	ab0c      	add	r3, sp, #48	; 0x30
 8011b2c:	2204      	movs	r2, #4
 8011b2e:	5e9b      	ldrsh	r3, [r3, r2]
 8011b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b32:	1b9b      	subs	r3, r3, r6
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	189b      	adds	r3, r3, r2
 8011b38:	9a04      	ldr	r2, [sp, #16]
 8011b3a:	18d3      	adds	r3, r2, r3
 8011b3c:	9304      	str	r3, [sp, #16]
 8011b3e:	9b07      	ldr	r3, [sp, #28]
 8011b40:	3301      	adds	r3, #1
 8011b42:	e77f      	b.n	8011a44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xcc>
 8011b44:	4b02      	ldr	r3, [pc, #8]	; (8011b50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1d8>)
 8011b46:	6818      	ldr	r0, [r3, #0]
 8011b48:	6803      	ldr	r3, [r0, #0]
 8011b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4c:	4798      	blx	r3
 8011b4e:	e75c      	b.n	8011a0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 8011b50:	200034cc 	.word	0x200034cc
 8011b54:	200034c6 	.word	0x200034c6

08011b58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8011b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b5a:	000c      	movs	r4, r1
 8011b5c:	0019      	movs	r1, r3
 8011b5e:	ab06      	add	r3, sp, #24
 8011b60:	0005      	movs	r5, r0
 8011b62:	0010      	movs	r0, r2
 8011b64:	cb04      	ldmia	r3!, {r2}
 8011b66:	ae08      	add	r6, sp, #32
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	7836      	ldrb	r6, [r6, #0]
 8011b6c:	280c      	cmp	r0, #12
 8011b6e:	d811      	bhi.n	8011b94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8011b70:	f7ee faca 	bl	8000108 <__gnu_thumb1_case_uqi>
 8011b74:	15111507 	.word	0x15111507
 8011b78:	15151515 	.word	0x15151515
 8011b7c:	15151515 	.word	0x15151515
 8011b80:	15          	.byte	0x15
 8011b81:	00          	.byte	0x00
 8011b82:	6828      	ldr	r0, [r5, #0]
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	9601      	str	r6, [sp, #4]
 8011b88:	68c6      	ldr	r6, [r0, #12]
 8011b8a:	0013      	movs	r3, r2
 8011b8c:	0028      	movs	r0, r5
 8011b8e:	000a      	movs	r2, r1
 8011b90:	0021      	movs	r1, r4
 8011b92:	47b0      	blx	r6
 8011b94:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8011b96:	0020      	movs	r0, r4
 8011b98:	f7ff feee 	bl	8011978 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011b9c:	e7fa      	b.n	8011b94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8011b9e:	4b03      	ldr	r3, [pc, #12]	; (8011bac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x54>)
 8011ba0:	4a03      	ldr	r2, [pc, #12]	; (8011bb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8011ba2:	4904      	ldr	r1, [pc, #16]	; (8011bb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8011ba4:	4804      	ldr	r0, [pc, #16]	; (8011bb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8011ba6:	f001 f925 	bl	8012df4 <__assert_func>
 8011baa:	46c0      	nop			; (mov r8, r8)
 8011bac:	08017488 	.word	0x08017488
 8011bb0:	08017862 	.word	0x08017862
 8011bb4:	000002b7 	.word	0x000002b7
 8011bb8:	08017374 	.word	0x08017374

08011bbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8011bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bbe:	b099      	sub	sp, #100	; 0x64
 8011bc0:	001f      	movs	r7, r3
 8011bc2:	ab1e      	add	r3, sp, #120	; 0x78
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	900b      	str	r0, [sp, #44]	; 0x2c
 8011bc8:	9310      	str	r3, [sp, #64]	; 0x40
 8011bca:	880b      	ldrh	r3, [r1, #0]
 8011bcc:	910f      	str	r1, [sp, #60]	; 0x3c
 8011bce:	0015      	movs	r5, r2
 8011bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d005      	beq.n	8011be2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x26>
 8011bd6:	4b7a      	ldr	r3, [pc, #488]	; (8011dc0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x204>)
 8011bd8:	4a7a      	ldr	r2, [pc, #488]	; (8011dc4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x208>)
 8011bda:	21e8      	movs	r1, #232	; 0xe8
 8011bdc:	487a      	ldr	r0, [pc, #488]	; (8011dc8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8011bde:	f001 f909 	bl	8012df4 <__assert_func>
 8011be2:	ac14      	add	r4, sp, #80	; 0x50
 8011be4:	ae16      	add	r6, sp, #88	; 0x58
 8011be6:	0029      	movs	r1, r5
 8011be8:	2208      	movs	r2, #8
 8011bea:	0020      	movs	r0, r4
 8011bec:	f001 f976 	bl	8012edc <memcpy>
 8011bf0:	2208      	movs	r2, #8
 8011bf2:	0039      	movs	r1, r7
 8011bf4:	0030      	movs	r0, r6
 8011bf6:	f001 f971 	bl	8012edc <memcpy>
 8011bfa:	0020      	movs	r0, r4
 8011bfc:	f7fc feba 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011c00:	0029      	movs	r1, r5
 8011c02:	0030      	movs	r0, r6
 8011c04:	f7fc fe9e 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011c08:	2302      	movs	r3, #2
 8011c0a:	5ef2      	ldrsh	r2, [r6, r3]
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	5ef1      	ldrsh	r1, [r6, r3]
 8011c10:	2004      	movs	r0, #4
 8011c12:	5e23      	ldrsh	r3, [r4, r0]
 8011c14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011c16:	4353      	muls	r3, r2
 8011c18:	185b      	adds	r3, r3, r1
 8011c1a:	18c3      	adds	r3, r0, r3
 8011c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c1e:	8823      	ldrh	r3, [r4, #0]
 8011c20:	4d6a      	ldr	r5, [pc, #424]	; (8011dcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x210>)
 8011c22:	185b      	adds	r3, r3, r1
 8011c24:	8033      	strh	r3, [r6, #0]
 8011c26:	8863      	ldrh	r3, [r4, #2]
 8011c28:	6828      	ldr	r0, [r5, #0]
 8011c2a:	189b      	adds	r3, r3, r2
 8011c2c:	8073      	strh	r3, [r6, #2]
 8011c2e:	2304      	movs	r3, #4
 8011c30:	5ef7      	ldrsh	r7, [r6, r3]
 8011c32:	2206      	movs	r2, #6
 8011c34:	5eb3      	ldrsh	r3, [r6, r2]
 8011c36:	9311      	str	r3, [sp, #68]	; 0x44
 8011c38:	6803      	ldr	r3, [r0, #0]
 8011c3a:	3388      	adds	r3, #136	; 0x88
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	4798      	blx	r3
 8011c40:	2801      	cmp	r0, #1
 8011c42:	d11c      	bne.n	8011c7e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc2>
 8011c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c46:	8833      	ldrh	r3, [r6, #0]
 8011c48:	9208      	str	r2, [sp, #32]
 8011c4a:	220b      	movs	r2, #11
 8011c4c:	9207      	str	r2, [sp, #28]
 8011c4e:	4a60      	ldr	r2, [pc, #384]	; (8011dd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x214>)
 8011c50:	2144      	movs	r1, #68	; 0x44
 8011c52:	8812      	ldrh	r2, [r2, #0]
 8011c54:	9005      	str	r0, [sp, #20]
 8011c56:	9206      	str	r2, [sp, #24]
 8011c58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011c5a:	b2bf      	uxth	r7, r7
 8011c5c:	9204      	str	r2, [sp, #16]
 8011c5e:	88a2      	ldrh	r2, [r4, #4]
 8011c60:	9203      	str	r2, [sp, #12]
 8011c62:	466a      	mov	r2, sp
 8011c64:	1852      	adds	r2, r2, r1
 8011c66:	8812      	ldrh	r2, [r2, #0]
 8011c68:	9701      	str	r7, [sp, #4]
 8011c6a:	9202      	str	r2, [sp, #8]
 8011c6c:	8872      	ldrh	r2, [r6, #2]
 8011c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c70:	9200      	str	r2, [sp, #0]
 8011c72:	6828      	ldr	r0, [r5, #0]
 8011c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c76:	f7fb f9d9 	bl	800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011c7a:	b019      	add	sp, #100	; 0x64
 8011c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c7e:	6828      	ldr	r0, [r5, #0]
 8011c80:	6803      	ldr	r3, [r0, #0]
 8011c82:	6a1b      	ldr	r3, [r3, #32]
 8011c84:	4798      	blx	r3
 8011c86:	4b52      	ldr	r3, [pc, #328]	; (8011dd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x214>)
 8011c88:	881a      	ldrh	r2, [r3, #0]
 8011c8a:	2102      	movs	r1, #2
 8011c8c:	5e73      	ldrsh	r3, [r6, r1]
 8011c8e:	4353      	muls	r3, r2
 8011c90:	2100      	movs	r1, #0
 8011c92:	5e72      	ldrsh	r2, [r6, r1]
 8011c94:	189b      	adds	r3, r3, r2
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	18c3      	adds	r3, r0, r3
 8011c9a:	469c      	mov	ip, r3
 8011c9c:	1c3b      	adds	r3, r7, #0
 8011c9e:	2f00      	cmp	r7, #0
 8011ca0:	da01      	bge.n	8011ca6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8011ca2:	466b      	mov	r3, sp
 8011ca4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011ca6:	b21b      	sxth	r3, r3
 8011ca8:	9312      	str	r3, [sp, #72]	; 0x48
 8011caa:	005b      	lsls	r3, r3, #1
 8011cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8011cae:	2300      	movs	r3, #0
 8011cb0:	930d      	str	r3, [sp, #52]	; 0x34
 8011cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	da7c      	bge.n	8011db4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f8>
 8011cba:	2500      	movs	r5, #0
 8011cbc:	42bd      	cmp	r5, r7
 8011cbe:	da66      	bge.n	8011d8e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d2>
 8011cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011cc4:	5d5b      	ldrb	r3, [r3, r5]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	18d3      	adds	r3, r2, r3
 8011cca:	685a      	ldr	r2, [r3, #4]
 8011ccc:	0e11      	lsrs	r1, r2, #24
 8011cce:	d015      	beq.n	8011cfc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8011cd0:	006b      	lsls	r3, r5, #1
 8011cd2:	0a16      	lsrs	r6, r2, #8
 8011cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8011cd6:	29ff      	cmp	r1, #255	; 0xff
 8011cd8:	d112      	bne.n	8011d00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x144>
 8011cda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cdc:	2bff      	cmp	r3, #255	; 0xff
 8011cde:	d10f      	bne.n	8011d00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x144>
 8011ce0:	23fc      	movs	r3, #252	; 0xfc
 8011ce2:	0951      	lsrs	r1, r2, #5
 8011ce4:	00db      	lsls	r3, r3, #3
 8011ce6:	4019      	ands	r1, r3
 8011ce8:	0cd3      	lsrs	r3, r2, #19
 8011cea:	02db      	lsls	r3, r3, #11
 8011cec:	430b      	orrs	r3, r1
 8011cee:	211f      	movs	r1, #31
 8011cf0:	08d2      	lsrs	r2, r2, #3
 8011cf2:	400a      	ands	r2, r1
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	4662      	mov	r2, ip
 8011cf8:	0069      	lsls	r1, r5, #1
 8011cfa:	5253      	strh	r3, [r2, r1]
 8011cfc:	3501      	adds	r5, #1
 8011cfe:	e7dd      	b.n	8011cbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8011d00:	4663      	mov	r3, ip
 8011d02:	0068      	lsls	r0, r5, #1
 8011d04:	5a1b      	ldrh	r3, [r3, r0]
 8011d06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d08:	930e      	str	r3, [sp, #56]	; 0x38
 8011d0a:	4341      	muls	r1, r0
 8011d0c:	1c4c      	adds	r4, r1, #1
 8011d0e:	1209      	asrs	r1, r1, #8
 8011d10:	1864      	adds	r4, r4, r1
 8011d12:	1224      	asrs	r4, r4, #8
 8011d14:	b2a1      	uxth	r1, r4
 8011d16:	910c      	str	r1, [sp, #48]	; 0x30
 8011d18:	2107      	movs	r1, #7
 8011d1a:	43e4      	mvns	r4, r4
 8011d1c:	1218      	asrs	r0, r3, #8
 8011d1e:	4388      	bics	r0, r1
 8011d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d22:	0c11      	lsrs	r1, r2, #16
 8011d24:	b2e4      	uxtb	r4, r4
 8011d26:	b2c9      	uxtb	r1, r1
 8011d28:	4359      	muls	r1, r3
 8011d2a:	4360      	muls	r0, r4
 8011d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d2e:	1840      	adds	r0, r0, r1
 8011d30:	10d9      	asrs	r1, r3, #3
 8011d32:	2303      	movs	r3, #3
 8011d34:	4399      	bics	r1, r3
 8011d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d38:	b2f6      	uxtb	r6, r6
 8011d3a:	435e      	muls	r6, r3
 8011d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d3e:	b2c9      	uxtb	r1, r1
 8011d40:	00db      	lsls	r3, r3, #3
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	4361      	muls	r1, r4
 8011d46:	4363      	muls	r3, r4
 8011d48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011d4a:	b2d2      	uxtb	r2, r2
 8011d4c:	4362      	muls	r2, r4
 8011d4e:	b280      	uxth	r0, r0
 8011d50:	189b      	adds	r3, r3, r2
 8011d52:	1c42      	adds	r2, r0, #1
 8011d54:	1200      	asrs	r0, r0, #8
 8011d56:	1810      	adds	r0, r2, r0
 8011d58:	22ff      	movs	r2, #255	; 0xff
 8011d5a:	0212      	lsls	r2, r2, #8
 8011d5c:	4010      	ands	r0, r2
 8011d5e:	221f      	movs	r2, #31
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	1989      	adds	r1, r1, r6
 8011d64:	121e      	asrs	r6, r3, #8
 8011d66:	3301      	adds	r3, #1
 8011d68:	18f3      	adds	r3, r6, r3
 8011d6a:	0ac0      	lsrs	r0, r0, #11
 8011d6c:	12db      	asrs	r3, r3, #11
 8011d6e:	26fc      	movs	r6, #252	; 0xfc
 8011d70:	4013      	ands	r3, r2
 8011d72:	b289      	uxth	r1, r1
 8011d74:	02c0      	lsls	r0, r0, #11
 8011d76:	4318      	orrs	r0, r3
 8011d78:	1c4b      	adds	r3, r1, #1
 8011d7a:	1209      	asrs	r1, r1, #8
 8011d7c:	1859      	adds	r1, r3, r1
 8011d7e:	4663      	mov	r3, ip
 8011d80:	0949      	lsrs	r1, r1, #5
 8011d82:	00f6      	lsls	r6, r6, #3
 8011d84:	4031      	ands	r1, r6
 8011d86:	4308      	orrs	r0, r1
 8011d88:	006a      	lsls	r2, r5, #1
 8011d8a:	5298      	strh	r0, [r3, r2]
 8011d8c:	e7b6      	b.n	8011cfc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8011d8e:	4b10      	ldr	r3, [pc, #64]	; (8011dd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x214>)
 8011d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	1bdb      	subs	r3, r3, r7
 8011d96:	005b      	lsls	r3, r3, #1
 8011d98:	189b      	adds	r3, r3, r2
 8011d9a:	449c      	add	ip, r3
 8011d9c:	ab14      	add	r3, sp, #80	; 0x50
 8011d9e:	2204      	movs	r2, #4
 8011da0:	5e9b      	ldrsh	r3, [r3, r2]
 8011da2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011da4:	1bdb      	subs	r3, r3, r7
 8011da6:	189b      	adds	r3, r3, r2
 8011da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011daa:	18d3      	adds	r3, r2, r3
 8011dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8011dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011db0:	3301      	adds	r3, #1
 8011db2:	e77d      	b.n	8011cb0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8011db4:	4b05      	ldr	r3, [pc, #20]	; (8011dcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x210>)
 8011db6:	6818      	ldr	r0, [r3, #0]
 8011db8:	6803      	ldr	r3, [r0, #0]
 8011dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dbc:	4798      	blx	r3
 8011dbe:	e75c      	b.n	8011c7a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8011dc0:	08017272 	.word	0x08017272
 8011dc4:	08017716 	.word	0x08017716
 8011dc8:	08017374 	.word	0x08017374
 8011dcc:	200034cc 	.word	0x200034cc
 8011dd0:	200034c6 	.word	0x200034c6

08011dd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8011dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dd6:	b09b      	sub	sp, #108	; 0x6c
 8011dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011dda:	ab20      	add	r3, sp, #128	; 0x80
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	0006      	movs	r6, r0
 8011de0:	930d      	str	r3, [sp, #52]	; 0x34
 8011de2:	880b      	ldrh	r3, [r1, #0]
 8011de4:	910e      	str	r1, [sp, #56]	; 0x38
 8011de6:	0015      	movs	r5, r2
 8011de8:	2b02      	cmp	r3, #2
 8011dea:	d006      	beq.n	8011dfa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x26>
 8011dec:	21a1      	movs	r1, #161	; 0xa1
 8011dee:	4b8c      	ldr	r3, [pc, #560]	; (8012020 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24c>)
 8011df0:	4a8c      	ldr	r2, [pc, #560]	; (8012024 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x250>)
 8011df2:	0049      	lsls	r1, r1, #1
 8011df4:	488c      	ldr	r0, [pc, #560]	; (8012028 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x254>)
 8011df6:	f000 fffd 	bl	8012df4 <__assert_func>
 8011dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d048      	beq.n	8011e92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xbe>
 8011e00:	ac16      	add	r4, sp, #88	; 0x58
 8011e02:	af18      	add	r7, sp, #96	; 0x60
 8011e04:	0029      	movs	r1, r5
 8011e06:	2208      	movs	r2, #8
 8011e08:	0020      	movs	r0, r4
 8011e0a:	f001 f867 	bl	8012edc <memcpy>
 8011e0e:	2208      	movs	r2, #8
 8011e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e12:	0038      	movs	r0, r7
 8011e14:	f001 f862 	bl	8012edc <memcpy>
 8011e18:	0020      	movs	r0, r4
 8011e1a:	f7fc fdab 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e1e:	0029      	movs	r1, r5
 8011e20:	0038      	movs	r0, r7
 8011e22:	f7fc fd8f 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011e26:	2302      	movs	r3, #2
 8011e28:	5efa      	ldrsh	r2, [r7, r3]
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	5ef9      	ldrsh	r1, [r7, r3]
 8011e2e:	2004      	movs	r0, #4
 8011e30:	5e23      	ldrsh	r3, [r4, r0]
 8011e32:	4d7e      	ldr	r5, [pc, #504]	; (801202c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x258>)
 8011e34:	4353      	muls	r3, r2
 8011e36:	185b      	adds	r3, r3, r1
 8011e38:	18f3      	adds	r3, r6, r3
 8011e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e3c:	8823      	ldrh	r3, [r4, #0]
 8011e3e:	6828      	ldr	r0, [r5, #0]
 8011e40:	185b      	adds	r3, r3, r1
 8011e42:	803b      	strh	r3, [r7, #0]
 8011e44:	8863      	ldrh	r3, [r4, #2]
 8011e46:	189b      	adds	r3, r3, r2
 8011e48:	807b      	strh	r3, [r7, #2]
 8011e4a:	2304      	movs	r3, #4
 8011e4c:	5efe      	ldrsh	r6, [r7, r3]
 8011e4e:	2206      	movs	r2, #6
 8011e50:	5ebb      	ldrsh	r3, [r7, r2]
 8011e52:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e54:	6803      	ldr	r3, [r0, #0]
 8011e56:	3388      	adds	r3, #136	; 0x88
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4798      	blx	r3
 8011e5c:	2801      	cmp	r0, #1
 8011e5e:	d11a      	bne.n	8011e96 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc2>
 8011e60:	210b      	movs	r1, #11
 8011e62:	2200      	movs	r2, #0
 8011e64:	883b      	ldrh	r3, [r7, #0]
 8011e66:	9107      	str	r1, [sp, #28]
 8011e68:	4971      	ldr	r1, [pc, #452]	; (8012030 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x25c>)
 8011e6a:	9208      	str	r2, [sp, #32]
 8011e6c:	8809      	ldrh	r1, [r1, #0]
 8011e6e:	9205      	str	r2, [sp, #20]
 8011e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e72:	9106      	str	r1, [sp, #24]
 8011e74:	9204      	str	r2, [sp, #16]
 8011e76:	88a2      	ldrh	r2, [r4, #4]
 8011e78:	b2b6      	uxth	r6, r6
 8011e7a:	9203      	str	r2, [sp, #12]
 8011e7c:	466a      	mov	r2, sp
 8011e7e:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8011e80:	9601      	str	r6, [sp, #4]
 8011e82:	9202      	str	r2, [sp, #8]
 8011e84:	887a      	ldrh	r2, [r7, #2]
 8011e86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e88:	9200      	str	r2, [sp, #0]
 8011e8a:	6828      	ldr	r0, [r5, #0]
 8011e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e8e:	f7fb f8cd 	bl	800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011e92:	b01b      	add	sp, #108	; 0x6c
 8011e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e96:	6828      	ldr	r0, [r5, #0]
 8011e98:	6803      	ldr	r3, [r0, #0]
 8011e9a:	6a1b      	ldr	r3, [r3, #32]
 8011e9c:	4798      	blx	r3
 8011e9e:	4b64      	ldr	r3, [pc, #400]	; (8012030 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x25c>)
 8011ea0:	881a      	ldrh	r2, [r3, #0]
 8011ea2:	2102      	movs	r1, #2
 8011ea4:	5e7b      	ldrsh	r3, [r7, r1]
 8011ea6:	4353      	muls	r3, r2
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	5e7a      	ldrsh	r2, [r7, r1]
 8011eac:	189b      	adds	r3, r3, r2
 8011eae:	005b      	lsls	r3, r3, #1
 8011eb0:	18c3      	adds	r3, r0, r3
 8011eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8011eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eb6:	b232      	sxth	r2, r6
 8011eb8:	3304      	adds	r3, #4
 8011eba:	9311      	str	r3, [sp, #68]	; 0x44
 8011ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ebe:	2bff      	cmp	r3, #255	; 0xff
 8011ec0:	d11c      	bne.n	8011efc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x128>
 8011ec2:	1c33      	adds	r3, r6, #0
 8011ec4:	2a00      	cmp	r2, #0
 8011ec6:	da00      	bge.n	8011eca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf6>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	2100      	movs	r1, #0
 8011ecc:	b21b      	sxth	r3, r3
 8011ece:	aa16      	add	r2, sp, #88	; 0x58
 8011ed0:	005c      	lsls	r4, r3, #1
 8011ed2:	920d      	str	r2, [sp, #52]	; 0x34
 8011ed4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ed6:	4291      	cmp	r1, r2
 8011ed8:	db00      	blt.n	8011edc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x108>
 8011eda:	e09a      	b.n	8012012 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x23e>
 8011edc:	2200      	movs	r2, #0
 8011ede:	42b2      	cmp	r2, r6
 8011ee0:	db00      	blt.n	8011ee4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x110>
 8011ee2:	e084      	b.n	8011fee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x21a>
 8011ee4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011ee6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011ee8:	5cbf      	ldrb	r7, [r7, r2]
 8011eea:	007f      	lsls	r7, r7, #1
 8011eec:	5b7d      	ldrh	r5, [r7, r5]
 8011eee:	0057      	lsls	r7, r2, #1
 8011ef0:	46ac      	mov	ip, r5
 8011ef2:	4660      	mov	r0, ip
 8011ef4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ef6:	3201      	adds	r2, #1
 8011ef8:	53e8      	strh	r0, [r5, r7]
 8011efa:	e7f0      	b.n	8011ede <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8011efc:	23ff      	movs	r3, #255	; 0xff
 8011efe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f00:	1a5b      	subs	r3, r3, r1
 8011f02:	9314      	str	r3, [sp, #80]	; 0x50
 8011f04:	1c33      	adds	r3, r6, #0
 8011f06:	2a00      	cmp	r2, #0
 8011f08:	da00      	bge.n	8011f0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x138>
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	b21b      	sxth	r3, r3
 8011f0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f10:	005b      	lsls	r3, r3, #1
 8011f12:	9315      	str	r3, [sp, #84]	; 0x54
 8011f14:	2300      	movs	r3, #0
 8011f16:	9310      	str	r3, [sp, #64]	; 0x40
 8011f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	da78      	bge.n	8012012 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x23e>
 8011f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f22:	930e      	str	r3, [sp, #56]	; 0x38
 8011f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f26:	469c      	mov	ip, r3
 8011f28:	4663      	mov	r3, ip
 8011f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f2c:	1a9b      	subs	r3, r3, r2
 8011f2e:	429e      	cmp	r6, r3
 8011f30:	dd48      	ble.n	8011fc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f0>
 8011f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f36:	8818      	ldrh	r0, [r3, #0]
 8011f38:	4663      	mov	r3, ip
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2150      	movs	r1, #80	; 0x50
 8011f3e:	005b      	lsls	r3, r3, #1
 8011f40:	5a9b      	ldrh	r3, [r3, r2]
 8011f42:	466a      	mov	r2, sp
 8011f44:	2407      	movs	r4, #7
 8011f46:	8e97      	ldrh	r7, [r2, #52]	; 0x34
 8011f48:	1852      	adds	r2, r2, r1
 8011f4a:	8815      	ldrh	r5, [r2, #0]
 8011f4c:	1219      	asrs	r1, r3, #8
 8011f4e:	1202      	asrs	r2, r0, #8
 8011f50:	43a1      	bics	r1, r4
 8011f52:	43a2      	bics	r2, r4
 8011f54:	436a      	muls	r2, r5
 8011f56:	4379      	muls	r1, r7
 8011f58:	3c04      	subs	r4, #4
 8011f5a:	1889      	adds	r1, r1, r2
 8011f5c:	b28a      	uxth	r2, r1
 8011f5e:	0021      	movs	r1, r4
 8011f60:	9212      	str	r2, [sp, #72]	; 0x48
 8011f62:	10da      	asrs	r2, r3, #3
 8011f64:	43a2      	bics	r2, r4
 8011f66:	10c4      	asrs	r4, r0, #3
 8011f68:	4088      	lsls	r0, r1
 8011f6a:	408b      	lsls	r3, r1
 8011f6c:	438c      	bics	r4, r1
 8011f6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011f70:	b2c0      	uxtb	r0, r0
 8011f72:	b2e4      	uxtb	r4, r4
 8011f74:	436c      	muls	r4, r5
 8011f76:	4345      	muls	r5, r0
 8011f78:	1c48      	adds	r0, r1, #1
 8011f7a:	1209      	asrs	r1, r1, #8
 8011f7c:	1841      	adds	r1, r0, r1
 8011f7e:	20ff      	movs	r0, #255	; 0xff
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	437b      	muls	r3, r7
 8011f84:	b2d2      	uxtb	r2, r2
 8011f86:	437a      	muls	r2, r7
 8011f88:	0200      	lsls	r0, r0, #8
 8011f8a:	4001      	ands	r1, r0
 8011f8c:	195b      	adds	r3, r3, r5
 8011f8e:	201f      	movs	r0, #31
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	1912      	adds	r2, r2, r4
 8011f94:	121c      	asrs	r4, r3, #8
 8011f96:	3301      	adds	r3, #1
 8011f98:	18e3      	adds	r3, r4, r3
 8011f9a:	24fc      	movs	r4, #252	; 0xfc
 8011f9c:	0ac9      	lsrs	r1, r1, #11
 8011f9e:	12db      	asrs	r3, r3, #11
 8011fa0:	b292      	uxth	r2, r2
 8011fa2:	4003      	ands	r3, r0
 8011fa4:	02c9      	lsls	r1, r1, #11
 8011fa6:	4319      	orrs	r1, r3
 8011fa8:	1c53      	adds	r3, r2, #1
 8011faa:	1212      	asrs	r2, r2, #8
 8011fac:	189a      	adds	r2, r3, r2
 8011fae:	0952      	lsrs	r2, r2, #5
 8011fb0:	00e4      	lsls	r4, r4, #3
 8011fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fb4:	4022      	ands	r2, r4
 8011fb6:	4311      	orrs	r1, r2
 8011fb8:	8019      	strh	r1, [r3, #0]
 8011fba:	3302      	adds	r3, #2
 8011fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	449c      	add	ip, r3
 8011fc2:	e7b1      	b.n	8011f28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x154>
 8011fc4:	4b1a      	ldr	r3, [pc, #104]	; (8012030 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x25c>)
 8011fc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	1b9b      	subs	r3, r3, r6
 8011fcc:	005b      	lsls	r3, r3, #1
 8011fce:	189b      	adds	r3, r3, r2
 8011fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fd2:	18d3      	adds	r3, r2, r3
 8011fd4:	930c      	str	r3, [sp, #48]	; 0x30
 8011fd6:	ab16      	add	r3, sp, #88	; 0x58
 8011fd8:	2204      	movs	r2, #4
 8011fda:	5e9b      	ldrsh	r3, [r3, r2]
 8011fdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011fde:	1b9b      	subs	r3, r3, r6
 8011fe0:	189b      	adds	r3, r3, r2
 8011fe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011fe4:	18d3      	adds	r3, r2, r3
 8011fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fea:	3301      	adds	r3, #1
 8011fec:	e793      	b.n	8011f16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x142>
 8011fee:	4a10      	ldr	r2, [pc, #64]	; (8012030 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x25c>)
 8011ff0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011ff2:	8812      	ldrh	r2, [r2, #0]
 8011ff4:	3101      	adds	r1, #1
 8011ff6:	1b92      	subs	r2, r2, r6
 8011ff8:	0052      	lsls	r2, r2, #1
 8011ffa:	1912      	adds	r2, r2, r4
 8011ffc:	1882      	adds	r2, r0, r2
 8011ffe:	920c      	str	r2, [sp, #48]	; 0x30
 8012000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012002:	2004      	movs	r0, #4
 8012004:	5e12      	ldrsh	r2, [r2, r0]
 8012006:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012008:	1b92      	subs	r2, r2, r6
 801200a:	18d2      	adds	r2, r2, r3
 801200c:	1882      	adds	r2, r0, r2
 801200e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012010:	e760      	b.n	8011ed4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x100>
 8012012:	4b06      	ldr	r3, [pc, #24]	; (801202c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x258>)
 8012014:	6818      	ldr	r0, [r3, #0]
 8012016:	6803      	ldr	r3, [r0, #0]
 8012018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801201a:	4798      	blx	r3
 801201c:	e739      	b.n	8011e92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xbe>
 801201e:	46c0      	nop			; (mov r8, r8)
 8012020:	08017130 	.word	0x08017130
 8012024:	08017580 	.word	0x08017580
 8012028:	08017374 	.word	0x08017374
 801202c:	200034cc 	.word	0x200034cc
 8012030:	200034c6 	.word	0x200034c6

08012034 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8012034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012036:	b099      	sub	sp, #100	; 0x64
 8012038:	930a      	str	r3, [sp, #40]	; 0x28
 801203a:	ab1e      	add	r3, sp, #120	; 0x78
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	0006      	movs	r6, r0
 8012040:	930b      	str	r3, [sp, #44]	; 0x2c
 8012042:	880b      	ldrh	r3, [r1, #0]
 8012044:	910e      	str	r1, [sp, #56]	; 0x38
 8012046:	0015      	movs	r5, r2
 8012048:	2b01      	cmp	r3, #1
 801204a:	d006      	beq.n	801205a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801204c:	219e      	movs	r1, #158	; 0x9e
 801204e:	4b74      	ldr	r3, [pc, #464]	; (8012220 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 8012050:	4a74      	ldr	r2, [pc, #464]	; (8012224 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f0>)
 8012052:	31ff      	adds	r1, #255	; 0xff
 8012054:	4874      	ldr	r0, [pc, #464]	; (8012228 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8012056:	f000 fecd 	bl	8012df4 <__assert_func>
 801205a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801205c:	2b00      	cmp	r3, #0
 801205e:	d04a      	beq.n	80120f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8012060:	ac14      	add	r4, sp, #80	; 0x50
 8012062:	af16      	add	r7, sp, #88	; 0x58
 8012064:	0029      	movs	r1, r5
 8012066:	2208      	movs	r2, #8
 8012068:	0020      	movs	r0, r4
 801206a:	f000 ff37 	bl	8012edc <memcpy>
 801206e:	2208      	movs	r2, #8
 8012070:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012072:	0038      	movs	r0, r7
 8012074:	f000 ff32 	bl	8012edc <memcpy>
 8012078:	0020      	movs	r0, r4
 801207a:	f7fc fc7b 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801207e:	0029      	movs	r1, r5
 8012080:	0038      	movs	r0, r7
 8012082:	f7fc fc5f 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012086:	2302      	movs	r3, #2
 8012088:	5efa      	ldrsh	r2, [r7, r3]
 801208a:	2300      	movs	r3, #0
 801208c:	5ef9      	ldrsh	r1, [r7, r3]
 801208e:	2004      	movs	r0, #4
 8012090:	5e23      	ldrsh	r3, [r4, r0]
 8012092:	4353      	muls	r3, r2
 8012094:	185b      	adds	r3, r3, r1
 8012096:	18f3      	adds	r3, r6, r3
 8012098:	930a      	str	r3, [sp, #40]	; 0x28
 801209a:	8823      	ldrh	r3, [r4, #0]
 801209c:	4e63      	ldr	r6, [pc, #396]	; (801222c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801209e:	185b      	adds	r3, r3, r1
 80120a0:	803b      	strh	r3, [r7, #0]
 80120a2:	8863      	ldrh	r3, [r4, #2]
 80120a4:	6830      	ldr	r0, [r6, #0]
 80120a6:	189b      	adds	r3, r3, r2
 80120a8:	807b      	strh	r3, [r7, #2]
 80120aa:	2304      	movs	r3, #4
 80120ac:	5efd      	ldrsh	r5, [r7, r3]
 80120ae:	2206      	movs	r2, #6
 80120b0:	5ebb      	ldrsh	r3, [r7, r2]
 80120b2:	9310      	str	r3, [sp, #64]	; 0x40
 80120b4:	6803      	ldr	r3, [r0, #0]
 80120b6:	3388      	adds	r3, #136	; 0x88
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4798      	blx	r3
 80120bc:	2801      	cmp	r0, #1
 80120be:	d11c      	bne.n	80120fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 80120c0:	2200      	movs	r2, #0
 80120c2:	883b      	ldrh	r3, [r7, #0]
 80120c4:	9208      	str	r2, [sp, #32]
 80120c6:	320b      	adds	r2, #11
 80120c8:	9207      	str	r2, [sp, #28]
 80120ca:	4a59      	ldr	r2, [pc, #356]	; (8012230 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 80120cc:	2140      	movs	r1, #64	; 0x40
 80120ce:	8812      	ldrh	r2, [r2, #0]
 80120d0:	9005      	str	r0, [sp, #20]
 80120d2:	9206      	str	r2, [sp, #24]
 80120d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120d6:	b2ad      	uxth	r5, r5
 80120d8:	9204      	str	r2, [sp, #16]
 80120da:	88a2      	ldrh	r2, [r4, #4]
 80120dc:	9203      	str	r2, [sp, #12]
 80120de:	466a      	mov	r2, sp
 80120e0:	1852      	adds	r2, r2, r1
 80120e2:	8812      	ldrh	r2, [r2, #0]
 80120e4:	9501      	str	r5, [sp, #4]
 80120e6:	9202      	str	r2, [sp, #8]
 80120e8:	887a      	ldrh	r2, [r7, #2]
 80120ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80120ec:	9200      	str	r2, [sp, #0]
 80120ee:	6830      	ldr	r0, [r6, #0]
 80120f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120f2:	f7fa ff9b 	bl	800d02c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80120f6:	b019      	add	sp, #100	; 0x64
 80120f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120fa:	6830      	ldr	r0, [r6, #0]
 80120fc:	6803      	ldr	r3, [r0, #0]
 80120fe:	6a1b      	ldr	r3, [r3, #32]
 8012100:	4798      	blx	r3
 8012102:	4b4b      	ldr	r3, [pc, #300]	; (8012230 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 8012104:	881a      	ldrh	r2, [r3, #0]
 8012106:	2102      	movs	r1, #2
 8012108:	5e7b      	ldrsh	r3, [r7, r1]
 801210a:	4353      	muls	r3, r2
 801210c:	2100      	movs	r1, #0
 801210e:	5e7a      	ldrsh	r2, [r7, r1]
 8012110:	189b      	adds	r3, r3, r2
 8012112:	005b      	lsls	r3, r3, #1
 8012114:	18c3      	adds	r3, r0, r3
 8012116:	930c      	str	r3, [sp, #48]	; 0x30
 8012118:	1c2b      	adds	r3, r5, #0
 801211a:	2d00      	cmp	r5, #0
 801211c:	da00      	bge.n	8012120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xec>
 801211e:	2300      	movs	r3, #0
 8012120:	b21b      	sxth	r3, r3
 8012122:	9311      	str	r3, [sp, #68]	; 0x44
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	9313      	str	r3, [sp, #76]	; 0x4c
 8012128:	2300      	movs	r3, #0
 801212a:	930d      	str	r3, [sp, #52]	; 0x34
 801212c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801212e:	43db      	mvns	r3, r3
 8012130:	b2db      	uxtb	r3, r3
 8012132:	930f      	str	r3, [sp, #60]	; 0x3c
 8012134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012136:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012138:	4293      	cmp	r3, r2
 801213a:	da6b      	bge.n	8012214 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e0>
 801213c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801213e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012140:	469c      	mov	ip, r3
 8012142:	4663      	mov	r3, ip
 8012144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012146:	1a9b      	subs	r3, r3, r2
 8012148:	429d      	cmp	r5, r3
 801214a:	dd4d      	ble.n	80121e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801214c:	4663      	mov	r3, ip
 801214e:	2203      	movs	r2, #3
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	4353      	muls	r3, r2
 8012154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012156:	3304      	adds	r3, #4
 8012158:	18d3      	adds	r3, r2, r3
 801215a:	785a      	ldrb	r2, [r3, #1]
 801215c:	7898      	ldrb	r0, [r3, #2]
 801215e:	781c      	ldrb	r4, [r3, #0]
 8012160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012162:	9212      	str	r2, [sp, #72]	; 0x48
 8012164:	2bff      	cmp	r3, #255	; 0xff
 8012166:	d10d      	bne.n	8012184 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x150>
 8012168:	23fc      	movs	r3, #252	; 0xfc
 801216a:	08c0      	lsrs	r0, r0, #3
 801216c:	00d1      	lsls	r1, r2, #3
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	02c0      	lsls	r0, r0, #11
 8012172:	4019      	ands	r1, r3
 8012174:	4301      	orrs	r1, r0
 8012176:	10e4      	asrs	r4, r4, #3
 8012178:	4321      	orrs	r1, r4
 801217a:	8031      	strh	r1, [r6, #0]
 801217c:	2301      	movs	r3, #1
 801217e:	3602      	adds	r6, #2
 8012180:	449c      	add	ip, r3
 8012182:	e7de      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10e>
 8012184:	466b      	mov	r3, sp
 8012186:	2107      	movs	r1, #7
 8012188:	8832      	ldrh	r2, [r6, #0]
 801218a:	8d9f      	ldrh	r7, [r3, #44]	; 0x2c
 801218c:	1213      	asrs	r3, r2, #8
 801218e:	438b      	bics	r3, r1
 8012190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012192:	4378      	muls	r0, r7
 8012194:	434b      	muls	r3, r1
 8012196:	2103      	movs	r1, #3
 8012198:	181b      	adds	r3, r3, r0
 801219a:	10d0      	asrs	r0, r2, #3
 801219c:	4388      	bics	r0, r1
 801219e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80121a0:	b2c0      	uxtb	r0, r0
 80121a2:	4348      	muls	r0, r1
 80121a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80121a6:	00d2      	lsls	r2, r2, #3
 80121a8:	4379      	muls	r1, r7
 80121aa:	1841      	adds	r1, r0, r1
 80121ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80121ae:	b2d2      	uxtb	r2, r2
 80121b0:	4342      	muls	r2, r0
 80121b2:	20f8      	movs	r0, #248	; 0xf8
 80121b4:	4367      	muls	r7, r4
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	1c5c      	adds	r4, r3, #1
 80121ba:	19d2      	adds	r2, r2, r7
 80121bc:	121b      	asrs	r3, r3, #8
 80121be:	b292      	uxth	r2, r2
 80121c0:	0200      	lsls	r0, r0, #8
 80121c2:	18e3      	adds	r3, r4, r3
 80121c4:	4003      	ands	r3, r0
 80121c6:	1210      	asrs	r0, r2, #8
 80121c8:	3201      	adds	r2, #1
 80121ca:	1882      	adds	r2, r0, r2
 80121cc:	0412      	lsls	r2, r2, #16
 80121ce:	b289      	uxth	r1, r1
 80121d0:	0ed2      	lsrs	r2, r2, #27
 80121d2:	4313      	orrs	r3, r2
 80121d4:	1c4a      	adds	r2, r1, #1
 80121d6:	1209      	asrs	r1, r1, #8
 80121d8:	1851      	adds	r1, r2, r1
 80121da:	22fc      	movs	r2, #252	; 0xfc
 80121dc:	0949      	lsrs	r1, r1, #5
 80121de:	00d2      	lsls	r2, r2, #3
 80121e0:	4011      	ands	r1, r2
 80121e2:	430b      	orrs	r3, r1
 80121e4:	8033      	strh	r3, [r6, #0]
 80121e6:	e7c9      	b.n	801217c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x148>
 80121e8:	4b11      	ldr	r3, [pc, #68]	; (8012230 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 80121ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121ec:	881b      	ldrh	r3, [r3, #0]
 80121ee:	1b5b      	subs	r3, r3, r5
 80121f0:	005b      	lsls	r3, r3, #1
 80121f2:	189b      	adds	r3, r3, r2
 80121f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121f6:	18d3      	adds	r3, r2, r3
 80121f8:	930c      	str	r3, [sp, #48]	; 0x30
 80121fa:	ab14      	add	r3, sp, #80	; 0x50
 80121fc:	2204      	movs	r2, #4
 80121fe:	5e9b      	ldrsh	r3, [r3, r2]
 8012200:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012202:	1b5b      	subs	r3, r3, r5
 8012204:	189b      	adds	r3, r3, r2
 8012206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012208:	18d3      	adds	r3, r2, r3
 801220a:	930a      	str	r3, [sp, #40]	; 0x28
 801220c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801220e:	3301      	adds	r3, #1
 8012210:	930d      	str	r3, [sp, #52]	; 0x34
 8012212:	e78f      	b.n	8012134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8012214:	4b05      	ldr	r3, [pc, #20]	; (801222c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8012216:	6818      	ldr	r0, [r3, #0]
 8012218:	6803      	ldr	r3, [r0, #0]
 801221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801221c:	4798      	blx	r3
 801221e:	e76a      	b.n	80120f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8012220:	0801717e 	.word	0x0801717e
 8012224:	08017609 	.word	0x08017609
 8012228:	08017374 	.word	0x08017374
 801222c:	200034cc 	.word	0x200034cc
 8012230:	200034c6 	.word	0x200034c6

08012234 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8012234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012236:	780d      	ldrb	r5, [r1, #0]
 8012238:	ac06      	add	r4, sp, #24
 801223a:	7824      	ldrb	r4, [r4, #0]
 801223c:	2d01      	cmp	r5, #1
 801223e:	d00b      	beq.n	8012258 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x24>
 8012240:	2d00      	cmp	r5, #0
 8012242:	d005      	beq.n	8012250 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8012244:	2d02      	cmp	r5, #2
 8012246:	d102      	bne.n	801224e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8012248:	9400      	str	r4, [sp, #0]
 801224a:	f7ff fdc3 	bl	8011dd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801224e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8012250:	9400      	str	r4, [sp, #0]
 8012252:	f7ff fcb3 	bl	8011bbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8012256:	e7fa      	b.n	801224e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8012258:	9400      	str	r4, [sp, #0]
 801225a:	f7ff feeb 	bl	8012034 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801225e:	e7f6      	b.n	801224e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>

08012260 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8012260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012262:	0015      	movs	r5, r2
 8012264:	001f      	movs	r7, r3
 8012266:	0006      	movs	r6, r0
 8012268:	b08f      	sub	sp, #60	; 0x3c
 801226a:	ab14      	add	r3, sp, #80	; 0x50
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	ac0c      	add	r4, sp, #48	; 0x30
 8012270:	9102      	str	r1, [sp, #8]
 8012272:	2208      	movs	r2, #8
 8012274:	0029      	movs	r1, r5
 8012276:	a80a      	add	r0, sp, #40	; 0x28
 8012278:	9309      	str	r3, [sp, #36]	; 0x24
 801227a:	f000 fe2f 	bl	8012edc <memcpy>
 801227e:	2208      	movs	r2, #8
 8012280:	0039      	movs	r1, r7
 8012282:	0020      	movs	r0, r4
 8012284:	f000 fe2a 	bl	8012edc <memcpy>
 8012288:	a80a      	add	r0, sp, #40	; 0x28
 801228a:	f7fc fb73 	bl	800e974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801228e:	0020      	movs	r0, r4
 8012290:	0029      	movs	r1, r5
 8012292:	f7fc fb57 	bl	800e944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012296:	2302      	movs	r3, #2
 8012298:	5ee2      	ldrsh	r2, [r4, r3]
 801229a:	2300      	movs	r3, #0
 801229c:	5ee1      	ldrsh	r1, [r4, r3]
 801229e:	ab0a      	add	r3, sp, #40	; 0x28
 80122a0:	2004      	movs	r0, #4
 80122a2:	5e1b      	ldrsh	r3, [r3, r0]
 80122a4:	4353      	muls	r3, r2
 80122a6:	185b      	adds	r3, r3, r1
 80122a8:	0058      	lsls	r0, r3, #1
 80122aa:	1830      	adds	r0, r6, r0
 80122ac:	9001      	str	r0, [sp, #4]
 80122ae:	9802      	ldr	r0, [sp, #8]
 80122b0:	18c3      	adds	r3, r0, r3
 80122b2:	9302      	str	r3, [sp, #8]
 80122b4:	ab0a      	add	r3, sp, #40	; 0x28
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	185b      	adds	r3, r3, r1
 80122ba:	8023      	strh	r3, [r4, #0]
 80122bc:	ab0a      	add	r3, sp, #40	; 0x28
 80122be:	885b      	ldrh	r3, [r3, #2]
 80122c0:	189b      	adds	r3, r3, r2
 80122c2:	8063      	strh	r3, [r4, #2]
 80122c4:	2304      	movs	r3, #4
 80122c6:	5ee7      	ldrsh	r7, [r4, r3]
 80122c8:	2206      	movs	r2, #6
 80122ca:	5ea3      	ldrsh	r3, [r4, r2]
 80122cc:	9305      	str	r3, [sp, #20]
 80122ce:	4b8b      	ldr	r3, [pc, #556]	; (80124fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x29c>)
 80122d0:	6818      	ldr	r0, [r3, #0]
 80122d2:	6803      	ldr	r3, [r0, #0]
 80122d4:	6a1b      	ldr	r3, [r3, #32]
 80122d6:	4798      	blx	r3
 80122d8:	4b89      	ldr	r3, [pc, #548]	; (8012500 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x2a0>)
 80122da:	881a      	ldrh	r2, [r3, #0]
 80122dc:	2102      	movs	r1, #2
 80122de:	5e63      	ldrsh	r3, [r4, r1]
 80122e0:	4353      	muls	r3, r2
 80122e2:	2100      	movs	r1, #0
 80122e4:	5e62      	ldrsh	r2, [r4, r1]
 80122e6:	189b      	adds	r3, r3, r2
 80122e8:	005b      	lsls	r3, r3, #1
 80122ea:	18c3      	adds	r3, r0, r3
 80122ec:	469c      	mov	ip, r3
 80122ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f0:	b23a      	sxth	r2, r7
 80122f2:	2bff      	cmp	r3, #255	; 0xff
 80122f4:	d123      	bne.n	801233e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xde>
 80122f6:	1c3b      	adds	r3, r7, #0
 80122f8:	2a00      	cmp	r2, #0
 80122fa:	da00      	bge.n	80122fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x9e>
 80122fc:	2300      	movs	r3, #0
 80122fe:	b21b      	sxth	r3, r3
 8012300:	9308      	str	r3, [sp, #32]
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	9307      	str	r3, [sp, #28]
 8012306:	2300      	movs	r3, #0
 8012308:	9304      	str	r3, [sp, #16]
 801230a:	9b04      	ldr	r3, [sp, #16]
 801230c:	9a05      	ldr	r2, [sp, #20]
 801230e:	4293      	cmp	r3, r2
 8012310:	db00      	blt.n	8012314 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb4>
 8012312:	e0eb      	b.n	80124ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x28c>
 8012314:	2600      	movs	r6, #0
 8012316:	42be      	cmp	r6, r7
 8012318:	db00      	blt.n	801231c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 801231a:	e0ce      	b.n	80124ba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x25a>
 801231c:	9b02      	ldr	r3, [sp, #8]
 801231e:	5d98      	ldrb	r0, [r3, r6]
 8012320:	2800      	cmp	r0, #0
 8012322:	d00a      	beq.n	801233a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xda>
 8012324:	0073      	lsls	r3, r6, #1
 8012326:	9303      	str	r3, [sp, #12]
 8012328:	9b01      	ldr	r3, [sp, #4]
 801232a:	0072      	lsls	r2, r6, #1
 801232c:	5a9b      	ldrh	r3, [r3, r2]
 801232e:	0071      	lsls	r1, r6, #1
 8012330:	4662      	mov	r2, ip
 8012332:	28ff      	cmp	r0, #255	; 0xff
 8012334:	d000      	beq.n	8012338 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd8>
 8012336:	e07f      	b.n	8012438 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1d8>
 8012338:	5253      	strh	r3, [r2, r1]
 801233a:	3601      	adds	r6, #1
 801233c:	e7eb      	b.n	8012316 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb6>
 801233e:	1c3b      	adds	r3, r7, #0
 8012340:	2a00      	cmp	r2, #0
 8012342:	da00      	bge.n	8012346 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xe6>
 8012344:	2300      	movs	r3, #0
 8012346:	b21b      	sxth	r3, r3
 8012348:	9308      	str	r3, [sp, #32]
 801234a:	005b      	lsls	r3, r3, #1
 801234c:	9307      	str	r3, [sp, #28]
 801234e:	2300      	movs	r3, #0
 8012350:	9304      	str	r3, [sp, #16]
 8012352:	9b04      	ldr	r3, [sp, #16]
 8012354:	9a05      	ldr	r2, [sp, #20]
 8012356:	4293      	cmp	r3, r2
 8012358:	db00      	blt.n	801235c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xfc>
 801235a:	e0c7      	b.n	80124ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x28c>
 801235c:	2600      	movs	r6, #0
 801235e:	42be      	cmp	r6, r7
 8012360:	da51      	bge.n	8012406 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a6>
 8012362:	9b02      	ldr	r3, [sp, #8]
 8012364:	5d9b      	ldrb	r3, [r3, r6]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d04b      	beq.n	8012402 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 801236a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801236c:	4353      	muls	r3, r2
 801236e:	1219      	asrs	r1, r3, #8
 8012370:	3301      	adds	r3, #1
 8012372:	18c9      	adds	r1, r1, r3
 8012374:	1209      	asrs	r1, r1, #8
 8012376:	d044      	beq.n	8012402 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 8012378:	4663      	mov	r3, ip
 801237a:	0072      	lsls	r2, r6, #1
 801237c:	5a9c      	ldrh	r4, [r3, r2]
 801237e:	2507      	movs	r5, #7
 8012380:	9b01      	ldr	r3, [sp, #4]
 8012382:	5a9b      	ldrh	r3, [r3, r2]
 8012384:	b28a      	uxth	r2, r1
 8012386:	43c9      	mvns	r1, r1
 8012388:	1218      	asrs	r0, r3, #8
 801238a:	43a8      	bics	r0, r5
 801238c:	9203      	str	r2, [sp, #12]
 801238e:	4350      	muls	r0, r2
 8012390:	1222      	asrs	r2, r4, #8
 8012392:	b2c9      	uxtb	r1, r1
 8012394:	43aa      	bics	r2, r5
 8012396:	434a      	muls	r2, r1
 8012398:	1880      	adds	r0, r0, r2
 801239a:	b282      	uxth	r2, r0
 801239c:	9206      	str	r2, [sp, #24]
 801239e:	3d04      	subs	r5, #4
 80123a0:	10da      	asrs	r2, r3, #3
 80123a2:	43aa      	bics	r2, r5
 80123a4:	9803      	ldr	r0, [sp, #12]
 80123a6:	b2d2      	uxtb	r2, r2
 80123a8:	4342      	muls	r2, r0
 80123aa:	2003      	movs	r0, #3
 80123ac:	4083      	lsls	r3, r0
 80123ae:	10e5      	asrs	r5, r4, #3
 80123b0:	4385      	bics	r5, r0
 80123b2:	00e4      	lsls	r4, r4, #3
 80123b4:	9803      	ldr	r0, [sp, #12]
 80123b6:	b2ed      	uxtb	r5, r5
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	b2e4      	uxtb	r4, r4
 80123bc:	434d      	muls	r5, r1
 80123be:	4343      	muls	r3, r0
 80123c0:	434c      	muls	r4, r1
 80123c2:	9806      	ldr	r0, [sp, #24]
 80123c4:	9906      	ldr	r1, [sp, #24]
 80123c6:	1200      	asrs	r0, r0, #8
 80123c8:	3101      	adds	r1, #1
 80123ca:	1808      	adds	r0, r1, r0
 80123cc:	21ff      	movs	r1, #255	; 0xff
 80123ce:	0209      	lsls	r1, r1, #8
 80123d0:	4008      	ands	r0, r1
 80123d2:	211f      	movs	r1, #31
 80123d4:	191b      	adds	r3, r3, r4
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	1952      	adds	r2, r2, r5
 80123da:	121d      	asrs	r5, r3, #8
 80123dc:	3301      	adds	r3, #1
 80123de:	18eb      	adds	r3, r5, r3
 80123e0:	0ac0      	lsrs	r0, r0, #11
 80123e2:	12db      	asrs	r3, r3, #11
 80123e4:	25fc      	movs	r5, #252	; 0xfc
 80123e6:	b292      	uxth	r2, r2
 80123e8:	400b      	ands	r3, r1
 80123ea:	02c0      	lsls	r0, r0, #11
 80123ec:	4318      	orrs	r0, r3
 80123ee:	1c53      	adds	r3, r2, #1
 80123f0:	1212      	asrs	r2, r2, #8
 80123f2:	189a      	adds	r2, r3, r2
 80123f4:	4663      	mov	r3, ip
 80123f6:	0952      	lsrs	r2, r2, #5
 80123f8:	00ed      	lsls	r5, r5, #3
 80123fa:	402a      	ands	r2, r5
 80123fc:	4310      	orrs	r0, r2
 80123fe:	0072      	lsls	r2, r6, #1
 8012400:	5298      	strh	r0, [r3, r2]
 8012402:	3601      	adds	r6, #1
 8012404:	e7ab      	b.n	801235e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xfe>
 8012406:	4b3e      	ldr	r3, [pc, #248]	; (8012500 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x2a0>)
 8012408:	9a07      	ldr	r2, [sp, #28]
 801240a:	881b      	ldrh	r3, [r3, #0]
 801240c:	9907      	ldr	r1, [sp, #28]
 801240e:	1bdb      	subs	r3, r3, r7
 8012410:	005b      	lsls	r3, r3, #1
 8012412:	189b      	adds	r3, r3, r2
 8012414:	449c      	add	ip, r3
 8012416:	ab0a      	add	r3, sp, #40	; 0x28
 8012418:	2204      	movs	r2, #4
 801241a:	5e9b      	ldrsh	r3, [r3, r2]
 801241c:	1bdb      	subs	r3, r3, r7
 801241e:	005a      	lsls	r2, r3, #1
 8012420:	1852      	adds	r2, r2, r1
 8012422:	9901      	ldr	r1, [sp, #4]
 8012424:	188a      	adds	r2, r1, r2
 8012426:	9201      	str	r2, [sp, #4]
 8012428:	9a08      	ldr	r2, [sp, #32]
 801242a:	189b      	adds	r3, r3, r2
 801242c:	9a02      	ldr	r2, [sp, #8]
 801242e:	18d3      	adds	r3, r2, r3
 8012430:	9302      	str	r3, [sp, #8]
 8012432:	9b04      	ldr	r3, [sp, #16]
 8012434:	3301      	adds	r3, #1
 8012436:	e78b      	b.n	8012350 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xf0>
 8012438:	2507      	movs	r5, #7
 801243a:	5a54      	ldrh	r4, [r2, r1]
 801243c:	b282      	uxth	r2, r0
 801243e:	43c0      	mvns	r0, r0
 8012440:	1219      	asrs	r1, r3, #8
 8012442:	43a9      	bics	r1, r5
 8012444:	9203      	str	r2, [sp, #12]
 8012446:	4351      	muls	r1, r2
 8012448:	1222      	asrs	r2, r4, #8
 801244a:	b2c0      	uxtb	r0, r0
 801244c:	43aa      	bics	r2, r5
 801244e:	4342      	muls	r2, r0
 8012450:	1889      	adds	r1, r1, r2
 8012452:	b28a      	uxth	r2, r1
 8012454:	9206      	str	r2, [sp, #24]
 8012456:	3d04      	subs	r5, #4
 8012458:	10da      	asrs	r2, r3, #3
 801245a:	43aa      	bics	r2, r5
 801245c:	9903      	ldr	r1, [sp, #12]
 801245e:	b2d2      	uxtb	r2, r2
 8012460:	434a      	muls	r2, r1
 8012462:	2103      	movs	r1, #3
 8012464:	408b      	lsls	r3, r1
 8012466:	10e5      	asrs	r5, r4, #3
 8012468:	438d      	bics	r5, r1
 801246a:	9903      	ldr	r1, [sp, #12]
 801246c:	b2db      	uxtb	r3, r3
 801246e:	434b      	muls	r3, r1
 8012470:	00e4      	lsls	r4, r4, #3
 8012472:	9906      	ldr	r1, [sp, #24]
 8012474:	b2ed      	uxtb	r5, r5
 8012476:	b2e4      	uxtb	r4, r4
 8012478:	4345      	muls	r5, r0
 801247a:	4344      	muls	r4, r0
 801247c:	1c48      	adds	r0, r1, #1
 801247e:	1209      	asrs	r1, r1, #8
 8012480:	1841      	adds	r1, r0, r1
 8012482:	20ff      	movs	r0, #255	; 0xff
 8012484:	0200      	lsls	r0, r0, #8
 8012486:	4001      	ands	r1, r0
 8012488:	201f      	movs	r0, #31
 801248a:	191b      	adds	r3, r3, r4
 801248c:	b29b      	uxth	r3, r3
 801248e:	1952      	adds	r2, r2, r5
 8012490:	1c5d      	adds	r5, r3, #1
 8012492:	121b      	asrs	r3, r3, #8
 8012494:	18eb      	adds	r3, r5, r3
 8012496:	0ac9      	lsrs	r1, r1, #11
 8012498:	12db      	asrs	r3, r3, #11
 801249a:	25fc      	movs	r5, #252	; 0xfc
 801249c:	b292      	uxth	r2, r2
 801249e:	4003      	ands	r3, r0
 80124a0:	02c9      	lsls	r1, r1, #11
 80124a2:	4319      	orrs	r1, r3
 80124a4:	1c53      	adds	r3, r2, #1
 80124a6:	1212      	asrs	r2, r2, #8
 80124a8:	189a      	adds	r2, r3, r2
 80124aa:	4663      	mov	r3, ip
 80124ac:	0952      	lsrs	r2, r2, #5
 80124ae:	00ed      	lsls	r5, r5, #3
 80124b0:	402a      	ands	r2, r5
 80124b2:	4311      	orrs	r1, r2
 80124b4:	0072      	lsls	r2, r6, #1
 80124b6:	5299      	strh	r1, [r3, r2]
 80124b8:	e73f      	b.n	801233a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xda>
 80124ba:	4b11      	ldr	r3, [pc, #68]	; (8012500 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x2a0>)
 80124bc:	9a07      	ldr	r2, [sp, #28]
 80124be:	881b      	ldrh	r3, [r3, #0]
 80124c0:	9907      	ldr	r1, [sp, #28]
 80124c2:	1bdb      	subs	r3, r3, r7
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	189b      	adds	r3, r3, r2
 80124c8:	449c      	add	ip, r3
 80124ca:	ab0a      	add	r3, sp, #40	; 0x28
 80124cc:	2204      	movs	r2, #4
 80124ce:	5e9b      	ldrsh	r3, [r3, r2]
 80124d0:	1bdb      	subs	r3, r3, r7
 80124d2:	005a      	lsls	r2, r3, #1
 80124d4:	1852      	adds	r2, r2, r1
 80124d6:	9901      	ldr	r1, [sp, #4]
 80124d8:	188a      	adds	r2, r1, r2
 80124da:	9201      	str	r2, [sp, #4]
 80124dc:	9a08      	ldr	r2, [sp, #32]
 80124de:	189b      	adds	r3, r3, r2
 80124e0:	9a02      	ldr	r2, [sp, #8]
 80124e2:	18d3      	adds	r3, r2, r3
 80124e4:	9302      	str	r3, [sp, #8]
 80124e6:	9b04      	ldr	r3, [sp, #16]
 80124e8:	3301      	adds	r3, #1
 80124ea:	e70d      	b.n	8012308 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa8>
 80124ec:	4b03      	ldr	r3, [pc, #12]	; (80124fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x29c>)
 80124ee:	6818      	ldr	r0, [r3, #0]
 80124f0:	6803      	ldr	r3, [r0, #0]
 80124f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f4:	4798      	blx	r3
 80124f6:	b00f      	add	sp, #60	; 0x3c
 80124f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124fa:	46c0      	nop			; (mov r8, r8)
 80124fc:	200034cc 	.word	0x200034cc
 8012500:	200034c6 	.word	0x200034c6

08012504 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012506:	b08d      	sub	sp, #52	; 0x34
 8012508:	9304      	str	r3, [sp, #16]
 801250a:	ab12      	add	r3, sp, #72	; 0x48
 801250c:	cb80      	ldmia	r3!, {r7}
 801250e:	9005      	str	r0, [sp, #20]
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	000c      	movs	r4, r1
 8012514:	9203      	str	r2, [sp, #12]
 8012516:	9302      	str	r3, [sp, #8]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d035      	beq.n	8012588 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801251c:	0008      	movs	r0, r1
 801251e:	f7fe fc21 	bl	8010d64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012522:	0006      	movs	r6, r0
 8012524:	0020      	movs	r0, r4
 8012526:	f7fe fc59 	bl	8010ddc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801252a:	9b03      	ldr	r3, [sp, #12]
 801252c:	ad06      	add	r5, sp, #24
 801252e:	802b      	strh	r3, [r5, #0]
 8012530:	9b04      	ldr	r3, [sp, #16]
 8012532:	80e8      	strh	r0, [r5, #6]
 8012534:	0020      	movs	r0, r4
 8012536:	806b      	strh	r3, [r5, #2]
 8012538:	80ae      	strh	r6, [r5, #4]
 801253a:	f7fe fdab 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801253e:	2800      	cmp	r0, #0
 8012540:	d00f      	beq.n	8012562 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5e>
 8012542:	0020      	movs	r0, r4
 8012544:	f7fe fda6 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012548:	2802      	cmp	r0, #2
 801254a:	d00a      	beq.n	8012562 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5e>
 801254c:	0020      	movs	r0, r4
 801254e:	f7fe fda1 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012552:	280b      	cmp	r0, #11
 8012554:	d005      	beq.n	8012562 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5e>
 8012556:	4b66      	ldr	r3, [pc, #408]	; (80126f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>)
 8012558:	4a66      	ldr	r2, [pc, #408]	; (80126f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f0>)
 801255a:	214b      	movs	r1, #75	; 0x4b
 801255c:	4866      	ldr	r0, [pc, #408]	; (80126f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f4>)
 801255e:	f000 fc49 	bl	8012df4 <__assert_func>
 8012562:	0020      	movs	r0, r4
 8012564:	f7fe fd0c 	bl	8010f80 <_ZNK8touchgfx6Bitmap7getDataEv>
 8012568:	0006      	movs	r6, r0
 801256a:	0020      	movs	r0, r4
 801256c:	f7fe fd3c 	bl	8010fe8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8012570:	9003      	str	r0, [sp, #12]
 8012572:	0020      	movs	r0, r4
 8012574:	f7fe fd8e 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012578:	2802      	cmp	r0, #2
 801257a:	d107      	bne.n	801258c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801257c:	9b02      	ldr	r3, [sp, #8]
 801257e:	003a      	movs	r2, r7
 8012580:	0029      	movs	r1, r5
 8012582:	0030      	movs	r0, r6
 8012584:	f7ff f9f8 	bl	8011978 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012588:	b00d      	add	sp, #52	; 0x34
 801258a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801258c:	0020      	movs	r0, r4
 801258e:	f7fe fd81 	bl	8011094 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012592:	280b      	cmp	r0, #11
 8012594:	d108      	bne.n	80125a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa4>
 8012596:	9b02      	ldr	r3, [sp, #8]
 8012598:	002a      	movs	r2, r5
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	9903      	ldr	r1, [sp, #12]
 801259e:	003b      	movs	r3, r7
 80125a0:	0030      	movs	r0, r6
 80125a2:	f7ff fe47 	bl	8012234 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80125a6:	e7ef      	b.n	8012588 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 80125a8:	0020      	movs	r0, r4
 80125aa:	f7fe fcaf 	bl	8010f0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80125ae:	2800      	cmp	r0, #0
 80125b0:	d10b      	bne.n	80125ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc6>
 80125b2:	9b05      	ldr	r3, [sp, #20]
 80125b4:	9a02      	ldr	r2, [sp, #8]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	9001      	str	r0, [sp, #4]
 80125ba:	9200      	str	r2, [sp, #0]
 80125bc:	68dc      	ldr	r4, [r3, #12]
 80125be:	002a      	movs	r2, r5
 80125c0:	003b      	movs	r3, r7
 80125c2:	0031      	movs	r1, r6
 80125c4:	9805      	ldr	r0, [sp, #20]
 80125c6:	47a0      	blx	r4
 80125c8:	e7de      	b.n	8012588 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 80125ca:	ad0a      	add	r5, sp, #40	; 0x28
 80125cc:	0021      	movs	r1, r4
 80125ce:	0028      	movs	r0, r5
 80125d0:	f7fe fc40 	bl	8010e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80125d4:	ab08      	add	r3, sp, #32
 80125d6:	2208      	movs	r2, #8
 80125d8:	0029      	movs	r1, r5
 80125da:	0018      	movs	r0, r3
 80125dc:	9304      	str	r3, [sp, #16]
 80125de:	f000 fc7d 	bl	8012edc <memcpy>
 80125e2:	9804      	ldr	r0, [sp, #16]
 80125e4:	0039      	movs	r1, r7
 80125e6:	f7fa f80b 	bl	800c600 <_ZN8touchgfx4RectaNERKS0_>
 80125ea:	9804      	ldr	r0, [sp, #16]
 80125ec:	f7fa f858 	bl	800c6a0 <_ZNK8touchgfx4Rect7isEmptyEv>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d008      	beq.n	8012606 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x102>
 80125f4:	9b02      	ldr	r3, [sp, #8]
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	003b      	movs	r3, r7
 80125fa:	aa06      	add	r2, sp, #24
 80125fc:	9903      	ldr	r1, [sp, #12]
 80125fe:	0030      	movs	r0, r6
 8012600:	f7ff fe2e 	bl	8012260 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012604:	e7c0      	b.n	8012588 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 8012606:	9b05      	ldr	r3, [sp, #20]
 8012608:	9a02      	ldr	r2, [sp, #8]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	9001      	str	r0, [sp, #4]
 801260e:	9200      	str	r2, [sp, #0]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	aa06      	add	r2, sp, #24
 8012614:	001c      	movs	r4, r3
 8012616:	0031      	movs	r1, r6
 8012618:	9b04      	ldr	r3, [sp, #16]
 801261a:	9805      	ldr	r0, [sp, #20]
 801261c:	47a0      	blx	r4
 801261e:	9b04      	ldr	r3, [sp, #16]
 8012620:	2202      	movs	r2, #2
 8012622:	5e9b      	ldrsh	r3, [r3, r2]
 8012624:	2102      	movs	r1, #2
 8012626:	5e7a      	ldrsh	r2, [r7, r1]
 8012628:	4293      	cmp	r3, r2
 801262a:	dd10      	ble.n	801264e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x14a>
 801262c:	1a9b      	subs	r3, r3, r2
 801262e:	2100      	movs	r1, #0
 8012630:	5e78      	ldrsh	r0, [r7, r1]
 8012632:	2404      	movs	r4, #4
 8012634:	5f39      	ldrsh	r1, [r7, r4]
 8012636:	80eb      	strh	r3, [r5, #6]
 8012638:	9b02      	ldr	r3, [sp, #8]
 801263a:	8028      	strh	r0, [r5, #0]
 801263c:	806a      	strh	r2, [r5, #2]
 801263e:	80a9      	strh	r1, [r5, #4]
 8012640:	aa06      	add	r2, sp, #24
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	9903      	ldr	r1, [sp, #12]
 8012646:	002b      	movs	r3, r5
 8012648:	0030      	movs	r0, r6
 801264a:	f7ff fe09 	bl	8012260 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801264e:	ab08      	add	r3, sp, #32
 8012650:	2100      	movs	r1, #0
 8012652:	5e5a      	ldrsh	r2, [r3, r1]
 8012654:	2000      	movs	r0, #0
 8012656:	5e39      	ldrsh	r1, [r7, r0]
 8012658:	428a      	cmp	r2, r1
 801265a:	dd10      	ble.n	801267e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x17a>
 801265c:	2002      	movs	r0, #2
 801265e:	5e1c      	ldrsh	r4, [r3, r0]
 8012660:	1a52      	subs	r2, r2, r1
 8012662:	2006      	movs	r0, #6
 8012664:	5e18      	ldrsh	r0, [r3, r0]
 8012666:	ab0a      	add	r3, sp, #40	; 0x28
 8012668:	809a      	strh	r2, [r3, #4]
 801266a:	9a02      	ldr	r2, [sp, #8]
 801266c:	8019      	strh	r1, [r3, #0]
 801266e:	80d8      	strh	r0, [r3, #6]
 8012670:	805c      	strh	r4, [r3, #2]
 8012672:	9903      	ldr	r1, [sp, #12]
 8012674:	9200      	str	r2, [sp, #0]
 8012676:	0030      	movs	r0, r6
 8012678:	aa06      	add	r2, sp, #24
 801267a:	f7ff fdf1 	bl	8012260 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801267e:	88bb      	ldrh	r3, [r7, #4]
 8012680:	883a      	ldrh	r2, [r7, #0]
 8012682:	18d2      	adds	r2, r2, r3
 8012684:	ab08      	add	r3, sp, #32
 8012686:	8898      	ldrh	r0, [r3, #4]
 8012688:	8819      	ldrh	r1, [r3, #0]
 801268a:	b292      	uxth	r2, r2
 801268c:	1809      	adds	r1, r1, r0
 801268e:	b289      	uxth	r1, r1
 8012690:	b208      	sxth	r0, r1
 8012692:	b214      	sxth	r4, r2
 8012694:	4284      	cmp	r4, r0
 8012696:	dd10      	ble.n	80126ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b6>
 8012698:	2502      	movs	r5, #2
 801269a:	5f5c      	ldrsh	r4, [r3, r5]
 801269c:	1a52      	subs	r2, r2, r1
 801269e:	2506      	movs	r5, #6
 80126a0:	5f5d      	ldrsh	r5, [r3, r5]
 80126a2:	ab0a      	add	r3, sp, #40	; 0x28
 80126a4:	809a      	strh	r2, [r3, #4]
 80126a6:	9a02      	ldr	r2, [sp, #8]
 80126a8:	8018      	strh	r0, [r3, #0]
 80126aa:	805c      	strh	r4, [r3, #2]
 80126ac:	80dd      	strh	r5, [r3, #6]
 80126ae:	9903      	ldr	r1, [sp, #12]
 80126b0:	9200      	str	r2, [sp, #0]
 80126b2:	0030      	movs	r0, r6
 80126b4:	aa06      	add	r2, sp, #24
 80126b6:	f7ff fdd3 	bl	8012260 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80126ba:	88fb      	ldrh	r3, [r7, #6]
 80126bc:	887a      	ldrh	r2, [r7, #2]
 80126be:	18d2      	adds	r2, r2, r3
 80126c0:	ab08      	add	r3, sp, #32
 80126c2:	8859      	ldrh	r1, [r3, #2]
 80126c4:	88db      	ldrh	r3, [r3, #6]
 80126c6:	b292      	uxth	r2, r2
 80126c8:	18c9      	adds	r1, r1, r3
 80126ca:	b289      	uxth	r1, r1
 80126cc:	b208      	sxth	r0, r1
 80126ce:	b213      	sxth	r3, r2
 80126d0:	4283      	cmp	r3, r0
 80126d2:	dc00      	bgt.n	80126d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d2>
 80126d4:	e758      	b.n	8012588 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 80126d6:	2304      	movs	r3, #4
 80126d8:	5efd      	ldrsh	r5, [r7, r3]
 80126da:	2300      	movs	r3, #0
 80126dc:	5efc      	ldrsh	r4, [r7, r3]
 80126de:	1a52      	subs	r2, r2, r1
 80126e0:	ab0a      	add	r3, sp, #40	; 0x28
 80126e2:	80da      	strh	r2, [r3, #6]
 80126e4:	9a02      	ldr	r2, [sp, #8]
 80126e6:	801c      	strh	r4, [r3, #0]
 80126e8:	8058      	strh	r0, [r3, #2]
 80126ea:	809d      	strh	r5, [r3, #4]
 80126ec:	9200      	str	r2, [sp, #0]
 80126ee:	e784      	b.n	80125fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80126f0:	080171cc 	.word	0x080171cc
 80126f4:	08017692 	.word	0x08017692
 80126f8:	08017374 	.word	0x08017374

080126fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80126fc:	b510      	push	{r4, lr}
 80126fe:	2800      	cmp	r0, #0
 8012700:	d011      	beq.n	8012726 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8012702:	2902      	cmp	r1, #2
 8012704:	d015      	beq.n	8012732 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x36>
 8012706:	2903      	cmp	r1, #3
 8012708:	d01e      	beq.n	8012748 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x4c>
 801270a:	2901      	cmp	r1, #1
 801270c:	d101      	bne.n	8012712 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x16>
 801270e:	2001      	movs	r0, #1
 8012710:	bd10      	pop	{r4, pc}
 8012712:	4b0e      	ldr	r3, [pc, #56]	; (801274c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012714:	8818      	ldrh	r0, [r3, #0]
 8012716:	2800      	cmp	r0, #0
 8012718:	d112      	bne.n	8012740 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x44>
 801271a:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801271c:	4a0d      	ldr	r2, [pc, #52]	; (8012754 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801271e:	2154      	movs	r1, #84	; 0x54
 8012720:	480d      	ldr	r0, [pc, #52]	; (8012758 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8012722:	f000 fb67 	bl	8012df4 <__assert_func>
 8012726:	2902      	cmp	r1, #2
 8012728:	d00e      	beq.n	8012748 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x4c>
 801272a:	2903      	cmp	r1, #3
 801272c:	d0f1      	beq.n	8012712 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x16>
 801272e:	2901      	cmp	r1, #1
 8012730:	d1ed      	bne.n	801270e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8012732:	4b06      	ldr	r3, [pc, #24]	; (801274c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012734:	8818      	ldrh	r0, [r3, #0]
 8012736:	2800      	cmp	r0, #0
 8012738:	d0ef      	beq.n	801271a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 801273a:	0440      	lsls	r0, r0, #17
 801273c:	0c40      	lsrs	r0, r0, #17
 801273e:	e7e7      	b.n	8012710 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8012740:	0440      	lsls	r0, r0, #17
 8012742:	0c40      	lsrs	r0, r0, #17
 8012744:	4240      	negs	r0, r0
 8012746:	e7e3      	b.n	8012710 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8012748:	2001      	movs	r0, #1
 801274a:	e7fb      	b.n	8012744 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801274c:	200034c6 	.word	0x200034c6
 8012750:	080174bd 	.word	0x080174bd
 8012754:	080177a1 	.word	0x080177a1
 8012758:	080174ff 	.word	0x080174ff

0801275c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801275c:	b510      	push	{r4, lr}
 801275e:	2800      	cmp	r0, #0
 8012760:	d011      	beq.n	8012786 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2a>
 8012762:	2902      	cmp	r1, #2
 8012764:	d015      	beq.n	8012792 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x36>
 8012766:	2903      	cmp	r1, #3
 8012768:	d018      	beq.n	801279c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801276a:	2901      	cmp	r1, #1
 801276c:	d001      	beq.n	8012772 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x16>
 801276e:	2001      	movs	r0, #1
 8012770:	e013      	b.n	801279a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8012772:	4b0e      	ldr	r3, [pc, #56]	; (80127ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012774:	8818      	ldrh	r0, [r3, #0]
 8012776:	2800      	cmp	r0, #0
 8012778:	d10d      	bne.n	8012796 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 801277a:	4b0d      	ldr	r3, [pc, #52]	; (80127b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801277c:	4a0d      	ldr	r2, [pc, #52]	; (80127b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801277e:	2154      	movs	r1, #84	; 0x54
 8012780:	480d      	ldr	r0, [pc, #52]	; (80127b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8012782:	f000 fb37 	bl	8012df4 <__assert_func>
 8012786:	2902      	cmp	r1, #2
 8012788:	d008      	beq.n	801279c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801278a:	2903      	cmp	r1, #3
 801278c:	d0ef      	beq.n	801276e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x12>
 801278e:	2901      	cmp	r1, #1
 8012790:	d1ef      	bne.n	8012772 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x16>
 8012792:	2001      	movs	r0, #1
 8012794:	e008      	b.n	80127a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4c>
 8012796:	0440      	lsls	r0, r0, #17
 8012798:	0c40      	lsrs	r0, r0, #17
 801279a:	bd10      	pop	{r4, pc}
 801279c:	4b03      	ldr	r3, [pc, #12]	; (80127ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801279e:	8818      	ldrh	r0, [r3, #0]
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d0ea      	beq.n	801277a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1e>
 80127a4:	0440      	lsls	r0, r0, #17
 80127a6:	0c40      	lsrs	r0, r0, #17
 80127a8:	4240      	negs	r0, r0
 80127aa:	e7f6      	b.n	801279a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80127ac:	200034c6 	.word	0x200034c6
 80127b0:	080174bd 	.word	0x080174bd
 80127b4:	080177a1 	.word	0x080177a1
 80127b8:	080174ff 	.word	0x080174ff

080127bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80127bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127be:	b09d      	sub	sp, #116	; 0x74
 80127c0:	9319      	str	r3, [sp, #100]	; 0x64
 80127c2:	ab22      	add	r3, sp, #136	; 0x88
 80127c4:	2600      	movs	r6, #0
 80127c6:	5f9e      	ldrsh	r6, [r3, r6]
 80127c8:	ab23      	add	r3, sp, #140	; 0x8c
 80127ca:	9218      	str	r2, [sp, #96]	; 0x60
 80127cc:	2200      	movs	r2, #0
 80127ce:	5e9b      	ldrsh	r3, [r3, r2]
 80127d0:	2480      	movs	r4, #128	; 0x80
 80127d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80127d4:	ab24      	add	r3, sp, #144	; 0x90
 80127d6:	881d      	ldrh	r5, [r3, #0]
 80127d8:	ab25      	add	r3, sp, #148	; 0x94
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	a812      	add	r0, sp, #72	; 0x48
 80127de:	930c      	str	r3, [sp, #48]	; 0x30
 80127e0:	ab29      	add	r3, sp, #164	; 0xa4
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	910e      	str	r1, [sp, #56]	; 0x38
 80127e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80127e8:	2345      	movs	r3, #69	; 0x45
 80127ea:	181b      	adds	r3, r3, r0
 80127ec:	7fdb      	ldrb	r3, [r3, #31]
 80127ee:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80127f0:	9306      	str	r3, [sp, #24]
 80127f2:	ab2c      	add	r3, sp, #176	; 0xb0
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	0064      	lsls	r4, r4, #1
 80127f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80127fa:	ab2d      	add	r3, sp, #180	; 0xb4
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012800:	9308      	str	r3, [sp, #32]
 8012802:	7b4b      	ldrb	r3, [r1, #13]
 8012804:	798f      	ldrb	r7, [r1, #6]
 8012806:	0158      	lsls	r0, r3, #5
 8012808:	4020      	ands	r0, r4
 801280a:	4307      	orrs	r7, r0
 801280c:	9707      	str	r7, [sp, #28]
 801280e:	d100      	bne.n	8012812 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x56>
 8012810:	e160      	b.n	8012ad4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012812:	011b      	lsls	r3, r3, #4
 8012814:	401c      	ands	r4, r3
 8012816:	79cb      	ldrb	r3, [r1, #7]
 8012818:	431c      	orrs	r4, r3
 801281a:	d100      	bne.n	801281e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x62>
 801281c:	e15a      	b.n	8012ad4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801281e:	2309      	movs	r3, #9
 8012820:	56cb      	ldrsb	r3, [r1, r3]
 8012822:	b29b      	uxth	r3, r3
 8012824:	2d00      	cmp	r5, #0
 8012826:	d100      	bne.n	801282a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x6e>
 8012828:	e102      	b.n	8012a30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801282a:	1aeb      	subs	r3, r5, r3
 801282c:	b29d      	uxth	r5, r3
 801282e:	041b      	lsls	r3, r3, #16
 8012830:	d502      	bpl.n	8012838 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8012832:	1b76      	subs	r6, r6, r5
 8012834:	2500      	movs	r5, #0
 8012836:	b236      	sxth	r6, r6
 8012838:	2300      	movs	r3, #0
 801283a:	5ed1      	ldrsh	r1, [r2, r3]
 801283c:	b28b      	uxth	r3, r1
 801283e:	428e      	cmp	r6, r1
 8012840:	da03      	bge.n	801284a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x8e>
 8012842:	18ed      	adds	r5, r5, r3
 8012844:	1bad      	subs	r5, r5, r6
 8012846:	000e      	movs	r6, r1
 8012848:	b2ad      	uxth	r5, r5
 801284a:	8891      	ldrh	r1, [r2, #4]
 801284c:	a818      	add	r0, sp, #96	; 0x60
 801284e:	185b      	adds	r3, r3, r1
 8012850:	b21b      	sxth	r3, r3
 8012852:	9312      	str	r3, [sp, #72]	; 0x48
 8012854:	8853      	ldrh	r3, [r2, #2]
 8012856:	88d2      	ldrh	r2, [r2, #6]
 8012858:	0031      	movs	r1, r6
 801285a:	189b      	adds	r3, r3, r2
 801285c:	b21b      	sxth	r3, r3
 801285e:	9311      	str	r3, [sp, #68]	; 0x44
 8012860:	466b      	mov	r3, sp
 8012862:	8b9f      	ldrh	r7, [r3, #28]
 8012864:	b2a3      	uxth	r3, r4
 8012866:	9309      	str	r3, [sp, #36]	; 0x24
 8012868:	4bce      	ldr	r3, [pc, #824]	; (8012ba4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>)
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	930a      	str	r3, [sp, #40]	; 0x28
 801286e:	3b01      	subs	r3, #1
 8012870:	425a      	negs	r2, r3
 8012872:	4153      	adcs	r3, r2
 8012874:	b2db      	uxtb	r3, r3
 8012876:	9310      	str	r3, [sp, #64]	; 0x40
 8012878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801287a:	9b08      	ldr	r3, [sp, #32]
 801287c:	f7fb ff5c 	bl	800e738 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8012880:	ab12      	add	r3, sp, #72	; 0x48
 8012882:	8498      	strh	r0, [r3, #36]	; 0x24
 8012884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012886:	9b08      	ldr	r3, [sp, #32]
 8012888:	0031      	movs	r1, r6
 801288a:	a818      	add	r0, sp, #96	; 0x60
 801288c:	f7fb ff6b 	bl	800e766 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8012890:	2126      	movs	r1, #38	; 0x26
 8012892:	ab12      	add	r3, sp, #72	; 0x48
 8012894:	18c9      	adds	r1, r1, r3
 8012896:	8008      	strh	r0, [r1, #0]
 8012898:	a81b      	add	r0, sp, #108	; 0x6c
 801289a:	f7fc f83f 	bl	800e91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801289e:	9b08      	ldr	r3, [sp, #32]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d000      	beq.n	80128a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 80128a4:	e0c7      	b.n	8012a36 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 80128a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d000      	beq.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80128ac:	e0cb      	b.n	8012a46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 80128ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d104      	bne.n	80128be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80128b4:	4bbc      	ldr	r3, [pc, #752]	; (8012ba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 80128b6:	6818      	ldr	r0, [r3, #0]
 80128b8:	6803      	ldr	r3, [r0, #0]
 80128ba:	6a1b      	ldr	r3, [r3, #32]
 80128bc:	4798      	blx	r3
 80128be:	2326      	movs	r3, #38	; 0x26
 80128c0:	aa12      	add	r2, sp, #72	; 0x48
 80128c2:	189b      	adds	r3, r3, r2
 80128c4:	2200      	movs	r2, #0
 80128c6:	5e9a      	ldrsh	r2, [r3, r2]
 80128c8:	4bb8      	ldr	r3, [pc, #736]	; (8012bac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80128ca:	881b      	ldrh	r3, [r3, #0]
 80128cc:	4353      	muls	r3, r2
 80128ce:	aa1b      	add	r2, sp, #108	; 0x6c
 80128d0:	2100      	movs	r1, #0
 80128d2:	5e52      	ldrsh	r2, [r2, r1]
 80128d4:	9906      	ldr	r1, [sp, #24]
 80128d6:	189b      	adds	r3, r3, r2
 80128d8:	2201      	movs	r2, #1
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	18c3      	adds	r3, r0, r3
 80128de:	930d      	str	r3, [sp, #52]	; 0x34
 80128e0:	0013      	movs	r3, r2
 80128e2:	408b      	lsls	r3, r1
 80128e4:	3b01      	subs	r3, #1
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	9315      	str	r3, [sp, #84]	; 0x54
 80128ea:	23ff      	movs	r3, #255	; 0xff
 80128ec:	930a      	str	r3, [sp, #40]	; 0x28
 80128ee:	4291      	cmp	r1, r2
 80128f0:	d009      	beq.n	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14a>
 80128f2:	2355      	movs	r3, #85	; 0x55
 80128f4:	930a      	str	r3, [sp, #40]	; 0x28
 80128f6:	000b      	movs	r3, r1
 80128f8:	2902      	cmp	r1, #2
 80128fa:	d004      	beq.n	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14a>
 80128fc:	920a      	str	r2, [sp, #40]	; 0x28
 80128fe:	2904      	cmp	r1, #4
 8012900:	d101      	bne.n	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14a>
 8012902:	330d      	adds	r3, #13
 8012904:	930a      	str	r3, [sp, #40]	; 0x28
 8012906:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012908:	2b00      	cmp	r3, #0
 801290a:	d00c      	beq.n	8012926 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x16a>
 801290c:	9906      	ldr	r1, [sp, #24]
 801290e:	2008      	movs	r0, #8
 8012910:	f7ed fc8e 	bl	8000230 <__divsi3>
 8012914:	0004      	movs	r4, r0
 8012916:	9b07      	ldr	r3, [sp, #28]
 8012918:	3801      	subs	r0, #1
 801291a:	0021      	movs	r1, r4
 801291c:	18c0      	adds	r0, r0, r3
 801291e:	f7ed fc87 	bl	8000230 <__divsi3>
 8012922:	4344      	muls	r4, r0
 8012924:	b2a7      	uxth	r7, r4
 8012926:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012928:	432c      	orrs	r4, r5
 801292a:	d00f      	beq.n	801294c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x190>
 801292c:	2407      	movs	r4, #7
 801292e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012930:	9a06      	ldr	r2, [sp, #24]
 8012932:	437b      	muls	r3, r7
 8012934:	195b      	adds	r3, r3, r5
 8012936:	4353      	muls	r3, r2
 8012938:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801293a:	401c      	ands	r4, r3
 801293c:	08db      	lsrs	r3, r3, #3
 801293e:	18d3      	adds	r3, r2, r3
 8012940:	9328      	str	r3, [sp, #160]	; 0xa0
 8012942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012946:	1a9b      	subs	r3, r3, r2
 8012948:	b29b      	uxth	r3, r3
 801294a:	9309      	str	r3, [sp, #36]	; 0x24
 801294c:	9908      	ldr	r1, [sp, #32]
 801294e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012950:	f7ff fed4 	bl	80126fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8012954:	9908      	ldr	r1, [sp, #32]
 8012956:	900c      	str	r0, [sp, #48]	; 0x30
 8012958:	9810      	ldr	r0, [sp, #64]	; 0x40
 801295a:	f7ff feff 	bl	801275c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801295e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012962:	1a9b      	subs	r3, r3, r2
 8012964:	469c      	mov	ip, r3
 8012966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012968:	459c      	cmp	ip, r3
 801296a:	dd00      	ble.n	801296e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1b2>
 801296c:	469c      	mov	ip, r3
 801296e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012970:	1b76      	subs	r6, r6, r5
 8012972:	1b9e      	subs	r6, r3, r6
 8012974:	9b07      	ldr	r3, [sp, #28]
 8012976:	429e      	cmp	r6, r3
 8012978:	dd00      	ble.n	801297c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1c0>
 801297a:	001e      	movs	r6, r3
 801297c:	1b73      	subs	r3, r6, r5
 801297e:	2507      	movs	r5, #7
 8012980:	2103      	movs	r1, #3
 8012982:	9307      	str	r3, [sp, #28]
 8012984:	1aff      	subs	r7, r7, r3
 8012986:	9b06      	ldr	r3, [sp, #24]
 8012988:	9510      	str	r5, [sp, #64]	; 0x40
 801298a:	437b      	muls	r3, r7
 801298c:	930b      	str	r3, [sp, #44]	; 0x2c
 801298e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012990:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012992:	781a      	ldrb	r2, [r3, #0]
 8012994:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012996:	4122      	asrs	r2, r4
 8012998:	0a1b      	lsrs	r3, r3, #8
 801299a:	43ab      	bics	r3, r5
 801299c:	b2db      	uxtb	r3, r3
 801299e:	9311      	str	r3, [sp, #68]	; 0x44
 80129a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80129a2:	b2d2      	uxtb	r2, r2
 80129a4:	08db      	lsrs	r3, r3, #3
 80129a6:	438b      	bics	r3, r1
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	9312      	str	r3, [sp, #72]	; 0x48
 80129ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80129ae:	9117      	str	r1, [sp, #92]	; 0x5c
 80129b0:	408b      	lsls	r3, r1
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80129b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129ba:	005b      	lsls	r3, r3, #1
 80129bc:	9309      	str	r3, [sp, #36]	; 0x24
 80129be:	9b07      	ldr	r3, [sp, #28]
 80129c0:	435f      	muls	r7, r3
 80129c2:	1bc7      	subs	r7, r0, r7
 80129c4:	007b      	lsls	r3, r7, #1
 80129c6:	9314      	str	r3, [sp, #80]	; 0x50
 80129c8:	9b07      	ldr	r3, [sp, #28]
 80129ca:	9807      	ldr	r0, [sp, #28]
 80129cc:	43db      	mvns	r3, r3
 80129ce:	17db      	asrs	r3, r3, #31
 80129d0:	4003      	ands	r3, r0
 80129d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129d4:	4358      	muls	r0, r3
 80129d6:	9016      	str	r0, [sp, #88]	; 0x58
 80129d8:	4663      	mov	r3, ip
 80129da:	2b00      	cmp	r3, #0
 80129dc:	dc00      	bgt.n	80129e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x224>
 80129de:	e0d3      	b.n	8012b88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3cc>
 80129e0:	9b07      	ldr	r3, [sp, #28]
 80129e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80129e4:	9308      	str	r3, [sp, #32]
 80129e6:	9b08      	ldr	r3, [sp, #32]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	dc00      	bgt.n	80129ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x232>
 80129ec:	e0b3      	b.n	8012b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80129ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129f0:	4013      	ands	r3, r2
 80129f2:	d00b      	beq.n	8012a0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 80129f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129f6:	434b      	muls	r3, r1
 80129f8:	2bfe      	cmp	r3, #254	; 0xfe
 80129fa:	dc00      	bgt.n	80129fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 80129fc:	e06c      	b.n	8012ad8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80129fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a00:	29ff      	cmp	r1, #255	; 0xff
 8012a02:	d000      	beq.n	8012a06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24a>
 8012a04:	e068      	b.n	8012ad8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8012a06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012a08:	b298      	uxth	r0, r3
 8012a0a:	8038      	strh	r0, [r7, #0]
 8012a0c:	9b06      	ldr	r3, [sp, #24]
 8012a0e:	411a      	asrs	r2, r3
 8012a10:	18e4      	adds	r4, r4, r3
 8012a12:	b2a4      	uxth	r4, r4
 8012a14:	b2d2      	uxtb	r2, r2
 8012a16:	2c07      	cmp	r4, #7
 8012a18:	d904      	bls.n	8012a24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x268>
 8012a1a:	2400      	movs	r4, #0
 8012a1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012a1e:	785a      	ldrb	r2, [r3, #1]
 8012a20:	3301      	adds	r3, #1
 8012a22:	9328      	str	r3, [sp, #160]	; 0xa0
 8012a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a26:	18ff      	adds	r7, r7, r3
 8012a28:	9b08      	ldr	r3, [sp, #32]
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	9308      	str	r3, [sp, #32]
 8012a2e:	e7da      	b.n	80129e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8012a30:	199e      	adds	r6, r3, r6
 8012a32:	b236      	sxth	r6, r6
 8012a34:	e700      	b.n	8012838 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8012a36:	9b08      	ldr	r3, [sp, #32]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d000      	beq.n	8012a3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 8012a3c:	e737      	b.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d000      	beq.n	8012a46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8012a44:	e733      	b.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012a46:	4b58      	ldr	r3, [pc, #352]	; (8012ba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 8012a48:	6818      	ldr	r0, [r3, #0]
 8012a4a:	6803      	ldr	r3, [r0, #0]
 8012a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a4e:	4798      	blx	r3
 8012a50:	2300      	movs	r3, #0
 8012a52:	0602      	lsls	r2, r0, #24
 8012a54:	d506      	bpl.n	8012a64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8012a56:	9a06      	ldr	r2, [sp, #24]
 8012a58:	2a04      	cmp	r2, #4
 8012a5a:	d103      	bne.n	8012a64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8012a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a5e:	1e5a      	subs	r2, r3, #1
 8012a60:	4193      	sbcs	r3, r2
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2180      	movs	r1, #128	; 0x80
 8012a66:	0049      	lsls	r1, r1, #1
 8012a68:	4208      	tst	r0, r1
 8012a6a:	d100      	bne.n	8012a6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b2>
 8012a6c:	e095      	b.n	8012b9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3de>
 8012a6e:	9a06      	ldr	r2, [sp, #24]
 8012a70:	2a08      	cmp	r2, #8
 8012a72:	d000      	beq.n	8012a76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ba>
 8012a74:	e091      	b.n	8012b9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3de>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d000      	beq.n	8012a7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 8012a7a:	3980      	subs	r1, #128	; 0x80
 8012a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a7e:	432b      	orrs	r3, r5
 8012a80:	d000      	beq.n	8012a84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8012a82:	e714      	b.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012a84:	9b07      	ldr	r3, [sp, #28]
 8012a86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a88:	18f3      	adds	r3, r6, r3
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	dd00      	ble.n	8012a90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8012a8e:	e70e      	b.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a92:	18e4      	adds	r4, r4, r3
 8012a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a96:	429c      	cmp	r4, r3
 8012a98:	dd00      	ble.n	8012a9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8012a9a:	e708      	b.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012a9c:	9b06      	ldr	r3, [sp, #24]
 8012a9e:	2b08      	cmp	r3, #8
 8012aa0:	d003      	beq.n	8012aaa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	1c78      	adds	r0, r7, #1
 8012aa6:	4398      	bics	r0, r3
 8012aa8:	b287      	uxth	r7, r0
 8012aaa:	4b3f      	ldr	r3, [pc, #252]	; (8012ba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 8012aac:	aa12      	add	r2, sp, #72	; 0x48
 8012aae:	6818      	ldr	r0, [r3, #0]
 8012ab0:	2326      	movs	r3, #38	; 0x26
 8012ab2:	189b      	adds	r3, r3, r2
 8012ab4:	aa1b      	add	r2, sp, #108	; 0x6c
 8012ab6:	6804      	ldr	r4, [r0, #0]
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	8812      	ldrh	r2, [r2, #0]
 8012abc:	9105      	str	r1, [sp, #20]
 8012abe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012ac0:	9702      	str	r7, [sp, #8]
 8012ac2:	9104      	str	r1, [sp, #16]
 8012ac4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012ac6:	9700      	str	r7, [sp, #0]
 8012ac8:	9103      	str	r1, [sp, #12]
 8012aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012acc:	9101      	str	r1, [sp, #4]
 8012ace:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8012ad0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8012ad2:	47a0      	blx	r4
 8012ad4:	b01d      	add	sp, #116	; 0x74
 8012ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ad8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012ada:	434b      	muls	r3, r1
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	1c58      	adds	r0, r3, #1
 8012ae0:	121b      	asrs	r3, r3, #8
 8012ae2:	18c0      	adds	r0, r0, r3
 8012ae4:	1200      	asrs	r0, r0, #8
 8012ae6:	b2c0      	uxtb	r0, r0
 8012ae8:	b286      	uxth	r6, r0
 8012aea:	43c0      	mvns	r0, r0
 8012aec:	883b      	ldrh	r3, [r7, #0]
 8012aee:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012af0:	121d      	asrs	r5, r3, #8
 8012af2:	438d      	bics	r5, r1
 8012af4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012af6:	b2c0      	uxtb	r0, r0
 8012af8:	4371      	muls	r1, r6
 8012afa:	4345      	muls	r5, r0
 8012afc:	186d      	adds	r5, r5, r1
 8012afe:	b2a9      	uxth	r1, r5
 8012b00:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8012b02:	910c      	str	r1, [sp, #48]	; 0x30
 8012b04:	10d9      	asrs	r1, r3, #3
 8012b06:	43a9      	bics	r1, r5
 8012b08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012b0a:	b2c9      	uxtb	r1, r1
 8012b0c:	4375      	muls	r5, r6
 8012b0e:	4341      	muls	r1, r0
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	4343      	muls	r3, r0
 8012b16:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012b18:	1949      	adds	r1, r1, r5
 8012b1a:	4346      	muls	r6, r0
 8012b1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012b20:	122d      	asrs	r5, r5, #8
 8012b22:	3001      	adds	r0, #1
 8012b24:	1940      	adds	r0, r0, r5
 8012b26:	25ff      	movs	r5, #255	; 0xff
 8012b28:	199b      	adds	r3, r3, r6
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	022d      	lsls	r5, r5, #8
 8012b2e:	4028      	ands	r0, r5
 8012b30:	1c5d      	adds	r5, r3, #1
 8012b32:	121b      	asrs	r3, r3, #8
 8012b34:	18eb      	adds	r3, r5, r3
 8012b36:	251f      	movs	r5, #31
 8012b38:	0ac0      	lsrs	r0, r0, #11
 8012b3a:	12db      	asrs	r3, r3, #11
 8012b3c:	b289      	uxth	r1, r1
 8012b3e:	402b      	ands	r3, r5
 8012b40:	02c0      	lsls	r0, r0, #11
 8012b42:	4318      	orrs	r0, r3
 8012b44:	1c4b      	adds	r3, r1, #1
 8012b46:	1209      	asrs	r1, r1, #8
 8012b48:	1859      	adds	r1, r3, r1
 8012b4a:	23fc      	movs	r3, #252	; 0xfc
 8012b4c:	0949      	lsrs	r1, r1, #5
 8012b4e:	00db      	lsls	r3, r3, #3
 8012b50:	4019      	ands	r1, r3
 8012b52:	4308      	orrs	r0, r1
 8012b54:	e759      	b.n	8012a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24e>
 8012b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00b      	beq.n	8012b74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8012b5c:	18e4      	adds	r4, r4, r3
 8012b5e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8012b60:	b2a4      	uxth	r4, r4
 8012b62:	08e3      	lsrs	r3, r4, #3
 8012b64:	18d3      	adds	r3, r2, r3
 8012b66:	9328      	str	r3, [sp, #160]	; 0xa0
 8012b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b6a:	401c      	ands	r4, r3
 8012b6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012b6e:	781a      	ldrb	r2, [r3, #0]
 8012b70:	4122      	asrs	r2, r4
 8012b72:	b2d2      	uxtb	r2, r2
 8012b74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012b76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b78:	185b      	adds	r3, r3, r1
 8012b7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b7c:	18cb      	adds	r3, r1, r3
 8012b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8012b80:	2301      	movs	r3, #1
 8012b82:	425b      	negs	r3, r3
 8012b84:	449c      	add	ip, r3
 8012b86:	e727      	b.n	80129d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21c>
 8012b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d1a2      	bne.n	8012ad4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012b8e:	4b06      	ldr	r3, [pc, #24]	; (8012ba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 8012b90:	6818      	ldr	r0, [r3, #0]
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b96:	4798      	blx	r3
 8012b98:	e79c      	b.n	8012ad4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012b9a:	2180      	movs	r1, #128	; 0x80
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d000      	beq.n	8012ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e6>
 8012ba0:	e76c      	b.n	8012a7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 8012ba2:	e684      	b.n	80128ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012ba4:	200034c4 	.word	0x200034c4
 8012ba8:	200034cc 	.word	0x200034cc
 8012bac:	200034c6 	.word	0x200034c6

08012bb0 <CRC_Lock>:
 8012bb0:	b530      	push	{r4, r5, lr}
 8012bb2:	2401      	movs	r4, #1
 8012bb4:	4a1b      	ldr	r2, [pc, #108]	; (8012c24 <CRC_Lock+0x74>)
 8012bb6:	4d1c      	ldr	r5, [pc, #112]	; (8012c28 <CRC_Lock+0x78>)
 8012bb8:	6813      	ldr	r3, [r2, #0]
 8012bba:	43a3      	bics	r3, r4
 8012bbc:	6013      	str	r3, [r2, #0]
 8012bbe:	4b1b      	ldr	r3, [pc, #108]	; (8012c2c <CRC_Lock+0x7c>)
 8012bc0:	4c1b      	ldr	r4, [pc, #108]	; (8012c30 <CRC_Lock+0x80>)
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	4022      	ands	r2, r4
 8012bc6:	42aa      	cmp	r2, r5
 8012bc8:	d004      	beq.n	8012bd4 <CRC_Lock+0x24>
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	4a19      	ldr	r2, [pc, #100]	; (8012c34 <CRC_Lock+0x84>)
 8012bce:	4023      	ands	r3, r4
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	d11e      	bne.n	8012c12 <CRC_Lock+0x62>
 8012bd4:	4b18      	ldr	r3, [pc, #96]	; (8012c38 <CRC_Lock+0x88>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d11a      	bne.n	8012c12 <CRC_Lock+0x62>
 8012bdc:	248a      	movs	r4, #138	; 0x8a
 8012bde:	4a17      	ldr	r2, [pc, #92]	; (8012c3c <CRC_Lock+0x8c>)
 8012be0:	00e4      	lsls	r4, r4, #3
 8012be2:	6813      	ldr	r3, [r2, #0]
 8012be4:	051b      	lsls	r3, r3, #20
 8012be6:	0d1b      	lsrs	r3, r3, #20
 8012be8:	42a3      	cmp	r3, r4
 8012bea:	d005      	beq.n	8012bf8 <CRC_Lock+0x48>
 8012bec:	6813      	ldr	r3, [r2, #0]
 8012bee:	4a14      	ldr	r2, [pc, #80]	; (8012c40 <CRC_Lock+0x90>)
 8012bf0:	051b      	lsls	r3, r3, #20
 8012bf2:	0d1b      	lsrs	r3, r3, #20
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d10c      	bne.n	8012c12 <CRC_Lock+0x62>
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	4b12      	ldr	r3, [pc, #72]	; (8012c44 <CRC_Lock+0x94>)
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	681a      	ldr	r2, [r3, #0]
 8012c00:	2a00      	cmp	r2, #0
 8012c02:	d1fc      	bne.n	8012bfe <CRC_Lock+0x4e>
 8012c04:	4b10      	ldr	r3, [pc, #64]	; (8012c48 <CRC_Lock+0x98>)
 8012c06:	6018      	str	r0, [r3, #0]
 8012c08:	6818      	ldr	r0, [r3, #0]
 8012c0a:	1a40      	subs	r0, r0, r1
 8012c0c:	4241      	negs	r1, r0
 8012c0e:	4148      	adcs	r0, r1
 8012c10:	bd30      	pop	{r4, r5, pc}
 8012c12:	2201      	movs	r2, #1
 8012c14:	4b0d      	ldr	r3, [pc, #52]	; (8012c4c <CRC_Lock+0x9c>)
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	d1fc      	bne.n	8012c18 <CRC_Lock+0x68>
 8012c1e:	4b0c      	ldr	r3, [pc, #48]	; (8012c50 <CRC_Lock+0xa0>)
 8012c20:	e7f1      	b.n	8012c06 <CRC_Lock+0x56>
 8012c22:	46c0      	nop			; (mov r8, r8)
 8012c24:	e0002000 	.word	0xe0002000
 8012c28:	0000c240 	.word	0x0000c240
 8012c2c:	e000ed00 	.word	0xe000ed00
 8012c30:	0000fff0 	.word	0x0000fff0
 8012c34:	0000c270 	.word	0x0000c270
 8012c38:	e0042000 	.word	0xe0042000
 8012c3c:	5c001000 	.word	0x5c001000
 8012c40:	00000483 	.word	0x00000483
 8012c44:	58024c08 	.word	0x58024c08
 8012c48:	58024c00 	.word	0x58024c00
 8012c4c:	40023008 	.word	0x40023008
 8012c50:	40023000 	.word	0x40023000

08012c54 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8012c54:	6101      	str	r1, [r0, #16]
 8012c56:	4770      	bx	lr

08012c58 <_ZN8touchgfx8Gestures4tickEv>:
 8012c58:	7b83      	ldrb	r3, [r0, #14]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d009      	beq.n	8012c72 <_ZN8touchgfx8Gestures4tickEv+0x1a>
 8012c5e:	8903      	ldrh	r3, [r0, #8]
 8012c60:	3301      	adds	r3, #1
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	8103      	strh	r3, [r0, #8]
 8012c66:	2b07      	cmp	r3, #7
 8012c68:	d903      	bls.n	8012c72 <_ZN8touchgfx8Gestures4tickEv+0x1a>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	8143      	strh	r3, [r0, #10]
 8012c6e:	8183      	strh	r3, [r0, #12]
 8012c70:	7383      	strb	r3, [r0, #14]
 8012c72:	4770      	bx	lr

08012c74 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8012c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c76:	001e      	movs	r6, r3
 8012c78:	b087      	sub	sp, #28
 8012c7a:	000f      	movs	r7, r1
 8012c7c:	491a      	ldr	r1, [pc, #104]	; (8012ce8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>)
 8012c7e:	9201      	str	r2, [sp, #4]
 8012c80:	ab0c      	add	r3, sp, #48	; 0x30
 8012c82:	8882      	ldrh	r2, [r0, #4]
 8012c84:	881d      	ldrh	r5, [r3, #0]
 8012c86:	88c3      	ldrh	r3, [r0, #6]
 8012c88:	9102      	str	r1, [sp, #8]
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	0004      	movs	r4, r0
 8012c8e:	a802      	add	r0, sp, #8
 8012c90:	80c2      	strh	r2, [r0, #6]
 8012c92:	1ab2      	subs	r2, r6, r2
 8012c94:	b292      	uxth	r2, r2
 8012c96:	7101      	strb	r1, [r0, #4]
 8012c98:	8103      	strh	r3, [r0, #8]
 8012c9a:	8146      	strh	r6, [r0, #10]
 8012c9c:	8185      	strh	r5, [r0, #12]
 8012c9e:	b210      	sxth	r0, r2
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	da01      	bge.n	8012ca8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x34>
 8012ca4:	4252      	negs	r2, r2
 8012ca6:	b210      	sxth	r0, r2
 8012ca8:	8aa1      	ldrh	r1, [r4, #20]
 8012caa:	4288      	cmp	r0, r1
 8012cac:	dc09      	bgt.n	8012cc2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x4e>
 8012cae:	1aeb      	subs	r3, r5, r3
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	b21a      	sxth	r2, r3
 8012cb4:	2a00      	cmp	r2, #0
 8012cb6:	da01      	bge.n	8012cbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x48>
 8012cb8:	425b      	negs	r3, r3
 8012cba:	b21a      	sxth	r2, r3
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	4291      	cmp	r1, r2
 8012cc0:	da0f      	bge.n	8012ce2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x6e>
 8012cc2:	6920      	ldr	r0, [r4, #16]
 8012cc4:	a902      	add	r1, sp, #8
 8012cc6:	6803      	ldr	r3, [r0, #0]
 8012cc8:	1bf7      	subs	r7, r6, r7
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	4798      	blx	r3
 8012cce:	2300      	movs	r3, #0
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	8123      	strh	r3, [r4, #8]
 8012cd4:	9b01      	ldr	r3, [sp, #4]
 8012cd6:	8167      	strh	r7, [r4, #10]
 8012cd8:	1aeb      	subs	r3, r5, r3
 8012cda:	81a3      	strh	r3, [r4, #12]
 8012cdc:	80a6      	strh	r6, [r4, #4]
 8012cde:	80e5      	strh	r5, [r4, #6]
 8012ce0:	73a0      	strb	r0, [r4, #14]
 8012ce2:	b007      	add	sp, #28
 8012ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ce6:	46c0      	nop			; (mov r8, r8)
 8012ce8:	08016918 	.word	0x08016918

08012cec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8012cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cee:	b087      	sub	sp, #28
 8012cf0:	9301      	str	r3, [sp, #4]
 8012cf2:	1e4b      	subs	r3, r1, #1
 8012cf4:	0004      	movs	r4, r0
 8012cf6:	000d      	movs	r5, r1
 8012cf8:	9200      	str	r2, [sp, #0]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d83b      	bhi.n	8012d76 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x8a>
 8012cfe:	220a      	movs	r2, #10
 8012d00:	5e83      	ldrsh	r3, [r0, r2]
 8012d02:	1cda      	adds	r2, r3, #3
 8012d04:	b292      	uxth	r2, r2
 8012d06:	2a06      	cmp	r2, #6
 8012d08:	d90f      	bls.n	8012d2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x3e>
 8012d0a:	4e20      	ldr	r6, [pc, #128]	; (8012d8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa0>)
 8012d0c:	2204      	movs	r2, #4
 8012d0e:	5ea7      	ldrsh	r7, [r4, r2]
 8012d10:	9603      	str	r6, [sp, #12]
 8012d12:	2600      	movs	r6, #0
 8012d14:	2106      	movs	r1, #6
 8012d16:	5e62      	ldrsh	r2, [r4, r1]
 8012d18:	6900      	ldr	r0, [r0, #16]
 8012d1a:	a903      	add	r1, sp, #12
 8012d1c:	710e      	strb	r6, [r1, #4]
 8012d1e:	80cb      	strh	r3, [r1, #6]
 8012d20:	810f      	strh	r7, [r1, #8]
 8012d22:	814a      	strh	r2, [r1, #10]
 8012d24:	6803      	ldr	r3, [r0, #0]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	4798      	blx	r3
 8012d2a:	220c      	movs	r2, #12
 8012d2c:	5ea3      	ldrsh	r3, [r4, r2]
 8012d2e:	1cda      	adds	r2, r3, #3
 8012d30:	b292      	uxth	r2, r2
 8012d32:	2a06      	cmp	r2, #6
 8012d34:	d90f      	bls.n	8012d56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x6a>
 8012d36:	4e15      	ldr	r6, [pc, #84]	; (8012d8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa0>)
 8012d38:	2204      	movs	r2, #4
 8012d3a:	5ea7      	ldrsh	r7, [r4, r2]
 8012d3c:	9603      	str	r6, [sp, #12]
 8012d3e:	2601      	movs	r6, #1
 8012d40:	2106      	movs	r1, #6
 8012d42:	5e62      	ldrsh	r2, [r4, r1]
 8012d44:	6920      	ldr	r0, [r4, #16]
 8012d46:	a903      	add	r1, sp, #12
 8012d48:	710e      	strb	r6, [r1, #4]
 8012d4a:	80cb      	strh	r3, [r1, #6]
 8012d4c:	810f      	strh	r7, [r1, #8]
 8012d4e:	814a      	strh	r2, [r1, #10]
 8012d50:	6803      	ldr	r3, [r0, #0]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	4798      	blx	r3
 8012d56:	4b0e      	ldr	r3, [pc, #56]	; (8012d90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa4>)
 8012d58:	a903      	add	r1, sp, #12
 8012d5a:	9303      	str	r3, [sp, #12]
 8012d5c:	9b00      	ldr	r3, [sp, #0]
 8012d5e:	6920      	ldr	r0, [r4, #16]
 8012d60:	80cb      	strh	r3, [r1, #6]
 8012d62:	9b01      	ldr	r3, [sp, #4]
 8012d64:	710d      	strb	r5, [r1, #4]
 8012d66:	810b      	strh	r3, [r1, #8]
 8012d68:	2300      	movs	r3, #0
 8012d6a:	814b      	strh	r3, [r1, #10]
 8012d6c:	6803      	ldr	r3, [r0, #0]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4798      	blx	r3
 8012d72:	b007      	add	sp, #28
 8012d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d76:	2900      	cmp	r1, #0
 8012d78:	d1ed      	bne.n	8012d56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x6a>
 8012d7a:	9b00      	ldr	r3, [sp, #0]
 8012d7c:	8083      	strh	r3, [r0, #4]
 8012d7e:	9b01      	ldr	r3, [sp, #4]
 8012d80:	80c3      	strh	r3, [r0, #6]
 8012d82:	60a1      	str	r1, [r4, #8]
 8012d84:	81a1      	strh	r1, [r4, #12]
 8012d86:	73a1      	strb	r1, [r4, #14]
 8012d88:	e7e5      	b.n	8012d56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x6a>
 8012d8a:	46c0      	nop			; (mov r8, r8)
 8012d8c:	0801692c 	.word	0x0801692c
 8012d90:	08016904 	.word	0x08016904

08012d94 <__cxa_pure_virtual>:
 8012d94:	b510      	push	{r4, lr}
 8012d96:	f000 f81d 	bl	8012dd4 <_ZSt9terminatev>

08012d9a <_ZdlPvj>:
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	f000 f811 	bl	8012dc2 <_ZdlPv>
 8012da0:	bd10      	pop	{r4, pc}

08012da2 <__cxa_guard_acquire>:
 8012da2:	2301      	movs	r3, #1
 8012da4:	6802      	ldr	r2, [r0, #0]
 8012da6:	421a      	tst	r2, r3
 8012da8:	d106      	bne.n	8012db8 <__cxa_guard_acquire+0x16>
 8012daa:	7842      	ldrb	r2, [r0, #1]
 8012dac:	2a00      	cmp	r2, #0
 8012dae:	d000      	beq.n	8012db2 <__cxa_guard_acquire+0x10>
 8012db0:	deff      	udf	#255	; 0xff
 8012db2:	7043      	strb	r3, [r0, #1]
 8012db4:	0018      	movs	r0, r3
 8012db6:	4770      	bx	lr
 8012db8:	2000      	movs	r0, #0
 8012dba:	e7fc      	b.n	8012db6 <__cxa_guard_acquire+0x14>

08012dbc <__cxa_guard_release>:
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	6003      	str	r3, [r0, #0]
 8012dc0:	4770      	bx	lr

08012dc2 <_ZdlPv>:
 8012dc2:	b510      	push	{r4, lr}
 8012dc4:	f000 f880 	bl	8012ec8 <free>
 8012dc8:	bd10      	pop	{r4, pc}

08012dca <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012dca:	b510      	push	{r4, lr}
 8012dcc:	4780      	blx	r0
 8012dce:	f000 f809 	bl	8012de4 <abort>
	...

08012dd4 <_ZSt9terminatev>:
 8012dd4:	4b02      	ldr	r3, [pc, #8]	; (8012de0 <_ZSt9terminatev+0xc>)
 8012dd6:	b510      	push	{r4, lr}
 8012dd8:	6818      	ldr	r0, [r3, #0]
 8012dda:	f7ff fff6 	bl	8012dca <_ZN10__cxxabiv111__terminateEPFvvE>
 8012dde:	46c0      	nop			; (mov r8, r8)
 8012de0:	20000024 	.word	0x20000024

08012de4 <abort>:
 8012de4:	b510      	push	{r4, lr}
 8012de6:	2006      	movs	r0, #6
 8012de8:	f000 fc22 	bl	8013630 <raise>
 8012dec:	2001      	movs	r0, #1
 8012dee:	f7ef fa63 	bl	80022b8 <_exit>
	...

08012df4 <__assert_func>:
 8012df4:	b530      	push	{r4, r5, lr}
 8012df6:	001c      	movs	r4, r3
 8012df8:	4b09      	ldr	r3, [pc, #36]	; (8012e20 <__assert_func+0x2c>)
 8012dfa:	0005      	movs	r5, r0
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	b085      	sub	sp, #20
 8012e00:	68d8      	ldr	r0, [r3, #12]
 8012e02:	4b08      	ldr	r3, [pc, #32]	; (8012e24 <__assert_func+0x30>)
 8012e04:	2a00      	cmp	r2, #0
 8012e06:	d101      	bne.n	8012e0c <__assert_func+0x18>
 8012e08:	4b07      	ldr	r3, [pc, #28]	; (8012e28 <__assert_func+0x34>)
 8012e0a:	001a      	movs	r2, r3
 8012e0c:	9202      	str	r2, [sp, #8]
 8012e0e:	9301      	str	r3, [sp, #4]
 8012e10:	9100      	str	r1, [sp, #0]
 8012e12:	002b      	movs	r3, r5
 8012e14:	0022      	movs	r2, r4
 8012e16:	4905      	ldr	r1, [pc, #20]	; (8012e2c <__assert_func+0x38>)
 8012e18:	f000 f818 	bl	8012e4c <fiprintf>
 8012e1c:	f7ff ffe2 	bl	8012de4 <abort>
 8012e20:	20000028 	.word	0x20000028
 8012e24:	080178f9 	.word	0x080178f9
 8012e28:	08017934 	.word	0x08017934
 8012e2c:	08017906 	.word	0x08017906

08012e30 <atexit>:
 8012e30:	2300      	movs	r3, #0
 8012e32:	b510      	push	{r4, lr}
 8012e34:	0001      	movs	r1, r0
 8012e36:	001a      	movs	r2, r3
 8012e38:	0018      	movs	r0, r3
 8012e3a:	f000 fce5 	bl	8013808 <__register_exitproc>
 8012e3e:	bd10      	pop	{r4, pc}

08012e40 <__errno>:
 8012e40:	4b01      	ldr	r3, [pc, #4]	; (8012e48 <__errno+0x8>)
 8012e42:	6818      	ldr	r0, [r3, #0]
 8012e44:	4770      	bx	lr
 8012e46:	46c0      	nop			; (mov r8, r8)
 8012e48:	20000028 	.word	0x20000028

08012e4c <fiprintf>:
 8012e4c:	b40e      	push	{r1, r2, r3}
 8012e4e:	b503      	push	{r0, r1, lr}
 8012e50:	0001      	movs	r1, r0
 8012e52:	ab03      	add	r3, sp, #12
 8012e54:	4804      	ldr	r0, [pc, #16]	; (8012e68 <fiprintf+0x1c>)
 8012e56:	cb04      	ldmia	r3!, {r2}
 8012e58:	6800      	ldr	r0, [r0, #0]
 8012e5a:	9301      	str	r3, [sp, #4]
 8012e5c:	f000 f920 	bl	80130a0 <_vfiprintf_r>
 8012e60:	b002      	add	sp, #8
 8012e62:	bc08      	pop	{r3}
 8012e64:	b003      	add	sp, #12
 8012e66:	4718      	bx	r3
 8012e68:	20000028 	.word	0x20000028

08012e6c <__libc_init_array>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	2600      	movs	r6, #0
 8012e70:	4d0c      	ldr	r5, [pc, #48]	; (8012ea4 <__libc_init_array+0x38>)
 8012e72:	4c0d      	ldr	r4, [pc, #52]	; (8012ea8 <__libc_init_array+0x3c>)
 8012e74:	1b64      	subs	r4, r4, r5
 8012e76:	10a4      	asrs	r4, r4, #2
 8012e78:	42a6      	cmp	r6, r4
 8012e7a:	d109      	bne.n	8012e90 <__libc_init_array+0x24>
 8012e7c:	2600      	movs	r6, #0
 8012e7e:	f000 fff1 	bl	8013e64 <_init>
 8012e82:	4d0a      	ldr	r5, [pc, #40]	; (8012eac <__libc_init_array+0x40>)
 8012e84:	4c0a      	ldr	r4, [pc, #40]	; (8012eb0 <__libc_init_array+0x44>)
 8012e86:	1b64      	subs	r4, r4, r5
 8012e88:	10a4      	asrs	r4, r4, #2
 8012e8a:	42a6      	cmp	r6, r4
 8012e8c:	d105      	bne.n	8012e9a <__libc_init_array+0x2e>
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	00b3      	lsls	r3, r6, #2
 8012e92:	58eb      	ldr	r3, [r5, r3]
 8012e94:	4798      	blx	r3
 8012e96:	3601      	adds	r6, #1
 8012e98:	e7ee      	b.n	8012e78 <__libc_init_array+0xc>
 8012e9a:	00b3      	lsls	r3, r6, #2
 8012e9c:	58eb      	ldr	r3, [r5, r3]
 8012e9e:	4798      	blx	r3
 8012ea0:	3601      	adds	r6, #1
 8012ea2:	e7f2      	b.n	8012e8a <__libc_init_array+0x1e>
 8012ea4:	08017df4 	.word	0x08017df4
 8012ea8:	08017df4 	.word	0x08017df4
 8012eac:	08017df4 	.word	0x08017df4
 8012eb0:	08017e0c 	.word	0x08017e0c

08012eb4 <malloc>:
 8012eb4:	b510      	push	{r4, lr}
 8012eb6:	4b03      	ldr	r3, [pc, #12]	; (8012ec4 <malloc+0x10>)
 8012eb8:	0001      	movs	r1, r0
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	f000 f86a 	bl	8012f94 <_malloc_r>
 8012ec0:	bd10      	pop	{r4, pc}
 8012ec2:	46c0      	nop			; (mov r8, r8)
 8012ec4:	20000028 	.word	0x20000028

08012ec8 <free>:
 8012ec8:	b510      	push	{r4, lr}
 8012eca:	4b03      	ldr	r3, [pc, #12]	; (8012ed8 <free+0x10>)
 8012ecc:	0001      	movs	r1, r0
 8012ece:	6818      	ldr	r0, [r3, #0]
 8012ed0:	f000 f816 	bl	8012f00 <_free_r>
 8012ed4:	bd10      	pop	{r4, pc}
 8012ed6:	46c0      	nop			; (mov r8, r8)
 8012ed8:	20000028 	.word	0x20000028

08012edc <memcpy>:
 8012edc:	2300      	movs	r3, #0
 8012ede:	b510      	push	{r4, lr}
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d100      	bne.n	8012ee6 <memcpy+0xa>
 8012ee4:	bd10      	pop	{r4, pc}
 8012ee6:	5ccc      	ldrb	r4, [r1, r3]
 8012ee8:	54c4      	strb	r4, [r0, r3]
 8012eea:	3301      	adds	r3, #1
 8012eec:	e7f8      	b.n	8012ee0 <memcpy+0x4>

08012eee <memset>:
 8012eee:	0003      	movs	r3, r0
 8012ef0:	1812      	adds	r2, r2, r0
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	d100      	bne.n	8012ef8 <memset+0xa>
 8012ef6:	4770      	bx	lr
 8012ef8:	7019      	strb	r1, [r3, #0]
 8012efa:	3301      	adds	r3, #1
 8012efc:	e7f9      	b.n	8012ef2 <memset+0x4>
	...

08012f00 <_free_r>:
 8012f00:	b570      	push	{r4, r5, r6, lr}
 8012f02:	0005      	movs	r5, r0
 8012f04:	2900      	cmp	r1, #0
 8012f06:	d010      	beq.n	8012f2a <_free_r+0x2a>
 8012f08:	1f0c      	subs	r4, r1, #4
 8012f0a:	6823      	ldr	r3, [r4, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	da00      	bge.n	8012f12 <_free_r+0x12>
 8012f10:	18e4      	adds	r4, r4, r3
 8012f12:	0028      	movs	r0, r5
 8012f14:	f000 fee5 	bl	8013ce2 <__malloc_lock>
 8012f18:	4a1d      	ldr	r2, [pc, #116]	; (8012f90 <_free_r+0x90>)
 8012f1a:	6813      	ldr	r3, [r2, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d105      	bne.n	8012f2c <_free_r+0x2c>
 8012f20:	6063      	str	r3, [r4, #4]
 8012f22:	6014      	str	r4, [r2, #0]
 8012f24:	0028      	movs	r0, r5
 8012f26:	f000 fedd 	bl	8013ce4 <__malloc_unlock>
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	42a3      	cmp	r3, r4
 8012f2e:	d909      	bls.n	8012f44 <_free_r+0x44>
 8012f30:	6821      	ldr	r1, [r4, #0]
 8012f32:	1860      	adds	r0, r4, r1
 8012f34:	4283      	cmp	r3, r0
 8012f36:	d1f3      	bne.n	8012f20 <_free_r+0x20>
 8012f38:	6818      	ldr	r0, [r3, #0]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	1841      	adds	r1, r0, r1
 8012f3e:	6021      	str	r1, [r4, #0]
 8012f40:	e7ee      	b.n	8012f20 <_free_r+0x20>
 8012f42:	0013      	movs	r3, r2
 8012f44:	685a      	ldr	r2, [r3, #4]
 8012f46:	2a00      	cmp	r2, #0
 8012f48:	d001      	beq.n	8012f4e <_free_r+0x4e>
 8012f4a:	42a2      	cmp	r2, r4
 8012f4c:	d9f9      	bls.n	8012f42 <_free_r+0x42>
 8012f4e:	6819      	ldr	r1, [r3, #0]
 8012f50:	1858      	adds	r0, r3, r1
 8012f52:	42a0      	cmp	r0, r4
 8012f54:	d10b      	bne.n	8012f6e <_free_r+0x6e>
 8012f56:	6820      	ldr	r0, [r4, #0]
 8012f58:	1809      	adds	r1, r1, r0
 8012f5a:	1858      	adds	r0, r3, r1
 8012f5c:	6019      	str	r1, [r3, #0]
 8012f5e:	4282      	cmp	r2, r0
 8012f60:	d1e0      	bne.n	8012f24 <_free_r+0x24>
 8012f62:	6810      	ldr	r0, [r2, #0]
 8012f64:	6852      	ldr	r2, [r2, #4]
 8012f66:	1841      	adds	r1, r0, r1
 8012f68:	6019      	str	r1, [r3, #0]
 8012f6a:	605a      	str	r2, [r3, #4]
 8012f6c:	e7da      	b.n	8012f24 <_free_r+0x24>
 8012f6e:	42a0      	cmp	r0, r4
 8012f70:	d902      	bls.n	8012f78 <_free_r+0x78>
 8012f72:	230c      	movs	r3, #12
 8012f74:	602b      	str	r3, [r5, #0]
 8012f76:	e7d5      	b.n	8012f24 <_free_r+0x24>
 8012f78:	6821      	ldr	r1, [r4, #0]
 8012f7a:	1860      	adds	r0, r4, r1
 8012f7c:	4282      	cmp	r2, r0
 8012f7e:	d103      	bne.n	8012f88 <_free_r+0x88>
 8012f80:	6810      	ldr	r0, [r2, #0]
 8012f82:	6852      	ldr	r2, [r2, #4]
 8012f84:	1841      	adds	r1, r0, r1
 8012f86:	6021      	str	r1, [r4, #0]
 8012f88:	6062      	str	r2, [r4, #4]
 8012f8a:	605c      	str	r4, [r3, #4]
 8012f8c:	e7ca      	b.n	8012f24 <_free_r+0x24>
 8012f8e:	46c0      	nop			; (mov r8, r8)
 8012f90:	20003578 	.word	0x20003578

08012f94 <_malloc_r>:
 8012f94:	2303      	movs	r3, #3
 8012f96:	b570      	push	{r4, r5, r6, lr}
 8012f98:	1ccd      	adds	r5, r1, #3
 8012f9a:	439d      	bics	r5, r3
 8012f9c:	3508      	adds	r5, #8
 8012f9e:	0006      	movs	r6, r0
 8012fa0:	2d0c      	cmp	r5, #12
 8012fa2:	d21e      	bcs.n	8012fe2 <_malloc_r+0x4e>
 8012fa4:	250c      	movs	r5, #12
 8012fa6:	42a9      	cmp	r1, r5
 8012fa8:	d81d      	bhi.n	8012fe6 <_malloc_r+0x52>
 8012faa:	0030      	movs	r0, r6
 8012fac:	f000 fe99 	bl	8013ce2 <__malloc_lock>
 8012fb0:	4a25      	ldr	r2, [pc, #148]	; (8013048 <_malloc_r+0xb4>)
 8012fb2:	6814      	ldr	r4, [r2, #0]
 8012fb4:	0021      	movs	r1, r4
 8012fb6:	2900      	cmp	r1, #0
 8012fb8:	d119      	bne.n	8012fee <_malloc_r+0x5a>
 8012fba:	4c24      	ldr	r4, [pc, #144]	; (801304c <_malloc_r+0xb8>)
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d103      	bne.n	8012fca <_malloc_r+0x36>
 8012fc2:	0030      	movs	r0, r6
 8012fc4:	f000 faf8 	bl	80135b8 <_sbrk_r>
 8012fc8:	6020      	str	r0, [r4, #0]
 8012fca:	0029      	movs	r1, r5
 8012fcc:	0030      	movs	r0, r6
 8012fce:	f000 faf3 	bl	80135b8 <_sbrk_r>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	d12b      	bne.n	801302e <_malloc_r+0x9a>
 8012fd6:	230c      	movs	r3, #12
 8012fd8:	0030      	movs	r0, r6
 8012fda:	6033      	str	r3, [r6, #0]
 8012fdc:	f000 fe82 	bl	8013ce4 <__malloc_unlock>
 8012fe0:	e003      	b.n	8012fea <_malloc_r+0x56>
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	dadf      	bge.n	8012fa6 <_malloc_r+0x12>
 8012fe6:	230c      	movs	r3, #12
 8012fe8:	6033      	str	r3, [r6, #0]
 8012fea:	2000      	movs	r0, #0
 8012fec:	bd70      	pop	{r4, r5, r6, pc}
 8012fee:	680b      	ldr	r3, [r1, #0]
 8012ff0:	1b5b      	subs	r3, r3, r5
 8012ff2:	d419      	bmi.n	8013028 <_malloc_r+0x94>
 8012ff4:	2b0b      	cmp	r3, #11
 8012ff6:	d903      	bls.n	8013000 <_malloc_r+0x6c>
 8012ff8:	600b      	str	r3, [r1, #0]
 8012ffa:	18cc      	adds	r4, r1, r3
 8012ffc:	6025      	str	r5, [r4, #0]
 8012ffe:	e003      	b.n	8013008 <_malloc_r+0x74>
 8013000:	684b      	ldr	r3, [r1, #4]
 8013002:	428c      	cmp	r4, r1
 8013004:	d10d      	bne.n	8013022 <_malloc_r+0x8e>
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	0030      	movs	r0, r6
 801300a:	f000 fe6b 	bl	8013ce4 <__malloc_unlock>
 801300e:	0020      	movs	r0, r4
 8013010:	2207      	movs	r2, #7
 8013012:	300b      	adds	r0, #11
 8013014:	1d23      	adds	r3, r4, #4
 8013016:	4390      	bics	r0, r2
 8013018:	1ac3      	subs	r3, r0, r3
 801301a:	d0e7      	beq.n	8012fec <_malloc_r+0x58>
 801301c:	425a      	negs	r2, r3
 801301e:	50e2      	str	r2, [r4, r3]
 8013020:	e7e4      	b.n	8012fec <_malloc_r+0x58>
 8013022:	6063      	str	r3, [r4, #4]
 8013024:	000c      	movs	r4, r1
 8013026:	e7ef      	b.n	8013008 <_malloc_r+0x74>
 8013028:	000c      	movs	r4, r1
 801302a:	6849      	ldr	r1, [r1, #4]
 801302c:	e7c3      	b.n	8012fb6 <_malloc_r+0x22>
 801302e:	2303      	movs	r3, #3
 8013030:	1cc4      	adds	r4, r0, #3
 8013032:	439c      	bics	r4, r3
 8013034:	42a0      	cmp	r0, r4
 8013036:	d0e1      	beq.n	8012ffc <_malloc_r+0x68>
 8013038:	1a21      	subs	r1, r4, r0
 801303a:	0030      	movs	r0, r6
 801303c:	f000 fabc 	bl	80135b8 <_sbrk_r>
 8013040:	1c43      	adds	r3, r0, #1
 8013042:	d1db      	bne.n	8012ffc <_malloc_r+0x68>
 8013044:	e7c7      	b.n	8012fd6 <_malloc_r+0x42>
 8013046:	46c0      	nop			; (mov r8, r8)
 8013048:	20003578 	.word	0x20003578
 801304c:	2000357c 	.word	0x2000357c

08013050 <__sfputc_r>:
 8013050:	6893      	ldr	r3, [r2, #8]
 8013052:	b510      	push	{r4, lr}
 8013054:	3b01      	subs	r3, #1
 8013056:	6093      	str	r3, [r2, #8]
 8013058:	2b00      	cmp	r3, #0
 801305a:	da04      	bge.n	8013066 <__sfputc_r+0x16>
 801305c:	6994      	ldr	r4, [r2, #24]
 801305e:	42a3      	cmp	r3, r4
 8013060:	db07      	blt.n	8013072 <__sfputc_r+0x22>
 8013062:	290a      	cmp	r1, #10
 8013064:	d005      	beq.n	8013072 <__sfputc_r+0x22>
 8013066:	6813      	ldr	r3, [r2, #0]
 8013068:	1c58      	adds	r0, r3, #1
 801306a:	6010      	str	r0, [r2, #0]
 801306c:	7019      	strb	r1, [r3, #0]
 801306e:	0008      	movs	r0, r1
 8013070:	bd10      	pop	{r4, pc}
 8013072:	f000 fafd 	bl	8013670 <__swbuf_r>
 8013076:	0001      	movs	r1, r0
 8013078:	e7f9      	b.n	801306e <__sfputc_r+0x1e>

0801307a <__sfputs_r>:
 801307a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801307c:	0006      	movs	r6, r0
 801307e:	000f      	movs	r7, r1
 8013080:	0014      	movs	r4, r2
 8013082:	18d5      	adds	r5, r2, r3
 8013084:	42ac      	cmp	r4, r5
 8013086:	d101      	bne.n	801308c <__sfputs_r+0x12>
 8013088:	2000      	movs	r0, #0
 801308a:	e007      	b.n	801309c <__sfputs_r+0x22>
 801308c:	7821      	ldrb	r1, [r4, #0]
 801308e:	003a      	movs	r2, r7
 8013090:	0030      	movs	r0, r6
 8013092:	f7ff ffdd 	bl	8013050 <__sfputc_r>
 8013096:	3401      	adds	r4, #1
 8013098:	1c43      	adds	r3, r0, #1
 801309a:	d1f3      	bne.n	8013084 <__sfputs_r+0xa>
 801309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130a0 <_vfiprintf_r>:
 80130a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130a2:	b0a1      	sub	sp, #132	; 0x84
 80130a4:	9003      	str	r0, [sp, #12]
 80130a6:	000f      	movs	r7, r1
 80130a8:	0016      	movs	r6, r2
 80130aa:	001d      	movs	r5, r3
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d005      	beq.n	80130bc <_vfiprintf_r+0x1c>
 80130b0:	6983      	ldr	r3, [r0, #24]
 80130b2:	9305      	str	r3, [sp, #20]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d101      	bne.n	80130bc <_vfiprintf_r+0x1c>
 80130b8:	f000 fd08 	bl	8013acc <__sinit>
 80130bc:	4b7b      	ldr	r3, [pc, #492]	; (80132ac <_vfiprintf_r+0x20c>)
 80130be:	429f      	cmp	r7, r3
 80130c0:	d15c      	bne.n	801317c <_vfiprintf_r+0xdc>
 80130c2:	9b03      	ldr	r3, [sp, #12]
 80130c4:	685f      	ldr	r7, [r3, #4]
 80130c6:	89bb      	ldrh	r3, [r7, #12]
 80130c8:	071b      	lsls	r3, r3, #28
 80130ca:	d563      	bpl.n	8013194 <_vfiprintf_r+0xf4>
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d060      	beq.n	8013194 <_vfiprintf_r+0xf4>
 80130d2:	2300      	movs	r3, #0
 80130d4:	ac08      	add	r4, sp, #32
 80130d6:	6163      	str	r3, [r4, #20]
 80130d8:	3320      	adds	r3, #32
 80130da:	7663      	strb	r3, [r4, #25]
 80130dc:	3310      	adds	r3, #16
 80130de:	76a3      	strb	r3, [r4, #26]
 80130e0:	9507      	str	r5, [sp, #28]
 80130e2:	0035      	movs	r5, r6
 80130e4:	782b      	ldrb	r3, [r5, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d001      	beq.n	80130ee <_vfiprintf_r+0x4e>
 80130ea:	2b25      	cmp	r3, #37	; 0x25
 80130ec:	d15c      	bne.n	80131a8 <_vfiprintf_r+0x108>
 80130ee:	1bab      	subs	r3, r5, r6
 80130f0:	9305      	str	r3, [sp, #20]
 80130f2:	d00c      	beq.n	801310e <_vfiprintf_r+0x6e>
 80130f4:	0032      	movs	r2, r6
 80130f6:	0039      	movs	r1, r7
 80130f8:	9803      	ldr	r0, [sp, #12]
 80130fa:	f7ff ffbe 	bl	801307a <__sfputs_r>
 80130fe:	1c43      	adds	r3, r0, #1
 8013100:	d100      	bne.n	8013104 <_vfiprintf_r+0x64>
 8013102:	e0c4      	b.n	801328e <_vfiprintf_r+0x1ee>
 8013104:	6962      	ldr	r2, [r4, #20]
 8013106:	9b05      	ldr	r3, [sp, #20]
 8013108:	4694      	mov	ip, r2
 801310a:	4463      	add	r3, ip
 801310c:	6163      	str	r3, [r4, #20]
 801310e:	782b      	ldrb	r3, [r5, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d100      	bne.n	8013116 <_vfiprintf_r+0x76>
 8013114:	e0bb      	b.n	801328e <_vfiprintf_r+0x1ee>
 8013116:	2201      	movs	r2, #1
 8013118:	2300      	movs	r3, #0
 801311a:	4252      	negs	r2, r2
 801311c:	6062      	str	r2, [r4, #4]
 801311e:	a904      	add	r1, sp, #16
 8013120:	3254      	adds	r2, #84	; 0x54
 8013122:	1852      	adds	r2, r2, r1
 8013124:	1c6e      	adds	r6, r5, #1
 8013126:	6023      	str	r3, [r4, #0]
 8013128:	60e3      	str	r3, [r4, #12]
 801312a:	60a3      	str	r3, [r4, #8]
 801312c:	7013      	strb	r3, [r2, #0]
 801312e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013130:	7831      	ldrb	r1, [r6, #0]
 8013132:	2205      	movs	r2, #5
 8013134:	485e      	ldr	r0, [pc, #376]	; (80132b0 <_vfiprintf_r+0x210>)
 8013136:	f000 fdc9 	bl	8013ccc <memchr>
 801313a:	1c75      	adds	r5, r6, #1
 801313c:	2800      	cmp	r0, #0
 801313e:	d135      	bne.n	80131ac <_vfiprintf_r+0x10c>
 8013140:	6822      	ldr	r2, [r4, #0]
 8013142:	06d3      	lsls	r3, r2, #27
 8013144:	d504      	bpl.n	8013150 <_vfiprintf_r+0xb0>
 8013146:	2353      	movs	r3, #83	; 0x53
 8013148:	a904      	add	r1, sp, #16
 801314a:	185b      	adds	r3, r3, r1
 801314c:	2120      	movs	r1, #32
 801314e:	7019      	strb	r1, [r3, #0]
 8013150:	0713      	lsls	r3, r2, #28
 8013152:	d504      	bpl.n	801315e <_vfiprintf_r+0xbe>
 8013154:	2353      	movs	r3, #83	; 0x53
 8013156:	a904      	add	r1, sp, #16
 8013158:	185b      	adds	r3, r3, r1
 801315a:	212b      	movs	r1, #43	; 0x2b
 801315c:	7019      	strb	r1, [r3, #0]
 801315e:	7833      	ldrb	r3, [r6, #0]
 8013160:	2b2a      	cmp	r3, #42	; 0x2a
 8013162:	d02c      	beq.n	80131be <_vfiprintf_r+0x11e>
 8013164:	0035      	movs	r5, r6
 8013166:	2100      	movs	r1, #0
 8013168:	200a      	movs	r0, #10
 801316a:	68e3      	ldr	r3, [r4, #12]
 801316c:	782a      	ldrb	r2, [r5, #0]
 801316e:	1c6e      	adds	r6, r5, #1
 8013170:	3a30      	subs	r2, #48	; 0x30
 8013172:	2a09      	cmp	r2, #9
 8013174:	d964      	bls.n	8013240 <_vfiprintf_r+0x1a0>
 8013176:	2900      	cmp	r1, #0
 8013178:	d02e      	beq.n	80131d8 <_vfiprintf_r+0x138>
 801317a:	e026      	b.n	80131ca <_vfiprintf_r+0x12a>
 801317c:	4b4d      	ldr	r3, [pc, #308]	; (80132b4 <_vfiprintf_r+0x214>)
 801317e:	429f      	cmp	r7, r3
 8013180:	d102      	bne.n	8013188 <_vfiprintf_r+0xe8>
 8013182:	9b03      	ldr	r3, [sp, #12]
 8013184:	689f      	ldr	r7, [r3, #8]
 8013186:	e79e      	b.n	80130c6 <_vfiprintf_r+0x26>
 8013188:	4b4b      	ldr	r3, [pc, #300]	; (80132b8 <_vfiprintf_r+0x218>)
 801318a:	429f      	cmp	r7, r3
 801318c:	d19b      	bne.n	80130c6 <_vfiprintf_r+0x26>
 801318e:	9b03      	ldr	r3, [sp, #12]
 8013190:	68df      	ldr	r7, [r3, #12]
 8013192:	e798      	b.n	80130c6 <_vfiprintf_r+0x26>
 8013194:	0039      	movs	r1, r7
 8013196:	9803      	ldr	r0, [sp, #12]
 8013198:	f000 fac0 	bl	801371c <__swsetup_r>
 801319c:	2800      	cmp	r0, #0
 801319e:	d098      	beq.n	80130d2 <_vfiprintf_r+0x32>
 80131a0:	2001      	movs	r0, #1
 80131a2:	4240      	negs	r0, r0
 80131a4:	b021      	add	sp, #132	; 0x84
 80131a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131a8:	3501      	adds	r5, #1
 80131aa:	e79b      	b.n	80130e4 <_vfiprintf_r+0x44>
 80131ac:	4b40      	ldr	r3, [pc, #256]	; (80132b0 <_vfiprintf_r+0x210>)
 80131ae:	6822      	ldr	r2, [r4, #0]
 80131b0:	1ac0      	subs	r0, r0, r3
 80131b2:	2301      	movs	r3, #1
 80131b4:	4083      	lsls	r3, r0
 80131b6:	4313      	orrs	r3, r2
 80131b8:	6023      	str	r3, [r4, #0]
 80131ba:	002e      	movs	r6, r5
 80131bc:	e7b8      	b.n	8013130 <_vfiprintf_r+0x90>
 80131be:	9b07      	ldr	r3, [sp, #28]
 80131c0:	1d19      	adds	r1, r3, #4
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	9107      	str	r1, [sp, #28]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	db01      	blt.n	80131ce <_vfiprintf_r+0x12e>
 80131ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80131cc:	e004      	b.n	80131d8 <_vfiprintf_r+0x138>
 80131ce:	425b      	negs	r3, r3
 80131d0:	60e3      	str	r3, [r4, #12]
 80131d2:	2302      	movs	r3, #2
 80131d4:	4313      	orrs	r3, r2
 80131d6:	6023      	str	r3, [r4, #0]
 80131d8:	782b      	ldrb	r3, [r5, #0]
 80131da:	2b2e      	cmp	r3, #46	; 0x2e
 80131dc:	d10a      	bne.n	80131f4 <_vfiprintf_r+0x154>
 80131de:	786b      	ldrb	r3, [r5, #1]
 80131e0:	2b2a      	cmp	r3, #42	; 0x2a
 80131e2:	d135      	bne.n	8013250 <_vfiprintf_r+0x1b0>
 80131e4:	9b07      	ldr	r3, [sp, #28]
 80131e6:	3502      	adds	r5, #2
 80131e8:	1d1a      	adds	r2, r3, #4
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	9207      	str	r2, [sp, #28]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	db2b      	blt.n	801324a <_vfiprintf_r+0x1aa>
 80131f2:	9309      	str	r3, [sp, #36]	; 0x24
 80131f4:	4e31      	ldr	r6, [pc, #196]	; (80132bc <_vfiprintf_r+0x21c>)
 80131f6:	7829      	ldrb	r1, [r5, #0]
 80131f8:	2203      	movs	r2, #3
 80131fa:	0030      	movs	r0, r6
 80131fc:	f000 fd66 	bl	8013ccc <memchr>
 8013200:	2800      	cmp	r0, #0
 8013202:	d006      	beq.n	8013212 <_vfiprintf_r+0x172>
 8013204:	2340      	movs	r3, #64	; 0x40
 8013206:	1b80      	subs	r0, r0, r6
 8013208:	4083      	lsls	r3, r0
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	3501      	adds	r5, #1
 801320e:	4313      	orrs	r3, r2
 8013210:	6023      	str	r3, [r4, #0]
 8013212:	7829      	ldrb	r1, [r5, #0]
 8013214:	2206      	movs	r2, #6
 8013216:	482a      	ldr	r0, [pc, #168]	; (80132c0 <_vfiprintf_r+0x220>)
 8013218:	1c6e      	adds	r6, r5, #1
 801321a:	7621      	strb	r1, [r4, #24]
 801321c:	f000 fd56 	bl	8013ccc <memchr>
 8013220:	2800      	cmp	r0, #0
 8013222:	d03a      	beq.n	801329a <_vfiprintf_r+0x1fa>
 8013224:	4b27      	ldr	r3, [pc, #156]	; (80132c4 <_vfiprintf_r+0x224>)
 8013226:	2b00      	cmp	r3, #0
 8013228:	d125      	bne.n	8013276 <_vfiprintf_r+0x1d6>
 801322a:	2207      	movs	r2, #7
 801322c:	9b07      	ldr	r3, [sp, #28]
 801322e:	3307      	adds	r3, #7
 8013230:	4393      	bics	r3, r2
 8013232:	3308      	adds	r3, #8
 8013234:	9307      	str	r3, [sp, #28]
 8013236:	6963      	ldr	r3, [r4, #20]
 8013238:	9a04      	ldr	r2, [sp, #16]
 801323a:	189b      	adds	r3, r3, r2
 801323c:	6163      	str	r3, [r4, #20]
 801323e:	e750      	b.n	80130e2 <_vfiprintf_r+0x42>
 8013240:	4343      	muls	r3, r0
 8013242:	2101      	movs	r1, #1
 8013244:	189b      	adds	r3, r3, r2
 8013246:	0035      	movs	r5, r6
 8013248:	e790      	b.n	801316c <_vfiprintf_r+0xcc>
 801324a:	2301      	movs	r3, #1
 801324c:	425b      	negs	r3, r3
 801324e:	e7d0      	b.n	80131f2 <_vfiprintf_r+0x152>
 8013250:	2300      	movs	r3, #0
 8013252:	200a      	movs	r0, #10
 8013254:	001a      	movs	r2, r3
 8013256:	3501      	adds	r5, #1
 8013258:	6063      	str	r3, [r4, #4]
 801325a:	7829      	ldrb	r1, [r5, #0]
 801325c:	1c6e      	adds	r6, r5, #1
 801325e:	3930      	subs	r1, #48	; 0x30
 8013260:	2909      	cmp	r1, #9
 8013262:	d903      	bls.n	801326c <_vfiprintf_r+0x1cc>
 8013264:	2b00      	cmp	r3, #0
 8013266:	d0c5      	beq.n	80131f4 <_vfiprintf_r+0x154>
 8013268:	9209      	str	r2, [sp, #36]	; 0x24
 801326a:	e7c3      	b.n	80131f4 <_vfiprintf_r+0x154>
 801326c:	4342      	muls	r2, r0
 801326e:	2301      	movs	r3, #1
 8013270:	1852      	adds	r2, r2, r1
 8013272:	0035      	movs	r5, r6
 8013274:	e7f1      	b.n	801325a <_vfiprintf_r+0x1ba>
 8013276:	ab07      	add	r3, sp, #28
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	003a      	movs	r2, r7
 801327c:	4b12      	ldr	r3, [pc, #72]	; (80132c8 <_vfiprintf_r+0x228>)
 801327e:	0021      	movs	r1, r4
 8013280:	9803      	ldr	r0, [sp, #12]
 8013282:	e000      	b.n	8013286 <_vfiprintf_r+0x1e6>
 8013284:	bf00      	nop
 8013286:	9004      	str	r0, [sp, #16]
 8013288:	9b04      	ldr	r3, [sp, #16]
 801328a:	3301      	adds	r3, #1
 801328c:	d1d3      	bne.n	8013236 <_vfiprintf_r+0x196>
 801328e:	89bb      	ldrh	r3, [r7, #12]
 8013290:	065b      	lsls	r3, r3, #25
 8013292:	d500      	bpl.n	8013296 <_vfiprintf_r+0x1f6>
 8013294:	e784      	b.n	80131a0 <_vfiprintf_r+0x100>
 8013296:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013298:	e784      	b.n	80131a4 <_vfiprintf_r+0x104>
 801329a:	ab07      	add	r3, sp, #28
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	003a      	movs	r2, r7
 80132a0:	4b09      	ldr	r3, [pc, #36]	; (80132c8 <_vfiprintf_r+0x228>)
 80132a2:	0021      	movs	r1, r4
 80132a4:	9803      	ldr	r0, [sp, #12]
 80132a6:	f000 f87f 	bl	80133a8 <_printf_i>
 80132aa:	e7ec      	b.n	8013286 <_vfiprintf_r+0x1e6>
 80132ac:	08017994 	.word	0x08017994
 80132b0:	0801793c 	.word	0x0801793c
 80132b4:	080179b4 	.word	0x080179b4
 80132b8:	08017974 	.word	0x08017974
 80132bc:	08017942 	.word	0x08017942
 80132c0:	08017946 	.word	0x08017946
 80132c4:	00000000 	.word	0x00000000
 80132c8:	0801307b 	.word	0x0801307b

080132cc <_printf_common>:
 80132cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132ce:	0015      	movs	r5, r2
 80132d0:	9301      	str	r3, [sp, #4]
 80132d2:	688a      	ldr	r2, [r1, #8]
 80132d4:	690b      	ldr	r3, [r1, #16]
 80132d6:	9000      	str	r0, [sp, #0]
 80132d8:	000c      	movs	r4, r1
 80132da:	4293      	cmp	r3, r2
 80132dc:	da00      	bge.n	80132e0 <_printf_common+0x14>
 80132de:	0013      	movs	r3, r2
 80132e0:	0022      	movs	r2, r4
 80132e2:	602b      	str	r3, [r5, #0]
 80132e4:	3243      	adds	r2, #67	; 0x43
 80132e6:	7812      	ldrb	r2, [r2, #0]
 80132e8:	2a00      	cmp	r2, #0
 80132ea:	d001      	beq.n	80132f0 <_printf_common+0x24>
 80132ec:	3301      	adds	r3, #1
 80132ee:	602b      	str	r3, [r5, #0]
 80132f0:	6823      	ldr	r3, [r4, #0]
 80132f2:	069b      	lsls	r3, r3, #26
 80132f4:	d502      	bpl.n	80132fc <_printf_common+0x30>
 80132f6:	682b      	ldr	r3, [r5, #0]
 80132f8:	3302      	adds	r3, #2
 80132fa:	602b      	str	r3, [r5, #0]
 80132fc:	2706      	movs	r7, #6
 80132fe:	6823      	ldr	r3, [r4, #0]
 8013300:	401f      	ands	r7, r3
 8013302:	d027      	beq.n	8013354 <_printf_common+0x88>
 8013304:	0023      	movs	r3, r4
 8013306:	3343      	adds	r3, #67	; 0x43
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	1e5a      	subs	r2, r3, #1
 801330c:	4193      	sbcs	r3, r2
 801330e:	6822      	ldr	r2, [r4, #0]
 8013310:	0692      	lsls	r2, r2, #26
 8013312:	d430      	bmi.n	8013376 <_printf_common+0xaa>
 8013314:	0022      	movs	r2, r4
 8013316:	9901      	ldr	r1, [sp, #4]
 8013318:	3243      	adds	r2, #67	; 0x43
 801331a:	9800      	ldr	r0, [sp, #0]
 801331c:	9e08      	ldr	r6, [sp, #32]
 801331e:	47b0      	blx	r6
 8013320:	1c43      	adds	r3, r0, #1
 8013322:	d025      	beq.n	8013370 <_printf_common+0xa4>
 8013324:	2306      	movs	r3, #6
 8013326:	6820      	ldr	r0, [r4, #0]
 8013328:	682a      	ldr	r2, [r5, #0]
 801332a:	68e1      	ldr	r1, [r4, #12]
 801332c:	4003      	ands	r3, r0
 801332e:	2500      	movs	r5, #0
 8013330:	2b04      	cmp	r3, #4
 8013332:	d103      	bne.n	801333c <_printf_common+0x70>
 8013334:	1a8d      	subs	r5, r1, r2
 8013336:	43eb      	mvns	r3, r5
 8013338:	17db      	asrs	r3, r3, #31
 801333a:	401d      	ands	r5, r3
 801333c:	68a3      	ldr	r3, [r4, #8]
 801333e:	6922      	ldr	r2, [r4, #16]
 8013340:	4293      	cmp	r3, r2
 8013342:	dd01      	ble.n	8013348 <_printf_common+0x7c>
 8013344:	1a9b      	subs	r3, r3, r2
 8013346:	18ed      	adds	r5, r5, r3
 8013348:	2700      	movs	r7, #0
 801334a:	42bd      	cmp	r5, r7
 801334c:	d120      	bne.n	8013390 <_printf_common+0xc4>
 801334e:	2000      	movs	r0, #0
 8013350:	e010      	b.n	8013374 <_printf_common+0xa8>
 8013352:	3701      	adds	r7, #1
 8013354:	68e3      	ldr	r3, [r4, #12]
 8013356:	682a      	ldr	r2, [r5, #0]
 8013358:	1a9b      	subs	r3, r3, r2
 801335a:	42bb      	cmp	r3, r7
 801335c:	ddd2      	ble.n	8013304 <_printf_common+0x38>
 801335e:	0022      	movs	r2, r4
 8013360:	2301      	movs	r3, #1
 8013362:	3219      	adds	r2, #25
 8013364:	9901      	ldr	r1, [sp, #4]
 8013366:	9800      	ldr	r0, [sp, #0]
 8013368:	9e08      	ldr	r6, [sp, #32]
 801336a:	47b0      	blx	r6
 801336c:	1c43      	adds	r3, r0, #1
 801336e:	d1f0      	bne.n	8013352 <_printf_common+0x86>
 8013370:	2001      	movs	r0, #1
 8013372:	4240      	negs	r0, r0
 8013374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013376:	2030      	movs	r0, #48	; 0x30
 8013378:	18e1      	adds	r1, r4, r3
 801337a:	3143      	adds	r1, #67	; 0x43
 801337c:	7008      	strb	r0, [r1, #0]
 801337e:	0021      	movs	r1, r4
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	3145      	adds	r1, #69	; 0x45
 8013384:	7809      	ldrb	r1, [r1, #0]
 8013386:	18a2      	adds	r2, r4, r2
 8013388:	3243      	adds	r2, #67	; 0x43
 801338a:	3302      	adds	r3, #2
 801338c:	7011      	strb	r1, [r2, #0]
 801338e:	e7c1      	b.n	8013314 <_printf_common+0x48>
 8013390:	0022      	movs	r2, r4
 8013392:	2301      	movs	r3, #1
 8013394:	321a      	adds	r2, #26
 8013396:	9901      	ldr	r1, [sp, #4]
 8013398:	9800      	ldr	r0, [sp, #0]
 801339a:	9e08      	ldr	r6, [sp, #32]
 801339c:	47b0      	blx	r6
 801339e:	1c43      	adds	r3, r0, #1
 80133a0:	d0e6      	beq.n	8013370 <_printf_common+0xa4>
 80133a2:	3701      	adds	r7, #1
 80133a4:	e7d1      	b.n	801334a <_printf_common+0x7e>
	...

080133a8 <_printf_i>:
 80133a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133aa:	b089      	sub	sp, #36	; 0x24
 80133ac:	9204      	str	r2, [sp, #16]
 80133ae:	000a      	movs	r2, r1
 80133b0:	3243      	adds	r2, #67	; 0x43
 80133b2:	9305      	str	r3, [sp, #20]
 80133b4:	9003      	str	r0, [sp, #12]
 80133b6:	9202      	str	r2, [sp, #8]
 80133b8:	7e0a      	ldrb	r2, [r1, #24]
 80133ba:	000c      	movs	r4, r1
 80133bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133be:	2a6e      	cmp	r2, #110	; 0x6e
 80133c0:	d100      	bne.n	80133c4 <_printf_i+0x1c>
 80133c2:	e086      	b.n	80134d2 <_printf_i+0x12a>
 80133c4:	d81f      	bhi.n	8013406 <_printf_i+0x5e>
 80133c6:	2a63      	cmp	r2, #99	; 0x63
 80133c8:	d033      	beq.n	8013432 <_printf_i+0x8a>
 80133ca:	d808      	bhi.n	80133de <_printf_i+0x36>
 80133cc:	2a00      	cmp	r2, #0
 80133ce:	d100      	bne.n	80133d2 <_printf_i+0x2a>
 80133d0:	e08c      	b.n	80134ec <_printf_i+0x144>
 80133d2:	2a58      	cmp	r2, #88	; 0x58
 80133d4:	d04d      	beq.n	8013472 <_printf_i+0xca>
 80133d6:	0025      	movs	r5, r4
 80133d8:	3542      	adds	r5, #66	; 0x42
 80133da:	702a      	strb	r2, [r5, #0]
 80133dc:	e030      	b.n	8013440 <_printf_i+0x98>
 80133de:	2a64      	cmp	r2, #100	; 0x64
 80133e0:	d001      	beq.n	80133e6 <_printf_i+0x3e>
 80133e2:	2a69      	cmp	r2, #105	; 0x69
 80133e4:	d1f7      	bne.n	80133d6 <_printf_i+0x2e>
 80133e6:	6819      	ldr	r1, [r3, #0]
 80133e8:	6825      	ldr	r5, [r4, #0]
 80133ea:	1d0a      	adds	r2, r1, #4
 80133ec:	0628      	lsls	r0, r5, #24
 80133ee:	d529      	bpl.n	8013444 <_printf_i+0x9c>
 80133f0:	6808      	ldr	r0, [r1, #0]
 80133f2:	601a      	str	r2, [r3, #0]
 80133f4:	2800      	cmp	r0, #0
 80133f6:	da03      	bge.n	8013400 <_printf_i+0x58>
 80133f8:	232d      	movs	r3, #45	; 0x2d
 80133fa:	9a02      	ldr	r2, [sp, #8]
 80133fc:	4240      	negs	r0, r0
 80133fe:	7013      	strb	r3, [r2, #0]
 8013400:	4e6b      	ldr	r6, [pc, #428]	; (80135b0 <_printf_i+0x208>)
 8013402:	270a      	movs	r7, #10
 8013404:	e04f      	b.n	80134a6 <_printf_i+0xfe>
 8013406:	2a73      	cmp	r2, #115	; 0x73
 8013408:	d074      	beq.n	80134f4 <_printf_i+0x14c>
 801340a:	d808      	bhi.n	801341e <_printf_i+0x76>
 801340c:	2a6f      	cmp	r2, #111	; 0x6f
 801340e:	d01f      	beq.n	8013450 <_printf_i+0xa8>
 8013410:	2a70      	cmp	r2, #112	; 0x70
 8013412:	d1e0      	bne.n	80133d6 <_printf_i+0x2e>
 8013414:	2220      	movs	r2, #32
 8013416:	6809      	ldr	r1, [r1, #0]
 8013418:	430a      	orrs	r2, r1
 801341a:	6022      	str	r2, [r4, #0]
 801341c:	e003      	b.n	8013426 <_printf_i+0x7e>
 801341e:	2a75      	cmp	r2, #117	; 0x75
 8013420:	d016      	beq.n	8013450 <_printf_i+0xa8>
 8013422:	2a78      	cmp	r2, #120	; 0x78
 8013424:	d1d7      	bne.n	80133d6 <_printf_i+0x2e>
 8013426:	0022      	movs	r2, r4
 8013428:	2178      	movs	r1, #120	; 0x78
 801342a:	3245      	adds	r2, #69	; 0x45
 801342c:	7011      	strb	r1, [r2, #0]
 801342e:	4e61      	ldr	r6, [pc, #388]	; (80135b4 <_printf_i+0x20c>)
 8013430:	e022      	b.n	8013478 <_printf_i+0xd0>
 8013432:	0025      	movs	r5, r4
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	3542      	adds	r5, #66	; 0x42
 8013438:	1d11      	adds	r1, r2, #4
 801343a:	6019      	str	r1, [r3, #0]
 801343c:	6813      	ldr	r3, [r2, #0]
 801343e:	702b      	strb	r3, [r5, #0]
 8013440:	2301      	movs	r3, #1
 8013442:	e065      	b.n	8013510 <_printf_i+0x168>
 8013444:	6808      	ldr	r0, [r1, #0]
 8013446:	601a      	str	r2, [r3, #0]
 8013448:	0669      	lsls	r1, r5, #25
 801344a:	d5d3      	bpl.n	80133f4 <_printf_i+0x4c>
 801344c:	b200      	sxth	r0, r0
 801344e:	e7d1      	b.n	80133f4 <_printf_i+0x4c>
 8013450:	6819      	ldr	r1, [r3, #0]
 8013452:	6825      	ldr	r5, [r4, #0]
 8013454:	1d08      	adds	r0, r1, #4
 8013456:	6018      	str	r0, [r3, #0]
 8013458:	6808      	ldr	r0, [r1, #0]
 801345a:	062e      	lsls	r6, r5, #24
 801345c:	d505      	bpl.n	801346a <_printf_i+0xc2>
 801345e:	4e54      	ldr	r6, [pc, #336]	; (80135b0 <_printf_i+0x208>)
 8013460:	2708      	movs	r7, #8
 8013462:	2a6f      	cmp	r2, #111	; 0x6f
 8013464:	d01b      	beq.n	801349e <_printf_i+0xf6>
 8013466:	270a      	movs	r7, #10
 8013468:	e019      	b.n	801349e <_printf_i+0xf6>
 801346a:	066d      	lsls	r5, r5, #25
 801346c:	d5f7      	bpl.n	801345e <_printf_i+0xb6>
 801346e:	b280      	uxth	r0, r0
 8013470:	e7f5      	b.n	801345e <_printf_i+0xb6>
 8013472:	3145      	adds	r1, #69	; 0x45
 8013474:	4e4e      	ldr	r6, [pc, #312]	; (80135b0 <_printf_i+0x208>)
 8013476:	700a      	strb	r2, [r1, #0]
 8013478:	6818      	ldr	r0, [r3, #0]
 801347a:	6822      	ldr	r2, [r4, #0]
 801347c:	1d01      	adds	r1, r0, #4
 801347e:	6800      	ldr	r0, [r0, #0]
 8013480:	6019      	str	r1, [r3, #0]
 8013482:	0615      	lsls	r5, r2, #24
 8013484:	d521      	bpl.n	80134ca <_printf_i+0x122>
 8013486:	07d3      	lsls	r3, r2, #31
 8013488:	d502      	bpl.n	8013490 <_printf_i+0xe8>
 801348a:	2320      	movs	r3, #32
 801348c:	431a      	orrs	r2, r3
 801348e:	6022      	str	r2, [r4, #0]
 8013490:	2710      	movs	r7, #16
 8013492:	2800      	cmp	r0, #0
 8013494:	d103      	bne.n	801349e <_printf_i+0xf6>
 8013496:	2320      	movs	r3, #32
 8013498:	6822      	ldr	r2, [r4, #0]
 801349a:	439a      	bics	r2, r3
 801349c:	6022      	str	r2, [r4, #0]
 801349e:	0023      	movs	r3, r4
 80134a0:	2200      	movs	r2, #0
 80134a2:	3343      	adds	r3, #67	; 0x43
 80134a4:	701a      	strb	r2, [r3, #0]
 80134a6:	6863      	ldr	r3, [r4, #4]
 80134a8:	60a3      	str	r3, [r4, #8]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	db58      	blt.n	8013560 <_printf_i+0x1b8>
 80134ae:	2204      	movs	r2, #4
 80134b0:	6821      	ldr	r1, [r4, #0]
 80134b2:	4391      	bics	r1, r2
 80134b4:	6021      	str	r1, [r4, #0]
 80134b6:	2800      	cmp	r0, #0
 80134b8:	d154      	bne.n	8013564 <_printf_i+0x1bc>
 80134ba:	9d02      	ldr	r5, [sp, #8]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d05a      	beq.n	8013576 <_printf_i+0x1ce>
 80134c0:	0025      	movs	r5, r4
 80134c2:	7833      	ldrb	r3, [r6, #0]
 80134c4:	3542      	adds	r5, #66	; 0x42
 80134c6:	702b      	strb	r3, [r5, #0]
 80134c8:	e055      	b.n	8013576 <_printf_i+0x1ce>
 80134ca:	0655      	lsls	r5, r2, #25
 80134cc:	d5db      	bpl.n	8013486 <_printf_i+0xde>
 80134ce:	b280      	uxth	r0, r0
 80134d0:	e7d9      	b.n	8013486 <_printf_i+0xde>
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	680d      	ldr	r5, [r1, #0]
 80134d6:	1d10      	adds	r0, r2, #4
 80134d8:	6949      	ldr	r1, [r1, #20]
 80134da:	6018      	str	r0, [r3, #0]
 80134dc:	6813      	ldr	r3, [r2, #0]
 80134de:	062e      	lsls	r6, r5, #24
 80134e0:	d501      	bpl.n	80134e6 <_printf_i+0x13e>
 80134e2:	6019      	str	r1, [r3, #0]
 80134e4:	e002      	b.n	80134ec <_printf_i+0x144>
 80134e6:	066d      	lsls	r5, r5, #25
 80134e8:	d5fb      	bpl.n	80134e2 <_printf_i+0x13a>
 80134ea:	8019      	strh	r1, [r3, #0]
 80134ec:	2300      	movs	r3, #0
 80134ee:	9d02      	ldr	r5, [sp, #8]
 80134f0:	6123      	str	r3, [r4, #16]
 80134f2:	e04f      	b.n	8013594 <_printf_i+0x1ec>
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	1d11      	adds	r1, r2, #4
 80134f8:	6019      	str	r1, [r3, #0]
 80134fa:	6815      	ldr	r5, [r2, #0]
 80134fc:	2100      	movs	r1, #0
 80134fe:	6862      	ldr	r2, [r4, #4]
 8013500:	0028      	movs	r0, r5
 8013502:	f000 fbe3 	bl	8013ccc <memchr>
 8013506:	2800      	cmp	r0, #0
 8013508:	d001      	beq.n	801350e <_printf_i+0x166>
 801350a:	1b40      	subs	r0, r0, r5
 801350c:	6060      	str	r0, [r4, #4]
 801350e:	6863      	ldr	r3, [r4, #4]
 8013510:	6123      	str	r3, [r4, #16]
 8013512:	2300      	movs	r3, #0
 8013514:	9a02      	ldr	r2, [sp, #8]
 8013516:	7013      	strb	r3, [r2, #0]
 8013518:	e03c      	b.n	8013594 <_printf_i+0x1ec>
 801351a:	6923      	ldr	r3, [r4, #16]
 801351c:	002a      	movs	r2, r5
 801351e:	9904      	ldr	r1, [sp, #16]
 8013520:	9803      	ldr	r0, [sp, #12]
 8013522:	9d05      	ldr	r5, [sp, #20]
 8013524:	47a8      	blx	r5
 8013526:	1c43      	adds	r3, r0, #1
 8013528:	d03e      	beq.n	80135a8 <_printf_i+0x200>
 801352a:	6823      	ldr	r3, [r4, #0]
 801352c:	079b      	lsls	r3, r3, #30
 801352e:	d415      	bmi.n	801355c <_printf_i+0x1b4>
 8013530:	9b07      	ldr	r3, [sp, #28]
 8013532:	68e0      	ldr	r0, [r4, #12]
 8013534:	4298      	cmp	r0, r3
 8013536:	da39      	bge.n	80135ac <_printf_i+0x204>
 8013538:	0018      	movs	r0, r3
 801353a:	e037      	b.n	80135ac <_printf_i+0x204>
 801353c:	0022      	movs	r2, r4
 801353e:	2301      	movs	r3, #1
 8013540:	3219      	adds	r2, #25
 8013542:	9904      	ldr	r1, [sp, #16]
 8013544:	9803      	ldr	r0, [sp, #12]
 8013546:	9e05      	ldr	r6, [sp, #20]
 8013548:	47b0      	blx	r6
 801354a:	1c43      	adds	r3, r0, #1
 801354c:	d02c      	beq.n	80135a8 <_printf_i+0x200>
 801354e:	3501      	adds	r5, #1
 8013550:	68e3      	ldr	r3, [r4, #12]
 8013552:	9a07      	ldr	r2, [sp, #28]
 8013554:	1a9b      	subs	r3, r3, r2
 8013556:	42ab      	cmp	r3, r5
 8013558:	dcf0      	bgt.n	801353c <_printf_i+0x194>
 801355a:	e7e9      	b.n	8013530 <_printf_i+0x188>
 801355c:	2500      	movs	r5, #0
 801355e:	e7f7      	b.n	8013550 <_printf_i+0x1a8>
 8013560:	2800      	cmp	r0, #0
 8013562:	d0ad      	beq.n	80134c0 <_printf_i+0x118>
 8013564:	9d02      	ldr	r5, [sp, #8]
 8013566:	0039      	movs	r1, r7
 8013568:	f7ec fe5e 	bl	8000228 <__aeabi_uidivmod>
 801356c:	5c73      	ldrb	r3, [r6, r1]
 801356e:	3d01      	subs	r5, #1
 8013570:	702b      	strb	r3, [r5, #0]
 8013572:	2800      	cmp	r0, #0
 8013574:	d1f7      	bne.n	8013566 <_printf_i+0x1be>
 8013576:	2f08      	cmp	r7, #8
 8013578:	d109      	bne.n	801358e <_printf_i+0x1e6>
 801357a:	6823      	ldr	r3, [r4, #0]
 801357c:	07db      	lsls	r3, r3, #31
 801357e:	d506      	bpl.n	801358e <_printf_i+0x1e6>
 8013580:	6863      	ldr	r3, [r4, #4]
 8013582:	6922      	ldr	r2, [r4, #16]
 8013584:	4293      	cmp	r3, r2
 8013586:	dc02      	bgt.n	801358e <_printf_i+0x1e6>
 8013588:	2330      	movs	r3, #48	; 0x30
 801358a:	3d01      	subs	r5, #1
 801358c:	702b      	strb	r3, [r5, #0]
 801358e:	9b02      	ldr	r3, [sp, #8]
 8013590:	1b5b      	subs	r3, r3, r5
 8013592:	6123      	str	r3, [r4, #16]
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	aa07      	add	r2, sp, #28
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	0021      	movs	r1, r4
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	9803      	ldr	r0, [sp, #12]
 80135a0:	f7ff fe94 	bl	80132cc <_printf_common>
 80135a4:	1c43      	adds	r3, r0, #1
 80135a6:	d1b8      	bne.n	801351a <_printf_i+0x172>
 80135a8:	2001      	movs	r0, #1
 80135aa:	4240      	negs	r0, r0
 80135ac:	b009      	add	sp, #36	; 0x24
 80135ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135b0:	0801794d 	.word	0x0801794d
 80135b4:	0801795e 	.word	0x0801795e

080135b8 <_sbrk_r>:
 80135b8:	2300      	movs	r3, #0
 80135ba:	b570      	push	{r4, r5, r6, lr}
 80135bc:	4c06      	ldr	r4, [pc, #24]	; (80135d8 <_sbrk_r+0x20>)
 80135be:	0005      	movs	r5, r0
 80135c0:	0008      	movs	r0, r1
 80135c2:	6023      	str	r3, [r4, #0]
 80135c4:	f7ee feea 	bl	800239c <_sbrk>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d103      	bne.n	80135d4 <_sbrk_r+0x1c>
 80135cc:	6823      	ldr	r3, [r4, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d000      	beq.n	80135d4 <_sbrk_r+0x1c>
 80135d2:	602b      	str	r3, [r5, #0]
 80135d4:	bd70      	pop	{r4, r5, r6, pc}
 80135d6:	46c0      	nop			; (mov r8, r8)
 80135d8:	200079cc 	.word	0x200079cc

080135dc <_raise_r>:
 80135dc:	b570      	push	{r4, r5, r6, lr}
 80135de:	0004      	movs	r4, r0
 80135e0:	000d      	movs	r5, r1
 80135e2:	291f      	cmp	r1, #31
 80135e4:	d904      	bls.n	80135f0 <_raise_r+0x14>
 80135e6:	2316      	movs	r3, #22
 80135e8:	6003      	str	r3, [r0, #0]
 80135ea:	2001      	movs	r0, #1
 80135ec:	4240      	negs	r0, r0
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
 80135f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d004      	beq.n	8013600 <_raise_r+0x24>
 80135f6:	008a      	lsls	r2, r1, #2
 80135f8:	189b      	adds	r3, r3, r2
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	2a00      	cmp	r2, #0
 80135fe:	d108      	bne.n	8013612 <_raise_r+0x36>
 8013600:	0020      	movs	r0, r4
 8013602:	f000 f831 	bl	8013668 <_getpid_r>
 8013606:	002a      	movs	r2, r5
 8013608:	0001      	movs	r1, r0
 801360a:	0020      	movs	r0, r4
 801360c:	f000 f81a 	bl	8013644 <_kill_r>
 8013610:	e7ed      	b.n	80135ee <_raise_r+0x12>
 8013612:	2000      	movs	r0, #0
 8013614:	2a01      	cmp	r2, #1
 8013616:	d0ea      	beq.n	80135ee <_raise_r+0x12>
 8013618:	1c51      	adds	r1, r2, #1
 801361a:	d103      	bne.n	8013624 <_raise_r+0x48>
 801361c:	2316      	movs	r3, #22
 801361e:	3001      	adds	r0, #1
 8013620:	6023      	str	r3, [r4, #0]
 8013622:	e7e4      	b.n	80135ee <_raise_r+0x12>
 8013624:	2400      	movs	r4, #0
 8013626:	0028      	movs	r0, r5
 8013628:	601c      	str	r4, [r3, #0]
 801362a:	4790      	blx	r2
 801362c:	0020      	movs	r0, r4
 801362e:	e7de      	b.n	80135ee <_raise_r+0x12>

08013630 <raise>:
 8013630:	b510      	push	{r4, lr}
 8013632:	4b03      	ldr	r3, [pc, #12]	; (8013640 <raise+0x10>)
 8013634:	0001      	movs	r1, r0
 8013636:	6818      	ldr	r0, [r3, #0]
 8013638:	f7ff ffd0 	bl	80135dc <_raise_r>
 801363c:	bd10      	pop	{r4, pc}
 801363e:	46c0      	nop			; (mov r8, r8)
 8013640:	20000028 	.word	0x20000028

08013644 <_kill_r>:
 8013644:	2300      	movs	r3, #0
 8013646:	b570      	push	{r4, r5, r6, lr}
 8013648:	4c06      	ldr	r4, [pc, #24]	; (8013664 <_kill_r+0x20>)
 801364a:	0005      	movs	r5, r0
 801364c:	0008      	movs	r0, r1
 801364e:	0011      	movs	r1, r2
 8013650:	6023      	str	r3, [r4, #0]
 8013652:	f7ee fe21 	bl	8002298 <_kill>
 8013656:	1c43      	adds	r3, r0, #1
 8013658:	d103      	bne.n	8013662 <_kill_r+0x1e>
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d000      	beq.n	8013662 <_kill_r+0x1e>
 8013660:	602b      	str	r3, [r5, #0]
 8013662:	bd70      	pop	{r4, r5, r6, pc}
 8013664:	200079cc 	.word	0x200079cc

08013668 <_getpid_r>:
 8013668:	b510      	push	{r4, lr}
 801366a:	f7ee fe0f 	bl	800228c <_getpid>
 801366e:	bd10      	pop	{r4, pc}

08013670 <__swbuf_r>:
 8013670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013672:	0005      	movs	r5, r0
 8013674:	000e      	movs	r6, r1
 8013676:	0014      	movs	r4, r2
 8013678:	2800      	cmp	r0, #0
 801367a:	d004      	beq.n	8013686 <__swbuf_r+0x16>
 801367c:	6983      	ldr	r3, [r0, #24]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d101      	bne.n	8013686 <__swbuf_r+0x16>
 8013682:	f000 fa23 	bl	8013acc <__sinit>
 8013686:	4b22      	ldr	r3, [pc, #136]	; (8013710 <__swbuf_r+0xa0>)
 8013688:	429c      	cmp	r4, r3
 801368a:	d12d      	bne.n	80136e8 <__swbuf_r+0x78>
 801368c:	686c      	ldr	r4, [r5, #4]
 801368e:	69a3      	ldr	r3, [r4, #24]
 8013690:	60a3      	str	r3, [r4, #8]
 8013692:	89a3      	ldrh	r3, [r4, #12]
 8013694:	071b      	lsls	r3, r3, #28
 8013696:	d531      	bpl.n	80136fc <__swbuf_r+0x8c>
 8013698:	6923      	ldr	r3, [r4, #16]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d02e      	beq.n	80136fc <__swbuf_r+0x8c>
 801369e:	6823      	ldr	r3, [r4, #0]
 80136a0:	6922      	ldr	r2, [r4, #16]
 80136a2:	b2f7      	uxtb	r7, r6
 80136a4:	1a98      	subs	r0, r3, r2
 80136a6:	6963      	ldr	r3, [r4, #20]
 80136a8:	b2f6      	uxtb	r6, r6
 80136aa:	4283      	cmp	r3, r0
 80136ac:	dc05      	bgt.n	80136ba <__swbuf_r+0x4a>
 80136ae:	0021      	movs	r1, r4
 80136b0:	0028      	movs	r0, r5
 80136b2:	f000 f99d 	bl	80139f0 <_fflush_r>
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d126      	bne.n	8013708 <__swbuf_r+0x98>
 80136ba:	68a3      	ldr	r3, [r4, #8]
 80136bc:	3001      	adds	r0, #1
 80136be:	3b01      	subs	r3, #1
 80136c0:	60a3      	str	r3, [r4, #8]
 80136c2:	6823      	ldr	r3, [r4, #0]
 80136c4:	1c5a      	adds	r2, r3, #1
 80136c6:	6022      	str	r2, [r4, #0]
 80136c8:	701f      	strb	r7, [r3, #0]
 80136ca:	6963      	ldr	r3, [r4, #20]
 80136cc:	4283      	cmp	r3, r0
 80136ce:	d004      	beq.n	80136da <__swbuf_r+0x6a>
 80136d0:	89a3      	ldrh	r3, [r4, #12]
 80136d2:	07db      	lsls	r3, r3, #31
 80136d4:	d51a      	bpl.n	801370c <__swbuf_r+0x9c>
 80136d6:	2e0a      	cmp	r6, #10
 80136d8:	d118      	bne.n	801370c <__swbuf_r+0x9c>
 80136da:	0021      	movs	r1, r4
 80136dc:	0028      	movs	r0, r5
 80136de:	f000 f987 	bl	80139f0 <_fflush_r>
 80136e2:	2800      	cmp	r0, #0
 80136e4:	d012      	beq.n	801370c <__swbuf_r+0x9c>
 80136e6:	e00f      	b.n	8013708 <__swbuf_r+0x98>
 80136e8:	4b0a      	ldr	r3, [pc, #40]	; (8013714 <__swbuf_r+0xa4>)
 80136ea:	429c      	cmp	r4, r3
 80136ec:	d101      	bne.n	80136f2 <__swbuf_r+0x82>
 80136ee:	68ac      	ldr	r4, [r5, #8]
 80136f0:	e7cd      	b.n	801368e <__swbuf_r+0x1e>
 80136f2:	4b09      	ldr	r3, [pc, #36]	; (8013718 <__swbuf_r+0xa8>)
 80136f4:	429c      	cmp	r4, r3
 80136f6:	d1ca      	bne.n	801368e <__swbuf_r+0x1e>
 80136f8:	68ec      	ldr	r4, [r5, #12]
 80136fa:	e7c8      	b.n	801368e <__swbuf_r+0x1e>
 80136fc:	0021      	movs	r1, r4
 80136fe:	0028      	movs	r0, r5
 8013700:	f000 f80c 	bl	801371c <__swsetup_r>
 8013704:	2800      	cmp	r0, #0
 8013706:	d0ca      	beq.n	801369e <__swbuf_r+0x2e>
 8013708:	2601      	movs	r6, #1
 801370a:	4276      	negs	r6, r6
 801370c:	0030      	movs	r0, r6
 801370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013710:	08017994 	.word	0x08017994
 8013714:	080179b4 	.word	0x080179b4
 8013718:	08017974 	.word	0x08017974

0801371c <__swsetup_r>:
 801371c:	4b36      	ldr	r3, [pc, #216]	; (80137f8 <__swsetup_r+0xdc>)
 801371e:	b570      	push	{r4, r5, r6, lr}
 8013720:	681d      	ldr	r5, [r3, #0]
 8013722:	0006      	movs	r6, r0
 8013724:	000c      	movs	r4, r1
 8013726:	2d00      	cmp	r5, #0
 8013728:	d005      	beq.n	8013736 <__swsetup_r+0x1a>
 801372a:	69ab      	ldr	r3, [r5, #24]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d102      	bne.n	8013736 <__swsetup_r+0x1a>
 8013730:	0028      	movs	r0, r5
 8013732:	f000 f9cb 	bl	8013acc <__sinit>
 8013736:	4b31      	ldr	r3, [pc, #196]	; (80137fc <__swsetup_r+0xe0>)
 8013738:	429c      	cmp	r4, r3
 801373a:	d10f      	bne.n	801375c <__swsetup_r+0x40>
 801373c:	686c      	ldr	r4, [r5, #4]
 801373e:	230c      	movs	r3, #12
 8013740:	5ee2      	ldrsh	r2, [r4, r3]
 8013742:	b293      	uxth	r3, r2
 8013744:	0719      	lsls	r1, r3, #28
 8013746:	d42d      	bmi.n	80137a4 <__swsetup_r+0x88>
 8013748:	06d9      	lsls	r1, r3, #27
 801374a:	d411      	bmi.n	8013770 <__swsetup_r+0x54>
 801374c:	2309      	movs	r3, #9
 801374e:	2001      	movs	r0, #1
 8013750:	6033      	str	r3, [r6, #0]
 8013752:	3337      	adds	r3, #55	; 0x37
 8013754:	4313      	orrs	r3, r2
 8013756:	81a3      	strh	r3, [r4, #12]
 8013758:	4240      	negs	r0, r0
 801375a:	bd70      	pop	{r4, r5, r6, pc}
 801375c:	4b28      	ldr	r3, [pc, #160]	; (8013800 <__swsetup_r+0xe4>)
 801375e:	429c      	cmp	r4, r3
 8013760:	d101      	bne.n	8013766 <__swsetup_r+0x4a>
 8013762:	68ac      	ldr	r4, [r5, #8]
 8013764:	e7eb      	b.n	801373e <__swsetup_r+0x22>
 8013766:	4b27      	ldr	r3, [pc, #156]	; (8013804 <__swsetup_r+0xe8>)
 8013768:	429c      	cmp	r4, r3
 801376a:	d1e8      	bne.n	801373e <__swsetup_r+0x22>
 801376c:	68ec      	ldr	r4, [r5, #12]
 801376e:	e7e6      	b.n	801373e <__swsetup_r+0x22>
 8013770:	075b      	lsls	r3, r3, #29
 8013772:	d513      	bpl.n	801379c <__swsetup_r+0x80>
 8013774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013776:	2900      	cmp	r1, #0
 8013778:	d008      	beq.n	801378c <__swsetup_r+0x70>
 801377a:	0023      	movs	r3, r4
 801377c:	3344      	adds	r3, #68	; 0x44
 801377e:	4299      	cmp	r1, r3
 8013780:	d002      	beq.n	8013788 <__swsetup_r+0x6c>
 8013782:	0030      	movs	r0, r6
 8013784:	f7ff fbbc 	bl	8012f00 <_free_r>
 8013788:	2300      	movs	r3, #0
 801378a:	6363      	str	r3, [r4, #52]	; 0x34
 801378c:	2224      	movs	r2, #36	; 0x24
 801378e:	89a3      	ldrh	r3, [r4, #12]
 8013790:	4393      	bics	r3, r2
 8013792:	81a3      	strh	r3, [r4, #12]
 8013794:	2300      	movs	r3, #0
 8013796:	6063      	str	r3, [r4, #4]
 8013798:	6923      	ldr	r3, [r4, #16]
 801379a:	6023      	str	r3, [r4, #0]
 801379c:	2308      	movs	r3, #8
 801379e:	89a2      	ldrh	r2, [r4, #12]
 80137a0:	4313      	orrs	r3, r2
 80137a2:	81a3      	strh	r3, [r4, #12]
 80137a4:	6923      	ldr	r3, [r4, #16]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d10b      	bne.n	80137c2 <__swsetup_r+0xa6>
 80137aa:	21a0      	movs	r1, #160	; 0xa0
 80137ac:	2280      	movs	r2, #128	; 0x80
 80137ae:	89a3      	ldrh	r3, [r4, #12]
 80137b0:	0089      	lsls	r1, r1, #2
 80137b2:	0092      	lsls	r2, r2, #2
 80137b4:	400b      	ands	r3, r1
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d003      	beq.n	80137c2 <__swsetup_r+0xa6>
 80137ba:	0021      	movs	r1, r4
 80137bc:	0030      	movs	r0, r6
 80137be:	f000 fa41 	bl	8013c44 <__smakebuf_r>
 80137c2:	2301      	movs	r3, #1
 80137c4:	89a2      	ldrh	r2, [r4, #12]
 80137c6:	4013      	ands	r3, r2
 80137c8:	d011      	beq.n	80137ee <__swsetup_r+0xd2>
 80137ca:	2300      	movs	r3, #0
 80137cc:	60a3      	str	r3, [r4, #8]
 80137ce:	6963      	ldr	r3, [r4, #20]
 80137d0:	425b      	negs	r3, r3
 80137d2:	61a3      	str	r3, [r4, #24]
 80137d4:	2000      	movs	r0, #0
 80137d6:	6923      	ldr	r3, [r4, #16]
 80137d8:	4283      	cmp	r3, r0
 80137da:	d1be      	bne.n	801375a <__swsetup_r+0x3e>
 80137dc:	230c      	movs	r3, #12
 80137de:	5ee2      	ldrsh	r2, [r4, r3]
 80137e0:	0613      	lsls	r3, r2, #24
 80137e2:	d5ba      	bpl.n	801375a <__swsetup_r+0x3e>
 80137e4:	2340      	movs	r3, #64	; 0x40
 80137e6:	4313      	orrs	r3, r2
 80137e8:	81a3      	strh	r3, [r4, #12]
 80137ea:	3801      	subs	r0, #1
 80137ec:	e7b5      	b.n	801375a <__swsetup_r+0x3e>
 80137ee:	0792      	lsls	r2, r2, #30
 80137f0:	d400      	bmi.n	80137f4 <__swsetup_r+0xd8>
 80137f2:	6963      	ldr	r3, [r4, #20]
 80137f4:	60a3      	str	r3, [r4, #8]
 80137f6:	e7ed      	b.n	80137d4 <__swsetup_r+0xb8>
 80137f8:	20000028 	.word	0x20000028
 80137fc:	08017994 	.word	0x08017994
 8013800:	080179b4 	.word	0x080179b4
 8013804:	08017974 	.word	0x08017974

08013808 <__register_exitproc>:
 8013808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801380a:	4d30      	ldr	r5, [pc, #192]	; (80138cc <__register_exitproc+0xc4>)
 801380c:	b085      	sub	sp, #20
 801380e:	682c      	ldr	r4, [r5, #0]
 8013810:	0006      	movs	r6, r0
 8013812:	9101      	str	r1, [sp, #4]
 8013814:	0017      	movs	r7, r2
 8013816:	9302      	str	r3, [sp, #8]
 8013818:	2c00      	cmp	r4, #0
 801381a:	d10a      	bne.n	8013832 <__register_exitproc+0x2a>
 801381c:	4b2c      	ldr	r3, [pc, #176]	; (80138d0 <__register_exitproc+0xc8>)
 801381e:	4a2d      	ldr	r2, [pc, #180]	; (80138d4 <__register_exitproc+0xcc>)
 8013820:	602b      	str	r3, [r5, #0]
 8013822:	001c      	movs	r4, r3
 8013824:	2a00      	cmp	r2, #0
 8013826:	d004      	beq.n	8013832 <__register_exitproc+0x2a>
 8013828:	0019      	movs	r1, r3
 801382a:	6812      	ldr	r2, [r2, #0]
 801382c:	3188      	adds	r1, #136	; 0x88
 801382e:	9203      	str	r2, [sp, #12]
 8013830:	600a      	str	r2, [r1, #0]
 8013832:	6863      	ldr	r3, [r4, #4]
 8013834:	2b1f      	cmp	r3, #31
 8013836:	dd3d      	ble.n	80138b4 <__register_exitproc+0xac>
 8013838:	4b27      	ldr	r3, [pc, #156]	; (80138d8 <__register_exitproc+0xd0>)
 801383a:	2b00      	cmp	r3, #0
 801383c:	d103      	bne.n	8013846 <__register_exitproc+0x3e>
 801383e:	2001      	movs	r0, #1
 8013840:	4240      	negs	r0, r0
 8013842:	b005      	add	sp, #20
 8013844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013846:	208c      	movs	r0, #140	; 0x8c
 8013848:	f7ff fb34 	bl	8012eb4 <malloc>
 801384c:	1e04      	subs	r4, r0, #0
 801384e:	d0f6      	beq.n	801383e <__register_exitproc+0x36>
 8013850:	682a      	ldr	r2, [r5, #0]
 8013852:	2300      	movs	r3, #0
 8013854:	6002      	str	r2, [r0, #0]
 8013856:	0002      	movs	r2, r0
 8013858:	3288      	adds	r2, #136	; 0x88
 801385a:	6043      	str	r3, [r0, #4]
 801385c:	6028      	str	r0, [r5, #0]
 801385e:	6013      	str	r3, [r2, #0]
 8013860:	429e      	cmp	r6, r3
 8013862:	d01e      	beq.n	80138a2 <__register_exitproc+0x9a>
 8013864:	2084      	movs	r0, #132	; 0x84
 8013866:	0040      	lsls	r0, r0, #1
 8013868:	f7ff fb24 	bl	8012eb4 <malloc>
 801386c:	2800      	cmp	r0, #0
 801386e:	d0e6      	beq.n	801383e <__register_exitproc+0x36>
 8013870:	0003      	movs	r3, r0
 8013872:	2200      	movs	r2, #0
 8013874:	33fc      	adds	r3, #252	; 0xfc
 8013876:	605a      	str	r2, [r3, #4]
 8013878:	609a      	str	r2, [r3, #8]
 801387a:	0023      	movs	r3, r4
 801387c:	3388      	adds	r3, #136	; 0x88
 801387e:	6018      	str	r0, [r3, #0]
 8013880:	2201      	movs	r2, #1
 8013882:	6861      	ldr	r1, [r4, #4]
 8013884:	408a      	lsls	r2, r1
 8013886:	008b      	lsls	r3, r1, #2
 8013888:	18c3      	adds	r3, r0, r3
 801388a:	c380      	stmia	r3!, {r7}
 801388c:	30fc      	adds	r0, #252	; 0xfc
 801388e:	6841      	ldr	r1, [r0, #4]
 8013890:	4311      	orrs	r1, r2
 8013892:	6041      	str	r1, [r0, #4]
 8013894:	9902      	ldr	r1, [sp, #8]
 8013896:	67d9      	str	r1, [r3, #124]	; 0x7c
 8013898:	2e02      	cmp	r6, #2
 801389a:	d102      	bne.n	80138a2 <__register_exitproc+0x9a>
 801389c:	6883      	ldr	r3, [r0, #8]
 801389e:	431a      	orrs	r2, r3
 80138a0:	6082      	str	r2, [r0, #8]
 80138a2:	6863      	ldr	r3, [r4, #4]
 80138a4:	2000      	movs	r0, #0
 80138a6:	1c5a      	adds	r2, r3, #1
 80138a8:	6062      	str	r2, [r4, #4]
 80138aa:	3302      	adds	r3, #2
 80138ac:	9a01      	ldr	r2, [sp, #4]
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	511a      	str	r2, [r3, r4]
 80138b2:	e7c6      	b.n	8013842 <__register_exitproc+0x3a>
 80138b4:	2e00      	cmp	r6, #0
 80138b6:	d0f4      	beq.n	80138a2 <__register_exitproc+0x9a>
 80138b8:	0023      	movs	r3, r4
 80138ba:	3388      	adds	r3, #136	; 0x88
 80138bc:	6818      	ldr	r0, [r3, #0]
 80138be:	2800      	cmp	r0, #0
 80138c0:	d1de      	bne.n	8013880 <__register_exitproc+0x78>
 80138c2:	4b05      	ldr	r3, [pc, #20]	; (80138d8 <__register_exitproc+0xd0>)
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d0ba      	beq.n	801383e <__register_exitproc+0x36>
 80138c8:	e7cc      	b.n	8013864 <__register_exitproc+0x5c>
 80138ca:	46c0      	nop			; (mov r8, r8)
 80138cc:	20003714 	.word	0x20003714
 80138d0:	20003688 	.word	0x20003688
 80138d4:	08017970 	.word	0x08017970
 80138d8:	08012eb5 	.word	0x08012eb5

080138dc <__sflush_r>:
 80138dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138de:	898a      	ldrh	r2, [r1, #12]
 80138e0:	0005      	movs	r5, r0
 80138e2:	000c      	movs	r4, r1
 80138e4:	0713      	lsls	r3, r2, #28
 80138e6:	d460      	bmi.n	80139aa <__sflush_r+0xce>
 80138e8:	684b      	ldr	r3, [r1, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	dc04      	bgt.n	80138f8 <__sflush_r+0x1c>
 80138ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	dc01      	bgt.n	80138f8 <__sflush_r+0x1c>
 80138f4:	2000      	movs	r0, #0
 80138f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80138f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80138fa:	2f00      	cmp	r7, #0
 80138fc:	d0fa      	beq.n	80138f4 <__sflush_r+0x18>
 80138fe:	2300      	movs	r3, #0
 8013900:	682e      	ldr	r6, [r5, #0]
 8013902:	602b      	str	r3, [r5, #0]
 8013904:	2380      	movs	r3, #128	; 0x80
 8013906:	015b      	lsls	r3, r3, #5
 8013908:	6a21      	ldr	r1, [r4, #32]
 801390a:	401a      	ands	r2, r3
 801390c:	d034      	beq.n	8013978 <__sflush_r+0x9c>
 801390e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	075b      	lsls	r3, r3, #29
 8013914:	d506      	bpl.n	8013924 <__sflush_r+0x48>
 8013916:	6863      	ldr	r3, [r4, #4]
 8013918:	1ac0      	subs	r0, r0, r3
 801391a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801391c:	2b00      	cmp	r3, #0
 801391e:	d001      	beq.n	8013924 <__sflush_r+0x48>
 8013920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013922:	1ac0      	subs	r0, r0, r3
 8013924:	0002      	movs	r2, r0
 8013926:	6a21      	ldr	r1, [r4, #32]
 8013928:	2300      	movs	r3, #0
 801392a:	0028      	movs	r0, r5
 801392c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801392e:	47b8      	blx	r7
 8013930:	89a1      	ldrh	r1, [r4, #12]
 8013932:	1c43      	adds	r3, r0, #1
 8013934:	d106      	bne.n	8013944 <__sflush_r+0x68>
 8013936:	682b      	ldr	r3, [r5, #0]
 8013938:	2b1d      	cmp	r3, #29
 801393a:	d830      	bhi.n	801399e <__sflush_r+0xc2>
 801393c:	4a2b      	ldr	r2, [pc, #172]	; (80139ec <__sflush_r+0x110>)
 801393e:	40da      	lsrs	r2, r3
 8013940:	07d3      	lsls	r3, r2, #31
 8013942:	d52c      	bpl.n	801399e <__sflush_r+0xc2>
 8013944:	2300      	movs	r3, #0
 8013946:	6063      	str	r3, [r4, #4]
 8013948:	6923      	ldr	r3, [r4, #16]
 801394a:	6023      	str	r3, [r4, #0]
 801394c:	04cb      	lsls	r3, r1, #19
 801394e:	d505      	bpl.n	801395c <__sflush_r+0x80>
 8013950:	1c43      	adds	r3, r0, #1
 8013952:	d102      	bne.n	801395a <__sflush_r+0x7e>
 8013954:	682b      	ldr	r3, [r5, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d100      	bne.n	801395c <__sflush_r+0x80>
 801395a:	6560      	str	r0, [r4, #84]	; 0x54
 801395c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801395e:	602e      	str	r6, [r5, #0]
 8013960:	2900      	cmp	r1, #0
 8013962:	d0c7      	beq.n	80138f4 <__sflush_r+0x18>
 8013964:	0023      	movs	r3, r4
 8013966:	3344      	adds	r3, #68	; 0x44
 8013968:	4299      	cmp	r1, r3
 801396a:	d002      	beq.n	8013972 <__sflush_r+0x96>
 801396c:	0028      	movs	r0, r5
 801396e:	f7ff fac7 	bl	8012f00 <_free_r>
 8013972:	2000      	movs	r0, #0
 8013974:	6360      	str	r0, [r4, #52]	; 0x34
 8013976:	e7be      	b.n	80138f6 <__sflush_r+0x1a>
 8013978:	2301      	movs	r3, #1
 801397a:	0028      	movs	r0, r5
 801397c:	47b8      	blx	r7
 801397e:	1c43      	adds	r3, r0, #1
 8013980:	d1c6      	bne.n	8013910 <__sflush_r+0x34>
 8013982:	682b      	ldr	r3, [r5, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d0c3      	beq.n	8013910 <__sflush_r+0x34>
 8013988:	2b1d      	cmp	r3, #29
 801398a:	d001      	beq.n	8013990 <__sflush_r+0xb4>
 801398c:	2b16      	cmp	r3, #22
 801398e:	d101      	bne.n	8013994 <__sflush_r+0xb8>
 8013990:	602e      	str	r6, [r5, #0]
 8013992:	e7af      	b.n	80138f4 <__sflush_r+0x18>
 8013994:	2340      	movs	r3, #64	; 0x40
 8013996:	89a2      	ldrh	r2, [r4, #12]
 8013998:	4313      	orrs	r3, r2
 801399a:	81a3      	strh	r3, [r4, #12]
 801399c:	e7ab      	b.n	80138f6 <__sflush_r+0x1a>
 801399e:	2340      	movs	r3, #64	; 0x40
 80139a0:	430b      	orrs	r3, r1
 80139a2:	2001      	movs	r0, #1
 80139a4:	81a3      	strh	r3, [r4, #12]
 80139a6:	4240      	negs	r0, r0
 80139a8:	e7a5      	b.n	80138f6 <__sflush_r+0x1a>
 80139aa:	690f      	ldr	r7, [r1, #16]
 80139ac:	2f00      	cmp	r7, #0
 80139ae:	d0a1      	beq.n	80138f4 <__sflush_r+0x18>
 80139b0:	680b      	ldr	r3, [r1, #0]
 80139b2:	600f      	str	r7, [r1, #0]
 80139b4:	1bdb      	subs	r3, r3, r7
 80139b6:	9301      	str	r3, [sp, #4]
 80139b8:	2300      	movs	r3, #0
 80139ba:	0792      	lsls	r2, r2, #30
 80139bc:	d100      	bne.n	80139c0 <__sflush_r+0xe4>
 80139be:	694b      	ldr	r3, [r1, #20]
 80139c0:	60a3      	str	r3, [r4, #8]
 80139c2:	9b01      	ldr	r3, [sp, #4]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	dc00      	bgt.n	80139ca <__sflush_r+0xee>
 80139c8:	e794      	b.n	80138f4 <__sflush_r+0x18>
 80139ca:	9b01      	ldr	r3, [sp, #4]
 80139cc:	003a      	movs	r2, r7
 80139ce:	6a21      	ldr	r1, [r4, #32]
 80139d0:	0028      	movs	r0, r5
 80139d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139d4:	47b0      	blx	r6
 80139d6:	2800      	cmp	r0, #0
 80139d8:	dc03      	bgt.n	80139e2 <__sflush_r+0x106>
 80139da:	2340      	movs	r3, #64	; 0x40
 80139dc:	89a2      	ldrh	r2, [r4, #12]
 80139de:	4313      	orrs	r3, r2
 80139e0:	e7df      	b.n	80139a2 <__sflush_r+0xc6>
 80139e2:	9b01      	ldr	r3, [sp, #4]
 80139e4:	183f      	adds	r7, r7, r0
 80139e6:	1a1b      	subs	r3, r3, r0
 80139e8:	9301      	str	r3, [sp, #4]
 80139ea:	e7ea      	b.n	80139c2 <__sflush_r+0xe6>
 80139ec:	20400001 	.word	0x20400001

080139f0 <_fflush_r>:
 80139f0:	690b      	ldr	r3, [r1, #16]
 80139f2:	b570      	push	{r4, r5, r6, lr}
 80139f4:	0005      	movs	r5, r0
 80139f6:	000c      	movs	r4, r1
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <_fflush_r+0x10>
 80139fc:	2000      	movs	r0, #0
 80139fe:	bd70      	pop	{r4, r5, r6, pc}
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d004      	beq.n	8013a0e <_fflush_r+0x1e>
 8013a04:	6983      	ldr	r3, [r0, #24]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <_fflush_r+0x1e>
 8013a0a:	f000 f85f 	bl	8013acc <__sinit>
 8013a0e:	4b0b      	ldr	r3, [pc, #44]	; (8013a3c <_fflush_r+0x4c>)
 8013a10:	429c      	cmp	r4, r3
 8013a12:	d109      	bne.n	8013a28 <_fflush_r+0x38>
 8013a14:	686c      	ldr	r4, [r5, #4]
 8013a16:	220c      	movs	r2, #12
 8013a18:	5ea3      	ldrsh	r3, [r4, r2]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d0ee      	beq.n	80139fc <_fflush_r+0xc>
 8013a1e:	0021      	movs	r1, r4
 8013a20:	0028      	movs	r0, r5
 8013a22:	f7ff ff5b 	bl	80138dc <__sflush_r>
 8013a26:	e7ea      	b.n	80139fe <_fflush_r+0xe>
 8013a28:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <_fflush_r+0x50>)
 8013a2a:	429c      	cmp	r4, r3
 8013a2c:	d101      	bne.n	8013a32 <_fflush_r+0x42>
 8013a2e:	68ac      	ldr	r4, [r5, #8]
 8013a30:	e7f1      	b.n	8013a16 <_fflush_r+0x26>
 8013a32:	4b04      	ldr	r3, [pc, #16]	; (8013a44 <_fflush_r+0x54>)
 8013a34:	429c      	cmp	r4, r3
 8013a36:	d1ee      	bne.n	8013a16 <_fflush_r+0x26>
 8013a38:	68ec      	ldr	r4, [r5, #12]
 8013a3a:	e7ec      	b.n	8013a16 <_fflush_r+0x26>
 8013a3c:	08017994 	.word	0x08017994
 8013a40:	080179b4 	.word	0x080179b4
 8013a44:	08017974 	.word	0x08017974

08013a48 <std>:
 8013a48:	2300      	movs	r3, #0
 8013a4a:	b510      	push	{r4, lr}
 8013a4c:	0004      	movs	r4, r0
 8013a4e:	6003      	str	r3, [r0, #0]
 8013a50:	6043      	str	r3, [r0, #4]
 8013a52:	6083      	str	r3, [r0, #8]
 8013a54:	8181      	strh	r1, [r0, #12]
 8013a56:	6643      	str	r3, [r0, #100]	; 0x64
 8013a58:	81c2      	strh	r2, [r0, #14]
 8013a5a:	6103      	str	r3, [r0, #16]
 8013a5c:	6143      	str	r3, [r0, #20]
 8013a5e:	6183      	str	r3, [r0, #24]
 8013a60:	0019      	movs	r1, r3
 8013a62:	2208      	movs	r2, #8
 8013a64:	305c      	adds	r0, #92	; 0x5c
 8013a66:	f7ff fa42 	bl	8012eee <memset>
 8013a6a:	4b05      	ldr	r3, [pc, #20]	; (8013a80 <std+0x38>)
 8013a6c:	6224      	str	r4, [r4, #32]
 8013a6e:	6263      	str	r3, [r4, #36]	; 0x24
 8013a70:	4b04      	ldr	r3, [pc, #16]	; (8013a84 <std+0x3c>)
 8013a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a74:	4b04      	ldr	r3, [pc, #16]	; (8013a88 <std+0x40>)
 8013a76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a78:	4b04      	ldr	r3, [pc, #16]	; (8013a8c <std+0x44>)
 8013a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8013a7c:	bd10      	pop	{r4, pc}
 8013a7e:	46c0      	nop			; (mov r8, r8)
 8013a80:	08013ce9 	.word	0x08013ce9
 8013a84:	08013d11 	.word	0x08013d11
 8013a88:	08013d49 	.word	0x08013d49
 8013a8c:	08013d75 	.word	0x08013d75

08013a90 <_cleanup_r>:
 8013a90:	b510      	push	{r4, lr}
 8013a92:	4902      	ldr	r1, [pc, #8]	; (8013a9c <_cleanup_r+0xc>)
 8013a94:	f000 f88c 	bl	8013bb0 <_fwalk_reent>
 8013a98:	bd10      	pop	{r4, pc}
 8013a9a:	46c0      	nop			; (mov r8, r8)
 8013a9c:	080139f1 	.word	0x080139f1

08013aa0 <__sfmoreglue>:
 8013aa0:	b570      	push	{r4, r5, r6, lr}
 8013aa2:	2568      	movs	r5, #104	; 0x68
 8013aa4:	1e4a      	subs	r2, r1, #1
 8013aa6:	4355      	muls	r5, r2
 8013aa8:	000e      	movs	r6, r1
 8013aaa:	0029      	movs	r1, r5
 8013aac:	3174      	adds	r1, #116	; 0x74
 8013aae:	f7ff fa71 	bl	8012f94 <_malloc_r>
 8013ab2:	1e04      	subs	r4, r0, #0
 8013ab4:	d008      	beq.n	8013ac8 <__sfmoreglue+0x28>
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	002a      	movs	r2, r5
 8013aba:	6001      	str	r1, [r0, #0]
 8013abc:	6046      	str	r6, [r0, #4]
 8013abe:	300c      	adds	r0, #12
 8013ac0:	60a0      	str	r0, [r4, #8]
 8013ac2:	3268      	adds	r2, #104	; 0x68
 8013ac4:	f7ff fa13 	bl	8012eee <memset>
 8013ac8:	0020      	movs	r0, r4
 8013aca:	bd70      	pop	{r4, r5, r6, pc}

08013acc <__sinit>:
 8013acc:	6983      	ldr	r3, [r0, #24]
 8013ace:	b513      	push	{r0, r1, r4, lr}
 8013ad0:	0004      	movs	r4, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d128      	bne.n	8013b28 <__sinit+0x5c>
 8013ad6:	6483      	str	r3, [r0, #72]	; 0x48
 8013ad8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013ada:	6503      	str	r3, [r0, #80]	; 0x50
 8013adc:	4b13      	ldr	r3, [pc, #76]	; (8013b2c <__sinit+0x60>)
 8013ade:	4a14      	ldr	r2, [pc, #80]	; (8013b30 <__sinit+0x64>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	6282      	str	r2, [r0, #40]	; 0x28
 8013ae4:	9301      	str	r3, [sp, #4]
 8013ae6:	4298      	cmp	r0, r3
 8013ae8:	d101      	bne.n	8013aee <__sinit+0x22>
 8013aea:	2301      	movs	r3, #1
 8013aec:	6183      	str	r3, [r0, #24]
 8013aee:	0020      	movs	r0, r4
 8013af0:	f000 f820 	bl	8013b34 <__sfp>
 8013af4:	6060      	str	r0, [r4, #4]
 8013af6:	0020      	movs	r0, r4
 8013af8:	f000 f81c 	bl	8013b34 <__sfp>
 8013afc:	60a0      	str	r0, [r4, #8]
 8013afe:	0020      	movs	r0, r4
 8013b00:	f000 f818 	bl	8013b34 <__sfp>
 8013b04:	2200      	movs	r2, #0
 8013b06:	60e0      	str	r0, [r4, #12]
 8013b08:	2104      	movs	r1, #4
 8013b0a:	6860      	ldr	r0, [r4, #4]
 8013b0c:	f7ff ff9c 	bl	8013a48 <std>
 8013b10:	2201      	movs	r2, #1
 8013b12:	2109      	movs	r1, #9
 8013b14:	68a0      	ldr	r0, [r4, #8]
 8013b16:	f7ff ff97 	bl	8013a48 <std>
 8013b1a:	2202      	movs	r2, #2
 8013b1c:	2112      	movs	r1, #18
 8013b1e:	68e0      	ldr	r0, [r4, #12]
 8013b20:	f7ff ff92 	bl	8013a48 <std>
 8013b24:	2301      	movs	r3, #1
 8013b26:	61a3      	str	r3, [r4, #24]
 8013b28:	bd13      	pop	{r0, r1, r4, pc}
 8013b2a:	46c0      	nop			; (mov r8, r8)
 8013b2c:	08017938 	.word	0x08017938
 8013b30:	08013a91 	.word	0x08013a91

08013b34 <__sfp>:
 8013b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b36:	4b1c      	ldr	r3, [pc, #112]	; (8013ba8 <__sfp+0x74>)
 8013b38:	0007      	movs	r7, r0
 8013b3a:	681e      	ldr	r6, [r3, #0]
 8013b3c:	69b3      	ldr	r3, [r6, #24]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d102      	bne.n	8013b48 <__sfp+0x14>
 8013b42:	0030      	movs	r0, r6
 8013b44:	f7ff ffc2 	bl	8013acc <__sinit>
 8013b48:	3648      	adds	r6, #72	; 0x48
 8013b4a:	68b4      	ldr	r4, [r6, #8]
 8013b4c:	6873      	ldr	r3, [r6, #4]
 8013b4e:	3b01      	subs	r3, #1
 8013b50:	d504      	bpl.n	8013b5c <__sfp+0x28>
 8013b52:	6833      	ldr	r3, [r6, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d007      	beq.n	8013b68 <__sfp+0x34>
 8013b58:	6836      	ldr	r6, [r6, #0]
 8013b5a:	e7f6      	b.n	8013b4a <__sfp+0x16>
 8013b5c:	220c      	movs	r2, #12
 8013b5e:	5ea5      	ldrsh	r5, [r4, r2]
 8013b60:	2d00      	cmp	r5, #0
 8013b62:	d00d      	beq.n	8013b80 <__sfp+0x4c>
 8013b64:	3468      	adds	r4, #104	; 0x68
 8013b66:	e7f2      	b.n	8013b4e <__sfp+0x1a>
 8013b68:	2104      	movs	r1, #4
 8013b6a:	0038      	movs	r0, r7
 8013b6c:	f7ff ff98 	bl	8013aa0 <__sfmoreglue>
 8013b70:	6030      	str	r0, [r6, #0]
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d1f0      	bne.n	8013b58 <__sfp+0x24>
 8013b76:	230c      	movs	r3, #12
 8013b78:	0004      	movs	r4, r0
 8013b7a:	603b      	str	r3, [r7, #0]
 8013b7c:	0020      	movs	r0, r4
 8013b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b80:	0020      	movs	r0, r4
 8013b82:	4b0a      	ldr	r3, [pc, #40]	; (8013bac <__sfp+0x78>)
 8013b84:	6665      	str	r5, [r4, #100]	; 0x64
 8013b86:	6025      	str	r5, [r4, #0]
 8013b88:	6065      	str	r5, [r4, #4]
 8013b8a:	60a5      	str	r5, [r4, #8]
 8013b8c:	60e3      	str	r3, [r4, #12]
 8013b8e:	6125      	str	r5, [r4, #16]
 8013b90:	6165      	str	r5, [r4, #20]
 8013b92:	61a5      	str	r5, [r4, #24]
 8013b94:	2208      	movs	r2, #8
 8013b96:	0029      	movs	r1, r5
 8013b98:	305c      	adds	r0, #92	; 0x5c
 8013b9a:	f7ff f9a8 	bl	8012eee <memset>
 8013b9e:	6365      	str	r5, [r4, #52]	; 0x34
 8013ba0:	63a5      	str	r5, [r4, #56]	; 0x38
 8013ba2:	64a5      	str	r5, [r4, #72]	; 0x48
 8013ba4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013ba6:	e7e9      	b.n	8013b7c <__sfp+0x48>
 8013ba8:	08017938 	.word	0x08017938
 8013bac:	ffff0001 	.word	0xffff0001

08013bb0 <_fwalk_reent>:
 8013bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bb2:	0004      	movs	r4, r0
 8013bb4:	0007      	movs	r7, r0
 8013bb6:	2600      	movs	r6, #0
 8013bb8:	9101      	str	r1, [sp, #4]
 8013bba:	3448      	adds	r4, #72	; 0x48
 8013bbc:	2c00      	cmp	r4, #0
 8013bbe:	d101      	bne.n	8013bc4 <_fwalk_reent+0x14>
 8013bc0:	0030      	movs	r0, r6
 8013bc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013bc4:	6863      	ldr	r3, [r4, #4]
 8013bc6:	68a5      	ldr	r5, [r4, #8]
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	9b00      	ldr	r3, [sp, #0]
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	d501      	bpl.n	8013bd6 <_fwalk_reent+0x26>
 8013bd2:	6824      	ldr	r4, [r4, #0]
 8013bd4:	e7f2      	b.n	8013bbc <_fwalk_reent+0xc>
 8013bd6:	89ab      	ldrh	r3, [r5, #12]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d908      	bls.n	8013bee <_fwalk_reent+0x3e>
 8013bdc:	220e      	movs	r2, #14
 8013bde:	5eab      	ldrsh	r3, [r5, r2]
 8013be0:	3301      	adds	r3, #1
 8013be2:	d004      	beq.n	8013bee <_fwalk_reent+0x3e>
 8013be4:	0029      	movs	r1, r5
 8013be6:	0038      	movs	r0, r7
 8013be8:	9b01      	ldr	r3, [sp, #4]
 8013bea:	4798      	blx	r3
 8013bec:	4306      	orrs	r6, r0
 8013bee:	3568      	adds	r5, #104	; 0x68
 8013bf0:	e7eb      	b.n	8013bca <_fwalk_reent+0x1a>
	...

08013bf4 <__swhatbuf_r>:
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	000e      	movs	r6, r1
 8013bf8:	001d      	movs	r5, r3
 8013bfa:	230e      	movs	r3, #14
 8013bfc:	5ec9      	ldrsh	r1, [r1, r3]
 8013bfe:	b096      	sub	sp, #88	; 0x58
 8013c00:	0014      	movs	r4, r2
 8013c02:	2900      	cmp	r1, #0
 8013c04:	da07      	bge.n	8013c16 <__swhatbuf_r+0x22>
 8013c06:	2300      	movs	r3, #0
 8013c08:	602b      	str	r3, [r5, #0]
 8013c0a:	89b3      	ldrh	r3, [r6, #12]
 8013c0c:	061b      	lsls	r3, r3, #24
 8013c0e:	d411      	bmi.n	8013c34 <__swhatbuf_r+0x40>
 8013c10:	2380      	movs	r3, #128	; 0x80
 8013c12:	00db      	lsls	r3, r3, #3
 8013c14:	e00f      	b.n	8013c36 <__swhatbuf_r+0x42>
 8013c16:	466a      	mov	r2, sp
 8013c18:	f000 f8d8 	bl	8013dcc <_fstat_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	dbf2      	blt.n	8013c06 <__swhatbuf_r+0x12>
 8013c20:	22f0      	movs	r2, #240	; 0xf0
 8013c22:	9b01      	ldr	r3, [sp, #4]
 8013c24:	0212      	lsls	r2, r2, #8
 8013c26:	4013      	ands	r3, r2
 8013c28:	4a05      	ldr	r2, [pc, #20]	; (8013c40 <__swhatbuf_r+0x4c>)
 8013c2a:	189b      	adds	r3, r3, r2
 8013c2c:	425a      	negs	r2, r3
 8013c2e:	4153      	adcs	r3, r2
 8013c30:	602b      	str	r3, [r5, #0]
 8013c32:	e7ed      	b.n	8013c10 <__swhatbuf_r+0x1c>
 8013c34:	2340      	movs	r3, #64	; 0x40
 8013c36:	2000      	movs	r0, #0
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	b016      	add	sp, #88	; 0x58
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	46c0      	nop			; (mov r8, r8)
 8013c40:	ffffe000 	.word	0xffffe000

08013c44 <__smakebuf_r>:
 8013c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c46:	2602      	movs	r6, #2
 8013c48:	898b      	ldrh	r3, [r1, #12]
 8013c4a:	0005      	movs	r5, r0
 8013c4c:	000c      	movs	r4, r1
 8013c4e:	4233      	tst	r3, r6
 8013c50:	d006      	beq.n	8013c60 <__smakebuf_r+0x1c>
 8013c52:	0023      	movs	r3, r4
 8013c54:	3347      	adds	r3, #71	; 0x47
 8013c56:	6023      	str	r3, [r4, #0]
 8013c58:	6123      	str	r3, [r4, #16]
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	6163      	str	r3, [r4, #20]
 8013c5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013c60:	ab01      	add	r3, sp, #4
 8013c62:	466a      	mov	r2, sp
 8013c64:	f7ff ffc6 	bl	8013bf4 <__swhatbuf_r>
 8013c68:	9900      	ldr	r1, [sp, #0]
 8013c6a:	0007      	movs	r7, r0
 8013c6c:	0028      	movs	r0, r5
 8013c6e:	f7ff f991 	bl	8012f94 <_malloc_r>
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d108      	bne.n	8013c88 <__smakebuf_r+0x44>
 8013c76:	220c      	movs	r2, #12
 8013c78:	5ea3      	ldrsh	r3, [r4, r2]
 8013c7a:	059a      	lsls	r2, r3, #22
 8013c7c:	d4ef      	bmi.n	8013c5e <__smakebuf_r+0x1a>
 8013c7e:	2203      	movs	r2, #3
 8013c80:	4393      	bics	r3, r2
 8013c82:	431e      	orrs	r6, r3
 8013c84:	81a6      	strh	r6, [r4, #12]
 8013c86:	e7e4      	b.n	8013c52 <__smakebuf_r+0xe>
 8013c88:	4b0f      	ldr	r3, [pc, #60]	; (8013cc8 <__smakebuf_r+0x84>)
 8013c8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8013c8c:	2380      	movs	r3, #128	; 0x80
 8013c8e:	89a2      	ldrh	r2, [r4, #12]
 8013c90:	6020      	str	r0, [r4, #0]
 8013c92:	4313      	orrs	r3, r2
 8013c94:	81a3      	strh	r3, [r4, #12]
 8013c96:	9b00      	ldr	r3, [sp, #0]
 8013c98:	6120      	str	r0, [r4, #16]
 8013c9a:	6163      	str	r3, [r4, #20]
 8013c9c:	9b01      	ldr	r3, [sp, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d00d      	beq.n	8013cbe <__smakebuf_r+0x7a>
 8013ca2:	230e      	movs	r3, #14
 8013ca4:	5ee1      	ldrsh	r1, [r4, r3]
 8013ca6:	0028      	movs	r0, r5
 8013ca8:	f000 f8a2 	bl	8013df0 <_isatty_r>
 8013cac:	2800      	cmp	r0, #0
 8013cae:	d006      	beq.n	8013cbe <__smakebuf_r+0x7a>
 8013cb0:	2203      	movs	r2, #3
 8013cb2:	89a3      	ldrh	r3, [r4, #12]
 8013cb4:	4393      	bics	r3, r2
 8013cb6:	001a      	movs	r2, r3
 8013cb8:	2301      	movs	r3, #1
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	81a3      	strh	r3, [r4, #12]
 8013cbe:	89a0      	ldrh	r0, [r4, #12]
 8013cc0:	4338      	orrs	r0, r7
 8013cc2:	81a0      	strh	r0, [r4, #12]
 8013cc4:	e7cb      	b.n	8013c5e <__smakebuf_r+0x1a>
 8013cc6:	46c0      	nop			; (mov r8, r8)
 8013cc8:	08013a91 	.word	0x08013a91

08013ccc <memchr>:
 8013ccc:	b2c9      	uxtb	r1, r1
 8013cce:	1882      	adds	r2, r0, r2
 8013cd0:	4290      	cmp	r0, r2
 8013cd2:	d101      	bne.n	8013cd8 <memchr+0xc>
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	4770      	bx	lr
 8013cd8:	7803      	ldrb	r3, [r0, #0]
 8013cda:	428b      	cmp	r3, r1
 8013cdc:	d0fb      	beq.n	8013cd6 <memchr+0xa>
 8013cde:	3001      	adds	r0, #1
 8013ce0:	e7f6      	b.n	8013cd0 <memchr+0x4>

08013ce2 <__malloc_lock>:
 8013ce2:	4770      	bx	lr

08013ce4 <__malloc_unlock>:
 8013ce4:	4770      	bx	lr
	...

08013ce8 <__sread>:
 8013ce8:	b570      	push	{r4, r5, r6, lr}
 8013cea:	000c      	movs	r4, r1
 8013cec:	250e      	movs	r5, #14
 8013cee:	5f49      	ldrsh	r1, [r1, r5]
 8013cf0:	f000 f8a4 	bl	8013e3c <_read_r>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	db03      	blt.n	8013d00 <__sread+0x18>
 8013cf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013cfa:	181b      	adds	r3, r3, r0
 8013cfc:	6563      	str	r3, [r4, #84]	; 0x54
 8013cfe:	bd70      	pop	{r4, r5, r6, pc}
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	4a02      	ldr	r2, [pc, #8]	; (8013d0c <__sread+0x24>)
 8013d04:	4013      	ands	r3, r2
 8013d06:	81a3      	strh	r3, [r4, #12]
 8013d08:	e7f9      	b.n	8013cfe <__sread+0x16>
 8013d0a:	46c0      	nop			; (mov r8, r8)
 8013d0c:	ffffefff 	.word	0xffffefff

08013d10 <__swrite>:
 8013d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d12:	001f      	movs	r7, r3
 8013d14:	898b      	ldrh	r3, [r1, #12]
 8013d16:	0005      	movs	r5, r0
 8013d18:	000c      	movs	r4, r1
 8013d1a:	0016      	movs	r6, r2
 8013d1c:	05db      	lsls	r3, r3, #23
 8013d1e:	d505      	bpl.n	8013d2c <__swrite+0x1c>
 8013d20:	230e      	movs	r3, #14
 8013d22:	5ec9      	ldrsh	r1, [r1, r3]
 8013d24:	2200      	movs	r2, #0
 8013d26:	2302      	movs	r3, #2
 8013d28:	f000 f874 	bl	8013e14 <_lseek_r>
 8013d2c:	89a3      	ldrh	r3, [r4, #12]
 8013d2e:	4a05      	ldr	r2, [pc, #20]	; (8013d44 <__swrite+0x34>)
 8013d30:	0028      	movs	r0, r5
 8013d32:	4013      	ands	r3, r2
 8013d34:	81a3      	strh	r3, [r4, #12]
 8013d36:	0032      	movs	r2, r6
 8013d38:	230e      	movs	r3, #14
 8013d3a:	5ee1      	ldrsh	r1, [r4, r3]
 8013d3c:	003b      	movs	r3, r7
 8013d3e:	f000 f81f 	bl	8013d80 <_write_r>
 8013d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d44:	ffffefff 	.word	0xffffefff

08013d48 <__sseek>:
 8013d48:	b570      	push	{r4, r5, r6, lr}
 8013d4a:	000c      	movs	r4, r1
 8013d4c:	250e      	movs	r5, #14
 8013d4e:	5f49      	ldrsh	r1, [r1, r5]
 8013d50:	f000 f860 	bl	8013e14 <_lseek_r>
 8013d54:	89a3      	ldrh	r3, [r4, #12]
 8013d56:	1c42      	adds	r2, r0, #1
 8013d58:	d103      	bne.n	8013d62 <__sseek+0x1a>
 8013d5a:	4a05      	ldr	r2, [pc, #20]	; (8013d70 <__sseek+0x28>)
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	81a3      	strh	r3, [r4, #12]
 8013d60:	bd70      	pop	{r4, r5, r6, pc}
 8013d62:	2280      	movs	r2, #128	; 0x80
 8013d64:	0152      	lsls	r2, r2, #5
 8013d66:	4313      	orrs	r3, r2
 8013d68:	81a3      	strh	r3, [r4, #12]
 8013d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8013d6c:	e7f8      	b.n	8013d60 <__sseek+0x18>
 8013d6e:	46c0      	nop			; (mov r8, r8)
 8013d70:	ffffefff 	.word	0xffffefff

08013d74 <__sclose>:
 8013d74:	b510      	push	{r4, lr}
 8013d76:	230e      	movs	r3, #14
 8013d78:	5ec9      	ldrsh	r1, [r1, r3]
 8013d7a:	f000 f815 	bl	8013da8 <_close_r>
 8013d7e:	bd10      	pop	{r4, pc}

08013d80 <_write_r>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	0005      	movs	r5, r0
 8013d84:	0008      	movs	r0, r1
 8013d86:	0011      	movs	r1, r2
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4c06      	ldr	r4, [pc, #24]	; (8013da4 <_write_r+0x24>)
 8013d8c:	6022      	str	r2, [r4, #0]
 8013d8e:	001a      	movs	r2, r3
 8013d90:	f7ee fabb 	bl	800230a <_write>
 8013d94:	1c43      	adds	r3, r0, #1
 8013d96:	d103      	bne.n	8013da0 <_write_r+0x20>
 8013d98:	6823      	ldr	r3, [r4, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d000      	beq.n	8013da0 <_write_r+0x20>
 8013d9e:	602b      	str	r3, [r5, #0]
 8013da0:	bd70      	pop	{r4, r5, r6, pc}
 8013da2:	46c0      	nop			; (mov r8, r8)
 8013da4:	200079cc 	.word	0x200079cc

08013da8 <_close_r>:
 8013da8:	2300      	movs	r3, #0
 8013daa:	b570      	push	{r4, r5, r6, lr}
 8013dac:	4c06      	ldr	r4, [pc, #24]	; (8013dc8 <_close_r+0x20>)
 8013dae:	0005      	movs	r5, r0
 8013db0:	0008      	movs	r0, r1
 8013db2:	6023      	str	r3, [r4, #0]
 8013db4:	f7ee fac5 	bl	8002342 <_close>
 8013db8:	1c43      	adds	r3, r0, #1
 8013dba:	d103      	bne.n	8013dc4 <_close_r+0x1c>
 8013dbc:	6823      	ldr	r3, [r4, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d000      	beq.n	8013dc4 <_close_r+0x1c>
 8013dc2:	602b      	str	r3, [r5, #0]
 8013dc4:	bd70      	pop	{r4, r5, r6, pc}
 8013dc6:	46c0      	nop			; (mov r8, r8)
 8013dc8:	200079cc 	.word	0x200079cc

08013dcc <_fstat_r>:
 8013dcc:	2300      	movs	r3, #0
 8013dce:	b570      	push	{r4, r5, r6, lr}
 8013dd0:	4c06      	ldr	r4, [pc, #24]	; (8013dec <_fstat_r+0x20>)
 8013dd2:	0005      	movs	r5, r0
 8013dd4:	0008      	movs	r0, r1
 8013dd6:	0011      	movs	r1, r2
 8013dd8:	6023      	str	r3, [r4, #0]
 8013dda:	f7ee fabc 	bl	8002356 <_fstat>
 8013dde:	1c43      	adds	r3, r0, #1
 8013de0:	d103      	bne.n	8013dea <_fstat_r+0x1e>
 8013de2:	6823      	ldr	r3, [r4, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d000      	beq.n	8013dea <_fstat_r+0x1e>
 8013de8:	602b      	str	r3, [r5, #0]
 8013dea:	bd70      	pop	{r4, r5, r6, pc}
 8013dec:	200079cc 	.word	0x200079cc

08013df0 <_isatty_r>:
 8013df0:	2300      	movs	r3, #0
 8013df2:	b570      	push	{r4, r5, r6, lr}
 8013df4:	4c06      	ldr	r4, [pc, #24]	; (8013e10 <_isatty_r+0x20>)
 8013df6:	0005      	movs	r5, r0
 8013df8:	0008      	movs	r0, r1
 8013dfa:	6023      	str	r3, [r4, #0]
 8013dfc:	f7ee fab9 	bl	8002372 <_isatty>
 8013e00:	1c43      	adds	r3, r0, #1
 8013e02:	d103      	bne.n	8013e0c <_isatty_r+0x1c>
 8013e04:	6823      	ldr	r3, [r4, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d000      	beq.n	8013e0c <_isatty_r+0x1c>
 8013e0a:	602b      	str	r3, [r5, #0]
 8013e0c:	bd70      	pop	{r4, r5, r6, pc}
 8013e0e:	46c0      	nop			; (mov r8, r8)
 8013e10:	200079cc 	.word	0x200079cc

08013e14 <_lseek_r>:
 8013e14:	b570      	push	{r4, r5, r6, lr}
 8013e16:	0005      	movs	r5, r0
 8013e18:	0008      	movs	r0, r1
 8013e1a:	0011      	movs	r1, r2
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	4c06      	ldr	r4, [pc, #24]	; (8013e38 <_lseek_r+0x24>)
 8013e20:	6022      	str	r2, [r4, #0]
 8013e22:	001a      	movs	r2, r3
 8013e24:	f7ee faae 	bl	8002384 <_lseek>
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	d103      	bne.n	8013e34 <_lseek_r+0x20>
 8013e2c:	6823      	ldr	r3, [r4, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d000      	beq.n	8013e34 <_lseek_r+0x20>
 8013e32:	602b      	str	r3, [r5, #0]
 8013e34:	bd70      	pop	{r4, r5, r6, pc}
 8013e36:	46c0      	nop			; (mov r8, r8)
 8013e38:	200079cc 	.word	0x200079cc

08013e3c <_read_r>:
 8013e3c:	b570      	push	{r4, r5, r6, lr}
 8013e3e:	0005      	movs	r5, r0
 8013e40:	0008      	movs	r0, r1
 8013e42:	0011      	movs	r1, r2
 8013e44:	2200      	movs	r2, #0
 8013e46:	4c06      	ldr	r4, [pc, #24]	; (8013e60 <_read_r+0x24>)
 8013e48:	6022      	str	r2, [r4, #0]
 8013e4a:	001a      	movs	r2, r3
 8013e4c:	f7ee fa40 	bl	80022d0 <_read>
 8013e50:	1c43      	adds	r3, r0, #1
 8013e52:	d103      	bne.n	8013e5c <_read_r+0x20>
 8013e54:	6823      	ldr	r3, [r4, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d000      	beq.n	8013e5c <_read_r+0x20>
 8013e5a:	602b      	str	r3, [r5, #0]
 8013e5c:	bd70      	pop	{r4, r5, r6, pc}
 8013e5e:	46c0      	nop			; (mov r8, r8)
 8013e60:	200079cc 	.word	0x200079cc

08013e64 <_init>:
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	46c0      	nop			; (mov r8, r8)
 8013e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e6a:	bc08      	pop	{r3}
 8013e6c:	469e      	mov	lr, r3
 8013e6e:	4770      	bx	lr

08013e70 <_fini>:
 8013e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e72:	46c0      	nop			; (mov r8, r8)
 8013e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e76:	bc08      	pop	{r3}
 8013e78:	469e      	mov	lr, r3
 8013e7a:	4770      	bx	lr
